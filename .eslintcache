[{"C:\\OpenServer\\domains\\front1\\src\\index.tsx":"1","C:\\OpenServer\\domains\\front1\\src\\reportWebVitals.ts":"2","C:\\OpenServer\\domains\\front1\\src\\App.tsx":"3","C:\\OpenServer\\domains\\front1\\src\\redux\\store.ts":"4","C:\\OpenServer\\domains\\front1\\src\\redux\\appReducer.ts":"5","C:\\OpenServer\\domains\\front1\\src\\redux\\authReducer.ts":"6","C:\\OpenServer\\domains\\front1\\src\\Components\\Header\\HeaderContainer.tsx":"7","C:\\OpenServer\\domains\\front1\\src\\Components\\Login\\LoginContainer.tsx":"8","C:\\OpenServer\\domains\\front1\\src\\Components\\ToDo\\ToDoListContainer.tsx":"9","C:\\OpenServer\\domains\\front1\\src\\Components\\Orders\\OrdersContainer.tsx":"10","C:\\OpenServer\\domains\\front1\\src\\Components\\TasksTree\\TasksTreeContainer.tsx":"11","C:\\OpenServer\\domains\\front1\\src\\Components\\Register\\RegisterContainer.tsx":"12","C:\\OpenServer\\domains\\front1\\src\\redux\\taskReducer.ts":"13","C:\\OpenServer\\domains\\front1\\src\\redux\\TaskListReducer.ts":"14","C:\\OpenServer\\domains\\front1\\src\\api\\authAPI.ts":"15","C:\\OpenServer\\domains\\front1\\src\\Components\\Login\\Login.tsx":"16","C:\\OpenServer\\domains\\front1\\src\\Components\\ToDo\\ToDoList.tsx":"17","C:\\OpenServer\\domains\\front1\\src\\Components\\Orders\\Orders.tsx":"18","C:\\OpenServer\\domains\\front1\\src\\Components\\Header\\Header.tsx":"19","C:\\OpenServer\\domains\\front1\\src\\Components\\TasksTree\\TasksTreeMobile.tsx":"20","C:\\OpenServer\\domains\\front1\\src\\Components\\TasksTree\\TasksTreeBrowser.tsx":"21","C:\\OpenServer\\domains\\front1\\src\\Components\\Register\\Register.tsx":"22","C:\\OpenServer\\domains\\front1\\src\\api\\taskListAPI.ts":"23","C:\\OpenServer\\domains\\front1\\src\\api\\taskApi.ts":"24","C:\\OpenServer\\domains\\front1\\src\\api\\api.ts":"25","C:\\OpenServer\\domains\\front1\\src\\Components\\Header\\MenuMobileContainer.tsx":"26","C:\\OpenServer\\domains\\front1\\src\\Components\\Login\\LoginForm.tsx":"27","C:\\OpenServer\\domains\\front1\\src\\Components\\TimeScale\\TimeScaleContainer.tsx":"28","C:\\OpenServer\\domains\\front1\\src\\Components\\ToDo\\Settings\\SettingsModal.tsx":"29","C:\\OpenServer\\domains\\front1\\src\\Components\\Header\\MenuBrowserConainer.tsx":"30","C:\\OpenServer\\domains\\front1\\src\\Components\\Register\\RegisterForm.tsx":"31","C:\\OpenServer\\domains\\front1\\src\\Components\\TasksTree\\NewTaskTreeForm.tsx":"32","C:\\OpenServer\\domains\\front1\\src\\Components\\ToDo\\ToDoHeader\\ToDoHeaderContainer.tsx":"33","C:\\OpenServer\\domains\\front1\\src\\Components\\ToDo\\NewTaskForm\\NewTaskFormContainer.tsx":"34","C:\\OpenServer\\domains\\front1\\src\\utils\\Formik\\ValidateFields.ts":"35","C:\\OpenServer\\domains\\front1\\src\\Components\\Header\\MenuMobile.tsx":"36","C:\\OpenServer\\domains\\front1\\src\\Components\\TimeScale\\TimeScale.tsx":"37","C:\\OpenServer\\domains\\front1\\src\\utils\\Formik\\CreateAntField.tsx":"38","C:\\OpenServer\\domains\\front1\\src\\Components\\Header\\MenuBrowser.tsx":"39","C:\\OpenServer\\domains\\front1\\src\\Components\\ToDo\\ToDoHeader\\ToDoHeader.tsx":"40","C:\\OpenServer\\domains\\front1\\src\\Components\\ToDo\\NewTaskForm\\NewTaskForm.tsx":"41","C:\\OpenServer\\domains\\front1\\src\\utils\\array-helpers.ts":"42","C:\\OpenServer\\domains\\front1\\src\\Components\\TimeScale\\TaskItem\\TaskItemContainer.tsx":"43","C:\\OpenServer\\domains\\front1\\src\\Components\\TimeScale\\TaskItem\\TaskItem.tsx":"44","C:\\OpenServer\\domains\\front1\\src\\Components\\Header\\MenuPopover.tsx":"45"},{"size":525,"mtime":1612209745096,"results":"46","hashOfConfig":"47"},{"size":440,"mtime":1611941586994,"results":"48","hashOfConfig":"47"},{"size":4009,"mtime":1612632276125,"results":"49","hashOfConfig":"47"},{"size":873,"mtime":1612209745123,"results":"50","hashOfConfig":"47"},{"size":1600,"mtime":1612209745112,"results":"51","hashOfConfig":"47"},{"size":3117,"mtime":1612632276244,"results":"52","hashOfConfig":"47"},{"size":713,"mtime":1612209745029,"results":"53","hashOfConfig":"47"},{"size":708,"mtime":1612209745041,"results":"54","hashOfConfig":"47"},{"size":727,"mtime":1611941586913,"results":"55","hashOfConfig":"47"},{"size":709,"mtime":1611941586835,"results":"56","hashOfConfig":"47"},{"size":1387,"mtime":1612632276209,"results":"57","hashOfConfig":"47"},{"size":734,"mtime":1612550577699,"results":"58","hashOfConfig":"47"},{"size":4730,"mtime":1611941586991,"results":"59","hashOfConfig":"47"},{"size":3376,"mtime":1612632276241,"results":"60","hashOfConfig":"47"},{"size":2145,"mtime":1612632276230,"results":"61","hashOfConfig":"47"},{"size":1483,"mtime":1612632276195,"results":"62","hashOfConfig":"47"},{"size":1806,"mtime":1611941586910,"results":"63","hashOfConfig":"47"},{"size":308,"mtime":1611941586833,"results":"64","hashOfConfig":"47"},{"size":2206,"mtime":1612632276177,"results":"65","hashOfConfig":"47"},{"size":6101,"mtime":1612632276211,"results":"66","hashOfConfig":"47"},{"size":9576,"mtime":1612632276206,"results":"67","hashOfConfig":"47"},{"size":1204,"mtime":1612632276198,"results":"68","hashOfConfig":"47"},{"size":2493,"mtime":1612632276238,"results":"69","hashOfConfig":"47"},{"size":2179,"mtime":1612632276235,"results":"70","hashOfConfig":"47"},{"size":497,"mtime":1612550577732,"results":"71","hashOfConfig":"47"},{"size":805,"mtime":1612209745036,"results":"72","hashOfConfig":"47"},{"size":1508,"mtime":1612550577667,"results":"73","hashOfConfig":"47"},{"size":961,"mtime":1611941586855,"results":"74","hashOfConfig":"47"},{"size":874,"mtime":1612632276216,"results":"75","hashOfConfig":"47"},{"size":798,"mtime":1612550577661,"results":"76","hashOfConfig":"47"},{"size":2110,"mtime":1612550577703,"results":"77","hashOfConfig":"47"},{"size":4024,"mtime":1612632276204,"results":"78","hashOfConfig":"47"},{"size":998,"mtime":1611941586906,"results":"79","hashOfConfig":"47"},{"size":997,"mtime":1612550577722,"results":"80","hashOfConfig":"47"},{"size":1096,"mtime":1612210291676,"results":"81","hashOfConfig":"47"},{"size":5230,"mtime":1612644990125,"results":"82","hashOfConfig":"47"},{"size":4029,"mtime":1612550577716,"results":"83","hashOfConfig":"47"},{"size":6442,"mtime":1612632276252,"results":"84","hashOfConfig":"47"},{"size":3026,"mtime":1612632276187,"results":"85","hashOfConfig":"47"},{"size":4536,"mtime":1611941586902,"results":"86","hashOfConfig":"47"},{"size":5022,"mtime":1612550577719,"results":"87","hashOfConfig":"47"},{"size":318,"mtime":1611941587001,"results":"88","hashOfConfig":"47"},{"size":832,"mtime":1611941586850,"results":"89","hashOfConfig":"47"},{"size":2923,"mtime":1611941586847,"results":"90","hashOfConfig":"47"},{"size":1335,"mtime":1612645502691,"results":"91","hashOfConfig":"47"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"183mcre",{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"104"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"104"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"129","messages":"130","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"131","messages":"132","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"104"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"104"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"104"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"104"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"161","messages":"162","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"104"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"170","messages":"171","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"172","messages":"173","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"174","messages":"175","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"176","usedDeprecatedRules":"104"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179","usedDeprecatedRules":"104"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"182","messages":"183","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"190","messages":"191","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\OpenServer\\domains\\front1\\src\\index.tsx",[],"C:\\OpenServer\\domains\\front1\\src\\reportWebVitals.ts",[],"C:\\OpenServer\\domains\\front1\\src\\App.tsx",["192","193"],"C:\\OpenServer\\domains\\front1\\src\\redux\\store.ts",[],"C:\\OpenServer\\domains\\front1\\src\\redux\\appReducer.ts",[],"C:\\OpenServer\\domains\\front1\\src\\redux\\authReducer.ts",[],["194","195"],"C:\\OpenServer\\domains\\front1\\src\\Components\\Header\\HeaderContainer.tsx",[],"C:\\OpenServer\\domains\\front1\\src\\Components\\Login\\LoginContainer.tsx",[],"C:\\OpenServer\\domains\\front1\\src\\Components\\ToDo\\ToDoListContainer.tsx",[],"C:\\OpenServer\\domains\\front1\\src\\Components\\Orders\\OrdersContainer.tsx",[],"C:\\OpenServer\\domains\\front1\\src\\Components\\TasksTree\\TasksTreeContainer.tsx",[],"C:\\OpenServer\\domains\\front1\\src\\Components\\Register\\RegisterContainer.tsx",[],"C:\\OpenServer\\domains\\front1\\src\\redux\\taskReducer.ts",[],"C:\\OpenServer\\domains\\front1\\src\\redux\\TaskListReducer.ts",[],"C:\\OpenServer\\domains\\front1\\src\\api\\authAPI.ts",["196","197"],"import {instance, APIResponseType} from \"./api\";\r\n\r\ntype MeResponseDataType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n    // remember_token?: string,\r\n    // user?: any\r\n    // error?: boolean,\r\n    // message?: string\r\n}\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get(`authMe/`+localStorage.getItem('remember_token')).then( (response) => {\r\n            //console.log('login: ', response)\r\n            return response\r\n        })\r\n    },\r\n    login(data: any) {\r\n        return instance.post('login', data)\r\n        .then(response => {\r\n            //console.log('login: ', response)\r\n            if (response.data.remember_token !== null) {\r\n                localStorage.setItem('remember_token', response.data.remember_token);\r\n            } else {\r\n                localStorage.removeItem('remember_token');\r\n            }\r\n            return response.status === 200 ? response : null;\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                //console.log(err.response)\r\n                return err.response\r\n            } else if (err.request) {\r\n                //console.log('request', err.request)\r\n            } else {\r\n                //console.log('anything else: ', err)\r\n            }\r\n            return null\r\n        })\r\n    },\r\n    register(creds: any) {\r\n        return instance.post('register', creds)\r\n        .then(response => {\r\n            //console.log('login: ', response)\r\n            if (response.data.remember_token !== null) {\r\n                localStorage.setItem('remember_token', response.data.token);\r\n            } else {\r\n                localStorage.removeItem('remember_token');\r\n            }\r\n            return response.status === 200 ? response : null;\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                //console.log(err.response)\r\n                return err.response\r\n            } else if (err.request) {\r\n                //console.log('request', err.request)\r\n            } else {\r\n                //console.log('anything else: ', err)\r\n            }\r\n            return null\r\n        })\r\n    }\r\n}","C:\\OpenServer\\domains\\front1\\src\\Components\\Login\\Login.tsx",["198","199","200","201","202"],"import React from 'react'\r\nimport { LoginPropsType } from './LoginContainer'\r\nimport { List, InputItem, Checkbox } from 'antd-mobile'\r\nimport { Formik } from \"formik\"\r\nimport moment from \"moment\"\r\nimport LoginForm from './LoginForm'\r\nimport { propTypes } from 'react-bootstrap/esm/Image'\r\nimport { Button } from 'antd'\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst CheckboxItem = Checkbox.CheckboxItem;\r\n\r\nconst initialValues = {\r\n    // bookingClient: \"\",\r\n    // bookingDate: moment(Date.now()),\r\n    // bookingTime: moment(Date.now()),\r\n    // selectOptions: [\"Mark\", \"Bob\", \"Anthony\"]\r\n}\r\n\r\n// export const dateFormat = \"YYYY--MM-DD\";\r\n// export const timeFormat = \"h:mm A\";\r\n\r\nexport type OwnLoginPropsType = {}\r\n\r\nconst Login: React.FC<LoginPropsType> = (props) => {\r\n    const handleSubmit = (formProps: any) => {\r\n        //console.log('formProps: ', formProps)\r\n        if (!formProps.remember) {\r\n            formProps.remember = false\r\n        }\r\n        props.login(formProps)\r\n    }\r\n\r\n    //console.log(props)\r\n\r\n    return (\r\n        <>\r\n            <h1 className=\"mb-5 mx-auto\">Login Form</h1>\r\n            <Formik\r\n                initialValues={initialValues}\r\n                onSubmit={handleSubmit}\r\n                render={LoginForm}\r\n            />\r\n            <div className=\"mt-3\">\r\n                <Link to={props.location +\"register\"}><Button type=\"link\" block>Register</Button></Link>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Login","C:\\OpenServer\\domains\\front1\\src\\Components\\ToDo\\ToDoList.tsx",[],"C:\\OpenServer\\domains\\front1\\src\\Components\\Orders\\Orders.tsx",["203"],"C:\\OpenServer\\domains\\front1\\src\\Components\\Header\\Header.tsx",["204","205","206"],"import React from 'react'\r\nimport {\r\n    BrowserView,\r\n    MobileView,\r\n    isBrowser,\r\n    isMobile\r\n} from \"react-device-detect\"\r\nimport { HeaderPropsType } from './HeaderContainer'\r\nimport MenuBrowser from './MenuBrowserConainer'\r\nimport MenuMobile from './MenuMobileContainer'\r\n// import {useHistory, useLocation} from 'react-router-dom'\r\n\r\n// type MenuDataType = Array<any>\r\n\r\nexport type OwnHeaderPropsType = {}\r\n\r\nconst Header: React.FC<HeaderPropsType> = (props) => {\r\n    // const location = useLocation()\r\n    //console.log('Header')\r\n\r\n    if (isMobile) {\r\n        return <MenuMobile menuData={menuData(props.appLocation)} logout={props.logout}/>\r\n    } else {\r\n        return <MenuBrowser menuData={menuData(props.appLocation)}/>\r\n    }\r\n}\r\n\r\nexport default Header\r\n\r\n\r\nexport type MenuDataType = ReturnType<typeof menuData>\r\n\r\nconst menuData = (appLocation: string) => {\r\n    const data = [\r\n    {\r\n        value: 'planning',\r\n        label: 'Planning',\r\n        children: [\r\n            {\r\n                label: 'ToDo list',\r\n                // label: <Link to='/toDoList'>ToDo list</Link>,\r\n                value: appLocation + 'toDoList',\r\n                disabled: false,\r\n            },\r\n            {\r\n                label: 'Tasks tree',\r\n                value: appLocation + 'tasksTree',\r\n            },\r\n            {\r\n                label: 'Analysis',\r\n                value: appLocation + 'analysis',\r\n                disabled: true,\r\n            }\r\n        ],\r\n    }, {\r\n        value: 'catalog',\r\n        label: 'Catalog',\r\n        children: [\r\n            {\r\n                label: 'Products',\r\n                value: appLocation + 'products',\r\n            }\r\n            , {\r\n                label: 'Providers',\r\n                value: appLocation + 'providers',\r\n            }\r\n        ],\r\n    },\r\n    {\r\n        value: 'orders',\r\n        label: 'Orders',\r\n        // isLeaf: true,\r\n        children: [\r\n            {\r\n                label: 'Orders',\r\n                value: appLocation + 'orders',\r\n            },\r\n            {\r\n                label: 'Leads',\r\n                value: appLocation + 'leads',\r\n            },\r\n        ],\r\n    },\r\n    ]\r\n    return data\r\n}\r\n","C:\\OpenServer\\domains\\front1\\src\\Components\\TasksTree\\TasksTreeMobile.tsx",["207","208","209"],"import React, { useState, useEffect } from 'react'\r\nimport { TasksTreePropsType } from './TasksTreeContainer'\r\nimport { Drawer, List, SwipeAction, Icon, Button } from 'antd-mobile'\r\nimport NewTaskTreeForm from './NewTaskTreeForm'\r\nimport './TasksTreeMobile.css'\r\nimport { Formik } from 'formik'\r\nimport { Spin } from 'antd'\r\nimport { propTypes } from 'react-bootstrap/esm/Image'\r\n\r\nconst Item = List.Item\r\n\r\nconst TasksTreeMobile: React.FC<TasksTreePropsType> = (props) => {\r\n    useEffect(() => {\r\n        if (props.taskList.length === 0 && !props.isTaskListLoaded) {\r\n            props.getTaskList()\r\n        }\r\n    }, [props.taskList])\r\n\r\n    const getSelectOptions = () => {\r\n        if (props.taskList !== undefined && props.taskList.length > 0) {\r\n            return props.taskList.map((item) => {\r\n                return ({\r\n                    name: item.name,\r\n                    value: item.id\r\n                })\r\n            })\r\n        } else {\r\n            //console.log('вернули пыстой список', props.taskList)\r\n            return null\r\n        }\r\n    }\r\n\r\n    const initialValues: any = {\r\n        selectOptions: getSelectOptions(),\r\n        taskTypes: [\r\n            {\r\n                name: 'Простая задача',\r\n                value: 'soft'\r\n            },\r\n            {\r\n                name: 'Задача с контектом',\r\n                value: 'context'\r\n            }\r\n        ],\r\n        task_type: 'soft'\r\n\r\n    }\r\n    const [state, setState] = useState(false)\r\n\r\n    const handleSubmit = (formProps: any) => {\r\n        //console.log('formProps submit: ', formProps)\r\n        let formPropsCopy: any = { ...formProps }\r\n        delete formPropsCopy.selectOptions\r\n        delete formPropsCopy.taskTypes\r\n        if (formPropsCopy.time_to_complete !== undefined) {\r\n            //console.log(formPropsCopy.time_to_complete.format('HH:mm:ss'))\r\n            formPropsCopy.time_to_complete = formPropsCopy.time_to_complete.format('HH:mm:ss')\r\n        }\r\n        //console.log('NewTaskMobile submit: ', formPropsCopy)\r\n\r\n        formPropsCopy.user_id = props.userId\r\n        props.createNewTaskList(formPropsCopy)\r\n    }\r\n\r\n    const onOpenChange = (args: any) => {\r\n        //console.log(args);\r\n        setState(!state)\r\n    }\r\n\r\n    //console.log('TTM props: ', props)\r\n\r\n    if (props.taskList !== undefined && props.taskList.length > 0) {\r\n        return (\r\n            <div>\r\n                <div className=\"d-flex justify-content-end\">\r\n\r\n                    <Button\r\n                        inline\r\n                        size=\"small\"\r\n                        className=\"mx-3 my-2\"\r\n                        // style={{ marginRight: '4px' }} \r\n                        onClick={onOpenChange}\r\n                        type=\"primary\">\r\n                        Add\r\n                </Button>\r\n                </div>\r\n\r\n                <Drawer\r\n                    className=\"my-drawer\"\r\n                    style={{ minHeight: document.documentElement.clientHeight }}\r\n                    enableDragHandle\r\n                    contentStyle={{ color: '#A6A6A6', textAlign: 'center', paddingTop: 0, width: \"100%\" }}\r\n                    sidebar={\r\n                        <div className=\"mt-4\">\r\n                            <Formik\r\n                                initialValues={initialValues}\r\n                                onSubmit={handleSubmit}\r\n                                render={NewTaskTreeForm}\r\n                            />\r\n                        </div>\r\n                    }\r\n                    open={state}\r\n                    onOpenChange={onOpenChange}\r\n                >\r\n                    <List\r\n                    // renderHeader={() => 'taskList'}\r\n                    >\r\n                        {getTaskTreeItems(props.taskList, props.deleteTaskList)}\r\n                    </List>\r\n                </Drawer>\r\n\r\n\r\n\r\n            </div>\r\n        )\r\n    } else {\r\n        return <Spin key=\"spin\" size=\"large\" />\r\n    }\r\n}\r\n\r\nexport default TasksTreeMobile\r\n\r\nconst getTaskTreeItems = (taskList: Array<any>, deleteTaskList:(taskId:number)=>void) => {\r\n    if (taskList.length > 0) {\r\n        return taskList.map((item) => {\r\n            //console.log('!!!!!!!')\r\n            return (\r\n                <SwipeAction\r\n                    style={{ backgroundColor: 'gray' }}\r\n                    autoClose\r\n                    right={[\r\n                        {\r\n                            text: 'Cancel',\r\n                            onPress: () => console.log('cancel'),\r\n                            style: { backgroundColor: '#ddd', color: 'white' },\r\n                        },\r\n                        {\r\n                            text: 'Delete',\r\n                            onPress: () => deleteTaskList(item.id),\r\n                            style: { backgroundColor: '#F4333C', color: 'white' },\r\n                        },\r\n                    ]}\r\n                    left={[\r\n                        {\r\n                            text: 'Edit',\r\n                            onPress: () => console.log('reply'),\r\n                            style: { backgroundColor: '#108ee9', color: 'white' },\r\n                        },\r\n                        {\r\n                            text: 'Cancel',\r\n                            onPress: () => console.log('cancel'),\r\n                            style: { backgroundColor: '#ddd', color: 'white' },\r\n                        },\r\n                    ]}\r\n                    onOpen={() => console.log('global open')}\r\n                    onClose={() => console.log('global close')}\r\n                >\r\n                    <Item\r\n                        // className=\"my-3\"\r\n                        onClick={() => console.log('List.Item clicked!')}\r\n                        arrow=\"horizontal\"\r\n                        key={item.id}\r\n                    >\r\n                        {item.name}\r\n                    </Item>\r\n\r\n                </SwipeAction>\r\n            )\r\n        })\r\n    } else {\r\n        return <Spin key=\"spin\" size=\"large\" />\r\n    }\r\n\r\n\r\n}","C:\\OpenServer\\domains\\front1\\src\\Components\\TasksTree\\TasksTreeBrowser.tsx",["210","211","212"],"import { Button, Card, Drawer, List, Checkbox, Collapse } from 'antd'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { TasksTreePropsType } from './TasksTreeContainer'\r\nimport { FileAddOutlined, SettingOutlined } from '@ant-design/icons'\r\nimport NewTaskTreeForm from './NewTaskTreeForm'\r\nimport { Formik, FormikProps } from 'formik'\r\nimport moment from \"moment\"\r\nimport { DeleteOutlined, EditOutlined } from '@ant-design/icons'\r\n\r\nconst { Panel } = Collapse;\r\n\r\ntype InitialDrewerDataType = {\r\n    header: string,\r\n    taskId: false | number\r\n}\r\n\r\nconst initialDrewerData: InitialDrewerDataType = {\r\n    header: 'Create New Task',\r\n    taskId: false\r\n}\r\n\r\nconst TasksTreeBrowser: React.FC<TasksTreePropsType> = (props) => {\r\n    useEffect(() => {\r\n        if (props.taskList !== undefined && props.taskList.length === 0 && !props.isTaskListLoaded) {\r\n            props.getTaskList()\r\n        }\r\n        else if (props.taskList === undefined) {\r\n            props.getTaskList()\r\n        }\r\n    }, [props.taskList])\r\n\r\n    const [visible, setVisible] = useState(false)\r\n    const [drawerData, setDrawerData] = useState(initialDrewerData)\r\n\r\n    const getSelectOptions = () => {\r\n        if (props.taskList !== undefined && props.taskList.length > 0) {\r\n            return props.taskList.map((item) => {\r\n                return ({\r\n                    name: item.name,\r\n                    value: item.id\r\n                })\r\n            })\r\n        } else {\r\n            return null\r\n        }\r\n    }\r\n\r\n    const initialValues: any = {\r\n        selectOptions: getSelectOptions(),\r\n        taskTypes: [\r\n            {\r\n                name: 'Простая задача',\r\n                value: 'soft'\r\n            },\r\n            {\r\n                name: 'Задача с контектом',\r\n                value: 'context'\r\n            }\r\n        ],\r\n        task_type: 'soft',\r\n        name: '',\r\n        // new: true\r\n\r\n    }\r\n\r\n    const [initialFormValues, setInitialFormValues] = useState(initialValues)\r\n\r\n    const onClose = () => {\r\n        setVisible(false)\r\n    }\r\n\r\n    const showDrawer = () => {\r\n        setVisible(true)\r\n    }\r\n\r\n    const onAdd = () => {\r\n        setDrawerData(initialDrewerData)\r\n        setInitialFormValues(initialValues)\r\n        console.log(initialValues)\r\n        showDrawer()\r\n    }\r\n\r\n    const handleSubmit = (formProps: any) => {\r\n        let formPropsCopy: any = { ...formProps }\r\n        delete formPropsCopy.selectOptions\r\n        delete formPropsCopy.taskTypes\r\n        if (formPropsCopy.time_to_complete !== undefined) {\r\n            //console.log(formPropsCopy.time_to_complete.format('HH:mm:ss'))\r\n            formPropsCopy.time_to_complete = formPropsCopy.time_to_complete.format('HH:mm:ss')\r\n        }\r\n        //console.log('NewTaskTreeForm Props: ', formPropsCopy)\r\n\r\n        formPropsCopy.user_id = props.userId\r\n        if (!drawerData.taskId) {\r\n            props.createNewTaskList(formPropsCopy)\r\n        } else {\r\n            console.log(formPropsCopy)\r\n            props.updateTaskList(formPropsCopy, drawerData.taskId)\r\n            // descriptions\r\n            // descriptions\r\n        }\r\n        \r\n    }\r\n\r\n    console.log('initialFormValues: ', initialFormValues)\r\n\r\n    return (\r\n        <>\r\n            <div className=\"site-card-border-less-wrapper\">\r\n                <Card\r\n                    title={\r\n                        <div className=\"col-12 col-md-12 col-lg-4\">\r\n                            <Button\r\n                                type=\"primary\"\r\n                                shape=\"round\"\r\n                                icon={\r\n                                    <div className=\"d-flex flex-wrap align-content-start\">\r\n                                        <FileAddOutlined style={{ fontSize: '18px' }} />\r\n                                        <span className=\"ml-1\" style={{ fontSize: '14px' }}>Add</span>\r\n                                    </div>}\r\n                                style={{ marginLeft: 10 }}\r\n                                onClick={onAdd}\r\n                            />\r\n\r\n                            <Button className=\"\"\r\n                                type=\"primary\"\r\n                                shape=\"round\"\r\n                                style={{ marginLeft: 10 }}\r\n                                // onClick={props.showModal}\r\n                                icon={\r\n                                    <div className=\"d-flex flex-wrap align-content-start\">\r\n                                        <SettingOutlined style={{ fontSize: '18px' }} />\r\n                                        <span className=\"ml-1\" style={{ fontSize: '14px' }}>Settings</span>\r\n                                    </div>}\r\n                            />\r\n                        </div>\r\n                    }\r\n                    bordered={false}\r\n                >\r\n\r\n                    {/* { getTaskTreeItems(props.taskList) } */}\r\n                    <List\r\n                        size=\"small\"\r\n                        header={<h2>Tasks Tree</h2>}\r\n                        // footer={<div>Footer</div>}\r\n                        bordered\r\n                        dataSource={getTaskTreeItems(\r\n                                        props.taskList, \r\n                                        props.deleteTaskList, \r\n                                        showDrawer, \r\n                                        setDrawerData,\r\n                                        initialFormValues,\r\n                                        setInitialFormValues\r\n                                        )}\r\n\r\n                        renderItem={item => <List.Item draggable>{item}</List.Item>}\r\n                    />\r\n\r\n                    <Drawer\r\n                        title={drawerData.header}\r\n                        placement=\"right\"\r\n                        closable={true}\r\n                        onClose={onClose}\r\n                        visible={visible}\r\n                        width=\"90%\"\r\n                    >\r\n\r\n                        <Formik\r\n                            initialValues={initialFormValues}\r\n                            onSubmit={handleSubmit}\r\n                            render={NewTaskTreeForm}\r\n                            enableReinitialize={true}\r\n                        />\r\n\r\n                    </Drawer>\r\n\r\n                </Card>\r\n            </div>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default TasksTreeBrowser\r\n\r\nconst getTaskTreeItems = (\r\n    taskList: Array<any>,\r\n    deleteTask: (taskId: number) => void,\r\n    showDrawer: () => void,\r\n    setDrawerData: (drawerData: any) => void,\r\n    initialFormValues:any,\r\n    setInitialFormValues:(initialFormValues:any)=>void\r\n) => {\r\n    const onEdit = (task:any) => {\r\n        setDrawerData({\r\n            header: 'Edit: \"'+task.name+'\"',\r\n            taskId: task.id\r\n        })\r\n\r\n        \r\n        let day = moment().zone('GMT')\r\n        if (task.time_to_complete !== null) {\r\n            const splitTime = task.time_to_complete.split(/:/)\r\n            day.hours(parseInt(splitTime[0])).minutes(parseInt(splitTime[1])).seconds(0).milliseconds(0);\r\n        } else {\r\n            day.hours(0).minutes(0).seconds(0).milliseconds(0);\r\n        }\r\n\r\n        setInitialFormValues( \r\n                {...initialFormValues, \r\n                    // new: false,\r\n                    name: task.name, \r\n                    time_to_complete: day,\r\n                    descriptions: task.descriptions\r\n                } \r\n            )\r\n        showDrawer()\r\n    }\r\n    if (taskList !== undefined && taskList.length > 0) {\r\n        return taskList.map((item) => {\r\n            return (\r\n                <>\r\n                    <div><Checkbox></Checkbox></div>\r\n                    <div className=\"w-100 float-left\" key={item.id}>\r\n                        <div className=\"ml-3 float-left\">\r\n                            {item.name}\r\n                        </div>\r\n                        <div className=\"ml-3 float-right\">\r\n                            {item.time_to_complete}\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"d-flex flex-row\">\r\n                        <Button className=\"\"\r\n                            type=\"primary\"\r\n                            shape=\"circle\"\r\n                            size=\"small\"\r\n                            style={{ marginLeft: 10 }}\r\n                            onClick={()=>{onEdit(item)}}\r\n                            icon={\r\n                                <div className=\"d-flex flex-wrap align-content-start\">\r\n                                    <EditOutlined className=\"ml-1\" style={{ fontSize: '14px' }} />\r\n                                </div>\r\n                            }\r\n                        />\r\n                        <Button className=\"\"\r\n                            type=\"primary\"\r\n                            danger\r\n                            shape=\"circle\"\r\n                            size=\"small\"\r\n                            style={{ marginLeft: 10 }}\r\n                            onClick={() => { deleteTask(item.id) }}\r\n                            icon={\r\n                                <div className=\"d-flex flex-wrap align-content-start\">\r\n                                    <DeleteOutlined className=\"ml-1\" style={{ fontSize: '14px' }} />\r\n                                </div>\r\n                            }\r\n                        />\r\n                    </div>\r\n                </>\r\n            )\r\n        })\r\n    } else {\r\n        return []\r\n    }\r\n}","C:\\OpenServer\\domains\\front1\\src\\Components\\Register\\Register.tsx",["213","214","215","216"],"import { Formik } from 'formik'\r\nimport React, { useEffect } from 'react'\r\nimport RegisterForm from './RegisterForm'\r\nimport { RegisterPropsType } from './RegisterContainer'\r\nimport { propTypes } from 'react-bootstrap/esm/Image'\r\nimport { Redirect, Route, useHistory } from 'react-router-dom'\r\n\r\nconst initialValues = {\r\n    // parent_id :['1', '2', '3']\r\n}\r\n\r\nexport type OwnRegisterPropsType = {}\r\n\r\nconst Register: React.FC<RegisterPropsType> = (props) => {\r\n    let history = useHistory();\r\n    useEffect( () => {\r\n        //console.log('useEffect in Register: ', props.isAuth)\r\n        if(props.isAuth) {\r\n            history.replace(props.appLocation+'toDoList')\r\n        }\r\n    }, [props.isAuth])\r\n    const handleSubmit = (formProps: any) => {\r\n        //console.log(formProps)\r\n        formProps.status = 'guest'\r\n        props.register(formProps)\r\n    }\r\n\r\n    //console.log('Register', props)\r\n    return (\r\n        <>\r\n            <h1 className=\"mb-5 mx-auto\">Register Form</h1>\r\n            <Formik\r\n                initialValues={initialValues}\r\n                onSubmit={handleSubmit}\r\n                render={RegisterForm}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Register","C:\\OpenServer\\domains\\front1\\src\\api\\taskListAPI.ts",[],"C:\\OpenServer\\domains\\front1\\src\\api\\taskApi.ts",[],"C:\\OpenServer\\domains\\front1\\src\\api\\api.ts",[],"C:\\OpenServer\\domains\\front1\\src\\Components\\Header\\MenuMobileContainer.tsx",[],"C:\\OpenServer\\domains\\front1\\src\\Components\\Login\\LoginForm.tsx",[],"C:\\OpenServer\\domains\\front1\\src\\Components\\TimeScale\\TimeScaleContainer.tsx",[],"C:\\OpenServer\\domains\\front1\\src\\Components\\ToDo\\Settings\\SettingsModal.tsx",[],"C:\\OpenServer\\domains\\front1\\src\\Components\\Header\\MenuBrowserConainer.tsx",[],"C:\\OpenServer\\domains\\front1\\src\\Components\\Register\\RegisterForm.tsx",[],"C:\\OpenServer\\domains\\front1\\src\\Components\\TasksTree\\NewTaskTreeForm.tsx",["217"],"import { Form, Field, FormikProps } from 'formik'\r\nimport React, { ReactNode, useState, useEffect } from 'react'\r\nimport { AntInput, AntSelect, AntTextArea, AntTimePicker } from '../../utils/Formik/CreateAntField'\r\nimport { validateRequired } from '../../utils/Formik/ValidateFields'\r\nimport { Select } from 'antd';\r\n\r\nconst { Option }: any = Select;\r\n\r\n\r\nconst NewTaskTreeForm: ((props: FormikProps<{}>) => ReactNode) = (props) => {\r\n    const values: any = props.values\r\n    //console.log(values)\r\n    const selectOptions = values.selectOptions\r\n    const taskTypes = values.taskTypes // ++++++\r\n\r\n    const [taskType, setTaskType] = useState(values.taskType)\r\n\r\n    useEffect(() => {\r\n        //console.log(props.values)\r\n        const values: any = props.values\r\n        const taskTypes = values.task_type\r\n        setTaskType(taskTypes)\r\n    }, [props.values])\r\n\r\n    //console.log('NewTaskTreeForm props: ', props)\r\n\r\n    // const handleSubmit = (formProps: any) => {\r\n    //     //console.log('formProps in NewTaskTreeForm: ',formProps)\r\n    //     props.handleSubmit(formProps)\r\n    // }\r\n\r\n    console.log('NewTaskTreeForm', props)\r\n\r\n    return (\r\n        <Form\r\n            className=\"form-container\"\r\n            onSubmit={props.handleSubmit}\r\n        >\r\n            <Field\r\n                component={AntInput}\r\n                name=\"name\"\r\n                type=\"text\"\r\n                label=\"Name\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n\r\n            <Field\r\n                component={AntSelect}\r\n\r\n                selectOptions={selectOptions}\r\n\r\n                name=\"parent_id\"\r\n                type=\"select\"\r\n                label=\"Parent\"\r\n                // validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n            // hasFeedback\r\n            />\r\n\r\n            <Field\r\n                component={AntTextArea}\r\n                name=\"descriptions\"\r\n                type=\"text\"\r\n                label=\"Descriptions\"\r\n                // validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                // hasFeedback\r\n            />\r\n\r\n            <Field\r\n                component={AntTimePicker}\r\n                name=\"time_to_complete\"\r\n                type=\"time\"\r\n                label=\"Time to complete\"\r\n                // validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n            // hasFeedback\r\n            />\r\n\r\n            <Field\r\n                component={AntSelect}\r\n\r\n                selectOptions={taskTypes}\r\n\r\n                name=\"task_type\"\r\n                type=\"select\"\r\n                label=\"task Types\"\r\n                // validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                // hasFeedback\r\n            />\r\n\r\n\r\n            {taskType === 'context' ?\r\n                <>\r\n                    <Field\r\n                        component={AntInput}\r\n                        name=\"context1\"\r\n                        type=\"text\"\r\n                        label=\"context1\"\r\n                        validate={validateRequired}\r\n                        submitCount={props.submitCount}\r\n                        hasFeedback\r\n                    />\r\n                    <Field\r\n                        component={AntInput}\r\n                        name=\"context2\"\r\n                        type=\"text\"\r\n                        label=\"context2\"\r\n                        validate={validateRequired}\r\n                        submitCount={props.submitCount}\r\n                        hasFeedback\r\n                    />\r\n                </>\r\n                :\r\n                null\r\n            }\r\n\r\n            <div className=\"submit-container\">\r\n                <button className=\"ant-btn ant-btn-primary\" type=\"submit\">\r\n                    Save\r\n                </button>\r\n            </div>\r\n\r\n        </Form>\r\n    )\r\n    // )\r\n}\r\nexport default NewTaskTreeForm","C:\\OpenServer\\domains\\front1\\src\\Components\\ToDo\\ToDoHeader\\ToDoHeaderContainer.tsx",[],"C:\\OpenServer\\domains\\front1\\src\\Components\\ToDo\\NewTaskForm\\NewTaskFormContainer.tsx",[],"C:\\OpenServer\\domains\\front1\\src\\utils\\Formik\\ValidateFields.ts",[],"C:\\OpenServer\\domains\\front1\\src\\Components\\Header\\MenuMobile.tsx",["218","219","220"],"C:\\OpenServer\\domains\\front1\\src\\Components\\TimeScale\\TimeScale.tsx",["221"],"C:\\OpenServer\\domains\\front1\\src\\utils\\Formik\\CreateAntField.tsx",["222"],"import React, { SyntheticEvent, useState } from 'react'\r\nimport { isMobile } from \"react-device-detect\"\r\nimport { \r\n    DatePicker, \r\n    Form, \r\n    Input, \r\n    TimePicker, \r\n    Select, \r\n    Checkbox \r\n} from \"antd\"\r\nimport enUs from 'antd-mobile/lib/date-picker/locale/en_US';\r\nimport moment from \"moment\"\r\nimport {\r\n    List, \r\n    InputItem, \r\n    Checkbox as CheckboxMobile, \r\n    TextareaItem, \r\n    Picker,\r\n    DatePicker as DatePickerMobile,\r\n} from 'antd-mobile'\r\n\r\nconst FormItem = Form.Item\r\nconst Option: React.FC<any> = Select.Option\r\nconst CheckboxItem = CheckboxMobile.CheckboxItem\r\nconst { TextArea } = Input;\r\n\r\nconst CreateAntField = (AntComponent: any) => (\r\n    {\r\n        field,\r\n        form,\r\n        hasFeedback,\r\n        label,\r\n        selectOptions,\r\n        submitCount,\r\n        type,\r\n        ...props\r\n    }: any\r\n) => {\r\n\r\n    const touched = form.touched[field.name];\r\n    const submitted = submitCount > 0;\r\n    const hasError = form.errors[field.name];\r\n    const submittedError = hasError && submitted;\r\n    const touchedError = hasError && touched;\r\n\r\n    // type OnInputChangeValueType = React.ChangeEvent<HTMLInputElement> | moment.Moment | Date | string\r\n    // const onInputChange = (value: OnInputChangeValueType, field: any) => {\r\n    const onInputChange = (value: any) => {\r\n        if (value.target) {\r\n        // if (value instanceof Date === false &&  !moment.isMoment(value) === false && typeof value !== \"string\") {\r\n            form.setFieldValue(field.name, value.target.value)\r\n        } else {\r\n            if (type === 'time') {\r\n                if (value instanceof moment) {\r\n                    form.setFieldValue(field.name, value)\r\n                } else {\r\n                    form.setFieldValue(field.name, moment(value.setSeconds(0)))//.from() )\r\n                }\r\n            } else if (Array.isArray(value)) {\r\n                // добавтить проверуку на пустой массив\r\n                form.setFieldValue(field.name, value[0])\r\n            } else {\r\n                form.setFieldValue(field.name, value)\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    const onChange = (value: string | React.ChangeEvent<HTMLInputElement>) => {\r\n        console.log('onChange: ', value)\r\n        if ( typeof value !== \"string\" && value.target.type === 'checkbox') {\r\n            form.setFieldValue(field.name, value.target.checked)\r\n        } else {\r\n            form.setFieldValue(field.name, value)\r\n        }\r\n    }\r\n\r\n    const onBlur = () => form.setFieldTouched(field.name, true);\r\n\r\n    return (\r\n        <FormItem\r\n            label={!isMobile ? label : null}\r\n            hasFeedback={\r\n                (hasFeedback && submitted) || (hasFeedback && touched) ? true : false\r\n            }\r\n            help={submittedError || touchedError ? hasError : false}\r\n            validateStatus={submittedError || touchedError ? \"error\" : \"success\"}\r\n        >\r\n            {isMobile ?\r\n                <MobileComponent \r\n                    AntComponent={AntComponent}\r\n                    onBlur = {onBlur}\r\n                    type = {type}\r\n                    onInputChange = {onInputChange}\r\n                    onChange = {onChange}\r\n                    label = {label}\r\n                    selectOptions = {selectOptions}\r\n                />\r\n                :\r\n                <AntComponent\r\n                    {...field}\r\n                    {...props}\r\n                    allowClear={selectOptions ? \"true\" : \"false\"}\r\n                    onBlur={onBlur}\r\n                    onChange={type ? onInputChange : onChange}\r\n                >\r\n                    {selectOptions &&\r\n                        selectOptions.map((item: any) => <Option title={item.name} value={item.value} key={item.name}>{item.name}</Option>)}\r\n\r\n\r\n                </AntComponent>\r\n            }\r\n\r\n        </FormItem>\r\n    )\r\n}\r\n\r\nexport const AntSelect = !isMobile ? CreateAntField(Select) : CreateAntField(Picker)\r\nexport const AntDatePicker = CreateAntField(DatePicker)\r\nexport const AntInput = !isMobile ? CreateAntField(Input) : CreateAntField(InputItem)\r\nexport const AntInputPassword = !isMobile ? CreateAntField(Input.Password) : CreateAntField(InputItem)\r\nexport const AntTimePicker = !isMobile ? CreateAntField(TimePicker) : CreateAntField(DatePickerMobile)\r\nexport const AntCheckbox = !isMobile ? CreateAntField(Checkbox) : CreateAntField(CheckboxItem)\r\nexport const AntTextArea = !isMobile ? CreateAntField(TextArea) : CreateAntField(TextareaItem)\r\n\r\ntype MobileComponentType = {\r\n    onInputChange: (value: any)=> void,\r\n    selectOptions:Array<any>,\r\n    AntComponent: any,\r\n    onBlur: ()=>void,\r\n    type: 'select' | 'date' | 'text' | 'number' | 'password' | 'time' | 'checkbox' | 'textarea',\r\n    onChange: (value: any)=>void,\r\n    label: string,\r\n\r\n}\r\n\r\n// const MobileComponent: React.FC<any> = (props) => {\r\nconst MobileComponent: React.FC<MobileComponentType> = (props) => {\r\n    const [value, setValue] = useState(null)\r\n\r\n    const onInputChange = (value: any) => {\r\n        props.onInputChange(value)\r\n        setValue(value)\r\n    }\r\n\r\n    type DataType = Array<\r\n            {\r\n                label: string,\r\n                value: string, \r\n                key: string\r\n            }\r\n        >\r\n\r\n    let data: DataType\r\n    if (props.selectOptions !== null && props.selectOptions !== undefined) {\r\n        data = props.selectOptions.map((item: any) => {\r\n            return (\r\n                {\r\n                    label: item.name, \r\n                    value: item.value, \r\n                    key: item.name\r\n                }\r\n            )\r\n        })\r\n    } else {\r\n        data = []\r\n    }\r\n\r\n    return (\r\n        <List>\r\n            <props.AntComponent\r\n                onBlur={props.onBlur}\r\n                onChange={props.type ? onInputChange : props.onChange}\r\n                mode={props.type === 'time' ? \"time\" : null}\r\n                value = {value}\r\n                key={props.label}\r\n                title={props.label}\r\n                locale={enUs}\r\n                autoHeight\r\n                className={props.type === 'text' ? 'pl-0' : null}\r\n                data={data}\r\n                cols={1}\r\n            >\r\n                <List.Item\r\n                    className=\"pl-0\"\r\n                >\r\n                    {props.label}\r\n                </List.Item>\r\n            </props.AntComponent>\r\n        </List>\r\n    )\r\n}","C:\\OpenServer\\domains\\front1\\src\\Components\\Header\\MenuBrowser.tsx",["223","224","225","226","227","228"],"import React, {useState} from 'react'\r\nimport { Button, Menu } from 'antd';\r\nimport {Link, useHistory} from 'react-router-dom'\r\n// import { MailOutlined, AppstoreOutlined, SettingOutlined } from '@ant-design/icons';\r\nimport {LogoutOutlined} from '@ant-design/icons'\r\nimport {MenuBrowserPropsType} from './MenuBrowserConainer'\r\nimport { TaskListType } from '../../Types/types';\r\nimport { MenuDataType } from './Header';\r\n\r\nconst { SubMenu } = Menu;\r\n\r\nexport type OwnMenuBrowserPropsType = {\r\n    menuData: any,\r\n    // logout: any,\r\n    // appLocation: string | null\r\n}\r\n\r\nconst MenuBrowser: React.FC<MenuBrowserPropsType> = (props) => {\r\n    let history = useHistory();\r\n    const [state, setState] = useState<Array<string>>([])\r\n    const handleClick = (e: any | undefined) => {\r\n        // //console.log('click ', e);\r\n        // setState({ current: e.key });\r\n    }\r\n\r\n    const getMenuItem = (childs: any):any => {\r\n        // return <Menu.Item key=\"setting:1\">Option 1</Menu.Item>\r\n        const menuItems = childs.map( (item: any) => {\r\n            return (\r\n                <Menu.Item key={item.value}>\r\n                    <Link to={item.value}>{item.label}</Link>\r\n                </Menu.Item>\r\n            )\r\n        })\r\n        return menuItems\r\n    }\r\n\r\n    const getSubMenu = () => {\r\n        // //console.log(props.menuData)\r\n        const subMenu = props.menuData.map( (item: any) => {\r\n            // //console.log(item)\r\n            return (\r\n                <SubMenu \r\n                    key={item.value} \r\n                    // icon={<MailOutlined />}\r\n                    title={item.label}\r\n                >\r\n                    {getMenuItem(item.children)}\r\n                </SubMenu >\r\n            )\r\n        })\r\n        // subMenu.push(\r\n        //     <Menu.Item key=\"login\">\r\n        //         <Link to={props.appLocation +\"login\"} >Login</Link>\r\n        //     </Menu.Item>\r\n        // )\r\n        return subMenu\r\n    }\r\n\r\n    const onLogout = () => {\r\n        // onChange(['', ''])\r\n        history.replace(props.appLocation+'login')\r\n        props.logout()\r\n    }\r\n\r\n    //console.log(props)\r\n\r\n    return (\r\n        <Menu \r\n            onClick={handleClick} \r\n            // selectedKeys={[current]} \r\n            mode=\"horizontal\"\r\n            theme=\"dark\"\r\n        >\r\n            {getSubMenu()}\r\n\r\n            {!props.isAuth ? \r\n                <Menu.Item key=\"login\">\r\n                    <Link to={props.appLocation +\"login\"} >Login</Link>\r\n                </Menu.Item>\r\n            :\r\n                <SubMenu \r\n                    key={props.user?.name} \r\n                    title={props.user?.name}\r\n                >\r\n                    <Menu.Item key=\"login\" onClick={onLogout}>\r\n                        {/* <Link to={props.appLocation +\"login\"} > */}\r\n                            Logout\r\n                        {/* </Link> */}\r\n                    </Menu.Item>\r\n                </SubMenu >\r\n                \r\n            }\r\n        </Menu>\r\n    )\r\n}\r\n\r\nexport default MenuBrowser","C:\\OpenServer\\domains\\front1\\src\\Components\\ToDo\\ToDoHeader\\ToDoHeader.tsx",[],"C:\\OpenServer\\domains\\front1\\src\\Components\\ToDo\\NewTaskForm\\NewTaskForm.tsx",["229"],"C:\\OpenServer\\domains\\front1\\src\\utils\\array-helpers.ts",[],"C:\\OpenServer\\domains\\front1\\src\\Components\\TimeScale\\TaskItem\\TaskItemContainer.tsx",[],"C:\\OpenServer\\domains\\front1\\src\\Components\\TimeScale\\TaskItem\\TaskItem.tsx",[],"C:\\OpenServer\\domains\\front1\\src\\Components\\Header\\MenuPopover.tsx",["230"],{"ruleId":"231","severity":1,"message":"232","line":29,"column":20,"nodeType":"233","messageId":"234","endLine":29,"endColumn":31},{"ruleId":"235","severity":1,"message":"236","line":48,"column":6,"nodeType":"237","endLine":48,"endColumn":25,"suggestions":"238"},{"ruleId":"239","replacedBy":"240"},{"ruleId":"241","replacedBy":"242"},{"ruleId":"231","severity":1,"message":"243","line":1,"column":19,"nodeType":"233","messageId":"234","endLine":1,"endColumn":34},{"ruleId":"231","severity":1,"message":"244","line":3,"column":6,"nodeType":"233","messageId":"234","endLine":3,"endColumn":24},{"ruleId":"231","severity":1,"message":"245","line":3,"column":10,"nodeType":"233","messageId":"234","endLine":3,"endColumn":14},{"ruleId":"231","severity":1,"message":"246","line":3,"column":16,"nodeType":"233","messageId":"234","endLine":3,"endColumn":25},{"ruleId":"231","severity":1,"message":"247","line":5,"column":8,"nodeType":"233","messageId":"234","endLine":5,"endColumn":14},{"ruleId":"231","severity":1,"message":"248","line":7,"column":10,"nodeType":"233","messageId":"234","endLine":7,"endColumn":19},{"ruleId":"231","severity":1,"message":"249","line":11,"column":7,"nodeType":"233","messageId":"234","endLine":11,"endColumn":19},{"ruleId":"231","severity":1,"message":"250","line":1,"column":10,"nodeType":"233","messageId":"234","endLine":1,"endColumn":25},{"ruleId":"231","severity":1,"message":"251","line":3,"column":5,"nodeType":"233","messageId":"234","endLine":3,"endColumn":16},{"ruleId":"231","severity":1,"message":"252","line":4,"column":5,"nodeType":"233","messageId":"234","endLine":4,"endColumn":15},{"ruleId":"231","severity":1,"message":"253","line":5,"column":5,"nodeType":"233","messageId":"234","endLine":5,"endColumn":14},{"ruleId":"231","severity":1,"message":"254","line":3,"column":37,"nodeType":"233","messageId":"234","endLine":3,"endColumn":41},{"ruleId":"235","severity":1,"message":"255","line":16,"column":8,"nodeType":"237","endLine":16,"endColumn":24,"suggestions":"256"},{"ruleId":"231","severity":1,"message":"257","line":47,"column":11,"nodeType":"233","messageId":"234","endLine":47,"endColumn":18},{"ruleId":"231","severity":1,"message":"258","line":6,"column":18,"nodeType":"233","messageId":"234","endLine":6,"endColumn":29},{"ruleId":"231","severity":1,"message":"247","line":7,"column":8,"nodeType":"233","messageId":"234","endLine":7,"endColumn":14},{"ruleId":"235","severity":1,"message":"255","line":19,"column":8,"nodeType":"237","endLine":19,"endColumn":24,"suggestions":"259"},{"ruleId":"231","severity":1,"message":"248","line":5,"column":10,"nodeType":"233","messageId":"234","endLine":5,"endColumn":19},{"ruleId":"231","severity":1,"message":"260","line":6,"column":10,"nodeType":"233","messageId":"234","endLine":6,"endColumn":18},{"ruleId":"231","severity":1,"message":"261","line":6,"column":20,"nodeType":"233","messageId":"234","endLine":6,"endColumn":25},{"ruleId":"235","severity":1,"message":"262","line":21,"column":8,"nodeType":"237","endLine":21,"endColumn":22,"suggestions":"263"},{"ruleId":"231","severity":1,"message":"264","line":7,"column":9,"nodeType":"233","messageId":"234","endLine":7,"endColumn":15},{"ruleId":"231","severity":1,"message":"265","line":2,"column":43,"nodeType":"233","messageId":"234","endLine":2,"endColumn":49},{"ruleId":"231","severity":1,"message":"266","line":9,"column":10,"nodeType":"233","messageId":"234","endLine":9,"endColumn":24},{"ruleId":"231","severity":1,"message":"267","line":23,"column":22,"nodeType":"233","messageId":"234","endLine":23,"endColumn":33},{"ruleId":"235","severity":1,"message":"268","line":27,"column":8,"nodeType":"237","endLine":27,"endColumn":28,"suggestions":"269"},{"ruleId":"231","severity":1,"message":"270","line":7,"column":5,"nodeType":"233","messageId":"234","endLine":7,"endColumn":19},{"ruleId":"231","severity":1,"message":"265","line":2,"column":10,"nodeType":"233","messageId":"234","endLine":2,"endColumn":16},{"ruleId":"231","severity":1,"message":"266","line":5,"column":9,"nodeType":"233","messageId":"234","endLine":5,"endColumn":23},{"ruleId":"231","severity":1,"message":"271","line":7,"column":10,"nodeType":"233","messageId":"234","endLine":7,"endColumn":22},{"ruleId":"231","severity":1,"message":"272","line":8,"column":10,"nodeType":"233","messageId":"234","endLine":8,"endColumn":22},{"ruleId":"231","severity":1,"message":"273","line":20,"column":12,"nodeType":"233","messageId":"234","endLine":20,"endColumn":17},{"ruleId":"231","severity":1,"message":"274","line":20,"column":19,"nodeType":"233","messageId":"234","endLine":20,"endColumn":27},{"ruleId":"235","severity":1,"message":"275","line":49,"column":8,"nodeType":"237","endLine":49,"endColumn":30,"suggestions":"276"},{"ruleId":"231","severity":1,"message":"277","line":21,"column":11,"nodeType":"233","messageId":"234","endLine":21,"endColumn":25},"@typescript-eslint/no-unused-vars","'setLocation' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'location' and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["278"],"no-native-reassign",["279"],"no-negated-in-lhs",["280"],"'APIResponseType' is defined but never used.","'MeResponseDataType' is defined but never used.","'List' is defined but never used.","'InputItem' is defined but never used.","'moment' is defined but never used.","'propTypes' is defined but never used.","'CheckboxItem' is assigned a value but never used.","'formatCountdown' is defined but never used.","'BrowserView' is defined but never used.","'MobileView' is defined but never used.","'isBrowser' is defined but never used.","'Icon' is defined but never used.","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["281"],"'sidebar' is assigned a value but never used.","'FormikProps' is defined but never used.",["282"],"'Redirect' is defined but never used.","'Route' is defined but never used.","React Hook useEffect has missing dependencies: 'history' and 'props.appLocation'. Either include them or remove the dependency array.",["283"],"'Option' is assigned a value but never used.","'Button' is defined but never used.","'LogoutOutlined' is defined but never used.","'setInitData' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'props', 'selestedDates.endDate', and 'selestedDates.startDate'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["284"],"'LocaleProvider' is defined but never used.","'TaskListType' is defined but never used.","'MenuDataType' is defined but never used.","'state' is assigned a value but never used.","'setState' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'onReset' and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["285"],"'fortest' is assigned a value but never used.",{"desc":"286","fix":"287"},"no-global-assign","no-unsafe-negation",{"desc":"288","fix":"289"},{"desc":"288","fix":"290"},{"desc":"291","fix":"292"},{"desc":"293","fix":"294"},{"desc":"295","fix":"296"},"Update the dependencies array to be: [location, props, props.initialized]",{"range":"297","text":"298"},"Update the dependencies array to be: [props, props.taskList]",{"range":"299","text":"300"},{"range":"301","text":"300"},"Update the dependencies array to be: [history, props.appLocation, props.isAuth]",{"range":"302","text":"303"},"Update the dependencies array to be: [props, props.dateInterval, selestedDates.endDate, selestedDates.startDate]",{"range":"304","text":"305"},"Update the dependencies array to be: [onReset, props, props.taskSaveStatus]",{"range":"306","text":"307"},[1863,1882],"[location, props, props.initialized]",[566,582],"[props, props.taskList]",[696,712],[686,700],"[history, props.appLocation, props.isAuth]",[1258,1278],"[props, props.dateInterval, selestedDates.endDate, selestedDates.startDate]",[1499,1521],"[onReset, props, props.taskSaveStatus]"]
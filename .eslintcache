[{"C:\\OSPanel\\domains\\DeployProject\\src\\index.tsx":"1","C:\\OSPanel\\domains\\DeployProject\\src\\reportWebVitals.ts":"2","C:\\OSPanel\\domains\\DeployProject\\src\\App.tsx":"3","C:\\OSPanel\\domains\\DeployProject\\src\\redux\\store.ts":"4","C:\\OSPanel\\domains\\DeployProject\\src\\redux\\authReducer.ts":"5","C:\\OSPanel\\domains\\DeployProject\\src\\redux\\appReducer.ts":"6","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Header\\HeaderContainer.tsx":"7","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\ToDo\\ToDoContainer.tsx":"8","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Login\\LoginContainer.tsx":"9","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\TasksTree\\TasksTreeContainer.tsx":"10","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Register\\RegisterContainer.tsx":"11","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Users\\UsersContainer.tsx":"12","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Users\\CurrentUser\\CurrentUserContainer.tsx":"13","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Orders\\OrdersContainer.tsx":"14","C:\\OSPanel\\domains\\DeployProject\\src\\redux\\projectReducer.ts":"15","C:\\OSPanel\\domains\\DeployProject\\src\\redux\\TaskListReducer.ts":"16","C:\\OSPanel\\domains\\DeployProject\\src\\redux\\taskReducer.ts":"17","C:\\OSPanel\\domains\\DeployProject\\src\\redux\\usersReducer.ts":"18","C:\\OSPanel\\domains\\DeployProject\\src\\api\\authAPI.ts":"19","C:\\OSPanel\\domains\\DeployProject\\src\\redux\\usersSelector.ts":"20","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Header\\Header.tsx":"21","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\ToDo\\ToDoBrowser.tsx":"22","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\ToDo\\ToDoMobile.tsx":"23","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Login\\Login.tsx":"24","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\TasksTree\\TasksTreeBrowser.tsx":"25","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\TasksTree\\TasksTreeMobile.tsx":"26","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Register\\Register.tsx":"27","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Users\\Users.tsx":"28","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Users\\UsersMobile.tsx":"29","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Users\\CurrentUser\\CurrentUser.tsx":"30","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Users\\CurrentUser\\CurrentUserMobile.tsx":"31","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Orders\\Orders.tsx":"32","C:\\OSPanel\\domains\\DeployProject\\src\\api\\projectAPI.ts":"33","C:\\OSPanel\\domains\\DeployProject\\src\\api\\taskListAPI.ts":"34","C:\\OSPanel\\domains\\DeployProject\\src\\api\\usersAPI.ts":"35","C:\\OSPanel\\domains\\DeployProject\\src\\api\\taskApi.ts":"36","C:\\OSPanel\\domains\\DeployProject\\src\\api\\api.ts":"37","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\TasksTree\\TaskListActions\\TaskListActions.ts":"38","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Header\\MenuContainer.tsx":"39","C:\\OSPanel\\domains\\DeployProject\\src\\utils\\Date\\NewDeteByString.ts":"40","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Login\\LoginForm.tsx":"41","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Register\\RegisterForm.tsx":"42","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\ToDo\\Settings\\SettingsModalContainer.tsx":"43","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\ToDo\\ToDoForm\\ToDoForm.tsx":"44","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\ToDo\\ToDoHeader\\ToDoHeaderMobile.tsx":"45","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Users\\CurrentUser\\UserDataForm.tsx":"46","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\ToDo\\ToDoHeader\\ToDoHeader.tsx":"47","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\TasksTree\\TaskTreeMobileItem.tsx":"48","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\ToDo\\TimeScale\\TimeScale.tsx":"49","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\TasksTree\\TaskTreeForm\\NewTaskTreeForm.tsx":"50","C:\\OSPanel\\domains\\DeployProject\\src\\utils\\Formik\\ValidateFields.ts":"51","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\TasksTree\\TaskTreeBrowserItemContainer.tsx":"52","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\TasksTree\\RunTask.tsx\\RunTaskForm.tsx":"53","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Header\\MenuBrowser.tsx":"54","C:\\OSPanel\\domains\\DeployProject\\src\\utils\\Formik\\CreateAntField.tsx":"55","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\ToDo\\Settings\\SettingsModal.tsx":"56","C:\\OSPanel\\domains\\DeployProject\\src\\utils\\array-helpers.ts":"57","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\ToDo\\TimeScale\\TaskItem\\TaskItemContainer.tsx":"58","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\TasksTree\\TaskTreeForm\\Project\\ProjectForm.tsx":"59","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\TasksTree\\TaskTreeBrowserItem.tsx":"60","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\ToDo\\TimeScale\\TaskItem\\TaskItem.tsx":"61","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\TasksTree\\TaskTreeForm\\Project\\OldProject\\OldProjectFormContainer.tsx":"62","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\TasksTree\\TaskTreeForm\\Project\\NewProject\\NewProjectForm.tsx":"63","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\ToDo\\ToDoActions\\ToDoActionsRouter.tsx":"64","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\TasksTree\\TaskTreeForm\\Project\\OldProject\\OldProjectForm.tsx":"65","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\TasksTree\\TaskTreeForm\\Project\\BackendForm\\BackendFormContainer.tsx":"66","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\TasksTree\\TaskTreeForm\\Project\\BackendForm\\BackendForm.tsx":"67","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Header\\MenuMobile.tsx":"68","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\ToDo\\ToDoHeader\\ToDoHeaderContainer.tsx":"69","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\ToDo\\TimeScale\\TimeScaleContainer.tsx":"70","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Header\\MenuPopover.tsx":"71","C:\\OSPanel\\domains\\DeployProject\\src\\redux\\codeReducer.ts":"72","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\ProjectsContainer.tsx":"73","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\CurrentProject\\CurrentProjectContainer.tsx":"74","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\Projects.tsx":"75","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\CurrentProject\\CurrentProject.tsx":"76","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\BackendContainer.tsx":"77","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Backend.tsx":"78","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Instanses\\InstansesForm.tsx":"79","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Models\\ModelsContainer.tsx":"80","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Controllers\\ControllersContainer.tsx":"81","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Models\\Models.tsx":"82","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Controllers\\Controllers.tsx":"83","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Models\\FieldListContainer.tsx":"84","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Models\\ModelForm.tsx":"85","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Models\\FieldForm.tsx":"86","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Controllers\\ControllerForm.tsx":"87","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Development\\Code\\CodeModalContainer.tsx":"88","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Models\\FieldList.tsx":"89","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Development\\Code\\CodeModal.tsx":"90","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Development\\Code\\Model\\ModelCodeContainer.tsx":"91","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Development\\Code\\Model\\ModelCode.tsx":"92","C:\\OSPanel\\domains\\DeployProject\\src\\api\\ControllerMethodsAPI.ts":"93","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Controllers\\ControllerMethodsContainer.tsx":"94","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Controllers\\ControllerMethods.tsx":"95","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Controllers\\ControllerMethodsItem\\ControllerMethodsItem.tsx":"96","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Controllers\\ControllerMethodsForm\\ControllerMethodsForm.tsx":"97","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Controllers\\ControllerMethodsForm\\RequestItem.tsx":"98","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Controllers\\ControllerMethodsForm\\ControllerMethodsCode.tsx":"99","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Controllers\\ControllerMethodsForm\\ResponseItem.tsx":"100","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\English\\English.tsx":"101"},{"size":406,"mtime":1614757619514,"results":"102","hashOfConfig":"103"},{"size":440,"mtime":1614757619522,"results":"104","hashOfConfig":"103"},{"size":5839,"mtime":1615963643812,"results":"105","hashOfConfig":"103"},{"size":1085,"mtime":1615110339948,"results":"106","hashOfConfig":"103"},{"size":5172,"mtime":1614757619517,"results":"107","hashOfConfig":"103"},{"size":1346,"mtime":1614757619517,"results":"108","hashOfConfig":"103"},{"size":713,"mtime":1614757619461,"results":"109","hashOfConfig":"103"},{"size":1377,"mtime":1614757619493,"results":"110","hashOfConfig":"103"},{"size":750,"mtime":1614757619466,"results":"111","hashOfConfig":"103"},{"size":3067,"mtime":1614757619484,"results":"112","hashOfConfig":"103"},{"size":843,"mtime":1614757619470,"results":"113","hashOfConfig":"103"},{"size":920,"mtime":1614757619506,"results":"114","hashOfConfig":"103"},{"size":1572,"mtime":1614757619503,"results":"115","hashOfConfig":"103"},{"size":586,"mtime":1614757619469,"results":"116","hashOfConfig":"103"},{"size":7285,"mtime":1615887100510,"results":"117","hashOfConfig":"103"},{"size":2921,"mtime":1614757619516,"results":"118","hashOfConfig":"103"},{"size":5502,"mtime":1614757619520,"results":"119","hashOfConfig":"103"},{"size":2713,"mtime":1614757619520,"results":"120","hashOfConfig":"103"},{"size":2394,"mtime":1614757619510,"results":"121","hashOfConfig":"103"},{"size":278,"mtime":1614757619521,"results":"122","hashOfConfig":"103"},{"size":3155,"mtime":1615963643815,"results":"123","hashOfConfig":"103"},{"size":4374,"mtime":1614757619492,"results":"124","hashOfConfig":"103"},{"size":16691,"mtime":1614757619498,"results":"125","hashOfConfig":"103"},{"size":1345,"mtime":1614757619466,"results":"126","hashOfConfig":"103"},{"size":9309,"mtime":1614757619483,"results":"127","hashOfConfig":"103"},{"size":10793,"mtime":1614757619485,"results":"128","hashOfConfig":"103"},{"size":1303,"mtime":1614757619470,"results":"129","hashOfConfig":"103"},{"size":2518,"mtime":1614757619505,"results":"130","hashOfConfig":"103"},{"size":1112,"mtime":1614757619507,"results":"131","hashOfConfig":"103"},{"size":8717,"mtime":1614757619502,"results":"132","hashOfConfig":"103"},{"size":8716,"mtime":1614757619503,"results":"133","hashOfConfig":"103"},{"size":248,"mtime":1614757619468,"results":"134","hashOfConfig":"103"},{"size":6352,"mtime":1615635841542,"results":"135","hashOfConfig":"103"},{"size":2054,"mtime":1614757619512,"results":"136","hashOfConfig":"103"},{"size":1035,"mtime":1614757619512,"results":"137","hashOfConfig":"103"},{"size":2069,"mtime":1614757619511,"results":"138","hashOfConfig":"103"},{"size":773,"mtime":1614757619509,"results":"139","hashOfConfig":"103"},{"size":512,"mtime":1614757619474,"results":"140","hashOfConfig":"103"},{"size":944,"mtime":1614757619463,"results":"141","hashOfConfig":"103"},{"size":939,"mtime":1614757619524,"results":"142","hashOfConfig":"103"},{"size":1508,"mtime":1614757619467,"results":"143","hashOfConfig":"103"},{"size":2784,"mtime":1614757619471,"results":"144","hashOfConfig":"103"},{"size":849,"mtime":1614757619487,"results":"145","hashOfConfig":"103"},{"size":2119,"mtime":1614757619494,"results":"146","hashOfConfig":"103"},{"size":3131,"mtime":1614757619497,"results":"147","hashOfConfig":"103"},{"size":4260,"mtime":1614757619505,"results":"148","hashOfConfig":"103"},{"size":4632,"mtime":1614757619495,"results":"149","hashOfConfig":"103"},{"size":5447,"mtime":1614757619482,"results":"150","hashOfConfig":"103"},{"size":4854,"mtime":1614757619490,"results":"151","hashOfConfig":"103"},{"size":3927,"mtime":1614757619476,"results":"152","hashOfConfig":"103"},{"size":1954,"mtime":1614757619526,"results":"153","hashOfConfig":"103"},{"size":1241,"mtime":1614757619475,"results":"154","hashOfConfig":"103"},{"size":1451,"mtime":1614757619472,"results":"155","hashOfConfig":"103"},{"size":2380,"mtime":1614757619462,"results":"156","hashOfConfig":"103"},{"size":8790,"mtime":1615286139682,"results":"157","hashOfConfig":"103"},{"size":4879,"mtime":1614757619486,"results":"158","hashOfConfig":"103"},{"size":318,"mtime":1614757619526,"results":"159","hashOfConfig":"103"},{"size":919,"mtime":1614757619489,"results":"160","hashOfConfig":"103"},{"size":1610,"mtime":1614757619481,"results":"161","hashOfConfig":"103"},{"size":10535,"mtime":1614757619474,"results":"162","hashOfConfig":"103"},{"size":4041,"mtime":1614757619488,"results":"163","hashOfConfig":"103"},{"size":1353,"mtime":1614757619480,"results":"164","hashOfConfig":"103"},{"size":5751,"mtime":1614757619479,"results":"165","hashOfConfig":"103"},{"size":3151,"mtime":1614757619491,"results":"166","hashOfConfig":"103"},{"size":1554,"mtime":1614757619480,"results":"167","hashOfConfig":"103"},{"size":1332,"mtime":1614757619478,"results":"168","hashOfConfig":"103"},{"size":2398,"mtime":1614757619477,"results":"169","hashOfConfig":"103"},{"size":4428,"mtime":1614757619464,"results":"170","hashOfConfig":"103"},{"size":1068,"mtime":1614757619496,"results":"171","hashOfConfig":"103"},{"size":1056,"mtime":1614757619490,"results":"172","hashOfConfig":"103"},{"size":1438,"mtime":1614757619465,"results":"173","hashOfConfig":"103"},{"size":1948,"mtime":1615821526817,"results":"174","hashOfConfig":"103"},{"size":784,"mtime":1615285732836,"results":"175","hashOfConfig":"103"},{"size":1660,"mtime":1615285703775,"results":"176","hashOfConfig":"103"},{"size":1253,"mtime":1614757619459,"results":"177","hashOfConfig":"103"},{"size":1694,"mtime":1614757619457,"results":"178","hashOfConfig":"103"},{"size":1445,"mtime":1615285692252,"results":"179","hashOfConfig":"103"},{"size":2657,"mtime":1615295177834,"results":"180","hashOfConfig":"103"},{"size":2493,"mtime":1615285632535,"results":"181","hashOfConfig":"103"},{"size":1168,"mtime":1615289691161,"results":"182","hashOfConfig":"103"},{"size":1289,"mtime":1615374755474,"results":"183","hashOfConfig":"103"},{"size":13959,"mtime":1615289799165,"results":"184","hashOfConfig":"103"},{"size":7024,"mtime":1615638613631,"results":"185","hashOfConfig":"103"},{"size":1031,"mtime":1615288399566,"results":"186","hashOfConfig":"103"},{"size":1642,"mtime":1615285672461,"results":"187","hashOfConfig":"103"},{"size":4713,"mtime":1615285663378,"results":"188","hashOfConfig":"103"},{"size":1761,"mtime":1615386245389,"results":"189","hashOfConfig":"103"},{"size":1039,"mtime":1615288259167,"results":"190","hashOfConfig":"103"},{"size":2756,"mtime":1615288333649,"results":"191","hashOfConfig":"103"},{"size":869,"mtime":1615292490630,"results":"192","hashOfConfig":"103"},{"size":1085,"mtime":1615289865687,"results":"193","hashOfConfig":"103"},{"size":6648,"mtime":1615639520381,"results":"194","hashOfConfig":"103"},{"size":2183,"mtime":1615910387317,"results":"195","hashOfConfig":"103"},{"size":1475,"mtime":1615824579510,"results":"196","hashOfConfig":"103"},{"size":6139,"mtime":1615910731284,"results":"197","hashOfConfig":"103"},{"size":378,"mtime":1615448179776,"results":"198","hashOfConfig":"103"},{"size":9837,"mtime":1615965601245,"results":"199","hashOfConfig":"103"},{"size":2940,"mtime":1615637295666,"results":"200","hashOfConfig":"103"},{"size":5253,"mtime":1615967392455,"results":"201","hashOfConfig":"103"},{"size":8745,"mtime":1615964489598,"results":"202","hashOfConfig":"103"},{"size":677,"mtime":1615963643813,"results":"203","hashOfConfig":"103"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},"1pat49e",{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"235","messages":"236","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"253","messages":"254","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"259","messages":"260","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"261","messages":"262","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"265","messages":"266","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"267","messages":"268","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"269","messages":"270","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"271","messages":"272","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"273","messages":"274","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"275","messages":"276","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"277","messages":"278","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"279","messages":"280","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"281","messages":"282","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"283","messages":"284","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"285","messages":"286","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"287","messages":"288","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"289","messages":"290","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"291","messages":"292","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"293","messages":"294","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"295","messages":"296","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"297","messages":"298","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"299","messages":"300","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"301","messages":"302","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"303","messages":"304","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"305","messages":"306","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"307","messages":"308","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"309","messages":"310","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"311","messages":"312","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"313","messages":"314","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"315","messages":"316","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"317","messages":"318","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"319","messages":"320","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"321","messages":"322","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"323","messages":"324","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"325","messages":"326","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"327","messages":"328","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"329","messages":"330","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"331","usedDeprecatedRules":"206"},{"filePath":"332","messages":"333","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"334","messages":"335","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"336","messages":"337","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"338","messages":"339","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"340","usedDeprecatedRules":"206"},{"filePath":"341","messages":"342","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"343","messages":"344","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"345","messages":"346","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"347","messages":"348","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"349","messages":"350","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"351","messages":"352","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"353","messages":"354","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"355","usedDeprecatedRules":"206"},{"filePath":"356","messages":"357","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"358","usedDeprecatedRules":"206"},{"filePath":"359","messages":"360","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"361","usedDeprecatedRules":"206"},{"filePath":"362","messages":"363","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"364","usedDeprecatedRules":"206"},{"filePath":"365","messages":"366","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"367","usedDeprecatedRules":"206"},{"filePath":"368","messages":"369","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"370","messages":"371","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"372","messages":"373","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"374","messages":"375","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"376","usedDeprecatedRules":"206"},{"filePath":"377","messages":"378","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"379","usedDeprecatedRules":"206"},{"filePath":"380","messages":"381","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"382","messages":"383","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"384","usedDeprecatedRules":"206"},{"filePath":"385","messages":"386","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"387","messages":"388","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"389","usedDeprecatedRules":"206"},{"filePath":"390","messages":"391","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"392","messages":"393","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"394","messages":"395","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"396","usedDeprecatedRules":"206"},{"filePath":"397","messages":"398","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"206"},{"filePath":"399","messages":"400","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"401","usedDeprecatedRules":"206"},{"filePath":"402","messages":"403","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"404","messages":"405","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"406","usedDeprecatedRules":"206"},{"filePath":"407","messages":"408","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"409","messages":"410","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"411","messages":"412","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"413","messages":"414","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"415","usedDeprecatedRules":"206"},{"filePath":"416","messages":"417","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"418","messages":"419","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":2,"source":null},{"filePath":"420","messages":"421","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\OSPanel\\domains\\DeployProject\\src\\index.tsx",[],["422","423"],"C:\\OSPanel\\domains\\DeployProject\\src\\reportWebVitals.ts",[],"C:\\OSPanel\\domains\\DeployProject\\src\\App.tsx",[],"C:\\OSPanel\\domains\\DeployProject\\src\\redux\\store.ts",[],"C:\\OSPanel\\domains\\DeployProject\\src\\redux\\authReducer.ts",[],"C:\\OSPanel\\domains\\DeployProject\\src\\redux\\appReducer.ts",[],"C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Header\\HeaderContainer.tsx",[],"C:\\OSPanel\\domains\\DeployProject\\src\\Components\\ToDo\\ToDoContainer.tsx",[],"C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Login\\LoginContainer.tsx",[],"C:\\OSPanel\\domains\\DeployProject\\src\\Components\\TasksTree\\TasksTreeContainer.tsx",[],"C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Register\\RegisterContainer.tsx",[],"C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Users\\UsersContainer.tsx",[],"C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Users\\CurrentUser\\CurrentUserContainer.tsx",[],"C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Orders\\OrdersContainer.tsx",[],"C:\\OSPanel\\domains\\DeployProject\\src\\redux\\projectReducer.ts",[],"C:\\OSPanel\\domains\\DeployProject\\src\\redux\\TaskListReducer.ts",[],"C:\\OSPanel\\domains\\DeployProject\\src\\redux\\taskReducer.ts",[],"C:\\OSPanel\\domains\\DeployProject\\src\\redux\\usersReducer.ts",[],"C:\\OSPanel\\domains\\DeployProject\\src\\api\\authAPI.ts",[],"C:\\OSPanel\\domains\\DeployProject\\src\\redux\\usersSelector.ts",[],"C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Header\\Header.tsx",[],"C:\\OSPanel\\domains\\DeployProject\\src\\Components\\ToDo\\ToDoBrowser.tsx",[],"C:\\OSPanel\\domains\\DeployProject\\src\\Components\\ToDo\\ToDoMobile.tsx",[],"C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Login\\Login.tsx",[],"C:\\OSPanel\\domains\\DeployProject\\src\\Components\\TasksTree\\TasksTreeBrowser.tsx",[],"C:\\OSPanel\\domains\\DeployProject\\src\\Components\\TasksTree\\TasksTreeMobile.tsx",[],"C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Register\\Register.tsx",[],"C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Users\\Users.tsx",[],"C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Users\\UsersMobile.tsx",[],"C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Users\\CurrentUser\\CurrentUser.tsx",[],"C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Users\\CurrentUser\\CurrentUserMobile.tsx",[],"C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Orders\\Orders.tsx",[],"C:\\OSPanel\\domains\\DeployProject\\src\\api\\projectAPI.ts",[],"C:\\OSPanel\\domains\\DeployProject\\src\\api\\taskListAPI.ts",[],"C:\\OSPanel\\domains\\DeployProject\\src\\api\\usersAPI.ts",[],"C:\\OSPanel\\domains\\DeployProject\\src\\api\\taskApi.ts",[],"C:\\OSPanel\\domains\\DeployProject\\src\\api\\api.ts",[],"C:\\OSPanel\\domains\\DeployProject\\src\\Components\\TasksTree\\TaskListActions\\TaskListActions.ts",[],"C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Header\\MenuContainer.tsx",[],"C:\\OSPanel\\domains\\DeployProject\\src\\utils\\Date\\NewDeteByString.ts",[],"C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Login\\LoginForm.tsx",[],"C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Register\\RegisterForm.tsx",[],"C:\\OSPanel\\domains\\DeployProject\\src\\Components\\ToDo\\Settings\\SettingsModalContainer.tsx",[],"C:\\OSPanel\\domains\\DeployProject\\src\\Components\\ToDo\\ToDoForm\\ToDoForm.tsx",[],"C:\\OSPanel\\domains\\DeployProject\\src\\Components\\ToDo\\ToDoHeader\\ToDoHeaderMobile.tsx",[],"C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Users\\CurrentUser\\UserDataForm.tsx",[],"C:\\OSPanel\\domains\\DeployProject\\src\\Components\\ToDo\\ToDoHeader\\ToDoHeader.tsx",[],"C:\\OSPanel\\domains\\DeployProject\\src\\Components\\TasksTree\\TaskTreeMobileItem.tsx",[],"C:\\OSPanel\\domains\\DeployProject\\src\\Components\\ToDo\\TimeScale\\TimeScale.tsx",[],"C:\\OSPanel\\domains\\DeployProject\\src\\Components\\TasksTree\\TaskTreeForm\\NewTaskTreeForm.tsx",[],"C:\\OSPanel\\domains\\DeployProject\\src\\utils\\Formik\\ValidateFields.ts",[],"C:\\OSPanel\\domains\\DeployProject\\src\\Components\\TasksTree\\TaskTreeBrowserItemContainer.tsx",[],"C:\\OSPanel\\domains\\DeployProject\\src\\Components\\TasksTree\\RunTask.tsx\\RunTaskForm.tsx",[],"C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Header\\MenuBrowser.tsx",[],"C:\\OSPanel\\domains\\DeployProject\\src\\utils\\Formik\\CreateAntField.tsx",[],"C:\\OSPanel\\domains\\DeployProject\\src\\Components\\ToDo\\Settings\\SettingsModal.tsx",[],"C:\\OSPanel\\domains\\DeployProject\\src\\utils\\array-helpers.ts",[],"C:\\OSPanel\\domains\\DeployProject\\src\\Components\\ToDo\\TimeScale\\TaskItem\\TaskItemContainer.tsx",[],"C:\\OSPanel\\domains\\DeployProject\\src\\Components\\TasksTree\\TaskTreeForm\\Project\\ProjectForm.tsx",[],"C:\\OSPanel\\domains\\DeployProject\\src\\Components\\TasksTree\\TaskTreeBrowserItem.tsx",[],"C:\\OSPanel\\domains\\DeployProject\\src\\Components\\ToDo\\TimeScale\\TaskItem\\TaskItem.tsx",[],"C:\\OSPanel\\domains\\DeployProject\\src\\Components\\TasksTree\\TaskTreeForm\\Project\\OldProject\\OldProjectFormContainer.tsx",[],"C:\\OSPanel\\domains\\DeployProject\\src\\Components\\TasksTree\\TaskTreeForm\\Project\\NewProject\\NewProjectForm.tsx",["424","425","426"],"import { Tooltip } from 'antd'\r\nimport { Field } from 'formik'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { AntCheckbox, AntInput, AntSelect } from '../../../../../utils/Formik/CreateAntField'\r\nimport { validateRequired } from '../../../../../utils/Formik/ValidateFields'\r\nimport BackendForm from '../BackendForm/BackendFormContainer'\r\n\r\ntype NewProjectFormPropsType = {\r\n    submitCount: (val: any)=>void\r\n}\r\n\r\nconst NewProjectForm: React.FC<NewProjectFormPropsType> = (props) => {\r\n    const [frontend, setFrontend] = useState(false)\r\n    const [backend, setBackend] = useState(false)\r\n    const [isBackendNew, setIsBackendNew] = useState(false)\r\n\r\n    const submitFrontEnd = (val: any) => {\r\n        setFrontend(val.target.checked)\r\n    }\r\n\r\n    const submitBackEnd = (val: any) => {\r\n        setBackend(val.target.checked)\r\n    }\r\n\r\n    const onSelectBackEndType = (val:any) => {\r\n\r\n    }\r\n\r\n    const submitBackendIsNew = (val: any) => {\r\n        setIsBackendNew(val.target.checked)\r\n    }\r\n\r\n    const backendTypeOptions = [\r\n        {\r\n            name: 'Laravel',\r\n            value: 'laravel'\r\n        },\r\n        {\r\n            name: 'Other',\r\n            value: 'other'\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <>\r\n            <Field\r\n                component={AntInput}\r\n                name=\"name\"\r\n                type=\"text\"\r\n                label=\"Project Name\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n            <Field\r\n                component={AntCheckbox}\r\n                name=\"isHasBackEnd\"\r\n                type=\"checkbox\"\r\n                label=\"BackEnd\"\r\n                submitCount={props.submitCount}\r\n                onClick={submitBackEnd}\r\n                // onSelect={submitBackEnd}\r\n            />\r\n\r\n\r\n\r\n\r\n            {backend ? \r\n            <>\r\n                <h5>backend initial options:</h5><br />\r\n\r\n                <Field\r\n                    component={AntCheckbox}\r\n                    type=\"checkbox\"\r\n                    name=\"isBackendNew\"\r\n                    label=\"New Backend\"\r\n                    submitCount={props.submitCount}\r\n                    onClick={submitBackendIsNew}\r\n                />\r\n\r\n                <BackendForm \r\n                    isBackendNew={isBackendNew} \r\n                    onSelectBackEndType={onSelectBackEndType} \r\n                    submitCount={props.submitCount}\r\n                    />\r\n\r\n                {/* {isBackendNew ?\r\n                    <Field\r\n                        component={AntSelect}\r\n                        selectOptions={backendTypeOptions}\r\n                        name=\"backendType\"\r\n                        type=\"select\"\r\n                        label=\"Backend type\"\r\n                        onSelect = {onSelectBackEndType}\r\n                        submitCount={props.submitCount}\r\n                    />\r\n                :\r\n                    <Field\r\n                        component={AntSelect}\r\n                        selectOptions={backendTypeOptions}\r\n                        name=\"backend_project\"\r\n                        type=\"select\"\r\n                        label=\"Choise backend project\"\r\n                        onSelect = {onSelectBackEndType}\r\n                        submitCount={props.submitCount}\r\n                    />\r\n                } */}\r\n\r\n                \r\n                </>\r\n            :null}\r\n\r\n\r\n\r\n\r\n\r\n            <Field\r\n                component={AntCheckbox}\r\n                name=\"isHasFrontEnd\"\r\n                type=\"checkbox\"\r\n                label=\"FrontEnd\"\r\n                submitCount={props.submitCount}\r\n                onClick={submitFrontEnd}\r\n                onSelect={submitFrontEnd}\r\n            />\r\n            {frontend ? <>\r\n                <h5>Frontend initial options:</h5><br />\r\n                <Field\r\n                    component={AntCheckbox}\r\n                    name=\"isCRA\"\r\n                    label=\"Create React App\"\r\n                    submitCount={props.submitCount}\r\n                />\r\n                <Field\r\n                    component={AntCheckbox}\r\n                    name=\"isTS\"\r\n                    label=\"Type Script\"\r\n                    submitCount={props.submitCount}\r\n                />\r\n                <Field\r\n                    component={AntCheckbox}\r\n                    name=\"isMenu\"\r\n                    label=\"Menu\"\r\n                    submitCount={props.submitCount}\r\n                />\r\n                <Field\r\n                    component={AntCheckbox}\r\n                    name=\"isRouter\"\r\n                    label=\"Router\"\r\n                    submitCount={props.submitCount}\r\n                />\r\n                <Field\r\n                    component={AntCheckbox}\r\n                    name=\"isLogin\"\r\n                    label=\"Login/ Register\"\r\n                    submitCount={props.submitCount}\r\n                />\r\n                <Field\r\n                    component={AntCheckbox}\r\n                    name=\"isBAM\"\r\n                    label={\r\n                        <Tooltip title={<><p>Использование методологии БЭМ дваомтвщкмтущмшсвкумзкумз куцмзкцмозущкмзщк\r\n                            зщсоуцшр сщрумщкуцмрщкму цршуцщмшрцщкушмщмкшцщш шомзущцкомзкумо зщумозщ3уом</p><p>Второй абзац</p></>}>\r\n                            <span>БЭМ</span>\r\n                        </Tooltip>\r\n                }\r\n                    submitCount={props.submitCount}\r\n                />\r\n\r\n            </> : null}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default NewProjectForm","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\ToDo\\ToDoActions\\ToDoActionsRouter.tsx",[],"C:\\OSPanel\\domains\\DeployProject\\src\\Components\\TasksTree\\TaskTreeForm\\Project\\OldProject\\OldProjectForm.tsx",[],"C:\\OSPanel\\domains\\DeployProject\\src\\Components\\TasksTree\\TaskTreeForm\\Project\\BackendForm\\BackendFormContainer.tsx",[],"C:\\OSPanel\\domains\\DeployProject\\src\\Components\\TasksTree\\TaskTreeForm\\Project\\BackendForm\\BackendForm.tsx",["427","428","429"],"import { Field } from 'formik'\r\nimport React, {useState, useEffect} from 'react'\r\nimport { AntdOptionsType } from '../../../../../Types/types'\r\nimport { AntSelect } from '../../../../../utils/Formik/CreateAntField'\r\nimport {BackendFormPropsType} from './BackendFormContainer'\r\n\r\nexport type OwnBackendFormPropsType = {\r\n    isBackendNew: boolean,\r\n    onSelectBackEndType: (val: any) => void,\r\n    submitCount: (val: any)=>void\r\n}\r\n\r\nconst BackendForm: React.FC<BackendFormPropsType> = (props) => {\r\n    useEffect( ()=> {\r\n        if (!props.isBackendNew && !props.isProjectListLoaded) {\r\n            props.getProjectList()\r\n        }\r\n    }, [props.isBackendNew, props.isProjectListLoaded])\r\n\r\n    useEffect( ()=> {\r\n        if(props.projectList && props.projectList.length>0) {\r\n            setOldProjectsData(props.projectList.map(item => {\r\n                return(\r\n                    {name: item.name, value: item.name}\r\n                )\r\n            }))\r\n        }\r\n    }, [props.projectList])\r\n\r\n    const [isBackendNew, setIsBackendNew] = useState(props.isBackendNew)\r\n    const [oldProjectsData, setOldProjectsData] = useState<Array<AntdOptionsType>>([])\r\n\r\n    const submitBackendIsNew = (val: any) => {\r\n        setIsBackendNew(val.target.checked)\r\n    }\r\n\r\n    const backendTypeOptions = [\r\n        {\r\n            name: 'Laravel',\r\n            value: 'laravel'\r\n        },\r\n        {\r\n            name: 'Other',\r\n            value: 'other'\r\n        },\r\n    ]\r\n\r\n    // console.log(props)\r\n\r\n    if (props.isBackendNew) {\r\n        return(\r\n            <Field\r\n                component={AntSelect}\r\n                selectOptions={backendTypeOptions}\r\n                name=\"backendType\"\r\n                type=\"select\"\r\n                label=\"Backend type\"\r\n                onSelect = {props.onSelectBackEndType}\r\n                submitCount={props.submitCount}\r\n            />\r\n        )\r\n    } else {\r\n        return(\r\n            <>\r\n            get old projects\r\n            <Field\r\n                component={AntSelect}\r\n                selectOptions={oldProjectsData}\r\n                name=\"backend_project\"\r\n                type=\"select\"\r\n                label=\"Choise backend project\"\r\n                onSelect = {props.onSelectBackEndType}\r\n                submitCount={props.submitCount}\r\n            />\r\n            </>\r\n        )\r\n    }\r\n    \r\n}\r\n\r\nexport default BackendForm","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Header\\MenuMobile.tsx",[],"C:\\OSPanel\\domains\\DeployProject\\src\\Components\\ToDo\\ToDoHeader\\ToDoHeaderContainer.tsx",[],"C:\\OSPanel\\domains\\DeployProject\\src\\Components\\ToDo\\TimeScale\\TimeScaleContainer.tsx",[],"C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Header\\MenuPopover.tsx",[],"C:\\OSPanel\\domains\\DeployProject\\src\\redux\\codeReducer.ts",[],"C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\ProjectsContainer.tsx",[],"C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\CurrentProject\\CurrentProjectContainer.tsx",["430","431"],"import {connect} from 'react-redux'\r\nimport CurrentProject from './CurrentProject'\r\nimport { AppStateType } from '../../../../redux/store'\r\nimport { isMobile } from 'react-device-detect'\r\nimport { getUsersList, updateUser, actions } from '../../../../redux/usersReducer'\r\nimport { getProjectList } from '../../../../redux/projectReducer'\r\nimport { UserType } from '../../../../redux/authReducer'\r\n// import CurrentUserMobile from './CurrentUserMobile'\r\n\r\ntype OwnCurrentProjectPropsType = {\r\n    match: any\r\n    location: any\r\n    history: any\r\n}\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    getProjectList: ()=>void,\r\n    updateUser: (values: UserType, userId: number)=>void,\r\n    // setUsersDataChanged: (isUsersDataChanged: boolean)=>void\r\n}\r\n\r\nexport type CurrenProjectPropsType = MapPropsType & MapDispatchPropsType & OwnCurrentProjectPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        projectsList: state.projects.projectList,\r\n        isProjectsLoaded: state.projects.isProjectLoaded\r\n        // errorMessage: state.task.errorMessage,\r\n        // isInterval: state.task.isInterval,\r\n        // taskSaveStatus: state.task.taskSaveStatus,\r\n        // settings:state.auth.viewSettings,\r\n        // appLocation: state.app.location,\r\n        // viewSettings: state.auth.viewSettings,\r\n        // isUsersDataChanged: state.users.isUsersDataChanged\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnCurrentProjectPropsType, AppStateType>(mapStateToProps, \r\n    {getProjectList, updateUser}) \r\n    (isMobile ? CurrentProject : CurrentProject)\r\n    \r\n\r\n","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\Projects.tsx",["432","433","434","435","436"],"import { List, Typography } from 'antd'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Link, useRouteMatch } from 'react-router-dom'\r\nimport { ProjectsPropsType } from './ProjectsContainer'\r\n\r\nexport type OwnProjectsPropsType = {}\r\n\r\nconst Projects: React.FC<ProjectsPropsType> = (props) => {\r\n    useEffect(() => {\r\n        if (!props.isProjectListLoaded) {\r\n            props.getProjectList()\r\n        }\r\n    }, [props.isProjectListLoaded, props.projectList])\r\n\r\n    const [projectList, setProjectList] = useState<Array<any>>()\r\n\r\n    let { url } = useRouteMatch();\r\n    \r\n    console.log(props)\r\n\r\n    return (\r\n        <>\r\n            <h4>Projects</h4>\r\n            <li>Add project</li>\r\n            <List\r\n                // header={<div>Header</div>}\r\n                // footer={<div>Footer</div>}\r\n                bordered\r\n                dataSource={props.projectList}\r\n                renderItem={item => (\r\n                    <List.Item\r\n                        actions={[<a key=\"list-loadmore-edit\">show</a>,]}\r\n                    >\r\n                         <Link to={url+'/'+item.id}>{item.name}</Link>\r\n                    </List.Item>\r\n                )}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Projects","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\CurrentProject\\CurrentProject.tsx",["437","438","439","440","441"],"import { Collapse, Spin, List, Pagination, Button, Drawer } from 'antd'\r\nimport React, { useEffect } from 'react'\r\nimport Backend from './Backend/BackendContainer'\r\nimport { CurrenProjectPropsType } from './CurrentProjectContainer'\r\n\r\nconst { Panel } = Collapse\r\n\r\nexport const getTargetProject = (projectList: Array<any>, userId: string): any => {\r\n    return projectList.filter((item: any) => item.id.toString() === userId)[0]\r\n}\r\n\r\nconst CurrentProject: React.FC<CurrenProjectPropsType> = (props) => {\r\n    useEffect(() => {\r\n        if (!props.isProjectsLoaded) {\r\n            props.getProjectList()\r\n        }\r\n    }, [props.isProjectsLoaded])\r\n\r\n    console.log(props)\r\n\r\n    const project = getTargetProject(props.projectsList, props.match.params.userId)\r\n\r\n    if (project) {\r\n        return (\r\n            <>\r\n                <h3>{project.name}</h3>\r\n                <Collapse defaultActiveKey={[]}>\r\n                    {project.backend_id ?\r\n                        <Panel header=\"Backend\" key=\"1\">\r\n                            Backend data to {project.backend_id}\r\n                            <Backend projectId={props.match.params.userId}/>\r\n                        </Panel>\r\n                        :\r\n                        null\r\n                    }\r\n                    {project.frontend_id ?\r\n                        <Panel header=\"Frontend\" key=\"2\">\r\n                            Frontend data\r\n                        </Panel>\r\n                        :\r\n                        null\r\n                    }\r\n                </Collapse>\r\n            </>\r\n        )\r\n    } else {\r\n        return <Spin key=\"spin\" size=\"large\" />\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default CurrentProject","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\BackendContainer.tsx",["442","443"],"import {connect} from 'react-redux'\r\nimport Backend from './Backend'\r\nimport { AppStateType } from '../../../../../redux/store'\r\nimport { isMobile } from 'react-device-detect'\r\n// import { getUsersList, updateUser, actions } from '../../../../../../redux/usersReducer'\r\nimport { getProjectList, getBackendData, updateBackend } from '../../../../../redux/projectReducer'\r\nimport { UserType } from '../../../../../redux/authReducer'\r\nimport { BackendType } from '../../../../../api/projectAPI'\r\n// import CurrentUserMobile from './CurrentUserMobile'\r\n\r\ntype OwnBackendPropsType = {\r\n    projectId: number\r\n}\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    getProjectList: ()=>void,\r\n    getBackendData: (projectid: number)=>void,\r\n    updateBackend: (values: BackendType, backendId: number) =>void,\r\n    // updateUser: (values: UserType, userId: number)=>void,\r\n    // setUsersDataChanged: (isUsersDataChanged: boolean)=>void\r\n}\r\n\r\nexport type BackendPropsType = MapPropsType & MapDispatchPropsType & OwnBackendPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        projectsList: state.projects.projectList,\r\n        isProjectsLoaded: state.projects.isProjectLoaded\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnBackendPropsType, AppStateType>(mapStateToProps, \r\n    {getProjectList, getBackendData, updateBackend}) \r\n    (Backend)\r\n    \r\n\r\n","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Backend.tsx",["444"],"import React, { useEffect } from 'react'\r\nimport {BackendPropsType} from './BackendContainer'\r\nimport {getTargetProject} from './../CurrentProject'\r\nimport { Collapse, Spin } from 'antd'\r\nimport { Formik } from 'formik'\r\nimport InstansesForm from './Instanses/InstansesForm'\r\nimport Models from './Models/ModelsContainer'\r\nimport Controllers from './Controllers/ControllersContainer'\r\n\r\nconst { Panel } = Collapse\r\n\r\nconst Backend: React.FC<BackendPropsType> = (props) => {\r\n    useEffect( ()=>{\r\n        props.getBackendData(1)\r\n    }, [])\r\n\r\n    const project = getTargetProject(props.projectsList, props.projectId.toString())\r\n\r\n    console.log('project', project)\r\n\r\n    const instansesInitialValues = {\r\n        name: project.backendData ? project.backendData.name : null,\r\n        url: project.backendData ? project.backendData.url : null,\r\n        ip: project.backendData ? project.backendData.ip : null,\r\n        login: project.backendData ? project.backendData.login : null,\r\n        password: project.backendData ? project.backendData.password : null,\r\n        folder: project.backendData ? project.backendData.folder : null,\r\n    }\r\n\r\n    // console.log(props)\r\n\r\n    const instansesHandleSubmit = (val: any) => {\r\n        console.log(project.backendData.id)\r\n        console.log(val)\r\n        props.updateBackend(val, project.backendData.id)\r\n    }\r\n\r\n    // console.log(project)\r\n\r\n    if (project.backendData) {\r\n        return(\r\n            <>\r\n                <h5>{project.backendData.name}</h5>\r\n                <Collapse defaultActiveKey={[]}>\r\n                    <Panel header=\"Instanses\" key=\"1\">\r\n                        <Formik\r\n                            initialValues={instansesInitialValues}\r\n                            onSubmit={instansesHandleSubmit}\r\n                        >\r\n                            {InstansesForm}\r\n                        </Formik>\r\n                    </Panel>\r\n                    <Panel header=\"Models\" key=\"2\">\r\n                        <Models backendId={project.backend_id}/>\r\n                    </Panel>\r\n                    <Panel header=\"Controllers\" key=\"3\">\r\n                        <Controllers backendId={project.backend_id}/>\r\n                    </Panel>\r\n                </Collapse>\r\n                <br/><br/><br/>\r\n                <li>Api</li>\r\n                <li>Seeders</li>\r\n                <li>Fasades</li>\r\n                <li>Middleware</li>\r\n                <li>Services</li>\r\n                <li>Events</li>\r\n                <li>Workers</li>\r\n            </>\r\n        )\r\n    } else {\r\n        return <Spin key=\"spin\" size=\"large\" />\r\n    }\r\n    \r\n}\r\n\r\nexport default Backend","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Instanses\\InstansesForm.tsx",[],"C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Models\\ModelsContainer.tsx",[],"C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Controllers\\ControllersContainer.tsx",[],"C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Models\\Models.tsx",["445","446","447","448","449","450"],"import { Button, Collapse, Empty  } from 'antd'\r\nimport Modal from 'antd/lib/modal/Modal'\r\nimport { Field, Form, Formik, FormikProps } from 'formik'\r\nimport React, { ReactNode, useEffect, useState } from 'react'\r\nimport { FieldType, ModelsType } from '../../../../../../api/projectAPI'\r\nimport { AntCheckbox, AntInput } from '../../../../../../utils/Formik/CreateAntField'\r\nimport { validateRequired } from '../../../../../../utils/Formik/ValidateFields'\r\nimport FieldList from './FieldListContainer'\r\nimport FieldForm from './FieldForm'\r\nimport { ModelsPropsType } from './ModelsContainer'\r\nimport ModelForm from './ModelForm'\r\nimport CodeModalContainer from '../../../../Code/CodeModalContainer'\r\nimport { stringify } from 'querystring'\r\n\r\nconst { Panel } = Collapse\r\n\r\nconst Models: React.FC<ModelsPropsType> = (props) => {\r\n    useEffect( ()=>{\r\n        props.getModelsList(props.backendId)\r\n    }, [])\r\n\r\n    const [isModalVisible, setIsModalVisible] = useState(false)\r\n    const [isCodeVisible, setIsCodeVisible] = useState(false)\r\n\r\n    const addModel = () => {\r\n        console.log('addModel')\r\n        setIsModalVisible(!isModalVisible)\r\n    }\r\n\r\n    const handleOk = () => {setIsModalVisible(!isModalVisible)}\r\n    const handleCancel = () => {setIsModalVisible(!isModalVisible)}\r\n\r\n    const handleSubmit = (vals: any) => {\r\n        console.log(vals)\r\n        console.log(props)\r\n        props.createModel({\r\n            ...vals,\r\n            backend_id: props.backendId\r\n        })\r\n    }\r\n\r\n    const callback = (key:any) => {\r\n        console.log(key)\r\n        console.log(props.modelsList)\r\n        console.log(props.modelsList.filter(item => item.id === Number(key[0]))[0])\r\n        const target = props.modelsList.filter(item => item.id === Number(key[0]))[0]\r\n        if (target) {\r\n            props.setCodeTarget(\r\n                target.name,\r\n                {\r\n                    db: target.db, \r\n                    soft_delete: target.soft_delete\r\n                }\r\n            )\r\n        }\r\n        \r\n    }\r\n\r\n    return(\r\n        <>\r\n            <div className=\"w-100 d-flex flex-row-reverse\">\r\n                <Button className=\"mr-4 ml-auto mb-3\" type=\"primary\" onClick={addModel}>Add Model</Button>\r\n            </div>\r\n\r\n            <Collapse defaultActiveKey={[]} onChange={callback}>\r\n                {\r\n                    props.modelsList.map(item => {\r\n                        return(\r\n                            <Panel header={item.name} key={item.id ? item.id.toString() : 'null'}>\r\n                                <ModelFormItem modelItem={item} updateModel={props.updateModel} />\r\n                            </Panel>\r\n                        )\r\n                    })\r\n                }\r\n            </Collapse>\r\n            <Modal title=\"Create new Model\" visible={isModalVisible} onOk={handleOk} onCancel={handleCancel}>\r\n                <Formik\r\n                    // initialValues={initialModalValues}\r\n                    initialValues={{}}\r\n                    onSubmit={handleSubmit}\r\n                    enableReinitialize={true}\r\n                >\r\n                    {ModelForm}\r\n                </Formik>\r\n            </Modal>\r\n\r\n            <CodeModalContainer />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Models\r\n\r\ntype ModelFormItemPropsType = {\r\n    modelItem: ModelsType,\r\n    updateModel: (values: ModelsType, modelId: number) => void,\r\n}\r\n\r\nconst ModelFormItem: React.FC<ModelFormItemPropsType> = (props) => {\r\n    console.log(props)\r\n    let fields: Array<FieldType>\r\n    if (Array.isArray(props.modelItem.fields)) {\r\n        fields = props.modelItem.fields\r\n    } else {\r\n        fields = JSON.parse(props.modelItem.fields)\r\n    }\r\n\r\n    type fieldsDataType = {[name: string]: string}\r\n    let fieldsdata: Array<FieldType> = []\r\n    let fieldInit:fieldsDataType = {}\r\n    if (fields) {\r\n        for (let index = 0; index < fields.length; index++) {\r\n            const field = fields[index];\r\n            fieldsdata.push(field)\r\n            fieldInit['field_'+field.name] = field.type\r\n        }\r\n    }\r\n\r\n    const handleSubmit = (formValues:any) => {\r\n        const oldValue = {...props.modelItem, fields: fieldsdata, ...fieldInit}\r\n        console.log('formValues: ', formValues)\r\n\r\n        // compere model\r\n        let ismodelChange = false\r\n        if ( \r\n            oldValue.name !== formValues.name\r\n            || oldValue.db !== formValues.db\r\n            || oldValue.soft_delete !== formValues.soft_delete\r\n            ) {\r\n            ismodelChange = true\r\n        }\r\n\r\n        console.log(props.modelItem)\r\n\r\n        const newFieldData: ModelsType = {\r\n            // ...props.modelItem,\r\n            fields: JSON.stringify(formValues.fields),\r\n            name: formValues.name,\r\n            backend_id: props.modelItem.backend_id,\r\n            id: props.modelItem.id,\r\n            db: formValues.db,\r\n            soft_delete: formValues.soft_delete\r\n        }\r\n\r\n        console.log(newFieldData)\r\n        props.updateModel(newFieldData, props.modelItem.id ? props.modelItem.id : 0)\r\n    }\r\n\r\n    console.log({...props.modelItem, fields: fieldsdata, ...fieldInit})\r\n    return(\r\n        <Formik\r\n            initialValues={ {...props.modelItem, fields: fieldsdata, ...fieldInit} }\r\n            onSubmit={handleSubmit}\r\n        >\r\n            {ModelView}\r\n        </Formik>\r\n    )\r\n}\r\n\r\nconst ModelView: ((props: FormikProps<{}>) => ReactNode) = (props) => {\r\n    const [initialFieldValues, setInitialFieldValues] = useState(props.initialValues)\r\n\r\n    type InitialModalValuesType = {\r\n        newFieldName: string,\r\n        newFieldType: string,\r\n        isNulleble: boolean,\r\n        isPrimary: boolean,\r\n        isNew: boolean,\r\n        id?: number,\r\n        fieldParam?: string,\r\n    }\r\n    const emptyInitialModalValues: InitialModalValuesType = {\r\n        newFieldName: '',\r\n        newFieldType: '',\r\n        isNulleble: false,\r\n        isPrimary: false,\r\n        isNew: true,\r\n        fieldParam: '',\r\n    }\r\n\r\n    const [initialModalValues, setInitialModalValues] = useState<InitialModalValuesType>(emptyInitialModalValues)\r\n    const [initialValues2 , setInitialValues2] = useState(props.initialValues)\r\n\r\n    useEffect( ()=>{\r\n    }, [initialModalValues])\r\n\r\n    const onChange = (val:any) => {\r\n        console.log('onChange in Models')\r\n        setIsDataChanged(true)\r\n    }\r\n\r\n    const openModalToAddField = (target: any | null) => {\r\n        console.log('openModalToAddField', target)\r\n\r\n        if (!target.isNew) {\r\n            console.log('ОБНУЛЯЕМ ФОРМУ', target)\r\n            setInitialModalValues({\r\n                newFieldName: target.fieldName,\r\n                newFieldType: target.fieldType,\r\n                isNulleble: target.isNulleble,\r\n                isPrimary: target.isPrimary,\r\n                isNew: false,\r\n                id: target.fieldId,\r\n                fieldParam: target.fieldParam\r\n            })\r\n        } else {\r\n            setInitialModalValues({...emptyInitialModalValues})\r\n            console.log('СОЗДАЕМ НОВЫЙ ФИЛД', initialModalValues)\r\n            \r\n        }\r\n        \r\n        setIsModalVisible(true)\r\n    }\r\n\r\n    const [isDataChanged, setIsDataChanged] = useState(false)\r\n\r\n    const [isModalVisible, setIsModalVisible] = useState(false)\r\n\r\n    const handleOk = () => {\r\n        console.log('handleOk')\r\n        setIsModalVisible(false)\r\n    }\r\n\r\n    const handleCancel = () => {\r\n        console.log('handleCancel')\r\n        setInitialModalValues(emptyInitialModalValues)\r\n        console.log(initialModalValues)\r\n        setIsModalVisible(false)\r\n    }\r\n\r\n    const deleteField = (fieldId: number) => {\r\n        console.log('deleteField', fieldId)\r\n        console.log(props)\r\n        \r\n        // @ts-ignore\r\n        const fields = initialFieldValues.fields.filter( field => field.id !== fieldId ) \r\n        console.log(fields)\r\n        setInitialValues2( {...props.initialValues, fields: fields} )\r\n        setInitialFieldValues( {...initialFieldValues, fields: fields} )\r\n        props.setValues({\r\n            ...props.values,\r\n            fields: fields\r\n        })\r\n        props.handleSubmit()\r\n    }\r\n\r\n    const handleSubmit = (modalFieldFormValues:any, actions: any) => {\r\n        console.log('handleSubmit', modalFieldFormValues)\r\n        if (!modalFieldFormValues.isNew) {\r\n            let isUpdate = false\r\n            // @ts-ignore\r\n            const newFields = initialFieldValues.fields.map( (item) => {\r\n                if (modalFieldFormValues.id === item.id) {\r\n                    if (item.name !== modalFieldFormValues.newFieldName || \r\n                        item.type !== modalFieldFormValues.newFieldType ||\r\n                        item.isNulleble !== modalFieldFormValues.isNulleble ||\r\n                        item.isPrimary !== modalFieldFormValues.isPrimary ||\r\n                        item.fieldParam !== modalFieldFormValues.fieldParam\r\n                        ) {\r\n                        isUpdate = true\r\n                        return {\r\n                            description: \"\",\r\n                            id: modalFieldFormValues.id,\r\n                            name: modalFieldFormValues.newFieldName,\r\n                            isPrimary: modalFieldFormValues.isPrimary,\r\n                            type: modalFieldFormValues.newFieldType,\r\n                            isNulleble: modalFieldFormValues.isNulleble,\r\n                            fieldParam: modalFieldFormValues.fieldParam\r\n                        }\r\n                    } else {\r\n                        return item\r\n                    }\r\n                }\r\n                return item\r\n            } )\r\n\r\n            if (isUpdate) {\r\n                setInitialValues2( {...props.initialValues, fields: newFields} )\r\n                setInitialFieldValues( {...initialFieldValues, fields: newFields} )\r\n                console.log('NEED DML!!!!', props)\r\n                props.setValues({\r\n                    ...props.values,\r\n                    fields: newFields\r\n                })\r\n                props.handleSubmit()\r\n            }\r\n        } else {\r\n            console.log('NEW FIELD')\r\n            // @ts-ignore\r\n            let newFields = initialFieldValues.fields\r\n            newFields.push({               \r\n                // @ts-ignore\r\n                id: props.initialValues.fields.length+1,\r\n                name: modalFieldFormValues.newFieldName,\r\n                isPrimary: modalFieldFormValues.isPrimary,\r\n                type: modalFieldFormValues.newFieldType,\r\n                isNulleble: modalFieldFormValues.isNulleble,\r\n                fieldParam: modalFieldFormValues.fieldParam,\r\n                description: \"\",\r\n            })\r\n            setInitialValues2( {...props.initialValues, fields: newFields} )\r\n\r\n            console.log('NEED DML!!!!', props)\r\n            props.setValues({\r\n                ...props.values,\r\n                fields: newFields\r\n            })\r\n            props.handleSubmit()\r\n        }\r\n        actions.resetForm()\r\n        setInitialModalValues(modalFieldFormValues)\r\n    }\r\n\r\n    return(\r\n        <>\r\n        <Form\r\n            className=\"form-container mt-2\"\r\n            onSubmit={props.handleSubmit}\r\n        >\r\n            <Field\r\n                component={AntInput}\r\n                name=\"name\"\r\n                type=\"text\"\r\n                label=\"Name\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n                onChange={onChange}\r\n            />\r\n            <Field\r\n                component={AntInput}\r\n                name=\"folder\"\r\n                type=\"text\"\r\n                label=\"Folder\"\r\n                submitCount={props.submitCount}\r\n                onChange={onChange}\r\n            />\r\n\r\n            <Field\r\n                component={AntCheckbox}\r\n                name=\"soft_delete\"\r\n                type=\"checkbox\"\r\n                label=\"Soft delete\"\r\n                onChange={onChange}\r\n                submitCount={props.submitCount}\r\n            />\r\n\r\n            <Field\r\n                component={AntCheckbox}\r\n                name=\"db\"\r\n                type=\"checkbox\"\r\n                label=\"Use DB\"\r\n                onChange={onChange}\r\n                submitCount={props.submitCount}\r\n            />\r\n\r\n            {isDataChanged ?\r\n                <div className=\"submit-container\">\r\n                    <button className=\"ant-btn ant-btn-primary\" type=\"submit\">\r\n                        Save\r\n                    </button>\r\n                </div>\r\n            : null}\r\n\r\n            <div className=\"w-100 d-flex flex-row mt-2 mb-2\">\r\n                <h5>Field List:</h5>\r\n                {/* <Button type=\"primary\" className=\"mr-1 ml-auto\" onClick={showCode} >Code</Button> */}\r\n                <Button className=\"mr-4 ml-auto\" type=\"primary\" onClick={()=>{openModalToAddField({isNew: true})}}>\r\n                    Add Field\r\n                </Button>\r\n            </div>\r\n            \r\n            <FieldList \r\n                fields={\r\n                // @ts-ignore\r\n                initialValues2.fields\r\n                }\r\n                openModalToAddField={openModalToAddField}\r\n                deleteField={deleteField}\r\n                targetName='user'\r\n                targetData={[]}\r\n            />\r\n\r\n            <div className=\"w-100 d-flex flex-row mt-2 mb-2\">\r\n                <h5>Methods:</h5><Button className=\"mr-4 ml-auto\" type=\"primary\">Add method</Button>\r\n            </div>\r\n        </Form>\r\n\r\n        <Modal title=\"New Field Form\" visible={isModalVisible} onOk={handleOk} onCancel={handleCancel}>\r\n            <Formik\r\n                initialValues={initialModalValues}\r\n                onSubmit={handleSubmit}\r\n                enableReinitialize={true}\r\n            >\r\n                {FieldForm}\r\n            </Formik>\r\n        </Modal>\r\n\r\n        </>\r\n    )\r\n}","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Controllers\\Controllers.tsx",["451","452","453","454"],"import { Button, Collapse } from 'antd'\r\nimport Modal from 'antd/lib/modal/Modal'\r\nimport { Field, Form, Formik, FormikProps } from 'formik'\r\nimport React, { ReactNode, useEffect, useState } from 'react'\r\nimport { ControllersPropsType } from './ControllersContainer'\r\nimport ControllerForm from './ControllerForm'\r\nimport { AntCheckbox, AntSelect } from '../../../../../../utils/Formik/CreateAntField'\r\nimport { ControllersType, ModelsType } from '../../../../../../api/projectAPI'\r\nimport {SelectOptionType} from './../../../../../../Types/types'\r\nimport { initialValues } from '../../../../../ToDo/ToDoMobile'\r\nimport Item from 'antd/lib/list/Item'\r\nimport ControllerMethods from './ControllerMethodsContainer'\r\n\r\nconst { Panel } = Collapse\r\n\r\nconst Controllers: React.FC<ControllersPropsType> = (props) => {\r\n    useEffect(() => {\r\n        props.getControllersList(props.backendId)\r\n\r\n        if (props.modelsList.length === 0) {\r\n            console.log('getModelsList')\r\n            props.getModelsList(props.backendId)\r\n        }\r\n\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n    }, [props.controllersList])\r\n\r\n    const [isModalVisible, setIsModalVisible] = useState(false)\r\n\r\n    if (props.modelsList.length > 0) {\r\n        const modelsListOptions = props.modelsList.map( (item: ModelsType) => {\r\n            return ( {\r\n                name: item.name,\r\n                value: item.id\r\n            } )\r\n        })\r\n    }\r\n    \r\n\r\n    const addController = () => {\r\n        setIsModalVisible(true)\r\n    }\r\n\r\n    const handleOk = () => { setIsModalVisible(!isModalVisible) }\r\n    const handleCancel = () => { setIsModalVisible(!isModalVisible) }\r\n\r\n    const handleSubmit = (vals: any) => {\r\n        console.log(vals)\r\n        console.log(props)\r\n\r\n        props.createController({\r\n            ...vals,\r\n            backend_id: props.backendId\r\n        })\r\n    }\r\n\r\n    console.log(props)\r\n\r\n    if (props.controllersList.length > 0) {\r\n        return (\r\n            <div>\r\n                <div className=\"w-100 d-flex flex-row-reverse\">\r\n                    <Button className=\"mr-4 ml-auto mb-3\" type=\"primary\" onClick={addController}>Add Controller</Button>\r\n                </div>\r\n\r\n                <Collapse defaultActiveKey={[]}>\r\n                    {props.controllersList.map((item: ControllersType) => {\r\n                        return (\r\n                            <Panel \r\n                                key={item.name}\r\n                                header={item.name} \r\n                                // extra={[<div key={'any_'+item.name}>any</div>]}\r\n                            >\r\n                                <ControllerItem item={item} modelsList={props.modelsList} updateController={props.updateController}/>\r\n                            </Panel>\r\n                        )\r\n                    })}\r\n                </Collapse>\r\n\r\n                <Modal title=\"Create new Controller\" visible={isModalVisible} onOk={handleOk} onCancel={handleCancel}>\r\n                    <Formik\r\n                        // initialValues={initialModalValues}\r\n                        initialValues={{}}\r\n                        onSubmit={handleSubmit}\r\n                        enableReinitialize={true}\r\n                    >\r\n                        {ControllerForm}\r\n                    </Formik>\r\n                </Modal>\r\n            </div>\r\n        )\r\n    } else {\r\n        return <div>No Data</div>\r\n    }\r\n}\r\n\r\nexport default Controllers\r\n\r\ntype ControllerItemType = {\r\n    item: ControllersType,\r\n    modelsList: Array<ModelsType>,\r\n    updateController: (values: ControllersType, controllerId: number) => void\r\n}\r\n\r\nconst ControllerItem:React.FC<ControllerItemType> = (props) => {\r\n    console.log(props.item.models)\r\n\r\n    type initialFormValuesType = {\r\n        isResurce: boolean,\r\n        modelsOptions: Array<SelectOptionType>,\r\n        models: Array<number>\r\n    }\r\n\r\n    const getOptions = ():Array<SelectOptionType> => {\r\n        let options:Array<SelectOptionType> = []\r\n        for (let index = 0; index < props.modelsList.length; index++) {\r\n            const element = props.modelsList[index];\r\n            options.push({\r\n                name: element.name,\r\n                value: element.id ? Number(element.id) : 0\r\n            })\r\n        }\r\n        return options\r\n    }\r\n\r\n    const initialFormValues: initialFormValuesType = {\r\n        isResurce: props.item.isResource,\r\n        modelsOptions: getOptions(),\r\n        models: props.item.models.length>0 ? props.item.models.map( (i: ModelsType) => i.id ) : []\r\n    }\r\n\r\n    console.log(props)\r\n\r\n    const onControllerInstanseSubmit = (values: any) => {\r\n        console.log(values)\r\n\r\n        props.updateController({\r\n            models: values.models,\r\n            backend_id: props.item.backend_id,\r\n            folder: props.item.folder,\r\n            id: props.item.id,\r\n            isResource: values.isResurce,\r\n            model_id: props.item.model_id,\r\n            name: props.item.name,\r\n        }, props.item.id)\r\n    }\r\n\r\n    return(\r\n    <div key={props.item.name}>\r\n        <h4>{props.item.name}</h4>\r\n        <Collapse defaultActiveKey={[]} ghost>\r\n            <Panel header=\"Instanses\" key=\"instanse\">\r\n                <Formik\r\n                    initialValues={initialFormValues}\r\n                    // initialValues={{}}\r\n                    onSubmit={onControllerInstanseSubmit}\r\n                    enableReinitialize={true}\r\n                >\r\n                    {ControllerInstansesForm}\r\n                </Formik>\r\n                \r\n            </Panel>\r\n            <Panel header=\"Methods\" key=\"methods\">\r\n                <ControllerMethods controllerData={props.item}/>\r\n            </Panel>\r\n            <Panel header=\"Code\" key=\"code\">\r\n\r\n            </Panel>\r\n        </Collapse>\r\n    </div>\r\n    )\r\n}\r\n\r\nconst ControllerInstansesForm: ((props: FormikProps<{}>) => ReactNode) = (props) => {\r\n\r\n    // console.log(props.initialValues)\r\n\r\n    return (\r\n        <Form\r\n            className=\"form-container\"\r\n            onSubmit={props.handleSubmit}\r\n        >\r\n            <Field\r\n                component={AntCheckbox}\r\n                name=\"isResurce\"\r\n                type=\"checkbox\"\r\n                label=\"isResurce\"\r\n                submitCount={props.submitCount}\r\n                // onClick={submitBackEnd}\r\n                // onSelect={submitBackEnd}\r\n            />\r\n\r\n            <Field\r\n                component={AntSelect}\r\n                name=\"models\"\r\n                type=\"select\"\r\n                label=\"Including Models\"\r\n                mode=\"multiple\"\r\n                selectOptions={\r\n                    // @ts-ignore\r\n                    props.initialValues.modelsOptions\r\n                }\r\n                // onSelect = {onSelect}\r\n            />\r\n\r\n            <div className=\"submit-container\">\r\n                <button className=\"ant-btn ant-btn-primary\" type=\"submit\">\r\n                    Save\r\n                </button>\r\n            </div>\r\n\r\n        </Form>\r\n    )\r\n}\r\n","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Models\\FieldListContainer.tsx",[],"C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Models\\ModelForm.tsx",["455","456","457","458","459"],"import { Form, Field, FormikProps } from 'formik'\r\nimport React, { ReactNode, useState, useEffect } from 'react'\r\nimport { AntCheckbox, AntInput, AntSelect } from '../../../../../../utils/Formik/CreateAntField'\r\nimport { validateRequired } from '../../../../../../utils/Formik/ValidateFields'\r\nimport {SelectOptionType} from '../../../../../../Types/types'\r\n// import { AntInput, AntSelect, AntTextArea, AntTimePicker } from '../../../utils/Formik/CreateAntField'\r\n// import { validateRequired } from '../../../utils/Formik/ValidateFields'\r\n// import ProjectForm from './Project/ProjectForm'\r\n\r\n\r\nconst ModelForm: ((props: FormikProps<{}>) => ReactNode) = (props) => {\r\n    return (\r\n        <Form\r\n            className=\"form-container\"\r\n            onSubmit={props.handleSubmit}\r\n        >\r\n            <Field\r\n                component={AntInput}\r\n                name=\"name\"\r\n                type=\"text\"\r\n                label=\"Model name\"\r\n                validate={validateRequired}\r\n                hasFeedback\r\n                // onChange={onChangeNewFieldName}\r\n            />\r\n            <Field\r\n                component={AntInput}\r\n                name=\"folder\"\r\n                type=\"text\"\r\n                label=\"Model folder\"\r\n                // validate={validateRequired}\r\n                // hasFeedback\r\n                // onChange={onChangeNewFieldName}\r\n            />\r\n            <div className=\"submit-container\">\r\n                <button className=\"ant-btn ant-btn-primary\" type=\"submit\">\r\n                    Save1\r\n                </button>\r\n            </div>\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default ModelForm","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Models\\FieldForm.tsx",[],"C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Controllers\\ControllerForm.tsx",["460","461","462","463","464","465"],"import { Form, Field, FormikProps } from 'formik'\r\nimport React, { ReactNode, useState, useEffect } from 'react'\r\nimport { AntCheckbox, AntInput, AntSelect } from '../../../../../../utils/Formik/CreateAntField'\r\nimport { validateRequired } from '../../../../../../utils/Formik/ValidateFields'\r\nimport {SelectOptionType} from '../../../../../../Types/types'\r\n\r\nconst ControllerForm: ((props: FormikProps<{}>) => ReactNode) = (props) => {\r\n    return (\r\n        <Form\r\n            className=\"form-container\"\r\n            onSubmit={props.handleSubmit}\r\n        >\r\n            <Field\r\n                component={AntInput}\r\n                name=\"name\"\r\n                type=\"text\"\r\n                label=\"Controller name\"\r\n                validate={validateRequired}\r\n                hasFeedback\r\n            />\r\n            <Field\r\n                component={AntInput}\r\n                name=\"folder\"\r\n                type=\"text\"\r\n                label=\"Model folder\"\r\n            />\r\n\r\n            {/* <Field\r\n                component={AntSelect}\r\n                name=\"models\"\r\n                type=\"select\"\r\n                label=\"Including Models\"\r\n                mode=\"multiple\"\r\n                selectOptions={modelsListOptions}\r\n                // onSelect = {onSelect}\r\n            /> */}\r\n\r\n            <div className=\"submit-container\">\r\n                <button className=\"ant-btn ant-btn-primary\" type=\"submit\">\r\n                    Save\r\n                </button>\r\n            </div>\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default ControllerForm\r\n\r\nconst modelsListOptions = [\r\n    {\r\n        name: 'Old',\r\n        value: 1\r\n    },\r\n    {\r\n        name: 'New',\r\n        value: 2\r\n    },\r\n    {\r\n        name: 'Load From SRC',\r\n        value: 3\r\n    },\r\n]","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Development\\Code\\CodeModalContainer.tsx",[],"C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Models\\FieldList.tsx",[],"C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Development\\Code\\CodeModal.tsx",["466","467"],"import {Modal} from 'antd'\r\nimport React, {useState, useEffect} from 'react'\r\nimport { CodeModalPropsType } from './CodeModalContainer'\r\nimport ModelCodeContainer from './Model/ModelCodeContainer'\r\n\r\nconst CodeModal: React.FC<CodeModalPropsType> = (props) => {\r\n    const onClose = () => {\r\n        props.setShowCodeModal(false, props.codeType, props.codeRowsArray, props.codeTargetName, [])\r\n    }\r\n\r\n    const getTargetComponennt = () => {\r\n        switch (props.codeType) {\r\n            case 'model':\r\n                return <ModelCodeContainer />\r\n        \r\n            default:\r\n                return <div>No data</div>\r\n        }\r\n    }\r\n\r\n    return(\r\n        <Modal title=\"Code modal\" visible={props.isModalVisible} onOk={onClose} onCancel={onClose} width={1000}>\r\n            {getTargetComponennt()}\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default CodeModal\r\n\r\n","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Development\\Code\\Model\\ModelCodeContainer.tsx",[],"C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Development\\Code\\Model\\ModelCode.tsx",["468"],"import React, {useEffect} from 'react'\r\nimport { FieldType } from '../../../../api/projectAPI'\r\nimport {ModelCodePropsType} from './ModelCodeContainer'\r\n\r\nconst ModelCode: React.FC<ModelCodePropsType> = (props) => {\r\n    useEffect( ()=> {\r\n        console.log('props.codeTargetName changed')\r\n    },[props.codeTargetName])\r\n\r\n    console.log(props)\r\n\r\n    // str[0].toUpperCase() + str.slice(1)\r\n    return(\r\n        <div>\r\n            <li>!!!table name</li>\r\n            <li>Field type</li>\r\n            <li>namespace</li>\r\n\r\n            <h5>ModelCode:</h5>\r\n\r\n            <code>{'<?php'}</code>\r\n            <br/><br/>\r\n            <code>{'namespace App;'}</code>\r\n            <br/><br/>\r\n            <code>{'use Illuminate\\\\Database\\\\Eloquent\\\\Model;'}</code><br/>\r\n            {props.codeData.soft_delete ? \r\n                <><code>{'use Illuminate\\\\Database\\\\Eloquent\\\\SoftDeletes;'}</code><br/></>\r\n            :\r\n                null\r\n            }\r\n            {props.codeData.db ? \r\n                <><code>{'use Illuminate\\\\Support\\\\Facades\\\\DB;'}</code><br/></>\r\n            :\r\n                null\r\n            }\r\n            \r\n            \r\n            <br/>\r\n            <code>{'class '+props.codeTargetName[0].toUpperCase()+props.codeTargetName.slice(1)+' extends Model'}</code><br/>\r\n            \r\n            <code>{'{'}</code><br/>\r\n\r\n            {props.codeData.soft_delete ? \r\n                <><code>{tab(1,'use SoftDeletes;')}</code><br/><br/></>\r\n            :\r\n                null\r\n            }\r\n            \r\n            {/* 'protected $table = 'Models_instanses';' */}\r\n            <code>{tab(1,'protected $table = \"'+props.codeTargetName+'\";')}</code><br/>\r\n\r\n            <Fillable codeRowsArray={props.codeRowsArray}/>\r\n\r\n            <Hidden codeRowsArray={props.codeRowsArray}/>\r\n\r\n            <code>{'}'}</code><br/>\r\n\r\n            {/* {props.codeRowsArray.map( (item: any) => {\r\n                return(\r\n                    <div>\r\n                        {item.name}\r\n                    </div>\r\n                )\r\n            })} */}\r\n\r\n            <h5>Migration code:</h5>\r\n\r\n            <code>{'<?php'}</code>\r\n            <br/><br/>\r\n            <code>{'use Illuminate\\\\Database\\\\Migrations\\\\Migration;'}</code><br/>\r\n            <code>{'use Illuminate\\\\Database\\\\Schema\\\\Blueprint;'}</code><br/>\r\n            <code>{'use Illuminate\\\\Support\\\\Facades\\\\Schema;'}</code><br/>\r\n            <br/>\r\n            <code>{'class Create'+props.codeTargetName[0].toUpperCase()+props.codeTargetName.slice(1)+'Table extends Migration'}</code><br/>\r\n            <code>{'{'}</code><br/>\r\n            <code>{tab(1,'public function up()')}</code><br/>\r\n            <code>{tab(1,'{')}</code><br/>\r\n            <code>{tab(2,'Schema::create(\"'+props.codeTargetName+'\", function (Blueprint $table) {')}</code><br/>\r\n\r\n                {props.codeRowsArray.map( (item: any) => {\r\n                    const isNulleble = item.isNulleble ? '->nullable()' : ''\r\n                    return(\r\n                        <><code>{tab(3,'$table->'+getFieldtype(item)+'(\"'+item.name+'\")'+isNulleble+';')}</code><br/></>\r\n                    )\r\n                })}\r\n                {props.codeData.soft_delete ? \r\n                <><code>{tab(3,'$table->softDeletes();')}</code><br/></>\r\n                : null}\r\n                <><code>{tab(3,'$table->timestamps();')}</code><br/></>\r\n\r\n            <code>{tab(2,'});')}</code><br/>\r\n            <code>{tab(1,'}')}</code><br/>\r\n\r\n            <code>{tab(1,'}')}</code><br/>\r\n\r\n            <br/>\r\n            <code>{tab(1,'public function down()')}</code><br/>\r\n            <code>{tab(1,'{')}</code><br/>\r\n            <code>{tab(2,'Schema::dropIfExists(\"'+props.codeTargetName+'\");')}</code><br/>\r\n            <code>{tab(1,'}')}</code><br/>\r\n            <code>{'}'}</code><br/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ModelCode\r\n\r\ntype FillableType = {\r\n    codeRowsArray: Array<any>\r\n}\r\n\r\nconst Fillable: React.FC<any> = (props) => {\r\n    const fields: Array<any> = props.codeRowsArray.filter( (item: any) => item.fieldParam === 'fillable')\r\n    if (fields.length > 0) {\r\n        return(\r\n            <div>\r\n                <br/>\r\n                <code>{tab(1,'protected $fillable = [')}</code><br/>\r\n                \r\n                {fields.map( (item: any) => {\r\n                    return(\r\n                        <div key={item.name}>\r\n                        <>&nbsp;&nbsp;&nbsp;&nbsp;</>\r\n                        <>&nbsp;&nbsp;&nbsp;&nbsp;</>\r\n                        <>&nbsp;&nbsp;&nbsp;&nbsp;</>\r\n                        <>&nbsp;&nbsp;&nbsp;&nbsp;</>\r\n                        <code>{'\"'+item.name+'\", '}</code><br/>\r\n                        </div>\r\n                    )\r\n                })}\r\n                \r\n                <code>{tab(1,'];')}</code><br/>\r\n            </div>\r\n        )\r\n    } else {\r\n        return <></>\r\n    }\r\n}\r\n\r\nconst Hidden: React.FC<any> = (props) => {\r\n    const fields: Array<any> = props.codeRowsArray.filter( (item: any) => item.fieldParam === 'hidden')\r\n    if (fields.length > 0) {\r\n        return(\r\n            <>\r\n            <br/>\r\n            <code>{ tab(1,'protected $hidden = [') }</code><br/>\r\n            \r\n            {fields.map( (item: any) => {\r\n                return(\r\n                    <>\r\n                    <>&nbsp;&nbsp;&nbsp;&nbsp;</>\r\n                    <>&nbsp;&nbsp;&nbsp;&nbsp;</>\r\n                    <>&nbsp;&nbsp;&nbsp;&nbsp;</>\r\n                    <>&nbsp;&nbsp;&nbsp;&nbsp;</>\r\n                    <code>{'\"'+item.name+'\", '}</code><br/></>\r\n                )\r\n            })}\r\n            \r\n            <code>{tab(1,'];')}</code><br/>\r\n            </>\r\n        )\r\n    } else {\r\n        return <></>\r\n    }\r\n}\r\n\r\nexport const tab = (count: number, text?: string) => {\r\n    const getTabs = ():Array<JSX.Element> => {\r\n        let i = 1\r\n        let tabs: Array<JSX.Element> = []\r\n        while (i<=count) {\r\n            i++\r\n            tabs.push(\r\n                <span key={i}>\r\n                    &nbsp;&nbsp;&nbsp;&nbsp;\r\n                </span>\r\n            )\r\n        }\r\n        return tabs\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {getTabs()}\r\n            {text}\r\n        </>\r\n    )\r\n}\r\n\r\nconst getFieldtype = (field: FieldType ) => {\r\n    console.log(field.name, '=',field.type)\r\n    if (field.isPrimary) {\r\n        return 'bigIncrements'\r\n    } else {\r\n        switch (field.type) {\r\n            case 'bigint':\r\n                return 'bigInteger'\r\n    \r\n            case 'varchar':\r\n                return 'string'\r\n    \r\n            default:\r\n                return field.type\r\n        }\r\n    }\r\n}","C:\\OSPanel\\domains\\DeployProject\\src\\api\\ControllerMethodsAPI.ts",[],"C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Controllers\\ControllerMethodsContainer.tsx",["469","470"],"import {connect} from 'react-redux'\r\nimport ControllerMethods from './ControllerMethods'\r\nimport { AppStateType } from '../../../../../../redux/store'\r\nimport { getControllersList, createController, updateControllerMethodsList, getControllerMethodsList } from '../../../../../../redux/projectReducer'\r\nimport { ControllersType } from '../../../../../../api/projectAPI'\r\n// import { ModelsType } from '../../../.././../api/projectAPI'\r\n\r\ntype OwnControllerMethodsPropsType = {\r\n    controllerData: ControllersType\r\n}\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    getControllerMethodsList: ()=>void,\r\n    updateControllerMethodsList: (values: any, controllerMethodId: number)=>void,\r\n    // getControllersList: (backendId: number) => void\r\n    // createController: (values: any) => void,\r\n    // getModelsList: (backendId: number) => void,\r\n}\r\n\r\nexport type ControllerMethodsPropsType = MapPropsType & MapDispatchPropsType & OwnControllerMethodsPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        controllersList: state.projects.controllersList,\r\n        modelsList: state.projects.modelsList,\r\n        controllerMethodsList: state.projects.controllerMethodsList\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnControllerMethodsPropsType, AppStateType>(mapStateToProps, \r\n    {getControllerMethodsList, updateControllerMethodsList}) \r\n    (ControllerMethods)\r\n    \r\n\r\n","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Controllers\\ControllerMethods.tsx",["471","472","473","474"],"C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Controllers\\ControllerMethodsItem\\ControllerMethodsItem.tsx",[],"C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Controllers\\ControllerMethodsForm\\ControllerMethodsForm.tsx",["475","476","477","478","479","480","481"],"C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Controllers\\ControllerMethodsForm\\RequestItem.tsx",["482"],"import { Input, TreeSelect } from 'antd'\r\nimport { TreeNode } from 'rc-tree-select'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { RequestType } from './ControllerMethodsForm'\r\n\r\ntype RequestItemPropsType = {\r\n    item: RequestType,\r\n    initialValues: any,\r\n    onRowChange: (id: number, type: string, name: string)=>void\r\n}\r\n\r\nconst RequestItem: React.FC<RequestItemPropsType> = (props) => {\r\n    const [value, setValue] = useState<RequestType>(props.item)\r\n\r\n    useEffect( () => {\r\n        setValue(props.item)\r\n    },[props.initialValues])\r\n\r\n    const onRequestTypeChange = (typeValue: string, labelList: React.ReactNode[], extra: any) => {\r\n        setValue({...value, type: typeValue})\r\n        if (typeValue) {\r\n            props.onRowChange(props.item.id, typeValue, props.item.name)\r\n        } else {\r\n            props.onRowChange(props.item.id, '', props.item.name)\r\n        }\r\n        \r\n    }\r\n\r\n    const onRequestNameChange = (event: any) => {\r\n        setValue({...value, name: event.target.value})\r\n        props.onRowChange(props.item.id, props.item.type, event.target.value)\r\n    }\r\n\r\n    return (\r\n        <div key={props.item.id} className=\"row mt-1\">\r\n            <div className=\"ant-col ant-form-item-label mt-2\">\r\n                {props.item.label}\r\n            </div>\r\n\r\n            <div className=\"col-4\">\r\n                <TreeSelect\r\n                    className=\" ml-2 TreeSelect_Request_Type\"\r\n                    style={{ width: '100%' }}\r\n                    showSearch\r\n                    value={value.type}\r\n                    dropdownStyle={{ maxHeight: 400, overflow: 'auto' }}\r\n                    placeholder=\"Reqest type\"\r\n                    allowClear\r\n                    showCheckedStrategy={'SHOW_PARENT'}\r\n                    onChange={onRequestTypeChange}\r\n                >\r\n                    <TreeNode selectable={false} per_id={props.item.id} value=\"model\" title=\"Model\">\r\n                        {\r\n                            // @ts-ignore\r\n                            props.initialValues.modelsList.map((model: ModelsType) => {\r\n                                return (\r\n                                    <TreeNode key={model.name} per_id={props.item.id} value={model.name} title={model.name}></TreeNode>\r\n                                )\r\n                            })\r\n\r\n                        }\r\n                    </TreeNode>\r\n                    <TreeNode per_id={props.item.id} value=\"Request\" title=\"Request\"></TreeNode>\r\n                    <TreeNode selectable={false} per_id={props.item.id} value=\"list\" title=\"List\"></TreeNode>\r\n                </TreeSelect>\r\n            </div>\r\n            <div className=\"col-4\">\r\n                <Input className=\"w-100 ml-2\" value={value.name} name={props.item.id.toString()} onChange={onRequestNameChange} placeholder=\"Param name\" />\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RequestItem","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Controllers\\ControllerMethodsForm\\ControllerMethodsCode.tsx",["483"],"C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Controllers\\ControllerMethodsForm\\ResponseItem.tsx",["484","485"],"C:\\OSPanel\\domains\\DeployProject\\src\\Components\\English\\English.tsx",[],{"ruleId":"486","replacedBy":"487"},{"ruleId":"488","replacedBy":"489"},{"ruleId":"490","severity":1,"message":"491","line":3,"column":27,"nodeType":"492","messageId":"493","endLine":3,"endColumn":36},{"ruleId":"490","severity":1,"message":"494","line":4,"column":33,"nodeType":"492","messageId":"493","endLine":4,"endColumn":42},{"ruleId":"490","severity":1,"message":"495","line":33,"column":11,"nodeType":"492","messageId":"493","endLine":33,"endColumn":29},{"ruleId":"496","severity":1,"message":"497","line":18,"column":8,"nodeType":"498","endLine":18,"endColumn":55,"suggestions":"499"},{"ruleId":"490","severity":1,"message":"500","line":30,"column":12,"nodeType":"492","messageId":"493","endLine":30,"endColumn":24},{"ruleId":"490","severity":1,"message":"501","line":33,"column":11,"nodeType":"492","messageId":"493","endLine":33,"endColumn":29},{"ruleId":"490","severity":1,"message":"502","line":5,"column":10,"nodeType":"492","messageId":"493","endLine":5,"endColumn":22},{"ruleId":"490","severity":1,"message":"503","line":5,"column":36,"nodeType":"492","messageId":"493","endLine":5,"endColumn":43},{"ruleId":"490","severity":1,"message":"504","line":1,"column":16,"nodeType":"492","messageId":"493","endLine":1,"endColumn":26},{"ruleId":"496","severity":1,"message":"497","line":13,"column":8,"nodeType":"498","endLine":13,"endColumn":54,"suggestions":"505"},{"ruleId":"490","severity":1,"message":"506","line":15,"column":12,"nodeType":"492","messageId":"493","endLine":15,"endColumn":23},{"ruleId":"490","severity":1,"message":"507","line":15,"column":25,"nodeType":"492","messageId":"493","endLine":15,"endColumn":39},{"ruleId":"508","severity":1,"message":"509","line":32,"column":35,"nodeType":"510","endLine":32,"endColumn":63},{"ruleId":"490","severity":1,"message":"511","line":1,"column":26,"nodeType":"492","messageId":"493","endLine":1,"endColumn":30},{"ruleId":"490","severity":1,"message":"512","line":1,"column":32,"nodeType":"492","messageId":"493","endLine":1,"endColumn":42},{"ruleId":"490","severity":1,"message":"513","line":1,"column":44,"nodeType":"492","messageId":"493","endLine":1,"endColumn":50},{"ruleId":"490","severity":1,"message":"514","line":1,"column":52,"nodeType":"492","messageId":"493","endLine":1,"endColumn":58},{"ruleId":"496","severity":1,"message":"497","line":17,"column":8,"nodeType":"498","endLine":17,"endColumn":32,"suggestions":"515"},{"ruleId":"490","severity":1,"message":"516","line":4,"column":10,"nodeType":"492","messageId":"493","endLine":4,"endColumn":18},{"ruleId":"490","severity":1,"message":"517","line":7,"column":10,"nodeType":"492","messageId":"493","endLine":7,"endColumn":18},{"ruleId":"496","severity":1,"message":"497","line":15,"column":8,"nodeType":"498","endLine":15,"endColumn":10,"suggestions":"518"},{"ruleId":"490","severity":1,"message":"519","line":1,"column":28,"nodeType":"492","messageId":"493","endLine":1,"endColumn":33},{"ruleId":"490","severity":1,"message":"520","line":13,"column":10,"nodeType":"492","messageId":"493","endLine":13,"endColumn":19},{"ruleId":"496","severity":1,"message":"497","line":20,"column":8,"nodeType":"498","endLine":20,"endColumn":10,"suggestions":"521"},{"ruleId":"490","severity":1,"message":"522","line":23,"column":12,"nodeType":"492","messageId":"493","endLine":23,"endColumn":25},{"ruleId":"490","severity":1,"message":"523","line":23,"column":27,"nodeType":"492","messageId":"493","endLine":23,"endColumn":43},{"ruleId":"490","severity":1,"message":"524","line":130,"column":13,"nodeType":"492","messageId":"493","endLine":130,"endColumn":26},{"ruleId":"490","severity":1,"message":"525","line":10,"column":10,"nodeType":"492","messageId":"493","endLine":10,"endColumn":23},{"ruleId":"490","severity":1,"message":"526","line":11,"column":8,"nodeType":"492","messageId":"493","endLine":11,"endColumn":12},{"ruleId":"496","severity":1,"message":"497","line":25,"column":8,"nodeType":"498","endLine":25,"endColumn":10,"suggestions":"527"},{"ruleId":"490","severity":1,"message":"528","line":33,"column":15,"nodeType":"492","messageId":"493","endLine":33,"endColumn":32},{"ruleId":"490","severity":1,"message":"529","line":2,"column":28,"nodeType":"492","messageId":"493","endLine":2,"endColumn":36},{"ruleId":"490","severity":1,"message":"491","line":2,"column":38,"nodeType":"492","messageId":"493","endLine":2,"endColumn":47},{"ruleId":"490","severity":1,"message":"530","line":3,"column":10,"nodeType":"492","messageId":"493","endLine":3,"endColumn":21},{"ruleId":"490","severity":1,"message":"494","line":3,"column":33,"nodeType":"492","messageId":"493","endLine":3,"endColumn":42},{"ruleId":"490","severity":1,"message":"531","line":5,"column":9,"nodeType":"492","messageId":"493","endLine":5,"endColumn":25},{"ruleId":"490","severity":1,"message":"529","line":2,"column":28,"nodeType":"492","messageId":"493","endLine":2,"endColumn":36},{"ruleId":"490","severity":1,"message":"491","line":2,"column":38,"nodeType":"492","messageId":"493","endLine":2,"endColumn":47},{"ruleId":"490","severity":1,"message":"530","line":3,"column":10,"nodeType":"492","messageId":"493","endLine":3,"endColumn":21},{"ruleId":"490","severity":1,"message":"494","line":3,"column":33,"nodeType":"492","messageId":"493","endLine":3,"endColumn":42},{"ruleId":"490","severity":1,"message":"531","line":5,"column":9,"nodeType":"492","messageId":"493","endLine":5,"endColumn":25},{"ruleId":"490","severity":1,"message":"528","line":49,"column":7,"nodeType":"492","messageId":"493","endLine":49,"endColumn":24},{"ruleId":"490","severity":1,"message":"529","line":2,"column":16,"nodeType":"492","messageId":"493","endLine":2,"endColumn":24},{"ruleId":"490","severity":1,"message":"491","line":2,"column":26,"nodeType":"492","messageId":"493","endLine":2,"endColumn":35},{"ruleId":"490","severity":1,"message":"532","line":108,"column":6,"nodeType":"492","messageId":"493","endLine":108,"endColumn":18},{"ruleId":"490","severity":1,"message":"533","line":4,"column":10,"nodeType":"492","messageId":"493","endLine":4,"endColumn":28},{"ruleId":"490","severity":1,"message":"534","line":4,"column":30,"nodeType":"492","messageId":"493","endLine":4,"endColumn":46},{"ruleId":"496","severity":1,"message":"497","line":38,"column":8,"nodeType":"498","endLine":38,"endColumn":10,"suggestions":"535"},{"ruleId":"496","severity":1,"message":"536","line":48,"column":8,"nodeType":"498","endLine":48,"endColumn":37,"suggestions":"537"},{"ruleId":"508","severity":1,"message":"509","line":133,"column":43,"nodeType":"510","endLine":133,"endColumn":107},{"ruleId":"508","severity":1,"message":"509","line":133,"column":117,"nodeType":"510","endLine":133,"endColumn":145},{"ruleId":"490","severity":1,"message":"531","line":5,"column":9,"nodeType":"492","messageId":"493","endLine":5,"endColumn":25},{"ruleId":"490","severity":1,"message":"538","line":6,"column":28,"nodeType":"492","messageId":"493","endLine":6,"endColumn":33},{"ruleId":"490","severity":1,"message":"539","line":6,"column":35,"nodeType":"492","messageId":"493","endLine":6,"endColumn":45},{"ruleId":"490","severity":1,"message":"540","line":7,"column":10,"nodeType":"492","messageId":"493","endLine":7,"endColumn":20},{"ruleId":"490","severity":1,"message":"541","line":48,"column":12,"nodeType":"492","messageId":"493","endLine":48,"endColumn":17},{"ruleId":"490","severity":1,"message":"542","line":48,"column":19,"nodeType":"492","messageId":"493","endLine":48,"endColumn":27},{"ruleId":"490","severity":1,"message":"543","line":125,"column":11,"nodeType":"492","messageId":"493","endLine":125,"endColumn":24},{"ruleId":"496","severity":1,"message":"544","line":17,"column":7,"nodeType":"498","endLine":17,"endColumn":28,"suggestions":"545"},{"ruleId":"546","severity":1,"message":"547","line":122,"column":70,"nodeType":"548","messageId":"549","endLine":122,"endColumn":72},{"ruleId":"550","severity":1,"message":"551","line":81,"column":81,"nodeType":"552","messageId":"553","endLine":81,"endColumn":82,"fix":"554"},{"ruleId":"550","severity":1,"message":"551","line":87,"column":81,"nodeType":"552","messageId":"553","endLine":87,"endColumn":82,"fix":"555"},"no-native-reassign",["556"],"no-negated-in-lhs",["557"],"@typescript-eslint/no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'AntSelect' is defined but never used.","'backendTypeOptions' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["558"],"'isBackendNew' is assigned a value but never used.","'submitBackendIsNew' is assigned a value but never used.","'getUsersList' is defined but never used.","'actions' is defined but never used.","'Typography' is defined but never used.",["559"],"'projectList' is assigned a value but never used.","'setProjectList' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'List' is defined but never used.","'Pagination' is defined but never used.","'Button' is defined but never used.","'Drawer' is defined but never used.",["560"],"'isMobile' is defined but never used.","'UserType' is defined but never used.",["561"],"'Empty' is defined but never used.","'stringify' is defined but never used.",["562"],"'isCodeVisible' is assigned a value but never used.","'setIsCodeVisible' is assigned a value but never used.","'ismodelChange' is assigned a value but never used.","'initialValues' is defined but never used.","'Item' is defined but never used.",["563"],"'modelsListOptions' is assigned a value but never used.","'useState' is defined but never used.","'AntCheckbox' is defined but never used.","'SelectOptionType' is defined but never used.","'FillableType' is defined but never used.","'getControllersList' is defined but never used.","'createController' is defined but never used.",["564"],"React Hook useEffect has a missing dependency: 'initialValues'. Either include it or remove the dependency array. You can also do a functional update 'setinitialValues(i => ...)' if you only need 'initialValues' in the 'setinitialValues' call.",["565"],"'Input' is defined but never used.","'TreeSelect' is defined but never used.","'ModelsType' is defined but never used.","'value' is assigned a value but never used.","'setValue' is assigned a value but never used.","'onAddResponse' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'props.item'. Either include it or remove the dependency array. If 'setValue' needs the current value of 'props.item', you can also switch to useReducer instead of useState and read 'props.item' in the reducer.",["566"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","rest-spread-spacing","Unexpected whitespace after spread operator.","SpreadElement","unexpectedWhitespace",{"range":"567","text":"568"},{"range":"569","text":"568"},"no-global-assign","no-unsafe-negation",{"desc":"570","fix":"571"},{"desc":"572","fix":"573"},{"desc":"574","fix":"575"},{"desc":"576","fix":"577"},{"desc":"576","fix":"578"},{"desc":"576","fix":"579"},{"desc":"576","fix":"580"},{"desc":"581","fix":"582"},{"desc":"583","fix":"584"},[3022,3023],"",[3282,3283],"Update the dependencies array to be: [props, props.isBackendNew, props.isProjectListLoaded]",{"range":"585","text":"586"},"Update the dependencies array to be: [props, props.isProjectListLoaded, props.projectList]",{"range":"587","text":"588"},"Update the dependencies array to be: [props, props.isProjectsLoaded]",{"range":"589","text":"590"},"Update the dependencies array to be: [props]",{"range":"591","text":"592"},{"range":"593","text":"592"},{"range":"594","text":"592"},{"range":"595","text":"592"},"Update the dependencies array to be: [initialValues, props.controllerMethodsList]",{"range":"596","text":"597"},"Update the dependencies array to be: [props.initialValues, props.item]",{"range":"598","text":"599"},[643,690],"[props, props.isBackendNew, props.isProjectListLoaded]",[429,475],"[props, props.isProjectListLoaded, props.projectList]",[623,647],"[props, props.isProjectsLoaded]",[537,539],"[props]",[903,905],[1046,1048],[1571,1573],[1916,1945],"[initialValues, props.controllerMethodsList]",[537,558],"[props.initialValues, props.item]"]
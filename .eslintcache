[{"C:\\OpenServer\\domains\\epam-app\\src\\index.tsx":"1","C:\\OpenServer\\domains\\epam-app\\src\\reportWebVitals.ts":"2","C:\\OpenServer\\domains\\epam-app\\src\\App.tsx":"3","C:\\OpenServer\\domains\\epam-app\\src\\redux\\store.ts":"4","C:\\OpenServer\\domains\\epam-app\\src\\Components\\ToDoListContainer.tsx":"5","C:\\OpenServer\\domains\\epam-app\\src\\redux\\taskReducer.ts":"6","C:\\OpenServer\\domains\\epam-app\\src\\Components\\ToDoList.tsx":"7","C:\\OpenServer\\domains\\epam-app\\src\\api\\taskApi.ts":"8","C:\\OpenServer\\domains\\epam-app\\src\\Components\\NewTaskFormContainer.tsx":"9","C:\\OpenServer\\domains\\epam-app\\src\\Components\\Settings\\SettingsModal.tsx":"10","C:\\OpenServer\\domains\\epam-app\\src\\Components\\ToDoHeader.tsx":"11","C:\\OpenServer\\domains\\epam-app\\src\\api\\api.ts":"12","C:\\OpenServer\\domains\\epam-app\\src\\Components\\NewTaskForm.tsx":"13","C:\\OpenServer\\domains\\epam-app\\src\\Components\\TimeScale\\TaskItem\\TaskItem.tsx":"14"},{"size":527,"mtime":1611339961961,"results":"15","hashOfConfig":"16"},{"size":425,"mtime":499162500000,"results":"17","hashOfConfig":"16"},{"size":446,"mtime":1611435555458,"results":"18","hashOfConfig":"16"},{"size":671,"mtime":1611426768298,"results":"19","hashOfConfig":"16"},{"size":807,"mtime":1611426768288,"results":"20","hashOfConfig":"16"},{"size":3060,"mtime":1611426768300,"results":"21","hashOfConfig":"16"},{"size":6662,"mtime":1611440334835,"results":"22","hashOfConfig":"16"},{"size":1484,"mtime":1611426768295,"results":"23","hashOfConfig":"16"},{"size":898,"mtime":1611426768264,"results":"24","hashOfConfig":"16"},{"size":449,"mtime":1611339961941,"results":"25","hashOfConfig":"16"},{"size":4041,"mtime":1611430749675,"results":"26","hashOfConfig":"16"},{"size":242,"mtime":1611426768293,"results":"27","hashOfConfig":"16"},{"size":5126,"mtime":1611426768261,"results":"28","hashOfConfig":"16"},{"size":1546,"mtime":1611440337863,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"1ak4mbk",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"32"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"32"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"32"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"61"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"C:\\OpenServer\\domains\\epam-app\\src\\index.tsx",[],["64","65"],"C:\\OpenServer\\domains\\epam-app\\src\\reportWebVitals.ts",[],"C:\\OpenServer\\domains\\epam-app\\src\\App.tsx",[],"C:\\OpenServer\\domains\\epam-app\\src\\redux\\store.ts",[],"C:\\OpenServer\\domains\\epam-app\\src\\Components\\ToDoListContainer.tsx",[],"C:\\OpenServer\\domains\\epam-app\\src\\redux\\taskReducer.ts",["66"],"import { Dispatch } from 'redux'\r\nimport { taskAPI, TaskListType } from '../api/taskApi'\r\nimport { NewTaskDataType, TaskType } from '../Types/types'\r\nimport {BaseThunkType, InferActionsTypes} from './store'\r\n\r\ntype initialStateType = {\r\n    taskList: null | Array<TaskType>,\r\n    taskSaveStatus: 'no' | 'inProgress' | 'success' | 'error'\r\n    errorMessage: null | string\r\n}\r\n\r\nlet initialState:initialStateType = {\r\n    taskList: null,\r\n    taskSaveStatus: 'no',\r\n    errorMessage: null\r\n}\r\n\r\nconst taskReducer = (state = initialState, action: ActionsTypes): initialStateType => {\r\n    let stateCopy = { ...state }\r\n    switch (action.type) {\r\n        case 'SN/TASK/SET_TASK_LIST':\r\n            return {...state, taskList: action.taskList.Tasks}\r\n\r\n        case 'SN/TASK/SET_TASK_SAVE_STATUS':\r\n            return {...state, taskSaveStatus: action.taskSaveStatus}\r\n\r\n        case 'SN/TASK/SET_ERROR_MESSAGE':\r\n            return {...state, errorMessage: action.message}\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    setTaskList: (taskList: TaskListType) => ({ type: 'SN/TASK/SET_TASK_LIST', taskList } as const),\r\n    setTaskSaveStatus: (taskSaveStatus: 'no' | 'inProgress' | 'success' | 'error') => ({ type: 'SN/TASK/SET_TASK_SAVE_STATUS', taskSaveStatus } as const),\r\n    setErrorMessage: (message: string | null) => ({type: 'SN/TASK/SET_ERROR_MESSAGE', message} as const)\r\n}\r\n\r\nexport const getTaskList = (date: string): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        let taskList = await taskAPI.getTaskList(date)\r\n        dispatch(actions.setTaskList(taskList))\r\n    }\r\n}\r\nexport const createNewTask = (values: NewTaskDataType, reload:boolean = true): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        dispatch(actions.setTaskSaveStatus('inProgress'))\r\n        console.log('setTaskSaveStatus inProgress')\r\n\r\n        let taskList = await taskAPI.createNewTask(values)\r\n\r\n        console.log('taskList: ', taskList)\r\n\r\n        if (taskList.status === 200) {\r\n            console.log('RESPONSE: ', taskList)\r\n            if (reload) {\r\n                dispatch(actions.setTaskList(taskList.data));\r\n                dispatch(actions.setTaskSaveStatus('success'))\r\n                dispatch(actions.setTaskSaveStatus('no'))\r\n            }\r\n        } else {\r\n            dispatch(actions.setErrorMessage(taskList.data.message))\r\n            dispatch(actions.setTaskSaveStatus('error'))\r\n            dispatch(actions.setTaskSaveStatus('no'))\r\n            dispatch( actions.setErrorMessage(null) )\r\n        }\r\n    }\r\n}\r\n\r\nexport const getTaskListForGap = (start_date: string, end_date:string): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        let response = await taskAPI.getTaskListForGap({start_date, end_date})\r\n        dispatch(actions.setTaskList(response.data))\r\n    }\r\n}\r\n\r\nexport default taskReducer\r\n\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsTypes>\r\nexport type DispatchType = Dispatch<ActionsTypes>\r\n","C:\\OpenServer\\domains\\epam-app\\src\\Components\\ToDoList.tsx",["67","68"],"import React, { useState, useEffect } from 'react'\r\nimport { Spin, Card, Divider, Tooltip } from 'antd'\r\nimport moment from 'moment'\r\nimport NewTaskForm from './NewTaskFormContainer'\r\nimport ToDoHeader from './ToDoHeader'\r\nimport SettingsModal from './Settings/SettingsModal'\r\nimport { TaskType } from './../Types/types'\r\nimport { RangeValue, EventValue } from './../Types/types'\r\nimport { ToDoListPropsType } from './ToDoListContainer'\r\nimport TaskItem from './TimeScale/TaskItem/TaskItem'\r\n\r\nconst getTimeScaleArrey = (taskList: Array<TaskType>): Array<React.ReactElement<string>> => {\r\n    const sortByParams = (field: 'date' | 'time') => {\r\n        if (field === 'date') {\r\n            return (a: TaskType, b: TaskType) => a['date'] > b['date'] ? 1 : -1;\r\n        } else {\r\n            return (a: TaskType, b: TaskType) => a['time'] > b['time'] ? -1 : 1;\r\n        }\r\n    }\r\n\r\n    taskList.sort(sortByParams('time')).sort(sortByParams('date'))\r\n\r\n    let timeScaleArrey: Array<React.ReactElement<string>> = []\r\n    let tomorowTasks: Array<TaskType> = []\r\n\r\n    const getHeadline = (task: TaskType) => {\r\n        return moment(task.date).format('DD MMMM')\r\n    }\r\n\r\n    let headlineDate: string | null = null;\r\n\r\n    if (taskList !== null && taskList.length > 0) {\r\n        headlineDate = getHeadline(taskList[0])\r\n        timeScaleArrey.push(\r\n            <h3 key={headlineDate + 'title'}>{headlineDate}:</h3>\r\n        )\r\n    }\r\n\r\n    for (let index: number = 0; index < 24; index++) {\r\n        timeScaleArrey.push(\r\n            <Divider key={index + 'to' + headlineDate} orientation=\"left\">\r\n                {index <= 9 ? '0' : null}{index}:00\r\n            </Divider>\r\n        )\r\n\r\n        if (taskList !== null) {\r\n            for (let i = 0; i < taskList.length; i++) {\r\n                const element: TaskType = taskList[i];\r\n                const timeVal = Number(element.time.split(':', 1))\r\n                const nextHour = index + 1\r\n                if (timeVal >= index && timeVal < nextHour) {\r\n                    if (getHeadline(element) === headlineDate) {\r\n                        timeScaleArrey.push(\r\n                            <Tooltip key={index + '-' + element.id} placement=\"topLeft\" title={element.descriptions}>\r\n                                {/* <p className=\"ml-5\">{element.time.split(':', 2).join(':')} - {element.name} date: {element.date}; id=<b>{element.id}</b></p> */}\r\n                                <TaskItem element={element}/>\r\n                            </Tooltip>\r\n                        )\r\n                    }\r\n                    else {\r\n                        tomorowTasks.push(element)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (tomorowTasks.length > 0) {\r\n        timeScaleArrey = timeScaleArrey.concat(getTimeScaleArrey(tomorowTasks))\r\n    }\r\n\r\n    return timeScaleArrey\r\n}\r\nexport type OwnToDoListPropsType = {}\r\n\r\nconst ToDoList: React.FC<ToDoListPropsType> = (props) => {\r\n    const [selectedDate, setSelectedDate] = useState<moment.Moment>(moment())\r\n    const [visible, setVisible] = useState(false)\r\n    const [isAddActive, setIsAddActive] = useState(false)\r\n    const [timeScaleBlock, setTimeScaleBlock] = useState<Array<React.ReactElement<string>> | null>(null)\r\n    // const [showingMode, setShowingMode] = useState<'date' | 'interval'>('date')\r\n    const [isModalVisible, setIsModalVisible] = useState(false);\r\n\r\n    useEffect(() => {\r\n        console.log('selectedDate changet to ', selectedDate.format('YYYY-MM-DD'))\r\n        props.getTaskList(selectedDate.format('YYYY-MM-DD'))\r\n        // props.test('2021-01-19')\r\n    }, [selectedDate]);\r\n\r\n    useEffect(() => {\r\n        if (props.taskList !== null) {\r\n            console.log('1) props in useEffect taskList:', props.taskList)\r\n            setTimeScaleBlock(getTimeScaleArrey(props.taskList))\r\n        } else {\r\n            setTimeScaleBlock([<Spin key=\"spin\" size=\"large\" />])\r\n        }\r\n    }, [props.taskList]);\r\n\r\n    const onDateChange = (value: moment.Moment | null, dateString: string): void => {\r\n        console.log('2) onDateChange value:', value)\r\n        if (value !== null) {\r\n            setTimeScaleBlock([<Spin key=\"spin\" size=\"large\" />])\r\n            setSelectedDate(value)\r\n            setIsAddActive(false)\r\n        } else {\r\n            setSelectedDate(moment(null))\r\n            setIsAddActive(true)\r\n        }\r\n    }\r\n\r\n    // const onGapDateChange = (values: Array<moment.Moment>): void => {\r\n    const onGapDateChange = (values: RangeValue<moment.Moment>, formatString: [string, string]): void => {\r\n        console.log('3) onGapDateChange value', values)\r\n        setTimeScaleBlock([<Spin key=\"spin\" size=\"large\" />])\r\n        if (values !== null && values[0] !== null && values[1] !== null) {\r\n            props.getTaskListForGap(values[0].format('YYYY-MM-DD'), values[1].format('YYYY-MM-DD'))\r\n        }\r\n    }\r\n\r\n    const showDrawer = (): void => {\r\n        setVisible(true);\r\n    }\r\n\r\n    const onClose = (): void => {\r\n        setVisible(false);\r\n    }\r\n\r\n    const showModal = () => {\r\n        setIsModalVisible(true);\r\n    };\r\n\r\n    const handleOk = () => {\r\n        setIsModalVisible(false);\r\n    };\r\n\r\n    const handleCancel = () => {\r\n        setIsModalVisible(false);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div className=\"site-card-border-less-wrapper\">\r\n                <Card\r\n                    title={<ToDoHeader\r\n                        onDateChange={onDateChange}\r\n                        getTaskList={props.getTaskList}\r\n                        selectedDate={selectedDate}\r\n                        setSelectedDate={setSelectedDate}\r\n                        showDrawer={showDrawer}\r\n                        isAddActive={isAddActive}\r\n                        onGapDateChange={onGapDateChange}\r\n                        showModal={showModal}\r\n                    />}\r\n                    bordered={false}\r\n                >\r\n\r\n                    <SettingsModal isModalVisible={isModalVisible} handleOk={handleOk} handleCancel={handleCancel}>\r\n                        <p>Some contents...</p>\r\n                        <p>Some contents...</p>\r\n                        <p>Some contents...</p>\r\n                    </SettingsModal>\r\n\r\n                    {timeScaleBlock}\r\n\r\n                </Card>\r\n\r\n                <NewTaskForm\r\n                    selectedDate={selectedDate}\r\n                    onClose={onClose}\r\n                    visible={visible}\r\n                    setVisible={setVisible}\r\n                // setSelectedDate={setSelectedDate}\r\n                />\r\n\r\n            </div>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ToDoList","C:\\OpenServer\\domains\\epam-app\\src\\api\\taskApi.ts",[],"C:\\OpenServer\\domains\\epam-app\\src\\Components\\NewTaskFormContainer.tsx",[],"C:\\OpenServer\\domains\\epam-app\\src\\Components\\Settings\\SettingsModal.tsx",[],"C:\\OpenServer\\domains\\epam-app\\src\\Components\\ToDoHeader.tsx",["69","70","71"],"import React, { useState } from 'react'\r\nimport { DatePicker, Checkbox, Button } from 'antd'\r\nimport { FileAddOutlined, SettingOutlined } from '@ant-design/icons'\r\nimport { CheckboxChangeEvent } from 'antd/lib/checkbox'\r\nimport {RangeValue, EventValue} from './../Types/types'\r\n\r\nconst { RangePicker } = DatePicker\r\n\r\ntype test = typeof RangePicker\r\ntype testProps = React.ComponentProps<typeof RangePicker>\r\n\r\n// export declare type RangeValue<DateType> = [EventValue<DateType>, EventValue<DateType>] | null;\r\n// export declare type EventValue<DateType> = DateType | null;\r\n\r\nexport type OwnToDoHeaderPropsType = {\r\n    onDateChange: (value: moment.Moment | null, dateString: string) => void,\r\n    getTaskList: (date: string) => void,\r\n    selectedDate: moment.Moment,\r\n    setSelectedDate: React.Dispatch<React.SetStateAction<moment.Moment>>,\r\n    showDrawer: () => void,\r\n    isAddActive: boolean,\r\n    onGapDateChange: (values: RangeValue<moment.Moment>, formatString: [string, string]) => void,\r\n    showModal: () => void,\r\n}\r\n\r\nconst ToDoHeader: React.FC<OwnToDoHeaderPropsType> = (props) => {\r\n    const [isGap, setIsGap] = useState(false)\r\n    const [label, setLabel] = useState<'date' | 'interval'>('date')\r\n\r\n    const onChange = (e: CheckboxChangeEvent) => {\r\n        setIsGap(e.target.checked)\r\n        if (e.target.checked) {\r\n            setLabel('interval')\r\n        } else {\r\n            setLabel('date')\r\n            console.log('1 date selected: ', props.selectedDate.format('YYYY-MM-DD'))\r\n            props.getTaskList(props.selectedDate.format('YYYY-MM-DD'))\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"row\" >\r\n            <div className=\"col-12 col-md-8 col-lg-6\">\r\n                <div className=\"d-none d-sm-inline\">\r\n                    <label >Select {label}:</label>\r\n                </div>\r\n\r\n                <div className=\"d-inline\">\r\n                    {isGap ?\r\n                        <RangePicker\r\n                            onChange={props.onGapDateChange}\r\n                            defaultValue={[props.selectedDate, props.selectedDate]}\r\n                            format='DD-MM-YYYY'\r\n                            style={{ marginLeft: 10 }}\r\n                        />\r\n                        :\r\n                        <DatePicker\r\n                            onChange={props.onDateChange}\r\n                            defaultValue={props.selectedDate}\r\n                            format='DD-MM-YYYY'\r\n                            style={{ marginLeft: 10 }}\r\n                        />\r\n                    }\r\n                </div>\r\n            </div>\r\n            <div className=\"col-12 col-md-4 col-lg-2 m-2 m-md-0\" >\r\n                <Checkbox className=\"ml-3\" onChange={onChange}>Date interval</Checkbox>\r\n            </div>\r\n            <div className=\"col-12 col-md-12 col-lg-4\">\r\n                <Button\r\n                    type=\"primary\"\r\n                    shape=\"round\"\r\n                    icon={\r\n                        <div className=\"d-flex flex-wrap align-content-start\">\r\n                            <FileAddOutlined style={{ fontSize: '18px' }} />\r\n                            <span className=\"ml-1\" style={{ fontSize: '14px' }}>Add</span>\r\n                        </div>}\r\n                    style={{ marginLeft: 10 }}\r\n                    onClick={props.showDrawer}\r\n                    disabled={props.isAddActive}\r\n                />\r\n\r\n                <Button className=\"\"\r\n                    type=\"primary\"\r\n                    shape=\"round\"\r\n                    style={{ marginLeft: 10 }}\r\n                    onClick={props.showModal}\r\n                    icon={\r\n                        <div className=\"d-flex flex-wrap align-content-start\">\r\n                            <SettingOutlined style={{ fontSize: '18px' }} />\r\n                            <span className=\"ml-1\" style={{ fontSize: '14px' }}>Settings</span>\r\n                        </div>} \r\n                    />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ToDoHeader","C:\\OpenServer\\domains\\epam-app\\src\\api\\api.ts",[],"C:\\OpenServer\\domains\\epam-app\\src\\Components\\NewTaskForm.tsx",["72","73"],"import React, { useState, useEffect } from 'react'\r\nimport moment from 'moment'\r\nimport { Form, Input, Button, TimePicker, DatePicker, Drawer, Spin, message } from 'antd'\r\nimport { NewTaskFormPropsType } from './NewTaskFormContainer'\r\n\r\nconst layout = {\r\n    labelCol: { span: 8 },\r\n    wrapperCol: { span: 16 },\r\n}\r\nconst tailLayout = {\r\n    wrapperCol: { offset: 8, span: 16 },\r\n}\r\n\r\nexport type NewTaskFormOwnPropsType = {\r\n    selectedDate: moment.Moment,\r\n    onClose: ()=>void\r\n    visible: boolean,\r\n    setVisible: (visible: boolean)=>void\r\n}\r\n\r\nconst { TextArea } = Input;\r\n\r\nconst timeFormat: string = 'HH:mm';\r\n\r\nconst NewTaskForm: React.FC<NewTaskFormPropsType> = (props) => {\r\n    const [selectedDate, setSelectedDate] = useState<moment.Moment>(props.selectedDate)\r\n    const [saveStatus, setSaveStatus] = useState<string>(props.taskSaveStatus)\r\n\r\n    useEffect(() => {\r\n        switch (props.taskSaveStatus) {\r\n            case 'inProgress':\r\n                setSaveStatus(props.taskSaveStatus)\r\n                break;\r\n            case 'success':\r\n                message.success('The task was successfully created');\r\n                props.onClose()\r\n                setSaveStatus('')\r\n                break;\r\n            case 'error':\r\n                message.error('Error: '+ props.errorMessage);\r\n                setSaveStatus(props.taskSaveStatus)\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n    }, [props.taskSaveStatus]);\r\n\r\n    type OnFinishType = {\r\n        taskName: string,\r\n        date: moment.Moment,\r\n        taskTime: moment.Moment,\r\n        description?: string\r\n    }\r\n    const onFinish = (values: OnFinishType) => {\r\n        console.log('onFinish, reload: ', selectedDate !== props.selectedDate)\r\n        const data = {\r\n            date: values.date.format('YYYY-MM-DD'),\r\n            taskTime: values.taskTime.format('HH:mm'),\r\n            taskName: values.taskName,\r\n            user_id: 1,\r\n            description: values.description\r\n        }\r\n\r\n        if (selectedDate.format('YYYY-MM-DD') !== props.selectedDate.format('YYYY-MM-DD')) {\r\n            console.log('ПЕРЕРИСОВКИ НЕТ')\r\n            props.createNewTask(data, false)\r\n        } else {\r\n            \r\n            props.createNewTask(data, true)\r\n            console.log('ПЕРЕРИСОВКА')\r\n        }\r\n    };\r\n\r\n    type ErrorItem = {\r\n        errors: string\r\n        name: string\r\n    }\r\n\r\n    const onTimeChange = (value: moment.Moment | null, dateString: string): void => {\r\n        // console.log(value, dateString);\r\n    }\r\n\r\n    const onDateChange = (value: moment.Moment | null, dateString: string): void => {\r\n        if (value !== null) {\r\n            setSelectedDate(value)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Drawer\r\n            title={\"Create New Task for \" + selectedDate.format('DD MMM YYYY')}\r\n            placement=\"right\"\r\n            closable={true}\r\n            onClose={props.onClose}\r\n            visible={props.visible}\r\n            width=\"80%\"\r\n        >\r\n            <Form\r\n                {...layout}\r\n                name=\"basic\"\r\n                initialValues={{ remember: true }}\r\n                onFinish={onFinish}\r\n            >\r\n                <Form.Item\r\n                    label=\"Task name\"\r\n                    name=\"taskName\"\r\n                    rules={[{ required: true, message: 'Please input task name!' }]}\r\n                >\r\n                    <Input />\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    label=\"Task date\"\r\n                    name=\"date\"\r\n                    initialValue={props.selectedDate}\r\n                rules={[{ required: true, message: 'Please input task date!' }]}\r\n                >\r\n                    <DatePicker\r\n                        // defaultValue={props.selectedDate}\r\n                        onChange={onDateChange}\r\n                        format='DD-MM-YYYY'\r\n                    />\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    label=\"Task time\"\r\n                    name=\"taskTime\"\r\n                    rules={[{ required: true, message: 'Please input task time!' }]}\r\n                >\r\n                    <TimePicker\r\n                        onChange={onTimeChange}\r\n                        // defaultValue={moment('12:08', timeFormat)} \r\n                        format={timeFormat}\r\n                    />\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    label=\"Description\"\r\n                    name=\"description\"\r\n                >\r\n                    <TextArea rows={2} />\r\n                </Form.Item>\r\n\r\n                <Form.Item {...tailLayout}>\r\n                    {saveStatus === 'inProgress' ?\r\n                        <Spin></Spin>\r\n                    :\r\n                        <Button type=\"primary\" htmlType=\"submit\">\r\n                            Create\r\n                        </Button>\r\n                        \r\n                    }\r\n                </Form.Item>\r\n            </Form>\r\n        </Drawer>\r\n    )\r\n}\r\n\r\nexport default NewTaskForm",["74","75"],"C:\\OpenServer\\domains\\epam-app\\src\\Components\\TimeScale\\TaskItem\\TaskItem.tsx",[],{"ruleId":"76","replacedBy":"77"},{"ruleId":"78","replacedBy":"79"},{"ruleId":"80","severity":1,"message":"81","line":19,"column":9,"nodeType":"82","messageId":"83","endLine":19,"endColumn":18},{"ruleId":"80","severity":1,"message":"84","line":8,"column":22,"nodeType":"82","messageId":"83","endLine":8,"endColumn":32},{"ruleId":"85","severity":1,"message":"86","line":88,"column":8,"nodeType":"87","endLine":88,"endColumn":22,"suggestions":"88"},{"ruleId":"80","severity":1,"message":"84","line":5,"column":21,"nodeType":"82","messageId":"83","endLine":5,"endColumn":31},{"ruleId":"80","severity":1,"message":"89","line":9,"column":6,"nodeType":"82","messageId":"83","endLine":9,"endColumn":10},{"ruleId":"80","severity":1,"message":"90","line":10,"column":6,"nodeType":"82","messageId":"83","endLine":10,"endColumn":15},{"ruleId":"85","severity":1,"message":"86","line":47,"column":8,"nodeType":"87","endLine":47,"endColumn":30,"suggestions":"91"},{"ruleId":"80","severity":1,"message":"92","line":75,"column":10,"nodeType":"82","messageId":"83","endLine":75,"endColumn":19},{"ruleId":"76","replacedBy":"93"},{"ruleId":"78","replacedBy":"94"},"no-native-reassign",["95"],"no-negated-in-lhs",["96"],"@typescript-eslint/no-unused-vars","'stateCopy' is assigned a value but never used.","Identifier","unusedVar","'EventValue' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["97"],"'test' is defined but never used.","'testProps' is defined but never used.",["98"],"'ErrorItem' is defined but never used.",["95"],["96"],"no-global-assign","no-unsafe-negation",{"desc":"99","fix":"100"},{"desc":"101","fix":"102"},"Update the dependencies array to be: [props, selectedDate]",{"range":"103","text":"104"},"Update the dependencies array to be: [props, props.taskSaveStatus]",{"range":"105","text":"106"},[3632,3646],"[props, selectedDate]",[1459,1481],"[props, props.taskSaveStatus]"]
[{"C:\\OSPanel\\domains\\epam-app\\src\\index.tsx":"1","C:\\OSPanel\\domains\\epam-app\\src\\reportWebVitals.ts":"2","C:\\OSPanel\\domains\\epam-app\\src\\App.tsx":"3","C:\\OSPanel\\domains\\epam-app\\src\\Components\\ToDoList.tsx":"4","C:\\OSPanel\\domains\\epam-app\\src\\Components\\NewTaskForm.tsx":"5","C:\\OSPanel\\domains\\epam-app\\src\\Components\\NewTaskFormContainer.tsx":"6","C:\\OSPanel\\domains\\epam-app\\src\\Components\\ToDoListContainer.tsx":"7","C:\\OSPanel\\domains\\epam-app\\src\\api\\api.ts":"8","C:\\OSPanel\\domains\\epam-app\\src\\redux\\taskReducer.ts":"9","C:\\OSPanel\\domains\\epam-app\\src\\redux\\store.ts":"10","C:\\OSPanel\\domains\\epam-app\\src\\Components\\ToDoHeader.tsx":"11","C:\\OSPanel\\domains\\epam-app\\src\\Components\\Settings\\SettingsModal.tsx":"12","C:\\OSPanel\\domains\\epam-app\\src\\api\\taskApi.ts":"13","C:\\OSPanel\\domains\\epam-app\\src\\Components\\TimeScale\\TaskItem\\TaskItem.tsx":"14","C:\\OSPanel\\domains\\epam-app\\src\\utils\\array-helpers.ts":"15","C:\\OSPanel\\domains\\epam-app\\src\\Components\\TimeScale\\TimeScale.tsx":"16","C:\\OSPanel\\domains\\epam-app\\src\\Components\\TimeScale\\TimeScaleContainer.tsx":"17","C:\\OSPanel\\domains\\epam-app\\src\\Components\\TimeScale\\TaskItem\\TaskItemContainer.tsx":"18","C:\\OSPanel\\domains\\epam-app\\src\\Components\\ToDoHeaderContainer.tsx":"19"},{"size":527,"mtime":1611312674852,"results":"20","hashOfConfig":"21"},{"size":440,"mtime":1611045973906,"results":"22","hashOfConfig":"21"},{"size":446,"mtime":1611481483703,"results":"23","hashOfConfig":"21"},{"size":3734,"mtime":1611559663427,"results":"24","hashOfConfig":"21"},{"size":7316,"mtime":1611559243572,"results":"25","hashOfConfig":"21"},{"size":946,"mtime":1611559243573,"results":"26","hashOfConfig":"21"},{"size":808,"mtime":1611506305585,"results":"27","hashOfConfig":"21"},{"size":494,"mtime":1611494875641,"results":"28","hashOfConfig":"21"},{"size":5611,"mtime":1611559243586,"results":"29","hashOfConfig":"21"},{"size":671,"mtime":1611404658886,"results":"30","hashOfConfig":"21"},{"size":5421,"mtime":1611559243581,"results":"31","hashOfConfig":"21"},{"size":452,"mtime":1611483361598,"results":"32","hashOfConfig":"21"},{"size":2274,"mtime":1611559243584,"results":"33","hashOfConfig":"21"},{"size":2942,"mtime":1611559752916,"results":"34","hashOfConfig":"21"},{"size":321,"mtime":1611482751963,"results":"35","hashOfConfig":"21"},{"size":4938,"mtime":1611559715822,"results":"36","hashOfConfig":"21"},{"size":980,"mtime":1611559243580,"results":"37","hashOfConfig":"21"},{"size":1012,"mtime":1611559243577,"results":"38","hashOfConfig":"21"},{"size":1143,"mtime":1611505002538,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"136sl52",{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"42"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"42"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"42"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"42"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"42"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"42"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"C:\\OSPanel\\domains\\epam-app\\src\\index.tsx",[],["85","86"],"C:\\OSPanel\\domains\\epam-app\\src\\reportWebVitals.ts",[],"C:\\OSPanel\\domains\\epam-app\\src\\App.tsx",[],"C:\\OSPanel\\domains\\epam-app\\src\\Components\\ToDoList.tsx",["87","88","89","90","91","92","93"],"import React, { useState, useEffect } from 'react'\r\nimport { Spin, Card, Divider, Tooltip } from 'antd'\r\nimport moment from 'moment'\r\nimport NewTaskForm from './NewTaskFormContainer'\r\nimport ToDoHeader from './ToDoHeaderContainer'\r\nimport SettingsModal from './Settings/SettingsModal'\r\nimport { TaskType } from './../Types/types'\r\nimport { RangeValue, EventValue } from './../Types/types'\r\nimport { ToDoListPropsType } from './ToDoListContainer'\r\nimport TaskItem from './TimeScale/TaskItem/TaskItem'\r\nimport TimeScale from './TimeScale/TimeScaleContainer'\r\n\r\nexport type OwnToDoListPropsType = {}\r\n\r\nconst ToDoList: React.FC<ToDoListPropsType> = (props) => {\r\n    const [selectedDate, setSelectedDate] = useState<moment.Moment>(moment())\r\n    const [visible, setVisible] = useState(false)\r\n    const [isAddActive, setIsAddActive] = useState(false)\r\n    // const [timeScaleBlock, setTimeScaleBlock] = useState<Array<React.ReactElement<string>> | null>(null)\r\n    // const [showingMode, setShowingMode] = useState<'date' | 'interval'>('date')\r\n    const [isModalVisible, setIsModalVisible] = useState(false);\r\n\r\n    // useEffect(() => {\r\n    //     props.getTaskList(selectedDate.format('YYYY-MM-DD'))\r\n    // }, [selectedDate]);\r\n\r\n    const onDateChange = (value: moment.Moment | null, dateString: string): void => {\r\n        console.log('2) onDateChange value:', value)\r\n        if (value !== null) {\r\n            setSelectedDate(value)\r\n            setIsAddActive(false)\r\n        } else {\r\n            setSelectedDate(moment(null))\r\n            setIsAddActive(true)\r\n        }\r\n    }\r\n\r\n    const onGapDateChange = (values: RangeValue<moment.Moment>, formatString: [string, string]): void => {\r\n        console.log('onGapDateChange')\r\n        if (values !== null && values[0] !== null && values[1] !== null) {\r\n            props.getTaskListForGap(values[0].format('YYYY-MM-DD'), values[1].format('YYYY-MM-DD'))\r\n        }\r\n    }\r\n\r\n    const showDrawer = (): void => {\r\n        setVisible(true);\r\n    }\r\n\r\n    const onClose = (): void => {\r\n        setVisible(false);\r\n    }\r\n\r\n    const showModal = () => {\r\n        setIsModalVisible(true);\r\n    };\r\n\r\n    const handleOk = () => {\r\n        setIsModalVisible(false);\r\n    };\r\n\r\n    const handleCancel = () => {\r\n        setIsModalVisible(false);\r\n    };\r\n\r\n    // console.log('ToDoList props: ', props)\r\n    return (\r\n        <>\r\n            <div className=\"site-card-border-less-wrapper\">\r\n                <Card\r\n                    title={<ToDoHeader\r\n                        onDateChange={onDateChange}\r\n                        getTaskList={props.getTaskList}\r\n                        selectedDate={selectedDate}\r\n                        setSelectedDate={setSelectedDate}\r\n                        showDrawer={showDrawer}\r\n                        isAddActive={isAddActive}\r\n                        onGapDateChange={onGapDateChange}\r\n                        showModal={showModal}\r\n                    />}\r\n                    bordered={false}\r\n                >\r\n\r\n                    <SettingsModal isModalVisible={isModalVisible} handleOk={handleOk} handleCancel={handleCancel}>\r\n                        <p>Some contents...</p>\r\n                        <p>Some contents...</p>\r\n                        <p>Some contents...</p>\r\n                    </SettingsModal>\r\n\r\n                    <TimeScale />\r\n\r\n                </Card>\r\n\r\n                <NewTaskForm\r\n                    selectedDate={selectedDate}\r\n                    onClose={onClose}\r\n                    visible={visible}\r\n                    setVisible={setVisible}\r\n                // setSelectedDate={setSelectedDate}\r\n                />\r\n\r\n            </div>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ToDoList","C:\\OSPanel\\domains\\epam-app\\src\\Components\\NewTaskForm.tsx",["94","95"],"import React, { useState, useEffect } from 'react'\r\nimport moment from 'moment'\r\nimport { Form, Input, Button, TimePicker, DatePicker, Drawer, Spin, message } from 'antd'\r\nimport { NewTaskFormPropsType } from './NewTaskFormContainer'\r\nimport { combineReducers } from 'redux'\r\n\r\nconst layout = {\r\n    labelCol: { span: 8 },\r\n    wrapperCol: { span: 16 },\r\n}\r\nconst tailLayout = {\r\n    wrapperCol: { offset: 8, span: 16 },\r\n}\r\n\r\nexport type NewTaskFormOwnPropsType = {\r\n    selectedDate: moment.Moment,\r\n    onClose: () => void\r\n    visible: boolean,\r\n    setVisible: (visible: boolean) => void\r\n}\r\n\r\nconst { TextArea } = Input;\r\n\r\nconst timeFormat: string = 'HH:mm';\r\n\r\ntype FormValuesType = {\r\n    taskName: string | number | readonly string[] | undefined,\r\n    taskTime: moment.Moment | null,\r\n    date: moment.Moment | null,\r\n    description: string | null,\r\n}\r\nconst initialFormValues: FormValuesType = {\r\n    taskName: undefined,\r\n    taskTime: null,\r\n    date: null,\r\n    description: null,\r\n}\r\n\r\nconst NewTaskForm: React.FC<NewTaskFormPropsType> = (props) => {\r\n    const [form] = Form.useForm()\r\n    const [selectedDate, setSelectedDate] = useState<moment.Moment>(props.selectedDate)\r\n    const [saveStatus, setSaveStatus] = useState<string>(props.taskSaveStatus)\r\n    // const [formValues, setFormValues] = useState<FormValuesType>(initialFormValues)\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        console.log('status changed: ', props.taskSaveStatus)\r\n        switch (props.taskSaveStatus) {\r\n            case 'inProgress':\r\n                setSaveStatus(props.taskSaveStatus)\r\n                break;\r\n            case 'success':\r\n                message.success('The task was successfully created');\r\n                props.onClose()\r\n                setSaveStatus('')\r\n                onReset()\r\n                break;\r\n            case 'error':\r\n                message.error('Error: ' + props.errorMessage);\r\n                setSaveStatus(props.taskSaveStatus)\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n    }, [props.taskSaveStatus]);\r\n\r\n    type OnFinishType = {\r\n        taskName: string,\r\n        date: moment.Moment,\r\n        taskTime: moment.Moment,\r\n        description?: string\r\n    }\r\n    const onFinish = (values: OnFinishType) => {\r\n        console.log('onFinish, reload: ', selectedDate !== props.selectedDate)\r\n        const data = {\r\n            date: values.date.format('YYYY-MM-DD'),\r\n            taskTime: values.taskTime.format('HH:mm'),\r\n            taskName: values.taskName,\r\n            user_id: 1,\r\n            description: values.description\r\n        }\r\n        console.log(selectedDate.format('DD'), '<', props.dateInterval.startDate.format('DD'), '>'\r\n            , props.dateInterval.startDate.format('DD'))\r\n        console.log(\r\n            moment(selectedDate.format('YYYY-MM-DD')).isBetween(\r\n                props.dateInterval.startDate.format('YYYY-MM-DD'),\r\n                props.dateInterval.endDate.format('YYYY-MM-DD'),\r\n                undefined, '[]'\r\n            )\r\n        )\r\n        console.log('selectedDate', selectedDate.format('YYYY-MM-DD HH:MM:SS'))\r\n        console.log('startDate', props.dateInterval.startDate.format('YYYY-MM-DD HH:MM:SS'))\r\n        console.log('endDate', props.dateInterval.endDate.format('YYYY-MM-DD HH:MM:SS'))\r\n\r\n        if (!moment(selectedDate.format('YYYY-MM-DD')).isBetween(\r\n            props.dateInterval.startDate.format('YYYY-MM-DD'),\r\n            props.dateInterval.endDate.format('YYYY-MM-DD'),\r\n            undefined, '[]'\r\n        )) {\r\n            console.log('ПЕРЕРИСОВКИ НЕТ')\r\n            props.createNewTask(data, false)\r\n        } else {\r\n\r\n            props.createNewTask(data, true)\r\n            console.log('ПЕРЕРИСОВКА')\r\n        }\r\n    };\r\n\r\n    const onReset = () => {\r\n        form.resetFields()\r\n    }\r\n\r\n    const onDateChange = (value: moment.Moment | null, dateString: string): void => {\r\n        // setFormValues({ ...formValues, date: value })\r\n        if (value !== null) {\r\n            setSelectedDate(value)\r\n        }\r\n    }\r\n\r\n    // const onTaskNameChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\r\n    //     setFormValues({ ...formValues, taskName: e.target.value })\r\n    // }\r\n    // const onDescriptionChange = (e: React.ChangeEvent<HTMLTextAreaElement>): void => {\r\n    //     setFormValues({ ...formValues, description: e.target.value })\r\n    // }\r\n    // const onTimrChange = (e: moment.Moment | null, dateString: string): void => {\r\n    //     setFormValues({ ...formValues, taskTime: e })\r\n    // }\r\n\r\n    // console.log('formValues',formValues)\r\n\r\n    return (\r\n        <Drawer\r\n            title={\"Create New Task for \" + selectedDate.format('DD MMM YYYY')}\r\n            placement=\"right\"\r\n            closable={true}\r\n            onClose={props.onClose}\r\n            visible={props.visible}\r\n            width=\"80%\"\r\n        >\r\n            <Form\r\n                {...layout}\r\n                form={form}\r\n                name=\"control-hooks\"\r\n                initialValues={{ remember: true }}\r\n                onFinish={onFinish}\r\n            >\r\n                <Form.Item\r\n                    label=\"Task name\"\r\n                    name=\"taskName\"\r\n                    rules={[{ required: true, message: 'Please input task name!' }]}\r\n                >\r\n                    <Input />\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    label=\"Task date\"\r\n                    name=\"date\"\r\n                    initialValue={props.selectedDate}\r\n                    rules={[{ required: true, message: 'Please input task date!' }]}\r\n                >\r\n                    <DatePicker\r\n                        // defaultValue={props.selectedDate}\r\n                        // value = {formValues.date}\r\n                        onChange={onDateChange}\r\n                        format='DD-MM-YYYY'\r\n                    />\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    label=\"Task time\"\r\n                    name=\"taskTime\"\r\n                    rules={[{ required: true, message: 'Please input task time!' }]}\r\n                >\r\n                    <TimePicker\r\n                        // onChange={onTimrChange}\r\n                        // defaultValue={moment('12:08', timeFormat)} \r\n                        format={timeFormat}\r\n                    />\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    label=\"Description\"\r\n                    name=\"description\"\r\n                >\r\n                    <TextArea rows={2} />\r\n                </Form.Item>\r\n\r\n                <Form.Item {...tailLayout}>\r\n                    {saveStatus === 'inProgress' ?\r\n                        <Spin></Spin>\r\n                        :\r\n                        <>\r\n                            <Button type=\"primary\" htmlType=\"submit\">\r\n                                Create\r\n                            </Button>\r\n                            <Button className=\"ml-3\" type=\"primary\" onClick={onReset}>\r\n                                Reset\r\n                            </Button>\r\n                        </>\r\n                    }\r\n                </Form.Item>\r\n            </Form>\r\n        </Drawer>\r\n    )\r\n}\r\n\r\nexport default NewTaskForm","C:\\OSPanel\\domains\\epam-app\\src\\Components\\NewTaskFormContainer.tsx",[],"C:\\OSPanel\\domains\\epam-app\\src\\Components\\ToDoListContainer.tsx",[],"C:\\OSPanel\\domains\\epam-app\\src\\api\\api.ts",[],"C:\\OSPanel\\domains\\epam-app\\src\\redux\\taskReducer.ts",[],"C:\\OSPanel\\domains\\epam-app\\src\\redux\\store.ts",[],"C:\\OSPanel\\domains\\epam-app\\src\\Components\\ToDoHeader.tsx",["96","97","98"],"import React, { useState, useEffect } from 'react'\r\nimport { DatePicker, Checkbox, Button } from 'antd'\r\nimport { FileAddOutlined, SettingOutlined } from '@ant-design/icons'\r\nimport { CheckboxChangeEvent } from 'antd/lib/checkbox'\r\nimport {RangeValue, EventValue} from './../Types/types'\r\nimport { ToDoHeaderPropsType } from './ToDoHeaderContainer'\r\nimport moment from 'moment'\r\n\r\nconst { RangePicker } = DatePicker\r\n\r\nexport type OwnToDoHeaderPropsType = {\r\n    onDateChange: (value: moment.Moment | null, dateString: string) => void,\r\n    getTaskList: (date: string) => void,\r\n    selectedDate: moment.Moment,\r\n    setSelectedDate: React.Dispatch<React.SetStateAction<moment.Moment>>,\r\n    showDrawer: () => void,\r\n    isAddActive: boolean,\r\n    onGapDateChange: (values: RangeValue<moment.Moment>, formatString: [string, string]) => void,\r\n    showModal: () => void,\r\n}\r\n\r\nconst ToDoHeader: React.FC<ToDoHeaderPropsType> = (props) => {\r\n    const [isInterval, setIsInterval] = useState(false)\r\n    const [dates, setDates] = useState<{startDate: moment.Moment, endDate: moment.Moment}>({startDate: moment(), endDate: moment()})\r\n\r\n    useEffect(() => {\r\n        console.log(\r\n            'useEffect setIsInterval in ToDoHeader: ', \r\n            'p-s',props.dateInterval.startDate.format('DD'),\r\n            'p-e',props.dateInterval.endDate.format('DD')\r\n        )\r\n        console.log()\r\n        props.setIsInterval(isInterval, dates)\r\n    }, [isInterval, dates]);\r\n\r\n\r\n    const onDateTypeChange = (e: CheckboxChangeEvent) => {\r\n        if (!e.target.checked) {\r\n            console.log('Необходимо вернуть одну дату если они разные startDate: ', dates.startDate.format('DD'), \r\n            ' ?== ',props.dateInterval.startDate.format('DD'))\r\n            console.log('Необходимо вернуть одну дату если они разные endDate: ', dates.endDate.format('DD'), \r\n            ' ?== ',props.dateInterval.endDate.format('DD'))\r\n            setDates({\r\n                startDate: dates.startDate,\r\n                endDate: dates.startDate\r\n            })\r\n            console.log('setDates runing')\r\n        }\r\n        setIsInterval(e.target.checked)\r\n    }\r\n\r\n    const onDateRangeChange = (values: RangeValue<moment.Moment>, formatString: [string, string]): void => {\r\n        // console.log(values)\r\n        if (values !== null && values[0] !== null && values[1] !== null ) {\r\n            setDates({\r\n                startDate: values[0],\r\n                endDate: values[1],\r\n            })\r\n        }\r\n        \r\n    }\r\n\r\n    const onDateChange = (value: moment.Moment | null, dateString: string):void => {\r\n        if (value !== null) {\r\n            setDates({\r\n                startDate: value,\r\n                endDate: value,\r\n            })\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"row\" >\r\n            <div className=\"col-12 col-md-8 col-lg-6\">\r\n                <div className=\"d-none d-sm-inline\">\r\n                    <label >Select {isInterval ? \"date interval\" : \"date\"}:</label>\r\n                </div>\r\n\r\n                <div className=\"d-inline\">\r\n                    {isInterval ?\r\n                        <RangePicker\r\n                            onChange={onDateRangeChange}\r\n                            defaultValue={[props.selectedDate, props.selectedDate]}\r\n                            value = {[props.dateInterval.startDate, props.dateInterval.endDate]}\r\n                            format='DD-MM-YYYY'\r\n                            style={{ marginLeft: 10 }}\r\n                        />\r\n                        :\r\n                        <DatePicker\r\n                            onChange={onDateChange}\r\n                            defaultValue={props.dateInterval.startDate}\r\n                            format='DD-MM-YYYY'\r\n                            style={{ marginLeft: 10 }}\r\n                        />\r\n                    }\r\n                </div>\r\n            </div>\r\n            <div className=\"col-12 col-md-4 col-lg-2 m-2 m-md-0\" >\r\n                <Checkbox className=\"ml-3\" onChange={onDateTypeChange}>Date interval</Checkbox>\r\n            </div>\r\n            <div className=\"col-12 col-md-12 col-lg-4\">\r\n                <Button\r\n                    type=\"primary\"\r\n                    shape=\"round\"\r\n                    icon={\r\n                        <div className=\"d-flex flex-wrap align-content-start\">\r\n                            <FileAddOutlined style={{ fontSize: '18px' }} />\r\n                            <span className=\"ml-1\" style={{ fontSize: '14px' }}>Add</span>\r\n                        </div>}\r\n                    style={{ marginLeft: 10 }}\r\n                    onClick={props.showDrawer}\r\n                    disabled={props.isAddActive}\r\n                />\r\n\r\n                <Button className=\"\"\r\n                    type=\"primary\"\r\n                    shape=\"round\"\r\n                    style={{ marginLeft: 10 }}\r\n                    onClick={props.showModal}\r\n                    icon={\r\n                        <div className=\"d-flex flex-wrap align-content-start\">\r\n                            <SettingOutlined style={{ fontSize: '18px' }} />\r\n                            <span className=\"ml-1\" style={{ fontSize: '14px' }}>Settings</span>\r\n                        </div>} \r\n                    />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ToDoHeader","C:\\OSPanel\\domains\\epam-app\\src\\Components\\Settings\\SettingsModal.tsx",[],"C:\\OSPanel\\domains\\epam-app\\src\\api\\taskApi.ts",["99"],"import { NewTaskDataType, TaskType } from '../Types/types'\r\nimport {instance, APIResponseType} from './api'\r\n\r\nexport type TaskListType = {\r\n    Tasks: Array<TaskType>\r\n}\r\n\r\nexport const taskAPI = {\r\n    getTaskList(date: string) {\r\n        return instance.get<TaskListType>(`tasks?date=${date}` ).then(response => {\r\n            return response.status === 200 ? response : null;\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                console.log('err', err.response)\r\n                return err.response\r\n            } else if (err.request) {\r\n                console.log('request', err.request)\r\n            } else {\r\n                console.log('anything else: ', err)\r\n            }\r\n            return null\r\n        })\r\n    },\r\n\r\n    createNewTask(values: NewTaskDataType) {\r\n        return instance.post<TaskListType>(`tasks`, values).then(response => {\r\n            return response.status === 200 ? response : null;\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                return err.response\r\n            } else if (err.request) {\r\n                console.log('request', err.request)\r\n            } else {\r\n                console.log('anything else: ', err)\r\n            }\r\n            return null\r\n        })\r\n    },\r\n\r\n    getTaskListForGap(values: getTaskListForGapValuesType) {\r\n        console.log('getTaskListForGap API', values)\r\n        return instance.post<TaskListType>(`tasks/part`, values).then(response => {\r\n            console.log('response', response)\r\n            return response.status === 200 ? response : null;\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                console.log('err')\r\n                return err.response\r\n            } else if (err.request) {\r\n                console.log('request', err.request)\r\n            } else {\r\n                console.log('anything else: ', err)\r\n            }\r\n            return null\r\n        })\r\n    },\r\n\r\n    deleteTask(taskId: number) {\r\n        return instance.delete<TaskListType>(`tasks/${taskId}`).then(response => {\r\n            return response.status === 200 ? response : null;\r\n        })\r\n    }\r\n}\r\n\r\nexport type getTaskListForGapValuesType = {\r\n    start_date: string, \r\n    end_date: string\r\n}","C:\\OSPanel\\domains\\epam-app\\src\\Components\\TimeScale\\TaskItem\\TaskItem.tsx",[],"C:\\OSPanel\\domains\\epam-app\\src\\utils\\array-helpers.ts",[],"C:\\OSPanel\\domains\\epam-app\\src\\Components\\TimeScale\\TimeScale.tsx",["100"],"import React, { useEffect, useState } from 'react'\r\nimport { TaskType } from '../../Types/types'\r\nimport moment from 'moment'\r\nimport { TimeScalePropsType } from './TimeScaleContainer'\r\nimport { Divider, Spin, Tooltip, message } from 'antd'\r\nimport TaskItem from './TaskItem/TaskItemContainer'\r\n\r\n\r\n// const compareMoments\r\n\r\nexport type OwnTaskTimeScaleType = {}\r\nconst TimeScale: React.FC<TimeScalePropsType> = (props) => {\r\n    type SelestedDatesType = typeof props.dateInterval\r\n    const [selestedDates, setSelectedDates] = useState<SelestedDatesType>({ startDate: moment(null), endDate: moment() })\r\n    useEffect(() => {\r\n        // console.log('dateInterval in TimeScale: ', props)\r\n        if (\r\n            props.dateInterval.startDate.format('YYYY-MM-DD') === selestedDates.startDate.format('YYYY-MM-DD') &&\r\n            props.dateInterval.endDate.format('YYYY-MM-DD') === selestedDates.endDate.format('YYYY-MM-DD')\r\n        ) {\r\n            // console.log('startDate', props.dateInterval.startDate.format('DD'), ' === ', selestedDates.startDate.format('DD'))\r\n            // console.log('endDate', props.dateInterval.endDate.format('DD'), ' === ', selestedDates.endDate.format('DD'))\r\n        } else {\r\n            // console.log('startDate', props.dateInterval.startDate.format('DD'), ' !== ', selestedDates.startDate.format('DD'))\r\n            // console.log('endDate', props.dateInterval.endDate.format('DD'), ' !== ', selestedDates.endDate.format('DD'))\r\n            if (props.dateInterval.startDate !== null && props.dateInterval.startDate !== null) {\r\n                console.log(props.dateInterval.startDate.format('YYYY-MM-DD'),' - ', props.dateInterval.endDate.format('YYYY-MM-DD'))\r\n                props.getTaskListForGap(\r\n                    props.dateInterval.startDate.format('YYYY-MM-DD'), \r\n                    props.dateInterval.endDate.format('YYYY-MM-DD')\r\n                )\r\n                setSelectedDates(props.dateInterval)\r\n            }\r\n        }\r\n    }, [props.dateInterval]);\r\n\r\n    useEffect(() => {\r\n        if (props.errorMessage !== null) {\r\n            message.success(props.errorMessage);\r\n        }\r\n    }, [props.errorMessage])\r\n\r\n    if (props.taskList !== null) {\r\n        return (\r\n            <>\r\n                {/* {props.taskListIsFetching ? <Spin key=\"spin\" size=\"large\" /> : null} */}\r\n                {getTimeScaleArrey(props.taskList)}\r\n            </>\r\n        )\r\n    } else {\r\n        return (\r\n            <Spin key=\"spin\" size=\"large\" />\r\n        )\r\n    }\r\n}\r\n\r\nexport default TimeScale\r\n\r\n\r\nconst getTimeScaleArrey = (taskList: Array<TaskType>): Array<React.ReactElement<string>> => {\r\n    const sortByParams = (field: 'date' | 'time') => {\r\n        if (field === 'date') {\r\n            return (a: TaskType, b: TaskType) => a['date'] > b['date'] ? 1 : -1;\r\n        } else {\r\n            return (a: TaskType, b: TaskType) => a['time'] > b['time'] ? -1 : 1;\r\n        }\r\n    }\r\n\r\n    taskList.sort(sortByParams('time')).sort(sortByParams('date'))\r\n\r\n    let timeScaleArrey: Array<React.ReactElement<string>> = []\r\n    let tomorowTasks: Array<TaskType> = []\r\n\r\n    const getHeadlineLabel = (task: TaskType) => {\r\n        return moment(task.date).format('DD MMMM')\r\n    }\r\n\r\n    let headlineDate: string | null = null;\r\n\r\n    if (taskList !== null && taskList.length > 0) {\r\n        headlineDate = getHeadlineLabel(taskList[0])\r\n        timeScaleArrey.push(\r\n            <h3 key={headlineDate + 'title'}>{headlineDate}:</h3>\r\n        )\r\n    }\r\n\r\n    for (let index: number = 0; index < 24; index++) {\r\n        if (taskList.length > 0) {\r\n            timeScaleArrey.push(\r\n                <Divider key={index + 'to' + headlineDate} orientation=\"left\">\r\n                    {index <= 9 ? '0' : null}{index}:00\r\n                </Divider>\r\n            )\r\n        } else {\r\n            timeScaleArrey.push(<h3>no tasks</h3>)\r\n            break\r\n        }\r\n\r\n        if (taskList !== null) {\r\n            for (let i = 0; i < taskList.length; i++) {\r\n                const element: TaskType = taskList[i];\r\n                const timeVal = Number(element.time.split(':', 1))\r\n                const nextHour = index + 1\r\n                if (timeVal >= index && timeVal < nextHour) {\r\n                    if (getHeadlineLabel(element) === headlineDate) {\r\n                        timeScaleArrey.push(\r\n                            <Tooltip key={index + '-' + element.id} placement=\"topLeft\" title={element.descriptions}>\r\n                                <TaskItem element={element} />\r\n                            </Tooltip>\r\n                        )\r\n                    }\r\n                    else {\r\n                        tomorowTasks.push(element)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (tomorowTasks.length > 0) {\r\n        timeScaleArrey = timeScaleArrey.concat(getTimeScaleArrey(tomorowTasks))\r\n    }\r\n\r\n    return timeScaleArrey\r\n}","C:\\OSPanel\\domains\\epam-app\\src\\Components\\TimeScale\\TimeScaleContainer.tsx",[],"C:\\OSPanel\\domains\\epam-app\\src\\Components\\TimeScale\\TaskItem\\TaskItemContainer.tsx",["101"],"import {connect} from 'react-redux'\r\nimport TaskItem, { OwnTaskItemPropsType } from './TaskItem'\r\nimport {deleteTask} from './../../../redux/taskReducer'\r\nimport { AppStateType } from '../../../redux/store'\r\nimport {NewTaskDataType} from './../../../Types/types'\r\n\r\nexport type MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype DispatchPropsType = {\r\n    deleteTask: (taskid: number)=> void\r\n}\r\n\r\nexport type TaskItemPropsType = MapPropsType & DispatchPropsType & OwnTaskItemPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        // taskList: state.task.taskList,\r\n        // taskSaveStatus: state.task.taskSaveStatus,\r\n        // errorMessage: state.task.errorMessage\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, DispatchPropsType, OwnTaskItemPropsType, AppStateType>(mapStateToProps, \r\n    {deleteTask}) \r\n    (TaskItem);","C:\\OSPanel\\domains\\epam-app\\src\\Components\\ToDoHeaderContainer.tsx",[],{"ruleId":"102","replacedBy":"103"},{"ruleId":"104","replacedBy":"105"},{"ruleId":"106","severity":1,"message":"107","line":1,"column":27,"nodeType":"108","messageId":"109","endLine":1,"endColumn":36},{"ruleId":"106","severity":1,"message":"110","line":2,"column":10,"nodeType":"108","messageId":"109","endLine":2,"endColumn":14},{"ruleId":"106","severity":1,"message":"111","line":2,"column":22,"nodeType":"108","messageId":"109","endLine":2,"endColumn":29},{"ruleId":"106","severity":1,"message":"112","line":2,"column":31,"nodeType":"108","messageId":"109","endLine":2,"endColumn":38},{"ruleId":"106","severity":1,"message":"113","line":7,"column":10,"nodeType":"108","messageId":"109","endLine":7,"endColumn":18},{"ruleId":"106","severity":1,"message":"114","line":8,"column":22,"nodeType":"108","messageId":"109","endLine":8,"endColumn":32},{"ruleId":"106","severity":1,"message":"115","line":10,"column":8,"nodeType":"108","messageId":"109","endLine":10,"endColumn":16},{"ruleId":"116","severity":1,"message":"117","line":48,"column":8,"nodeType":"118","endLine":48,"endColumn":30,"suggestions":"119"},{"ruleId":"106","severity":1,"message":"120","line":76,"column":10,"nodeType":"108","messageId":"109","endLine":76,"endColumn":19},{"ruleId":"106","severity":1,"message":"114","line":6,"column":21,"nodeType":"108","messageId":"109","endLine":6,"endColumn":31},{"ruleId":"106","severity":1,"message":"121","line":27,"column":11,"nodeType":"108","messageId":"109","endLine":27,"endColumn":19},{"ruleId":"116","severity":1,"message":"117","line":33,"column":8,"nodeType":"118","endLine":33,"endColumn":27,"suggestions":"122"},{"ruleId":"106","severity":1,"message":"123","line":2,"column":19,"nodeType":"108","messageId":"109","endLine":2,"endColumn":34},{"ruleId":"116","severity":1,"message":"124","line":35,"column":8,"nodeType":"118","endLine":35,"endColumn":28,"suggestions":"125"},{"ruleId":"106","severity":1,"message":"126","line":5,"column":9,"nodeType":"108","messageId":"109","endLine":5,"endColumn":24},"no-native-reassign",["127"],"no-negated-in-lhs",["128"],"@typescript-eslint/no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'Spin' is defined but never used.","'Divider' is defined but never used.","'Tooltip' is defined but never used.","'TaskType' is defined but never used.","'EventValue' is defined but never used.","'TaskItem' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["129"],"'ErrorItem' is defined but never used.","'dispatch' is assigned a value but never used.",["130"],"'APIResponseType' is defined but never used.","React Hook useEffect has missing dependencies: 'props', 'selestedDates.endDate', and 'selestedDates.startDate'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["131"],"'NewTaskDataType' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"132","fix":"133"},{"desc":"134","fix":"135"},{"desc":"136","fix":"137"},"Update the dependencies array to be: [props, props.taskSaveStatus]",{"range":"138","text":"139"},"Update the dependencies array to be: [isInterval, dates, props]",{"range":"140","text":"141"},"Update the dependencies array to be: [props, props.dateInterval, selestedDates.endDate, selestedDates.startDate]",{"range":"142","text":"143"},[1522,1544],"[props, props.taskSaveStatus]",[1367,1386],"[isInterval, dates, props]",[1995,2015],"[props, props.dateInterval, selestedDates.endDate, selestedDates.startDate]"]
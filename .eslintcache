[{"C:\\OSPanel\\domains\\epam-app\\src\\index.tsx":"1","C:\\OSPanel\\domains\\epam-app\\src\\reportWebVitals.ts":"2","C:\\OSPanel\\domains\\epam-app\\src\\App.tsx":"3","C:\\OSPanel\\domains\\epam-app\\src\\api\\api.ts":"4","C:\\OSPanel\\domains\\epam-app\\src\\redux\\taskReducer.ts":"5","C:\\OSPanel\\domains\\epam-app\\src\\redux\\store.ts":"6","C:\\OSPanel\\domains\\epam-app\\src\\api\\taskApi.ts":"7","C:\\OSPanel\\domains\\epam-app\\src\\Components\\TimeScale\\TaskItem\\TaskItem.tsx":"8","C:\\OSPanel\\domains\\epam-app\\src\\utils\\array-helpers.ts":"9","C:\\OSPanel\\domains\\epam-app\\src\\Components\\TimeScale\\TimeScale.tsx":"10","C:\\OSPanel\\domains\\epam-app\\src\\Components\\TimeScale\\TimeScaleContainer.tsx":"11","C:\\OSPanel\\domains\\epam-app\\src\\Components\\TimeScale\\TaskItem\\TaskItemContainer.tsx":"12","C:\\OSPanel\\domains\\front1\\src\\index.tsx":"13","C:\\OSPanel\\domains\\front1\\src\\reportWebVitals.ts":"14","C:\\OSPanel\\domains\\front1\\src\\App.tsx":"15","C:\\OSPanel\\domains\\front1\\src\\redux\\store.ts":"16","C:\\OSPanel\\domains\\front1\\src\\redux\\appReducer.ts":"17","C:\\OSPanel\\domains\\front1\\src\\Components\\Header\\Header.tsx":"18","C:\\OSPanel\\domains\\front1\\src\\Components\\Login\\Login.tsx":"19","C:\\OSPanel\\domains\\front1\\src\\redux\\authReducer.ts":"20","C:\\OSPanel\\domains\\front1\\src\\redux\\taskReducer.ts":"21","C:\\OSPanel\\domains\\front1\\src\\Components\\Header\\MenuBrowser.tsx":"22","C:\\OSPanel\\domains\\front1\\src\\Components\\Header\\MenuMobile.tsx":"23","C:\\OSPanel\\domains\\front1\\src\\api\\authAPI.ts":"24","C:\\OSPanel\\domains\\front1\\src\\api\\taskApi.ts":"25","C:\\OSPanel\\domains\\front1\\src\\Components\\TimeScale\\TimeScaleContainer.tsx":"26","C:\\OSPanel\\domains\\front1\\src\\Components\\ToDo\\Settings\\SettingsModal.tsx":"27","C:\\OSPanel\\domains\\front1\\src\\Components\\ToDo\\ToDoHeader\\ToDoHeaderContainer.tsx":"28","C:\\OSPanel\\domains\\front1\\src\\Components\\ToDo\\NewTaskForm\\NewTaskFormContainer.tsx":"29","C:\\OSPanel\\domains\\front1\\src\\api\\api.ts":"30","C:\\OSPanel\\domains\\front1\\src\\Components\\TimeScale\\TimeScale.tsx":"31","C:\\OSPanel\\domains\\front1\\src\\Components\\ToDo\\ToDoHeader\\ToDoHeader.tsx":"32","C:\\OSPanel\\domains\\front1\\src\\Components\\ToDo\\NewTaskForm\\NewTaskForm.tsx":"33","C:\\OSPanel\\domains\\front1\\src\\utils\\array-helpers.ts":"34","C:\\OSPanel\\domains\\front1\\src\\Components\\TimeScale\\TaskItem\\TaskItemContainer.tsx":"35","C:\\OSPanel\\domains\\front1\\src\\Components\\TimeScale\\TaskItem\\TaskItem.tsx":"36","C:\\OSPanel\\domains\\front1\\src\\Components\\Header\\HeaderContainer.tsx":"37","C:\\OSPanel\\domains\\front1\\src\\Components\\Orders\\OrdersContainer.tsx":"38","C:\\OSPanel\\domains\\front1\\src\\Components\\Orders\\Orders.tsx":"39","C:\\OSPanel\\domains\\front1\\src\\Components\\Header\\MenuMobileContainer.tsx":"40","C:\\OSPanel\\domains\\front1\\src\\utils\\Formik\\CreateAntField.tsx":"41","C:\\OSPanel\\domains\\front1\\src\\Components\\Login\\LoginForm.tsx":"42","C:\\OSPanel\\domains\\front1\\src\\utils\\Formik\\ValidateFields.ts":"43","C:\\OSPanel\\domains\\front1\\src\\Components\\TasksTree\\TasksTreeContainer.tsx":"44","C:\\OSPanel\\domains\\front1\\src\\redux\\TaskListReducer.ts":"45","C:\\OSPanel\\domains\\front1\\src\\api\\taskListAPI.ts":"46","C:\\OSPanel\\domains\\front1\\src\\Components\\TasksTree\\TasksTreeMobile.tsx":"47","C:\\OSPanel\\domains\\front1\\src\\Components\\Login\\LoginContainer.tsx":"48","C:\\OSPanel\\domains\\front1\\src\\Components\\Register\\Register.tsx":"49","C:\\OSPanel\\domains\\front1\\src\\Components\\Register\\RegisterForm.tsx":"50","C:\\OSPanel\\domains\\front1\\src\\Components\\Register\\RegisterContainer.tsx":"51","C:\\OSPanel\\domains\\front1\\src\\Components\\Header\\MenuBrowserConainer.tsx":"52","C:\\OSPanel\\domains\\front1\\src\\Components\\TasksTree\\TasksTreeBrowser.tsx":"53","C:\\OSPanel\\domains\\front1\\src\\Components\\TasksTree\\NewTaskTreeForm.tsx":"54","C:\\OSPanel\\domains\\front1\\src\\Components\\Header\\MenuPopover.tsx":"55","C:\\OSPanel\\domains\\front1\\src\\Components\\ToDo\\Settings\\SettingsModalContainer.tsx":"56","C:\\OSPanel\\domains\\front1\\src\\Components\\ToDo\\ToDoHeader\\ToDoHeaderMobile.tsx":"57","C:\\OSPanel\\domains\\front1\\src\\Components\\TasksTree\\TaskTreeItem.tsx":"58","C:\\OSPanel\\domains\\front1\\src\\Components\\ToDo\\ToDoForm\\ToDoForm.tsx":"59","C:\\OSPanel\\domains\\front1\\src\\Components\\ToDo\\ToDoMobile.tsx":"60","C:\\OSPanel\\domains\\front1\\src\\Components\\ToDo\\ToDoBrowser.tsx":"61","C:\\OSPanel\\domains\\front1\\src\\Components\\ToDo\\ToDoContainer.tsx":"62"},{"size":523,"mtime":1611574553464,"results":"63","hashOfConfig":"64"},{"size":440,"mtime":1611045973906,"results":"65","hashOfConfig":"64"},{"size":489,"mtime":1611647363642,"results":"66","hashOfConfig":"64"},{"size":490,"mtime":1611575513710,"results":"67","hashOfConfig":"64"},{"size":4730,"mtime":1611647323257,"results":"68","hashOfConfig":"64"},{"size":665,"mtime":1611575234925,"results":"69","hashOfConfig":"64"},{"size":1866,"mtime":1611574837519,"results":"70","hashOfConfig":"64"},{"size":2997,"mtime":1611563564363,"results":"71","hashOfConfig":"64"},{"size":318,"mtime":1611575192165,"results":"72","hashOfConfig":"64"},{"size":3830,"mtime":1611737108320,"results":"73","hashOfConfig":"64"},{"size":961,"mtime":1611575085038,"results":"74","hashOfConfig":"64"},{"size":832,"mtime":1611575102823,"results":"75","hashOfConfig":"64"},{"size":522,"mtime":1612956185680,"results":"76","hashOfConfig":"77"},{"size":440,"mtime":1611045973906,"results":"78","hashOfConfig":"77"},{"size":4005,"mtime":1612956842878,"results":"79","hashOfConfig":"77"},{"size":925,"mtime":1612956185683,"results":"80","hashOfConfig":"77"},{"size":1600,"mtime":1612956185679,"results":"81","hashOfConfig":"77"},{"size":2206,"mtime":1612956185682,"results":"82","hashOfConfig":"77"},{"size":1644,"mtime":1612957755255,"results":"83","hashOfConfig":"77"},{"size":4320,"mtime":1612959877018,"results":"84","hashOfConfig":"77"},{"size":5640,"mtime":1612956185688,"results":"85","hashOfConfig":"77"},{"size":3017,"mtime":1612956185682,"results":"86","hashOfConfig":"77"},{"size":5276,"mtime":1612956185680,"results":"87","hashOfConfig":"77"},{"size":2851,"mtime":1612960131392,"results":"88","hashOfConfig":"77"},{"size":3082,"mtime":1612959768978,"results":"89","hashOfConfig":"77"},{"size":1005,"mtime":1612776991639,"results":"90","hashOfConfig":"77"},{"size":4655,"mtime":1612956185683,"results":"91","hashOfConfig":"77"},{"size":1092,"mtime":1612789910049,"results":"92","hashOfConfig":"77"},{"size":997,"mtime":1612430063188,"results":"93","hashOfConfig":"77"},{"size":497,"mtime":1612426928687,"results":"94","hashOfConfig":"77"},{"size":4668,"mtime":1612956185683,"results":"95","hashOfConfig":"77"},{"size":4605,"mtime":1612953326157,"results":"96","hashOfConfig":"77"},{"size":5022,"mtime":1612872166132,"results":"97","hashOfConfig":"77"},{"size":318,"mtime":1611575192165,"results":"98","hashOfConfig":"77"},{"size":913,"mtime":1612780465906,"results":"99","hashOfConfig":"77"},{"size":3862,"mtime":1612956556869,"results":"100","hashOfConfig":"77"},{"size":713,"mtime":1612190659226,"results":"101","hashOfConfig":"77"},{"size":709,"mtime":1611924636969,"results":"102","hashOfConfig":"77"},{"size":308,"mtime":1611923733716,"results":"103","hashOfConfig":"77"},{"size":805,"mtime":1612189115138,"results":"104","hashOfConfig":"77"},{"size":8134,"mtime":1612957178780,"results":"105","hashOfConfig":"77"},{"size":1508,"mtime":1612259199052,"results":"106","hashOfConfig":"77"},{"size":1096,"mtime":1612956185679,"results":"107","hashOfConfig":"77"},{"size":1429,"mtime":1612895667643,"results":"108","hashOfConfig":"77"},{"size":4224,"mtime":1612956185680,"results":"109","hashOfConfig":"77"},{"size":2793,"mtime":1612959789419,"results":"110","hashOfConfig":"77"},{"size":13623,"mtime":1612956185678,"results":"111","hashOfConfig":"77"},{"size":750,"mtime":1612957559457,"results":"112","hashOfConfig":"77"},{"size":1204,"mtime":1612956185683,"results":"113","hashOfConfig":"77"},{"size":2110,"mtime":1612261006098,"results":"114","hashOfConfig":"77"},{"size":734,"mtime":1612258579867,"results":"115","hashOfConfig":"77"},{"size":798,"mtime":1612265114824,"results":"116","hashOfConfig":"77"},{"size":10200,"mtime":1612956185678,"results":"117","hashOfConfig":"77"},{"size":4109,"mtime":1612956185678,"results":"118","hashOfConfig":"77"},{"size":1334,"mtime":1612956185682,"results":"119","hashOfConfig":"77"},{"size":920,"mtime":1612956185683,"results":"120","hashOfConfig":"77"},{"size":3342,"mtime":1612956185678,"results":"121","hashOfConfig":"77"},{"size":5090,"mtime":1612956185687,"results":"122","hashOfConfig":"77"},{"size":1993,"mtime":1612956185677,"results":"123","hashOfConfig":"77"},{"size":15404,"mtime":1612956879068,"results":"124","hashOfConfig":"77"},{"size":4838,"mtime":1612956817437,"results":"125","hashOfConfig":"77"},{"size":1401,"mtime":1612956833495,"results":"126","hashOfConfig":"77"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},"136sl52",{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1p43c50",{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"156"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"168","messages":"169","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174","usedDeprecatedRules":"156"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177","usedDeprecatedRules":"156"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186","usedDeprecatedRules":"156"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"191"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"196","usedDeprecatedRules":"156"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"213","usedDeprecatedRules":"156"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"228","messages":"229","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"230","usedDeprecatedRules":"156"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"233","messages":"234","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"235","usedDeprecatedRules":"156"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"244","usedDeprecatedRules":"156"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"247","usedDeprecatedRules":"156"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"250","usedDeprecatedRules":"156"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"253","messages":"254","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"255","usedDeprecatedRules":"156"},{"filePath":"256","messages":"257","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"258","messages":"259","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"260","usedDeprecatedRules":"156"},{"filePath":"261","messages":"262","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"263","messages":"264","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"265","messages":"266","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\OSPanel\\domains\\epam-app\\src\\index.tsx",[],["267","268"],"C:\\OSPanel\\domains\\epam-app\\src\\reportWebVitals.ts",[],"C:\\OSPanel\\domains\\epam-app\\src\\App.tsx",[],"C:\\OSPanel\\domains\\epam-app\\src\\api\\api.ts",[],"C:\\OSPanel\\domains\\epam-app\\src\\redux\\taskReducer.ts",[],"C:\\OSPanel\\domains\\epam-app\\src\\redux\\store.ts",[],"C:\\OSPanel\\domains\\epam-app\\src\\api\\taskApi.ts",[],"C:\\OSPanel\\domains\\epam-app\\src\\Components\\TimeScale\\TaskItem\\TaskItem.tsx",[],"C:\\OSPanel\\domains\\epam-app\\src\\utils\\array-helpers.ts",[],"C:\\OSPanel\\domains\\epam-app\\src\\Components\\TimeScale\\TimeScale.tsx",["269"],"C:\\OSPanel\\domains\\epam-app\\src\\Components\\TimeScale\\TimeScaleContainer.tsx",[],"C:\\OSPanel\\domains\\epam-app\\src\\Components\\TimeScale\\TaskItem\\TaskItemContainer.tsx",[],"C:\\OSPanel\\domains\\front1\\src\\index.tsx",[],"C:\\OSPanel\\domains\\front1\\src\\reportWebVitals.ts",[],["270","271"],"C:\\OSPanel\\domains\\front1\\src\\App.tsx",["272","273"],"C:\\OSPanel\\domains\\front1\\src\\redux\\store.ts",[],"C:\\OSPanel\\domains\\front1\\src\\redux\\appReducer.ts",[],"C:\\OSPanel\\domains\\front1\\src\\Components\\Header\\Header.tsx",["274","275","276"],"import React from 'react'\r\nimport {\r\n    BrowserView,\r\n    MobileView,\r\n    isBrowser,\r\n    isMobile\r\n} from \"react-device-detect\"\r\nimport { HeaderPropsType } from './HeaderContainer'\r\nimport MenuBrowser from './MenuBrowserConainer'\r\nimport MenuMobile from './MenuMobileContainer'\r\n// import {useHistory, useLocation} from 'react-router-dom'\r\n\r\n// type MenuDataType = Array<any>\r\n\r\nexport type OwnHeaderPropsType = {}\r\n\r\nconst Header: React.FC<HeaderPropsType> = (props) => {\r\n    // const location = useLocation()\r\n    console.log('Header')\r\n\r\n    if (isMobile) {\r\n        return <MenuMobile menuData={menuData(props.appLocation)} logout={props.logout}/>\r\n    } else {\r\n        return <MenuBrowser menuData={menuData(props.appLocation)}/>\r\n    }\r\n}\r\n\r\nexport default Header\r\n\r\n\r\nexport type MenuDataType = ReturnType<typeof menuData>\r\n\r\nconst menuData = (appLocation: string) => {\r\n    const data = [\r\n    {\r\n        value: 'planning',\r\n        label: 'Planning',\r\n        children: [\r\n            {\r\n                label: 'ToDo list',\r\n                // label: <Link to='/toDoList'>ToDo list</Link>,\r\n                value: appLocation + 'toDoList',\r\n                disabled: false,\r\n            },\r\n            {\r\n                label: 'Tasks tree',\r\n                value: appLocation + 'tasksTree',\r\n            },\r\n            {\r\n                label: 'Analysis',\r\n                value: appLocation + 'analysis',\r\n                disabled: true,\r\n            }\r\n        ],\r\n    }, {\r\n        value: 'catalog',\r\n        label: 'Catalog',\r\n        children: [\r\n            {\r\n                label: 'Products',\r\n                value: appLocation + 'products',\r\n            }\r\n            , {\r\n                label: 'Providers',\r\n                value: appLocation + 'providers',\r\n            }\r\n        ],\r\n    },\r\n    {\r\n        value: 'orders',\r\n        label: 'Orders',\r\n        // isLeaf: true,\r\n        children: [\r\n            {\r\n                label: 'Orders',\r\n                value: appLocation + 'orders',\r\n            },\r\n            {\r\n                label: 'Leads',\r\n                value: appLocation + 'leads',\r\n            },\r\n        ],\r\n    },\r\n    ]\r\n    return data\r\n}\r\n","C:\\OSPanel\\domains\\front1\\src\\Components\\Login\\Login.tsx",["277","278","279","280","281"],"C:\\OSPanel\\domains\\front1\\src\\redux\\authReducer.ts",["282"],"C:\\OSPanel\\domains\\front1\\src\\redux\\taskReducer.ts",[],"C:\\OSPanel\\domains\\front1\\src\\Components\\Header\\MenuBrowser.tsx",["283","284","285","286","287","288"],"import React, {useState} from 'react'\r\nimport { Button, Menu } from 'antd';\r\nimport {Link, useHistory} from 'react-router-dom'\r\n// import { MailOutlined, AppstoreOutlined, SettingOutlined } from '@ant-design/icons';\r\nimport {LogoutOutlined} from '@ant-design/icons'\r\nimport {MenuBrowserPropsType} from './MenuBrowserConainer'\r\nimport { TaskListType } from '../../Types/types';\r\nimport { MenuDataType } from './Header';\r\n\r\nconst { SubMenu } = Menu;\r\n\r\nexport type OwnMenuBrowserPropsType = {\r\n    menuData: any,\r\n    // logout: any,\r\n    // appLocation: string | null\r\n}\r\n\r\nconst MenuBrowser: React.FC<MenuBrowserPropsType> = (props) => {\r\n    let history = useHistory();\r\n    const [state, setState] = useState<Array<string>>([])\r\n    const handleClick = (e: any | undefined) => {\r\n        // //console.log('click ', e);\r\n        // setState({ current: e.key });\r\n    }\r\n\r\n    const getMenuItem = (childs: any):any => {\r\n        // return <Menu.Item key=\"setting:1\">Option 1</Menu.Item>\r\n        const menuItems = childs.map( (item: any) => {\r\n            return (\r\n                <Menu.Item key={item.value}>\r\n                    <Link to={item.value}>{item.label}</Link>\r\n                </Menu.Item>\r\n            )\r\n        })\r\n        return menuItems\r\n    }\r\n\r\n    const getSubMenu = () => {\r\n        // //console.log(props.menuData)\r\n        const subMenu = props.menuData.map( (item: any) => {\r\n            // //console.log(item)\r\n            return (\r\n                <SubMenu \r\n                    key={item.value} \r\n                    // icon={<MailOutlined />}\r\n                    title={item.label}\r\n                >\r\n                    {getMenuItem(item.children)}\r\n                </SubMenu >\r\n            )\r\n        })\r\n        // subMenu.push(\r\n        //     <Menu.Item key=\"login\">\r\n        //         <Link to={props.appLocation +\"login\"} >Login</Link>\r\n        //     </Menu.Item>\r\n        // )\r\n        return subMenu\r\n    }\r\n\r\n    const onLogout = () => {\r\n        // onChange(['', ''])\r\n        history.replace(props.appLocation+'login')\r\n        props.logout()\r\n    }\r\n\r\n    console.log(props)\r\n\r\n    return (\r\n        <Menu \r\n            onClick={handleClick} \r\n            // selectedKeys={[current]} \r\n            mode=\"horizontal\"\r\n            theme=\"dark\"\r\n        >\r\n            {getSubMenu()}\r\n\r\n            {!props.isAuth ? \r\n                <Menu.Item key=\"login\">\r\n                    <Link to={props.appLocation +\"login\"} >Login</Link>\r\n                </Menu.Item>\r\n            :\r\n                <SubMenu \r\n                    key={props.user?.name} \r\n                    title={props.user?.name}\r\n                >\r\n                    <Menu.Item key=\"login\" onClick={onLogout}>\r\n                        {/* <Link to={props.appLocation +\"login\"} > */}\r\n                            Logout\r\n                        {/* </Link> */}\r\n                    </Menu.Item>\r\n                </SubMenu >\r\n                \r\n            }\r\n        </Menu>\r\n    )\r\n}\r\n\r\nexport default MenuBrowser","C:\\OSPanel\\domains\\front1\\src\\Components\\Header\\MenuMobile.tsx",["289","290","291"],"import React, { useState } from 'react'\r\nimport { Menu, ActivityIndicator, NavBar, Button } from 'antd-mobile'\r\nimport { ValueType } from 'antd-mobile/lib/menu/PropsType'\r\nimport './MenuMobile.css'\r\nimport { useHistory, useLocation } from 'react-router-dom'\r\nimport { MenuDataType } from './Header'\r\nimport { MenuMobilePropsType } from './MenuMobileContainer'\r\nimport { Link } from 'react-router-dom'\r\nimport { LogoutOutlined } from '@ant-design/icons'\r\nimport MenuPopover from './MenuPopover'\r\n\r\nexport type OwnMenuMobilePropsType = {\r\n    menuData: MenuDataType,\r\n    logout: () => void\r\n}\r\n\r\nconst MenuMobile: React.FC<MenuMobilePropsType> = (props) => {\r\n    let history = useHistory();\r\n    const location = useLocation();\r\n    const [show, setShow] = useState(false)\r\n    type DataType = typeof props.menuData\r\n    const data = [...props.menuData]\r\n    const [initData, setInitData] = useState<DataType>(data)\r\n\r\n    const getSelectedMenuItem = (): ValueType => {\r\n        let response: ValueType = [data[0].value, '']\r\n        data.forEach((dataItem: any) => {\r\n            if (dataItem.children) {\r\n                dataItem.children.forEach((item: any) => {\r\n                    //console.log('/',item.value,'===',location.pathname)\r\n                    if (item.value === location.pathname) {\r\n                        response = [dataItem.value, item.value]\r\n                    }\r\n                })\r\n            }\r\n        })\r\n        //console.log('getSelectedMenuItem response: ', response)\r\n        return response\r\n    }\r\n\r\n    const [selectedMenuItem, setSelectedMenuItem] = useState<ValueType>(getSelectedMenuItem())\r\n\r\n    const handleClick = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\r\n        e.preventDefault(); // Fix event propagation on Android\r\n        setShow(!show)\r\n        // if (!initData) {\r\n        //     setInitData(data)\r\n        // }\r\n    }\r\n\r\n    const onChange = (value?: ValueType | undefined) => {\r\n        //console.log('input values: ', value)\r\n        if (value) {\r\n            let subMenu = value[0]\r\n\r\n            data.forEach((dataItem) => {\r\n                if (dataItem.value === value[0]) {\r\n                    subMenu = value[0]\r\n                    if (dataItem.children && value[1]) {\r\n                        dataItem.children.forEach((cItem: { value: string | string[]; label: any }) => {\r\n                            if (cItem.value === value[1]) {\r\n                                history.replace(`${cItem.value}`)\r\n                                setShow(false)\r\n                            }\r\n                        })\r\n                    }\r\n                }\r\n            })\r\n        \r\n            if (subMenu === '') {\r\n                subMenu = data[0].value\r\n            }\r\n            //console.log('set values: ', [subMenu, value[1]])\r\n            setSelectedMenuItem([subMenu, value[1]])\r\n        }\r\n        \r\n    }\r\n\r\n    const onMaskClick = () => {\r\n        setShow(false)\r\n    }\r\n\r\n    const menuEl = (\r\n        <Menu\r\n            className=\"foo-menu\"\r\n            data={initData}\r\n            value={selectedMenuItem}\r\n            onChange={onChange}\r\n            height={document.documentElement.clientHeight * 0.6}\r\n        />\r\n    );\r\n\r\n    const loadingEl = (\r\n        <div style={{ width: '100%', height: document.documentElement.clientHeight * 0.6, display: 'flex', justifyContent: 'center' }}>\r\n            <ActivityIndicator size=\"large\" />\r\n        </div>\r\n    );\r\n\r\n    //console.log(props)\r\n\r\n    const onLogout = () => {\r\n        onChange(['', ''])\r\n        history.replace(props.appLocation + 'login')\r\n        props.logout()\r\n    }\r\n\r\n    return (\r\n        <div className={show ? 'menu-active' : ''}>\r\n            <div>\r\n                <NavBar\r\n                    leftContent=\"\"\r\n                    mode=\"light\"\r\n                    icon={<img src=\"https://gw.alipayobjects.com/zos/rmsportal/iXVHARNNlmdCGnwWxQPH.svg\" className=\"am-icon am-icon-md\" alt=\"\" />}\r\n                    onLeftClick={handleClick}\r\n                    className=\"top-nav-bar\"\r\n                    rightContent={props.isAuth ? <MenuPopover onLogout={onLogout} /> : null}\r\n                >\r\n                    {!props.isAuth ?\r\n                        <Link\r\n                            to={props.appLocation + \"login\"}\r\n                            onClick={() => { onChange(['', '']) }}\r\n                        >\r\n                            <span className=\"text-white\">Login</span>\r\n                        </Link>\r\n                        :\r\n                        <>\r\n                        <div>\r\n                            {props.user?.name}\r\n                            {/* <Button className=\"ml-5\" size=\"small\" icon={<LogoutOutlined />} onClick={onLogout} inline >\r\n\r\n                            </Button> */}\r\n                        </div>\r\n                        {/* <div className=\"w-100\">\r\n                            \r\n                        </div> */}\r\n                        </>\r\n                    }\r\n                    \r\n\r\n                </NavBar>\r\n            </div>\r\n            {show ? initData ? menuEl : loadingEl : null}\r\n            {show ? <div className=\"menu-mask\" onClick={onMaskClick} /> : null}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default (MenuMobile)\r\n\r\n\r\n","C:\\OSPanel\\domains\\front1\\src\\api\\authAPI.ts",["292","293"],"C:\\OSPanel\\domains\\front1\\src\\api\\taskApi.ts",[],"C:\\OSPanel\\domains\\front1\\src\\Components\\TimeScale\\TimeScaleContainer.tsx",[],"C:\\OSPanel\\domains\\front1\\src\\Components\\ToDo\\Settings\\SettingsModal.tsx",["294","295","296","297","298","299","300","301"],"import React, { ReactNode, useState } from 'react'\r\nimport { Card, Modal } from 'antd'\r\nimport { SettingsModalPropsType } from './SettingsModalContainer'\r\nimport { Form, Field, FormikProps, Formik } from 'formik'\r\nimport { validateRequired } from '../../../utils/Formik/ValidateFields'\r\nimport { AntInput, AntSelect, AntTextArea, AntTimePicker, AntDatePicker, AntCheckbox } from '../../../utils/Formik/CreateAntField'\r\nimport { List } from 'antd-mobile'\r\n\r\nconst zeroTime = new Date()\r\nzeroTime.setHours(0)\r\nzeroTime.setMinutes(0)\r\nzeroTime.setSeconds(0)\r\nzeroTime.setMilliseconds(0)\r\n\r\nconst maxTime = new Date()\r\nmaxTime.setHours(23)\r\nmaxTime.setMinutes(59)\r\nmaxTime.setSeconds(0)\r\nmaxTime.setMilliseconds(0)\r\n\r\nconst settingasInstanse: any = {\r\n        timeScaleInrerval: false,\r\n        completeInrerval: true,\r\n        timeScaleSingle: true,\r\n        completeSingle: true,\r\n        timeStart: zeroTime,\r\n        timeEnd: maxTime,\r\n}\r\n\r\nexport type OwmSettingsModalPropsType = {\r\n    isModalVisible: boolean,\r\n    handleOk: () => void,\r\n    handleCancel: () => void\r\n}\r\n\r\n\r\nconst SettingsModal: React.FC< SettingsModalPropsType > = (props) => {\r\n    const [settings, setSettings] = useState(props.viewSettings !== null ? props.viewSettings : settingasInstanse)\r\n\r\n    const handleSubmit = (values: any) => {\r\n        // console.log(values)\r\n        props.changeSettings('ToDo', values)\r\n        props.handleOk()\r\n    }\r\n\r\n    let settingsBlock: Array<any> = []\r\n\r\n    for (const propName in settings.ToDo) {\r\n        if (Object.prototype.hasOwnProperty.call(settings.ToDo, propName)) {\r\n            const element = settings.ToDo[propName]\r\n            // console.log(propName, element)\r\n            // settingsBlock.push(<FormItem title={propName} data={element}/>)\r\n        }\r\n    }\r\n\r\n    console.log('SettingsModal', props)\r\n\r\n    return (\r\n        <Modal\r\n            title=\"Task display settings\"\r\n            visible={props.isModalVisible}\r\n            // onOk={props.handleOk} \r\n            onOk={props.handleOk}\r\n            onCancel={props.handleCancel}\r\n        >\r\n            <Formik\r\n                initialValues={settingasInstanse}\r\n                // initialValues={{}}\r\n                onSubmit={handleSubmit}\r\n                render={SettingsForm}\r\n            />\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default SettingsModal\r\n\r\n\r\nconst SettingsForm: ((props: FormikProps<{}>) => ReactNode) = (props) => {\r\n    return (\r\n        <Form\r\n            className=\"form-container\"\r\n            onSubmit={props.handleSubmit}\r\n        >\r\n            <List renderHeader={() => 'Single date settings'}>\r\n                <Field\r\n                    component={AntCheckbox}\r\n                    name=\"timeScaleSingle\"\r\n                    label=\"is time scale visible\"\r\n                    submitCount={props.submitCount}\r\n                />\r\n\r\n                <Field\r\n                    component={AntCheckbox}\r\n                    name=\"completeSingle\"\r\n                    label=\"is complete visible\"\r\n                    submitCount={props.submitCount}\r\n                />\r\n            </List>\r\n\r\n            <List renderHeader={() => 'Inrerval date settings'}>\r\n                <Field\r\n                    component={AntCheckbox}\r\n                    name=\"timeScaleInrerval\"\r\n                    label=\"is time scale visible\"\r\n                    submitCount={props.submitCount}\r\n                />\r\n\r\n                <Field\r\n                    component={AntCheckbox}\r\n                    name=\"completeInrerval\"\r\n                    label=\"is complete visible\"\r\n                    submitCount={props.submitCount}\r\n                />\r\n            </List>\r\n            <List renderHeader={() => 'Work day info'}>\r\n                <Field\r\n                    component={AntDatePicker}\r\n                    name=\"timeStart\"\r\n                    type=\"time\"\r\n                    label=\"Start time\"\r\n                    validate={validateRequired}\r\n                    submitCount={props.submitCount}\r\n                    hasFeedback\r\n                />\r\n\r\n                <Field\r\n                    component={AntDatePicker}\r\n                    name=\"timeEnd\"\r\n                    type=\"time\"\r\n                    label=\"End time\"\r\n                    validate={validateRequired}\r\n                    submitCount={props.submitCount}\r\n                    hasFeedback\r\n                />\r\n            </List>\r\n\r\n            <div className=\"submit-container\">\r\n                <button className=\"ant-btn ant-btn-primary\" type=\"submit\">\r\n                    Save\r\n                </button>\r\n            </div>\r\n\r\n        </Form>\r\n    )\r\n}\r\n\r\n\r\n","C:\\OSPanel\\domains\\front1\\src\\Components\\ToDo\\ToDoHeader\\ToDoHeaderContainer.tsx",[],"C:\\OSPanel\\domains\\front1\\src\\Components\\ToDo\\NewTaskForm\\NewTaskFormContainer.tsx",[],["302","303"],"C:\\OSPanel\\domains\\front1\\src\\api\\api.ts",[],"C:\\OSPanel\\domains\\front1\\src\\Components\\TimeScale\\TimeScale.tsx",["304"],"import React, { useEffect, useState } from 'react'\r\nimport { TaskType } from '../../Types/types'\r\nimport moment from 'moment'\r\nimport { TimeScalePropsType } from './TimeScaleContainer'\r\nimport { Divider, Spin, Tooltip, message } from 'antd'\r\nimport TaskItem from './TaskItem/TaskItemContainer'\r\nimport { sortTaskArrayByParams } from '../../utils/array-helpers'\r\n\r\nexport type OwnTaskTimeScaleType = {\r\n    onEdit: (value:any)=>void\r\n}\r\nconst TimeScale: React.FC<TimeScalePropsType> = (props) => {\r\n    type SelestedDatesType = typeof props.dateInterval\r\n    const [selestedDates, setSelectedDates] = useState<SelestedDatesType>({ startDate: moment(null), endDate: moment() })\r\n    // const [isInterval, setIsInterval] = useState(\r\n    //     props.dateInterval.startDate.format('YYYY-MM-DD') === props.dateInterval.endDate.format('YYYY-MM-DD') ? false : true\r\n    //     )\r\n    useEffect(() => {\r\n        if (\r\n            props.dateInterval.startDate.isSame(selestedDates.startDate.format('YYYY-MM-DD'), \"day\" ) &&\r\n            props.dateInterval.endDate.isSame(selestedDates.endDate.format('YYYY-MM-DD'), \"day\" )\r\n        ) { }\r\n        else {\r\n            if (props.dateInterval.startDate !== null) {\r\n                props.getTaskList(\r\n                    props.dateInterval.startDate.format('YYYY-MM-DD'),\r\n                    props.dateInterval.endDate.format('YYYY-MM-DD')\r\n                )\r\n                setSelectedDates(props.dateInterval)\r\n            }\r\n        }\r\n    }, [props.dateInterval])\r\n\r\n    useEffect(() => {\r\n        if (props.errorMessage !== null) {\r\n            message.success(props.errorMessage)\r\n        }\r\n    }, [props.errorMessage])\r\n    \r\n    console.log(props.dateInterval)\r\n\r\n    if (props.taskList !== undefined) {\r\n        if (props.taskList !== null) {\r\n            return (\r\n                <>\r\n                    {getTimeScaleArrey(props.taskList, props.isInterval, props.onEdit)}\r\n                </>\r\n            )\r\n        } else {\r\n            return (\r\n                <Spin key=\"spin\" size=\"large\" />\r\n            )\r\n        }\r\n    } else {\r\n        return <div>Authorization required to get a list of tasks</div>\r\n    }\r\n    \r\n}\r\n\r\nexport default TimeScale\r\n\r\n\r\nconst getTimeScaleArrey = (taskList: Array<TaskType>, isInterval:boolean, onEdit:(value:any)=>void): Array<React.ReactElement<string>> => {\r\n    let timeScaleArrey: Array<React.ReactElement<string>> = []\r\n    let tomorowTasks: Array<TaskType> = []\r\n\r\n    console.log('isInterval: ', isInterval)\r\n\r\n    taskList.sort(sortTaskArrayByParams('time')).sort(sortTaskArrayByParams('date'))\r\n\r\n    const getHeadlineLabel = (task: TaskType) => {\r\n        return moment(task.date).format('D MMMM')\r\n    }\r\n\r\n    let headlineDate: string | null = null\r\n\r\n    if (taskList !== null && taskList.length > 0) {\r\n        headlineDate = getHeadlineLabel(taskList[0])\r\n        timeScaleArrey.push(\r\n            <h5 \r\n                key={headlineDate + 'title'}\r\n                className={isInterval ? \"text-left\" : \"\"}\r\n            >\r\n                {headlineDate}:\r\n            </h5>\r\n        )\r\n    }\r\n\r\n    for (let index: number = 0; index < 24; index++) {\r\n        if (taskList.length > 0) {\r\n            if (!isInterval && index > 7) {\r\n                timeScaleArrey.push(\r\n                    <Divider key={index + 'to' + headlineDate} orientation=\"left\">\r\n                        {index <= 9 ? '0' : null}{index}:00\r\n                    </Divider>\r\n                )\r\n            }\r\n        } else {\r\n            timeScaleArrey.push(<h3 key=\"noTasks\">no tasks</h3>)\r\n            break\r\n        }\r\n\r\n        if (taskList !== null) {\r\n            for (let i = 0; i < taskList.length; i++) {\r\n                const element: TaskType = taskList[i]\r\n                const timeVal = Number(element.time.split(':', 1))\r\n                const nextHour = index + 1\r\n                if (timeVal >= index && timeVal < nextHour) {\r\n                    if (getHeadlineLabel(element) === headlineDate) {\r\n                        timeScaleArrey.push(\r\n                            <Tooltip key={index + '-' + element.id} placement=\"topLeft\" title={element.descriptions}>\r\n                                <TaskItem element={element} onEdit={onEdit}/>\r\n                            </Tooltip>\r\n                        )\r\n                    }\r\n                    else {\r\n                        tomorowTasks.push(element)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (tomorowTasks.length > 0) {\r\n        timeScaleArrey = timeScaleArrey.concat(getTimeScaleArrey(tomorowTasks, isInterval, onEdit))\r\n    }\r\n\r\n    return timeScaleArrey\r\n}","C:\\OSPanel\\domains\\front1\\src\\Components\\ToDo\\ToDoHeader\\ToDoHeader.tsx",[],"C:\\OSPanel\\domains\\front1\\src\\Components\\ToDo\\NewTaskForm\\NewTaskForm.tsx",["305"],"C:\\OSPanel\\domains\\front1\\src\\utils\\array-helpers.ts",[],"C:\\OSPanel\\domains\\front1\\src\\Components\\TimeScale\\TaskItem\\TaskItemContainer.tsx",[],"C:\\OSPanel\\domains\\front1\\src\\Components\\TimeScale\\TaskItem\\TaskItem.tsx",[],"C:\\OSPanel\\domains\\front1\\src\\Components\\Header\\HeaderContainer.tsx",[],"C:\\OSPanel\\domains\\front1\\src\\Components\\Orders\\OrdersContainer.tsx",[],"C:\\OSPanel\\domains\\front1\\src\\Components\\Orders\\Orders.tsx",["306"],"import { formatCountdown } from 'antd/lib/statistic/utils'\r\nimport React from 'react'\r\nimport { OrdersPropsType } from './OrdersContainer'\r\n\r\nexport type OwnOrdersPropsType = {}\r\nconst Orders: React.FC<OrdersPropsType> = (props) => {\r\n    return(\r\n        <div>Orders</div>\r\n    )\r\n}\r\n\r\nexport default Orders","C:\\OSPanel\\domains\\front1\\src\\Components\\Header\\MenuMobileContainer.tsx",[],"C:\\OSPanel\\domains\\front1\\src\\utils\\Formik\\CreateAntField.tsx",["307","308"],"C:\\OSPanel\\domains\\front1\\src\\Components\\Login\\LoginForm.tsx",[],"C:\\OSPanel\\domains\\front1\\src\\utils\\Formik\\ValidateFields.ts",[],"C:\\OSPanel\\domains\\front1\\src\\Components\\TasksTree\\TasksTreeContainer.tsx",[],"C:\\OSPanel\\domains\\front1\\src\\redux\\TaskListReducer.ts",[],"C:\\OSPanel\\domains\\front1\\src\\api\\taskListAPI.ts",[],"C:\\OSPanel\\domains\\front1\\src\\Components\\TasksTree\\TasksTreeMobile.tsx",["309","310","311","312","313","314","315","316","317","318"],"import React, { useState, useEffect } from 'react'\r\nimport { TasksTreePropsType } from './TasksTreeContainer'\r\nimport { Drawer, List, SwipeAction, Icon, Button, Card, WingBlank, WhiteSpace } from 'antd-mobile'\r\nimport NewTaskTreeForm from './NewTaskTreeForm'\r\nimport './TasksTreeMobile.css'\r\nimport { Formik } from 'formik'\r\nimport { Spin, Empty } from 'antd'\r\nimport { propTypes } from 'react-bootstrap/esm/Image'\r\nimport moment from \"moment\"\r\nimport { TaskListType } from '../../Types/types'\r\nimport { useDispatch } from 'react-redux'\r\nimport { TaskTreeItemMobile } from './TaskTreeItem'\r\n\r\nconst Item = List.Item\r\n\r\ntype InitialDrewerDataType = {\r\n    header: string,\r\n    taskId: false | number\r\n}\r\n\r\nconst initialDrewerData: InitialDrewerDataType = {\r\n    header: 'Create New Task',\r\n    taskId: false\r\n}\r\n\r\nconst TasksTreeMobile: React.FC<TasksTreePropsType> = (props) => {\r\n    useEffect(() => {\r\n        if (props.taskList && props.taskList.length === 0 && !props.isTaskListLoaded) {\r\n            props.getTaskList()\r\n        } else if (props.taskList === undefined) {\r\n            props.getTaskList()\r\n        }\r\n        setVisible(false)\r\n        // console.log('initialValues: ', initialValues)\r\n        setInitialFormValues(initialValues)\r\n    }, [props.taskList])\r\n\r\n    const getSelectOptions = () => {\r\n        if (props.taskList !== undefined && props.taskList.length > 0) {\r\n            return props.taskList.map((item) => {\r\n                return ({\r\n                    name: item.name,\r\n                    value: item.id\r\n                })\r\n            })\r\n        } else {\r\n            //console.log('вернули пыстой список', props.taskList)\r\n            return null\r\n        }\r\n    }\r\n\r\n    let initialTimeToComplete = new Date()\r\n    initialTimeToComplete.setHours(0)\r\n    initialTimeToComplete.setMinutes(0)\r\n    initialTimeToComplete.setSeconds(0)\r\n    initialTimeToComplete.setMilliseconds(0)\r\n\r\n    const initialValues: any = {\r\n        selectOptions: getSelectOptions(),\r\n        taskTypes: [\r\n            {\r\n                name: 'Простая задача',\r\n                value: 1\r\n            },\r\n            {\r\n                name: 'Задача с контектом',\r\n                value: 2\r\n            }\r\n        ],\r\n        task_type: 1,\r\n        time_to_complete: initialTimeToComplete\r\n        // parent_id:[]\r\n    }\r\n\r\n    const [visible, setVisible] = useState(false)\r\n    const [initialFormValues, setInitialFormValues] = useState(initialValues)\r\n    const [drawerData, setDrawerData] = useState(initialDrewerData)\r\n\r\n    const handleSubmit = (formProps: any) => {\r\n        // console.log('handleSubmit TasksTreeMobile: ', formProps.time_to_complete)\r\n        let formPropsCopy: any = { ...formProps }\r\n        delete formPropsCopy.selectOptions\r\n        delete formPropsCopy.taskTypes\r\n        if (formPropsCopy.time_to_complete !== undefined) {\r\n            // console.log(formPropsCopy.time_to_complete)\r\n            const time_to_complete = moment(formPropsCopy.time_to_complete)\r\n            formPropsCopy.time_to_complete = time_to_complete.format('HH:mm:ss')\r\n        }\r\n        if (Array.isArray(formPropsCopy.parent_id)) {\r\n            formPropsCopy.parent_id = formPropsCopy.parent_id[0]\r\n        }\r\n\r\n        //console.log('NewTaskMobile submit: ', formPropsCopy)\r\n\r\n        formPropsCopy.user_id = props.userId\r\n        // props.createNewTaskList(formPropsCopy)\r\n        // setInitialFormValues(initialValues)\r\n        console.log('taskId: ', drawerData.taskId)\r\n        if (!drawerData.taskId) {\r\n            // console.log('createNewTaskList: ', formPropsCopy)\r\n            props.createNewTaskList(formPropsCopy)\r\n        } else {\r\n            console.log('updateTaskList: ', formPropsCopy)\r\n            props.updateTaskList(formPropsCopy, drawerData.taskId)\r\n        }\r\n    }\r\n\r\n    const onAdd = (args: any) => {\r\n        if (props.selectedTasks.length !== 0) {\r\n            setDrawerData({ ...drawerData, taskId: false })\r\n            console.log('sub')\r\n            console.log('initialValues', initialValues)\r\n            setInitialFormValues({ ...initialValues, parent_id: [Number(props.selectedTasks[props.selectedTasks.length - 1])] })\r\n        } else {\r\n            setInitialFormValues(initialValues)\r\n        }\r\n\r\n        setVisible(!visible)\r\n    }\r\n\r\n    const showDrawer = () => {\r\n        setVisible(true)\r\n    }\r\n\r\n    const onBack = () => {\r\n        props.backSelectedTasks()\r\n    }\r\n\r\n    console.log('TasksTreeMobile props: ', props)\r\n    // console.log('TasksTreeMobile name: ', initialFormValues.name)\r\n\r\n    // if (props.taskList !== undefined) {\r\n    return (\r\n        <WingBlank size=\"lg\">\r\n            <WhiteSpace size=\"lg\" />\r\n            <Card>\r\n                <Card.Header\r\n                    title={<h4 className=\"w-100 text-center\">Tasks Tree</h4>}\r\n                    extra={\r\n                        <div className=\"d-flex flex-row\">\r\n                            {props.selectedTasks.length > 0 && !visible ?\r\n                                <Button\r\n                                    inline\r\n                                    size=\"small\"\r\n                                    className=\"mx-3 my-2\"\r\n                                    // style={{ marginRight: '4px' }} \r\n                                    onClick={onBack}\r\n                                    type=\"primary\"\r\n                                >\r\n                                    Back\r\n                                    </Button>\r\n                                :\r\n                                null\r\n                            }\r\n                            <Button\r\n                                inline\r\n                                size=\"small\"\r\n                                className=\"mx-3 my-2\"\r\n                                // style={{ marginRight: '4px' }} \r\n                                onClick={onAdd}\r\n                                type=\"primary\"\r\n                            >\r\n                                {visible ? 'Close' : 'Add'}\r\n                            </Button>\r\n                        </div>\r\n                    }\r\n                >\r\n\r\n                </Card.Header>\r\n\r\n                <Drawer\r\n                    className=\"my-drawer\"\r\n                    style={{ minHeight: document.documentElement.clientHeight }}\r\n                    // enableDragHandle\r\n                    contentStyle={{ color: '#A6A6A6', textAlign: 'center', paddingTop: 0, width: \"100%\" }}\r\n                    sidebar={\r\n                        <div className=\"mt-4\">\r\n                            <Formik\r\n                                initialValues={initialFormValues}\r\n                                onSubmit={handleSubmit}\r\n                                render={NewTaskTreeForm}\r\n                                enableReinitialize={true}\r\n                            />\r\n                        </div>\r\n                    }\r\n                    open={visible}\r\n                    onOpenChange={onAdd}\r\n                >\r\n                    <List>\r\n\r\n\r\n                        {props.taskList !== undefined ?\r\n                            props.taskList.map((item) => {\r\n                                let parentId: number\r\n                                if (props.selectedTasks.length !== 0) {\r\n                                    parentId = props.selectedTasks[props.selectedTasks.length - 1]\r\n                                    if (item.parent_id === parentId) {\r\n                                        return (\r\n                                            <TaskTreeItemMobile\r\n                                                taskItem={item}\r\n                                                deleteTaskList={props.deleteTaskList}\r\n                                                showDrawer={showDrawer}\r\n                                                setDrawerData={setDrawerData}\r\n                                                initialFormValues={initialFormValues}\r\n                                                setInitialFormValues={setInitialFormValues}\r\n                                                updateTaskList={props.updateTaskList}\r\n                                            />\r\n                                        )\r\n                                    }\r\n                                } else {\r\n                                    if (item.parent_id === null) {\r\n                                        return (\r\n                                            <TaskTreeItemMobile\r\n                                                taskItem={item}\r\n                                                deleteTaskList={props.deleteTaskList}\r\n                                                showDrawer={showDrawer}\r\n                                                setDrawerData={setDrawerData}\r\n                                                initialFormValues={initialFormValues}\r\n                                                setInitialFormValues={setInitialFormValues}\r\n                                                updateTaskList={props.updateTaskList}\r\n                                            />\r\n                                        )\r\n                                    }\r\n                                }\r\n\r\n                            })\r\n                            :\r\n                            null\r\n                        }\r\n\r\n                    </List>\r\n                </Drawer>\r\n\r\n\r\n\r\n            </Card>\r\n        </WingBlank>\r\n    )\r\n    // } else {\r\n    //     return <Spin key=\"spin\" size=\"large\" />\r\n    // }\r\n}\r\n\r\nexport default TasksTreeMobile\r\n\r\n// const getTaskTreeItems = (\r\n//     taskList: Array<any>,\r\n//     deleteTaskList: (taskId: number) => void,\r\n//     showDrawer: () => void,\r\n//     setDrawerData: (drawerData: any) => void,\r\n//     initialFormValues: any,\r\n//     setInitialFormValues: (initialFormValues: any) => void\r\n// ) => {\r\n//     const onEdit = (task: any) => {\r\n//         // console.log(task)\r\n\r\n//         setDrawerData({\r\n//             header: 'Edit: \"' + task.name + '\"',\r\n//             taskId: task.id\r\n//         })\r\n\r\n//         let day = new Date()\r\n//         if (task.time_to_complete !== null) {\r\n//             const splitTime = task.time_to_complete.split(/:/)\r\n//             day.setHours(parseInt(splitTime[0]))\r\n//             day.setMinutes(parseInt(splitTime[1]))\r\n//             day.setSeconds(0)\r\n//             day.setMilliseconds(0)\r\n//         } else {\r\n//             day.setHours(0)\r\n//             day.setMinutes(0)\r\n//             day.setSeconds(0)\r\n//             day.setMilliseconds(0)\r\n//         }\r\n\r\n//         setInitialFormValues(\r\n//             {\r\n//                 ...initialFormValues,\r\n//                 // new: false,\r\n//                 name: task.name,\r\n//                 time_to_complete: day,\r\n//                 descriptions: task.descriptions,\r\n//                 parent_id: [task.parent_id],\r\n//                 task_type: [Number(task.task_type)]\r\n//             }\r\n//         )\r\n\r\n//         showDrawer()\r\n//     }\r\n\r\n//     const onItemOpen = (itemId: number) => {\r\n//         console.log(itemId, 'is open')\r\n//         // const dispatch = useDispatch()\r\n//         // dispatch( { type: 'SN/TASK_LIST/SET_SELECTED_TASK', itemId } )\r\n//     }\r\n\r\n//     // console.log(taskList)\r\n\r\n//     if (taskList && taskList.length > 0) {\r\n//         return taskList.map((item) => {\r\n//             //console.log('!!!!!!!')\r\n//             return (\r\n//                 <SwipeAction\r\n//                     style={{ backgroundColor: 'gray' }}\r\n//                     autoClose\r\n//                     right={[\r\n//                         {\r\n//                             text: 'Cancel',\r\n//                             onPress: () => {\r\n//                                 //console.log('cancel') \r\n//                             },\r\n//                             style: { backgroundColor: '#ddd', color: 'white' },\r\n//                         },\r\n//                         {\r\n//                             text: 'Delete',\r\n//                             onPress: () => deleteTaskList(item.id),\r\n//                             style: { backgroundColor: '#F4333C', color: 'white' },\r\n//                         },\r\n//                     ]}\r\n//                     left={[\r\n//                         {\r\n//                             text: 'Edit',\r\n//                             onPress: () => { onEdit(item) },\r\n//                             style: { backgroundColor: '#108ee9', color: 'white' },\r\n//                         },\r\n//                         {\r\n//                             text: 'Execute',\r\n//                             onPress: () => {\r\n//                                 // console.log('cancel')\r\n//                             },\r\n//                             style: { backgroundColor: 'green', color: 'white' },\r\n//                         },\r\n//                     ]}\r\n//                 // onOpen={() => console.log('global open')}\r\n//                 // onClose={() => console.log('global close')}\r\n//                 >\r\n//                     <Item\r\n//                         // className=\"my-3\"\r\n//                         onClick={() => { onItemOpen(item.id) }}\r\n//                         arrow=\"horizontal\"\r\n//                         key={item.id}\r\n//                     >\r\n//                         {item.name}\r\n//                     </Item>\r\n\r\n//                 </SwipeAction>\r\n//             )\r\n//         })\r\n//     } else {\r\n//         return (\r\n//             <Empty />\r\n//         )\r\n//     }\r\n\r\n\r\n// }\r\n\r\n","C:\\OSPanel\\domains\\front1\\src\\Components\\Login\\LoginContainer.tsx",[],"C:\\OSPanel\\domains\\front1\\src\\Components\\Register\\Register.tsx",["319","320","321","322"],"import { Formik } from 'formik'\r\nimport React, { useEffect } from 'react'\r\nimport RegisterForm from './RegisterForm'\r\nimport { RegisterPropsType } from './RegisterContainer'\r\nimport { propTypes } from 'react-bootstrap/esm/Image'\r\nimport { Redirect, Route, useHistory } from 'react-router-dom'\r\n\r\nconst initialValues = {\r\n    // parent_id :['1', '2', '3']\r\n}\r\n\r\nexport type OwnRegisterPropsType = {}\r\n\r\nconst Register: React.FC<RegisterPropsType> = (props) => {\r\n    let history = useHistory();\r\n    useEffect( () => {\r\n        //console.log('useEffect in Register: ', props.isAuth)\r\n        if(props.isAuth) {\r\n            history.replace(props.appLocation+'toDoList')\r\n        }\r\n    }, [props.isAuth])\r\n    const handleSubmit = (formProps: any) => {\r\n        //console.log(formProps)\r\n        formProps.status = 'guest'\r\n        props.register(formProps)\r\n    }\r\n\r\n    //console.log('Register', props)\r\n    return (\r\n        <>\r\n            <h1 className=\"mb-5 mx-auto\">Register Form</h1>\r\n            <Formik\r\n                initialValues={initialValues}\r\n                onSubmit={handleSubmit}\r\n                render={RegisterForm}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Register","C:\\OSPanel\\domains\\front1\\src\\Components\\Register\\RegisterForm.tsx",[],"C:\\OSPanel\\domains\\front1\\src\\Components\\Register\\RegisterContainer.tsx",[],"C:\\OSPanel\\domains\\front1\\src\\Components\\Header\\MenuBrowserConainer.tsx",[],"C:\\OSPanel\\domains\\front1\\src\\Components\\TasksTree\\TasksTreeBrowser.tsx",["323","324","325"],"import { Button, Card, Drawer, List, Checkbox, Collapse } from 'antd'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { TasksTreePropsType } from './TasksTreeContainer'\r\nimport { FileAddOutlined, SettingOutlined } from '@ant-design/icons'\r\nimport NewTaskTreeForm from './NewTaskTreeForm'\r\nimport { Formik, FormikProps } from 'formik'\r\nimport moment from \"moment\"\r\nimport { DeleteOutlined, EditOutlined } from '@ant-design/icons'\r\n\r\nconst { Panel } = Collapse;\r\n\r\ntype InitialDrewerDataType = {\r\n    header: string,\r\n    taskId: false | number\r\n}\r\n\r\nconst initialDrewerData: InitialDrewerDataType = {\r\n    header: 'Create New Task',\r\n    taskId: false\r\n}\r\n\r\nconst TasksTreeBrowser: React.FC<TasksTreePropsType> = (props) => {\r\n    useEffect(() => {\r\n        if (props.taskList !== undefined && props.taskList.length === 0 && !props.isTaskListLoaded) {\r\n            props.getTaskList()\r\n        }\r\n        else if (props.taskList === undefined) {\r\n            props.getTaskList()\r\n        }\r\n        setVisible(false)\r\n        setInitialFormValues(initialValues)\r\n    }, [props.taskList])\r\n\r\n    const [visible, setVisible] = useState(false)\r\n    const [drawerData, setDrawerData] = useState(initialDrewerData)\r\n\r\n    const getSelectOptions = () => {\r\n        if (props.taskList !== undefined && props.taskList.length > 0) {\r\n            return props.taskList.map((item) => {\r\n                return ({\r\n                    name: item.name,\r\n                    value: item.id\r\n                })\r\n            })\r\n        } else {\r\n            return null\r\n        }\r\n    }\r\n\r\n    const initialValues: any = {\r\n        selectOptions: getSelectOptions(),\r\n        taskTypes: [\r\n            {\r\n                name: 'Простая задача',\r\n                value: 1\r\n            },\r\n            {\r\n                name: 'Задача с контектом',\r\n                value: 2\r\n            }\r\n        ],\r\n        task_type: 1,\r\n        name: '',\r\n        // new: true\r\n\r\n    }\r\n\r\n    const [initialFormValues, setInitialFormValues] = useState(initialValues)\r\n\r\n    const onClose = () => {\r\n        setVisible(false)\r\n    }\r\n\r\n    const showDrawer = () => {\r\n        setVisible(true)\r\n    }\r\n\r\n    const onAdd = () => {\r\n        setDrawerData(initialDrewerData)\r\n        setInitialFormValues(initialValues)\r\n        // console.log(initialValues)\r\n        showDrawer()\r\n    }\r\n\r\n    const handleSubmit = (formProps: any) => {\r\n        let formPropsCopy: any = { ...formProps }\r\n        delete formPropsCopy.selectOptions\r\n        delete formPropsCopy.taskTypes\r\n        if (formPropsCopy.time_to_complete !== undefined) {\r\n            formPropsCopy.time_to_complete = formPropsCopy.time_to_complete.format('HH:mm:ss')\r\n        }\r\n\r\n        formPropsCopy.user_id = props.userId\r\n        if (!drawerData.taskId) {\r\n            props.createNewTaskList(formPropsCopy)\r\n        } else {\r\n            // console.log(formPropsCopy)\r\n            props.updateTaskList(formPropsCopy, drawerData.taskId)\r\n        }\r\n\r\n    }\r\n\r\n    // console.log('initialFormValues: ', initialFormValues)\r\n\r\n    return (\r\n        <>\r\n            <div className=\"site-card-border-less-wrapper\">\r\n                <Card\r\n                    title={\r\n                        <div\r\n                            // className=\"col-12 col-md-12 col-lg-4\"\r\n                            className=\"inline\"\r\n                        >\r\n                            <div ><h2>Tasks Tree</h2></div>\r\n\r\n\r\n                        </div>\r\n                    }\r\n                    extra={\r\n                        <>\r\n                            <Button\r\n                                type=\"primary\"\r\n                                shape=\"round\"\r\n                                icon={\r\n                                    <div className=\"d-flex flex-wrap align-content-start\">\r\n                                        <FileAddOutlined style={{ fontSize: '18px' }} />\r\n                                        <span className=\"ml-1\" style={{ fontSize: '14px' }}>Add</span>\r\n                                    </div>}\r\n                                style={{ marginLeft: 10 }}\r\n                                onClick={onAdd}\r\n                            />\r\n\r\n                            <Button className=\"\"\r\n                                type=\"primary\"\r\n                                shape=\"round\"\r\n                                style={{ marginLeft: 10 }}\r\n                                // onClick={props.showModal}\r\n                                icon={\r\n                                    <div className=\"d-flex flex-wrap align-content-start\">\r\n                                        <SettingOutlined style={{ fontSize: '18px' }} />\r\n                                        <span className=\"ml-1\" style={{ fontSize: '14px' }}>Settings</span>\r\n                                    </div>}\r\n                            />\r\n                        </>\r\n                    }\r\n                    bordered={false}\r\n                >\r\n\r\n                    {/* { getTaskTreeItems(props.taskList) } */}\r\n                    <List\r\n                        size=\"small\"\r\n                        // header={<h2>Tasks Tree</h2>}\r\n                        // footer={<div>Footer</div>}\r\n                        bordered\r\n                        dataSource={getTaskTreeItems(\r\n                            props.taskList,\r\n                            props.deleteTaskList,\r\n                            props.updateTaskList,\r\n                            showDrawer,\r\n                            setDrawerData,\r\n                            initialFormValues,\r\n                            setInitialFormValues\r\n                        )}\r\n\r\n                        renderItem={item => <List.Item draggable>{item}</List.Item>}\r\n                    />\r\n\r\n                    <Drawer\r\n                        title={drawerData.header}\r\n                        placement=\"right\"\r\n                        closable={true}\r\n                        onClose={onClose}\r\n                        visible={visible}\r\n                        width=\"90%\"\r\n                    >\r\n\r\n                        <Formik\r\n                            initialValues={initialFormValues}\r\n                            onSubmit={handleSubmit}\r\n                            render={NewTaskTreeForm}\r\n                            enableReinitialize={true}\r\n                        />\r\n\r\n                    </Drawer>\r\n\r\n                </Card>\r\n            </div>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default TasksTreeBrowser\r\n\r\nconst getTaskTreeItems = (\r\n    taskList: Array<any>,\r\n    deleteTask: (taskId: number) => void,\r\n    updateTaskList: (values: any, taskId: number)=> void,\r\n    showDrawer: () => void,\r\n    setDrawerData: (drawerData: any) => void,\r\n    initialFormValues: any,\r\n    setInitialFormValues: (initialFormValues: any) => void\r\n) => {\r\n    const onEdit = (task: any) => {\r\n        setDrawerData({\r\n            header: 'Edit: \"' + task.name + '\"',\r\n            taskId: task.id\r\n        })\r\n\r\n\r\n        let day = moment().zone('GMT')\r\n        if (task.time_to_complete !== null) {\r\n            const splitTime = task.time_to_complete.split(/:/)\r\n            day.hours(parseInt(splitTime[0])).minutes(parseInt(splitTime[1])).seconds(0).milliseconds(0);\r\n        } else {\r\n            day.hours(0).minutes(0).seconds(0).milliseconds(0);\r\n        }\r\n\r\n        setInitialFormValues(\r\n            {\r\n                ...initialFormValues,\r\n                // new: false,\r\n                name: task.name,\r\n                time_to_complete: day,\r\n                descriptions: task.descriptions,\r\n                parent_id: task.parent_id,\r\n                task_type: Number(task.task_type)\r\n            }\r\n        )\r\n        showDrawer()\r\n    }\r\n\r\n    const onStatusChange = (e:any) => {\r\n        const values = { isCompleted: e.target.checked }\r\n        console.log(e)\r\n        updateTaskList(values, e.target.id)\r\n    }\r\n\r\n    if (taskList !== undefined && taskList.length > 0) {\r\n        return taskList.map((item) => {\r\n            return (\r\n                <>\r\n                    <div><Checkbox checked={item.isCompleted} id={item.id} onClick={onStatusChange}/></div>\r\n                    <div className=\"w-100 float-left\" key={item.id}>\r\n                        <div className=\"ml-3 float-left\">\r\n                            \r\n                            {item.isCompleted ? <span className=\"text-black-50\">{item.name}</span> : <span>{item.name}</span>}\r\n                            \r\n                        </div>\r\n                        <div className=\"ml-3 float-right\">\r\n                            {item.time_to_complete}\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"d-flex flex-row\">\r\n                        <Button className=\"\"\r\n                            type=\"primary\"\r\n                            shape=\"circle\"\r\n                            size=\"small\"\r\n                            style={{ marginLeft: 10 }}\r\n                            onClick={() => { onEdit(item) }}\r\n                            icon={\r\n                                <div className=\"d-flex flex-wrap align-content-start\">\r\n                                    <EditOutlined className=\"ml-1\" style={{ fontSize: '14px' }} />\r\n                                </div>\r\n                            }\r\n                        />\r\n                        <Button className=\"\"\r\n                            type=\"primary\"\r\n                            danger\r\n                            shape=\"circle\"\r\n                            size=\"small\"\r\n                            style={{ marginLeft: 10 }}\r\n                            onClick={() => { deleteTask(item.id) }}\r\n                            icon={\r\n                                <div className=\"d-flex flex-wrap align-content-start\">\r\n                                    <DeleteOutlined className=\"ml-1\" style={{ fontSize: '14px' }} />\r\n                                </div>\r\n                            }\r\n                        />\r\n                    </div>\r\n                </>\r\n            )\r\n        })\r\n    } else {\r\n        return []\r\n    }\r\n}","C:\\OSPanel\\domains\\front1\\src\\Components\\TasksTree\\NewTaskTreeForm.tsx",["326"],"import { Form, Field, FormikProps } from 'formik'\r\nimport React, { ReactNode, useState, useEffect } from 'react'\r\nimport { AntInput, AntSelect, AntTextArea, AntTimePicker } from '../../utils/Formik/CreateAntField'\r\nimport { validateRequired } from '../../utils/Formik/ValidateFields'\r\nimport { Select } from 'antd';\r\n\r\nconst { Option }: any = Select;\r\n\r\n\r\nconst NewTaskTreeForm: ((props: FormikProps<{}>) => ReactNode) = (props) => {\r\n    const values: any = props.values\r\n    //console.log(values)\r\n    const selectOptions = values.selectOptions\r\n    const taskTypes = values.taskTypes // ++++++\r\n\r\n    const [taskType, setTaskType] = useState(values.taskType)\r\n\r\n    useEffect(() => {\r\n        const values: any = props.values\r\n        const taskTypes = values.task_type\r\n        setTaskType(taskTypes)\r\n\r\n        // console.log('useEffect NewTaskTreeForm', props.initialValues)\r\n    }, [props.values])\r\n\r\n    //console.log('NewTaskTreeForm props: ', props)\r\n\r\n    // const handleSubmit = (formProps: any) => {\r\n    //     //console.log('formProps in NewTaskTreeForm: ',formProps)\r\n    //     props.handleSubmit(formProps)\r\n    // }\r\n\r\n    // console.log('NewTaskTreeForm', props)\r\n    // console.log('NewTaskTreeForm render', values)\r\n\r\n    return (\r\n        <Form\r\n            className=\"form-container\"\r\n            onSubmit={props.handleSubmit}\r\n        >\r\n            <Field\r\n                component={AntInput}\r\n                name=\"name\"\r\n                type=\"text\"\r\n                label=\"Name\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n\r\n            <Field\r\n                component={AntSelect}\r\n\r\n                selectOptions={selectOptions}\r\n\r\n                name=\"parent_id\"\r\n                type=\"select\"\r\n                label=\"Parent\"\r\n                // validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n            // hasFeedback\r\n            />\r\n\r\n            <Field\r\n                component={AntTextArea}\r\n                name=\"descriptions\"\r\n                type=\"text\"\r\n                label=\"Descriptions\"\r\n                // validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                // hasFeedback\r\n            />\r\n\r\n            <Field\r\n                component={AntTimePicker}\r\n                name=\"time_to_complete\"\r\n                type=\"time\"\r\n                label=\"Time to complete\"\r\n                // validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n            // hasFeedback\r\n            />\r\n\r\n            <Field\r\n                component={AntSelect}\r\n\r\n                selectOptions={taskTypes}\r\n\r\n                name=\"task_type\"\r\n                type=\"select\"\r\n                label=\"task Types\"\r\n                // validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                // hasFeedback\r\n            />\r\n\r\n\r\n            {taskType === 2 ?\r\n                <>\r\n                    <Field\r\n                        component={AntInput}\r\n                        name=\"context1\"\r\n                        type=\"text\"\r\n                        label=\"context1\"\r\n                        validate={validateRequired}\r\n                        submitCount={props.submitCount}\r\n                        hasFeedback\r\n                    />\r\n                    <Field\r\n                        component={AntInput}\r\n                        name=\"context2\"\r\n                        type=\"text\"\r\n                        label=\"context2\"\r\n                        validate={validateRequired}\r\n                        submitCount={props.submitCount}\r\n                        hasFeedback\r\n                    />\r\n                </>\r\n                :\r\n                null\r\n            }\r\n\r\n            <div className=\"submit-container\">\r\n                <button className=\"ant-btn ant-btn-primary\" type=\"submit\">\r\n                    Save\r\n                </button>\r\n            </div>\r\n\r\n        </Form>\r\n    )\r\n    // )\r\n}\r\nexport default NewTaskTreeForm","C:\\OSPanel\\domains\\front1\\src\\Components\\Header\\MenuPopover.tsx",["327"],"import { Popover, Icon } from 'antd-mobile'\r\nimport React, { useState } from 'react'\r\n\r\nconst Item = Popover.Item\r\n\r\nconst MenuPopover: React.FC<any> = (props) => {\r\n    const [visible, setVisible] = useState(false)\r\n\r\n    const onSelect = (opt: any, index?: number) => {\r\n        // console.log(opt.props);\r\n        setVisible(false)\r\n        if(opt.props.children === \"Logout\") {\r\n            props.onLogout()\r\n        }\r\n    }\r\n\r\n    const handleVisibleChange = (visible: boolean) => {\r\n        setVisible(visible)\r\n    }\r\n\r\n    const fortest:String = \"fortest\"\r\n\r\n    return (\r\n        <div className=\"mr-3\">\r\n        <Popover \r\n            mask\r\n            visible={visible}\r\n            overlay={[\r\n                (<Item key=\"1\" >Logout</Item>),\r\n                (<Item key=\"2\" >Info</Item>),\r\n                (<Item key=\"3\" >Help</Item>),\r\n            ]}\r\n            onVisibleChange={handleVisibleChange}\r\n            onSelect={onSelect}\r\n        >\r\n            <div style={{\r\n                height: '100%',\r\n                padding: '0 15px',\r\n                marginRight: '-20px',\r\n                display: 'flex',\r\n                alignItems: 'center',\r\n            }}\r\n            >\r\n                <Icon type=\"ellipsis\" />\r\n            </div>\r\n        </Popover>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MenuPopover","C:\\OSPanel\\domains\\front1\\src\\Components\\ToDo\\Settings\\SettingsModalContainer.tsx",[],"C:\\OSPanel\\domains\\front1\\src\\Components\\ToDo\\ToDoHeader\\ToDoHeaderMobile.tsx",["328","329"],"import React, { useState } from 'react'\r\nimport { ToDoHeaderPropsType } from './ToDoHeaderContainer'\r\nimport { Button, DatePicker, List, Switch } from 'antd-mobile'\r\nimport enUs from 'antd-mobile/lib/date-picker/locale/en_US'\r\nimport moment from \"moment\"\r\n\r\nexport type OwnToDoHeaderPropsType = {\r\n    showDrawer: () => void,\r\n    showModal: () => void,\r\n    isOpen: boolean\r\n}\r\n\r\nconst ToDoHeaderMobile: React.FC<ToDoHeaderPropsType> = (props) => {\r\n    const [isInterval, setIsInterval] = useState(false)\r\n    const [isFormOpen, setIsFormOpen] = useState(true)\r\n\r\n    const onIntervalChange = (e: boolean) => {\r\n        if (e) {\r\n            props.setIsInterval( !isInterval, {startDate: props.dateInterval.startDate, endDate: props.dateInterval.endDate })\r\n        } else {\r\n            props.setIsInterval( !isInterval, {startDate: props.dateInterval.startDate, endDate: props.dateInterval.startDate })\r\n        }\r\n        \r\n        setIsInterval(!isInterval)\r\n    }\r\n\r\n    const onStartChange = (value: Date) => {\r\n        //console.log(value)\r\n        //console.log(props)\r\n        if (!isInterval) {\r\n            props.setIsInterval(isInterval, {startDate: moment(value), endDate: moment(value) })\r\n        } else {\r\n            props.setIsInterval(isInterval, {startDate: moment(value), endDate: props.dateInterval.endDate })\r\n        }\r\n        \r\n    }\r\n\r\n    const onEndChange = (value: Date) => {\r\n        props.setIsInterval(isInterval, {startDate: props.dateInterval.startDate, endDate: moment(value) })\r\n    }\r\n\r\n    return (\r\n        <div className=\"w-100\">\r\n            <DatePicker\r\n                locale={enUs}\r\n                mode=\"date\"\r\n                value={props.dateInterval.startDate.toDate()}\r\n                onChange={onStartChange}\r\n            >\r\n                <List.Item className=\"w-100\">\r\n                {isInterval ? 'Start:' : 'Date:'}\r\n                </List.Item>\r\n            </DatePicker>\r\n\r\n            {isInterval ?\r\n                <DatePicker\r\n                    locale={enUs}\r\n                    mode=\"date\"\r\n                    value={props.dateInterval.endDate.toDate()}\r\n                    onChange={onEndChange}\r\n                >\r\n                    <List.Item >End:</List.Item>\r\n                </DatePicker>\r\n                :\r\n                null\r\n            }\r\n\r\n            <List.Item\r\n                extra={\r\n                        <Switch\r\n                            checked={isInterval}\r\n                            onChange={onIntervalChange}\r\n                        />\r\n                }\r\n                >\r\n                Date interval\r\n            </List.Item>\r\n\r\n            <Button\r\n                inline\r\n                size=\"small\"\r\n                className=\"ml-3\"\r\n                // style={{ marginRight: '4px' }} \r\n                onClick={()=>{props.showDrawer()}}\r\n                type=\"primary\"\r\n            >\r\n                {!props.isOpen ? 'Add' : 'Close'}\r\n            </Button>\r\n            <Button\r\n                inline\r\n                size=\"small\"\r\n                className=\"ml-3\"\r\n                // style={{ marginRight: '4px' }} \r\n                onClick={()=>{props.showModal()}}\r\n                type=\"primary\"\r\n            >\r\n                Settings\r\n            </Button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ToDoHeaderMobile","C:\\OSPanel\\domains\\front1\\src\\Components\\TasksTree\\TaskTreeItem.tsx",[],"C:\\OSPanel\\domains\\front1\\src\\Components\\ToDo\\ToDoForm\\ToDoForm.tsx",["330","331","332"],"import { Form, Field, FormikProps } from 'formik'\r\nimport React, { ReactNode, useState, useEffect } from 'react'\r\nimport { AntInput, AntSelect, AntTextArea, AntTimePicker, AntDatePicker } from '../../../utils/Formik/CreateAntField'\r\nimport { validateRequired } from '../../../utils/Formik/ValidateFields'\r\n\r\n\r\nconst ToDoForm: ((props: FormikProps<{}>) => ReactNode) = (props) => {\r\n    console.log('!!!!!!!!!! ToDoForm')\r\n    return (\r\n        <Form\r\n            className=\"form-container\"\r\n            onSubmit={props.handleSubmit}\r\n        >\r\n            <Field\r\n                component={AntInput}\r\n                name=\"name\"\r\n                type=\"text\"\r\n                label=\"Name\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n\r\n            <Field\r\n                component={AntDatePicker}\r\n                name=\"date\"\r\n                type=\"date\"\r\n                label=\"Task date\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                // hasFeedback\r\n            />\r\n\r\n            <Field\r\n                component={AntTimePicker}\r\n                name=\"time\"\r\n                type=\"time\"\r\n                label=\"Task time\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                // hasFeedback\r\n            />\r\n\r\n            <Field\r\n                component={AntTextArea}\r\n                name=\"descriptions\"\r\n                type=\"text\"\r\n                label=\"Descriptions\"\r\n                // validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n            // hasFeedback\r\n            />\r\n\r\n            <div className=\"submit-container\">\r\n                <button className=\"ant-btn ant-btn-primary\" type=\"submit\">\r\n                    Save\r\n                </button>\r\n            </div>\r\n\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default ToDoForm","C:\\OSPanel\\domains\\front1\\src\\Components\\ToDo\\ToDoMobile.tsx",["333","334","335","336","337","338","339","340","341","342"],"C:\\OSPanel\\domains\\front1\\src\\Components\\ToDo\\ToDoBrowser.tsx",["343","344","345","346","347","348"],"C:\\OSPanel\\domains\\front1\\src\\Components\\ToDo\\ToDoContainer.tsx",[],{"ruleId":"349","replacedBy":"350"},{"ruleId":"351","replacedBy":"352"},{"ruleId":"353","severity":1,"message":"354","line":27,"column":8,"nodeType":"355","endLine":27,"endColumn":28,"suggestions":"356"},{"ruleId":"349","replacedBy":"357"},{"ruleId":"351","replacedBy":"358"},{"ruleId":"359","severity":1,"message":"360","line":29,"column":20,"nodeType":"361","messageId":"362","endLine":29,"endColumn":31},{"ruleId":"353","severity":1,"message":"363","line":48,"column":6,"nodeType":"355","endLine":48,"endColumn":25,"suggestions":"364"},{"ruleId":"359","severity":1,"message":"365","line":3,"column":5,"nodeType":"361","messageId":"362","endLine":3,"endColumn":16},{"ruleId":"359","severity":1,"message":"366","line":4,"column":5,"nodeType":"361","messageId":"362","endLine":4,"endColumn":15},{"ruleId":"359","severity":1,"message":"367","line":5,"column":5,"nodeType":"361","messageId":"362","endLine":5,"endColumn":14},{"ruleId":"359","severity":1,"message":"368","line":3,"column":10,"nodeType":"361","messageId":"362","endLine":3,"endColumn":14},{"ruleId":"359","severity":1,"message":"369","line":3,"column":16,"nodeType":"361","messageId":"362","endLine":3,"endColumn":25},{"ruleId":"359","severity":1,"message":"370","line":5,"column":8,"nodeType":"361","messageId":"362","endLine":5,"endColumn":14},{"ruleId":"359","severity":1,"message":"371","line":7,"column":10,"nodeType":"361","messageId":"362","endLine":7,"endColumn":19},{"ruleId":"359","severity":1,"message":"372","line":11,"column":7,"nodeType":"361","messageId":"362","endLine":11,"endColumn":19},{"ruleId":"359","severity":1,"message":"373","line":1,"column":10,"nodeType":"361","messageId":"362","endLine":1,"endColumn":13},{"ruleId":"359","severity":1,"message":"374","line":2,"column":10,"nodeType":"361","messageId":"362","endLine":2,"endColumn":16},{"ruleId":"359","severity":1,"message":"375","line":5,"column":9,"nodeType":"361","messageId":"362","endLine":5,"endColumn":23},{"ruleId":"359","severity":1,"message":"376","line":7,"column":10,"nodeType":"361","messageId":"362","endLine":7,"endColumn":22},{"ruleId":"359","severity":1,"message":"377","line":8,"column":10,"nodeType":"361","messageId":"362","endLine":8,"endColumn":22},{"ruleId":"359","severity":1,"message":"378","line":20,"column":12,"nodeType":"361","messageId":"362","endLine":20,"endColumn":17},{"ruleId":"359","severity":1,"message":"379","line":20,"column":19,"nodeType":"361","messageId":"362","endLine":20,"endColumn":27},{"ruleId":"359","severity":1,"message":"374","line":2,"column":43,"nodeType":"361","messageId":"362","endLine":2,"endColumn":49},{"ruleId":"359","severity":1,"message":"375","line":9,"column":10,"nodeType":"361","messageId":"362","endLine":9,"endColumn":24},{"ruleId":"359","severity":1,"message":"380","line":23,"column":22,"nodeType":"361","messageId":"362","endLine":23,"endColumn":33},{"ruleId":"359","severity":1,"message":"381","line":1,"column":19,"nodeType":"361","messageId":"362","endLine":1,"endColumn":34},{"ruleId":"359","severity":1,"message":"382","line":3,"column":6,"nodeType":"361","messageId":"362","endLine":3,"endColumn":24},{"ruleId":"359","severity":1,"message":"383","line":2,"column":10,"nodeType":"361","messageId":"362","endLine":2,"endColumn":14},{"ruleId":"359","severity":1,"message":"384","line":6,"column":10,"nodeType":"361","messageId":"362","endLine":6,"endColumn":18},{"ruleId":"359","severity":1,"message":"385","line":6,"column":20,"nodeType":"361","messageId":"362","endLine":6,"endColumn":29},{"ruleId":"359","severity":1,"message":"386","line":6,"column":31,"nodeType":"361","messageId":"362","endLine":6,"endColumn":42},{"ruleId":"359","severity":1,"message":"387","line":6,"column":44,"nodeType":"361","messageId":"362","endLine":6,"endColumn":57},{"ruleId":"359","severity":1,"message":"388","line":38,"column":22,"nodeType":"361","messageId":"362","endLine":38,"endColumn":33},{"ruleId":"359","severity":1,"message":"389","line":46,"column":9,"nodeType":"361","messageId":"362","endLine":46,"endColumn":34},{"ruleId":"359","severity":1,"message":"390","line":50,"column":19,"nodeType":"361","messageId":"362","endLine":50,"endColumn":26},{"ruleId":"349","replacedBy":"391"},{"ruleId":"351","replacedBy":"392"},{"ruleId":"353","severity":1,"message":"354","line":32,"column":8,"nodeType":"355","endLine":32,"endColumn":28,"suggestions":"393"},{"ruleId":"353","severity":1,"message":"394","line":49,"column":8,"nodeType":"355","endLine":49,"endColumn":30,"suggestions":"395"},{"ruleId":"359","severity":1,"message":"396","line":1,"column":10,"nodeType":"361","messageId":"362","endLine":1,"endColumn":25},{"ruleId":"359","severity":1,"message":"397","line":15,"column":5,"nodeType":"361","messageId":"362","endLine":15,"endColumn":11},{"ruleId":"353","severity":1,"message":"398","line":162,"column":8,"nodeType":"355","endLine":162,"endColumn":21,"suggestions":"399"},{"ruleId":"359","severity":1,"message":"400","line":3,"column":24,"nodeType":"361","messageId":"362","endLine":3,"endColumn":35},{"ruleId":"359","severity":1,"message":"401","line":3,"column":37,"nodeType":"361","messageId":"362","endLine":3,"endColumn":41},{"ruleId":"359","severity":1,"message":"402","line":7,"column":10,"nodeType":"361","messageId":"362","endLine":7,"endColumn":14},{"ruleId":"359","severity":1,"message":"403","line":7,"column":16,"nodeType":"361","messageId":"362","endLine":7,"endColumn":21},{"ruleId":"359","severity":1,"message":"371","line":8,"column":10,"nodeType":"361","messageId":"362","endLine":8,"endColumn":19},{"ruleId":"359","severity":1,"message":"376","line":10,"column":10,"nodeType":"361","messageId":"362","endLine":10,"endColumn":22},{"ruleId":"359","severity":1,"message":"404","line":11,"column":10,"nodeType":"361","messageId":"362","endLine":11,"endColumn":21},{"ruleId":"359","severity":1,"message":"405","line":14,"column":7,"nodeType":"361","messageId":"362","endLine":14,"endColumn":11},{"ruleId":"353","severity":1,"message":"406","line":36,"column":8,"nodeType":"355","endLine":36,"endColumn":24,"suggestions":"407"},{"ruleId":"408","severity":1,"message":"409","line":193,"column":55,"nodeType":"410","messageId":"411","endLine":193,"endColumn":57},{"ruleId":"359","severity":1,"message":"371","line":5,"column":10,"nodeType":"361","messageId":"362","endLine":5,"endColumn":19},{"ruleId":"359","severity":1,"message":"412","line":6,"column":10,"nodeType":"361","messageId":"362","endLine":6,"endColumn":18},{"ruleId":"359","severity":1,"message":"413","line":6,"column":20,"nodeType":"361","messageId":"362","endLine":6,"endColumn":25},{"ruleId":"353","severity":1,"message":"414","line":21,"column":8,"nodeType":"355","endLine":21,"endColumn":22,"suggestions":"415"},{"ruleId":"359","severity":1,"message":"416","line":6,"column":18,"nodeType":"361","messageId":"362","endLine":6,"endColumn":29},{"ruleId":"359","severity":1,"message":"417","line":10,"column":9,"nodeType":"361","messageId":"362","endLine":10,"endColumn":14},{"ruleId":"353","severity":1,"message":"406","line":32,"column":8,"nodeType":"355","endLine":32,"endColumn":24,"suggestions":"418"},{"ruleId":"359","severity":1,"message":"419","line":7,"column":9,"nodeType":"361","messageId":"362","endLine":7,"endColumn":15},{"ruleId":"359","severity":1,"message":"420","line":21,"column":11,"nodeType":"361","messageId":"362","endLine":21,"endColumn":25},{"ruleId":"359","severity":1,"message":"421","line":15,"column":12,"nodeType":"361","messageId":"362","endLine":15,"endColumn":22},{"ruleId":"359","severity":1,"message":"422","line":15,"column":24,"nodeType":"361","messageId":"362","endLine":15,"endColumn":37},{"ruleId":"359","severity":1,"message":"423","line":2,"column":28,"nodeType":"361","messageId":"362","endLine":2,"endColumn":36},{"ruleId":"359","severity":1,"message":"424","line":2,"column":38,"nodeType":"361","messageId":"362","endLine":2,"endColumn":47},{"ruleId":"359","severity":1,"message":"385","line":3,"column":20,"nodeType":"361","messageId":"362","endLine":3,"endColumn":29},{"ruleId":"359","severity":1,"message":"425","line":9,"column":8,"nodeType":"361","messageId":"362","endLine":9,"endColumn":16},{"ruleId":"353","severity":1,"message":"426","line":42,"column":8,"nodeType":"355","endLine":42,"endColumn":24,"suggestions":"427"},{"ruleId":"353","severity":1,"message":"426","line":46,"column":8,"nodeType":"355","endLine":46,"endColumn":28,"suggestions":"428"},{"ruleId":"359","severity":1,"message":"429","line":188,"column":6,"nodeType":"361","messageId":"362","endLine":188,"endColumn":24},{"ruleId":"359","severity":1,"message":"430","line":192,"column":11,"nodeType":"361","messageId":"362","endLine":192,"endColumn":19},{"ruleId":"359","severity":1,"message":"431","line":194,"column":11,"nodeType":"361","messageId":"362","endLine":194,"endColumn":20},{"ruleId":"359","severity":1,"message":"432","line":307,"column":12,"nodeType":"361","messageId":"362","endLine":307,"endColumn":21},{"ruleId":"359","severity":1,"message":"433","line":307,"column":23,"nodeType":"361","messageId":"362","endLine":307,"endColumn":35},{"ruleId":"408","severity":1,"message":"409","line":333,"column":52,"nodeType":"410","messageId":"411","endLine":333,"endColumn":54},{"ruleId":"408","severity":1,"message":"409","line":402,"column":51,"nodeType":"410","messageId":"411","endLine":402,"endColumn":53},{"ruleId":"359","severity":1,"message":"434","line":25,"column":6,"nodeType":"361","messageId":"362","endLine":25,"endColumn":23},{"ruleId":"359","severity":1,"message":"435","line":42,"column":12,"nodeType":"361","messageId":"362","endLine":42,"endColumn":26},{"ruleId":"353","severity":1,"message":"426","line":50,"column":8,"nodeType":"355","endLine":50,"endColumn":27,"suggestions":"436"},{"ruleId":"359","severity":1,"message":"437","line":97,"column":11,"nodeType":"361","messageId":"362","endLine":97,"endColumn":16},{"ruleId":"359","severity":1,"message":"438","line":103,"column":11,"nodeType":"361","messageId":"362","endLine":103,"endColumn":19},{"ruleId":"359","severity":1,"message":"439","line":107,"column":11,"nodeType":"361","messageId":"362","endLine":107,"endColumn":23},"no-native-reassign",["440"],"no-negated-in-lhs",["441"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'props', 'selestedDates.endDate', and 'selestedDates.startDate'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["442"],["440"],["441"],"@typescript-eslint/no-unused-vars","'setLocation' is assigned a value but never used.","Identifier","unusedVar","React Hook useEffect has missing dependencies: 'location' and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["443"],"'BrowserView' is defined but never used.","'MobileView' is defined but never used.","'isBrowser' is defined but never used.","'List' is defined but never used.","'InputItem' is defined but never used.","'moment' is defined but never used.","'propTypes' is defined but never used.","'CheckboxItem' is assigned a value but never used.","'act' is defined but never used.","'Button' is defined but never used.","'LogoutOutlined' is defined but never used.","'TaskListType' is defined but never used.","'MenuDataType' is defined but never used.","'state' is assigned a value but never used.","'setState' is assigned a value but never used.","'setInitData' is assigned a value but never used.","'APIResponseType' is defined but never used.","'MeResponseDataType' is defined but never used.","'Card' is defined but never used.","'AntInput' is defined but never used.","'AntSelect' is defined but never used.","'AntTextArea' is defined but never used.","'AntTimePicker' is defined but never used.","'setSettings' is assigned a value but never used.","'settingsBlock' is assigned a value but never used.","'element' is assigned a value but never used.",["440"],["441"],["444"],"React Hook useEffect has missing dependencies: 'onReset' and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["445"],"'formatCountdown' is defined but never used.","'Switch' is defined but never used.","React Hook useEffect has missing dependencies: 'props.label' and 'props.type'. Either include them or remove the dependency array.",["446"],"'SwipeAction' is defined but never used.","'Icon' is defined but never used.","'Spin' is defined but never used.","'Empty' is defined but never used.","'useDispatch' is defined but never used.","'Item' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'initialValues' and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["447"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'Redirect' is defined but never used.","'Route' is defined but never used.","React Hook useEffect has missing dependencies: 'history' and 'props.appLocation'. Either include them or remove the dependency array.",["448"],"'FormikProps' is defined but never used.","'Panel' is assigned a value but never used.",["449"],"'Option' is assigned a value but never used.","'fortest' is assigned a value but never used.","'isFormOpen' is assigned a value but never used.","'setIsFormOpen' is assigned a value but never used.","'useState' is defined but never used.","'useEffect' is defined but never used.","'TaskItem' is defined but never used.","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["450"],["451"],"'TaskItemMobileType' is defined but never used.","'dispatch' is assigned a value but never used.","'onSubTask' is assigned a value but never used.","'startHour' is assigned a value but never used.","'setStartHour' is assigned a value but never used.","'InitialValuesType' is defined but never used.","'isModalVisible' is assigned a value but never used.",["452"],"'onAdd' is assigned a value but never used.","'handleOk' is assigned a value but never used.","'handleCancel' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"453","fix":"454"},{"desc":"455","fix":"456"},{"desc":"453","fix":"457"},{"desc":"458","fix":"459"},{"desc":"460","fix":"461"},{"desc":"462","fix":"463"},{"desc":"464","fix":"465"},{"desc":"462","fix":"466"},{"desc":"467","fix":"468"},{"desc":"469","fix":"470"},{"desc":"471","fix":"472"},"Update the dependencies array to be: [props, props.dateInterval, selestedDates.endDate, selestedDates.startDate]",{"range":"473","text":"474"},"Update the dependencies array to be: [location, props, props.initialized]",{"range":"475","text":"476"},{"range":"477","text":"474"},"Update the dependencies array to be: [onReset, props, props.taskSaveStatus]",{"range":"478","text":"479"},"Update the dependencies array to be: [props.label, props.type, props.value]",{"range":"480","text":"481"},"Update the dependencies array to be: [initialValues, props, props.taskList]",{"range":"482","text":"483"},"Update the dependencies array to be: [history, props.appLocation, props.isAuth]",{"range":"484","text":"485"},{"range":"486","text":"483"},"Update the dependencies array to be: [props, props.taskList]",{"range":"487","text":"488"},"Update the dependencies array to be: [props, props.dateInterval]",{"range":"489","text":"490"},"Update the dependencies array to be: [props, props.getTaskList]",{"range":"491","text":"492"},[1258,1278],"[props, props.dateInterval, selestedDates.endDate, selestedDates.startDate]",[1859,1878],"[location, props, props.initialized]",[1488,1508],[1499,1521],"[onReset, props, props.taskSaveStatus]",[5884,5897],"[props.label, props.type, props.value]",[1259,1275],"[initialValues, props, props.taskList]",[686,700],"[history, props.appLocation, props.isAuth]",[1081,1097],[1382,1398],"[props, props.taskList]",[1560,1580],"[props, props.dateInterval]",[1420,1439],"[props, props.getTaskList]"]
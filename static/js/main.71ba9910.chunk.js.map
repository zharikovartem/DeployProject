{"version":3,"sources":["Components/NewTaskForm.tsx","redux/taskReducer.ts","Components/NewTaskFormContainer.tsx","Components/ToDoHeader.tsx","Components/ToDoList.tsx","Components/ToDoListContainer.tsx","redux/store.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["layout","labelCol","span","wrapperCol","tailLayout","offset","TextArea","Input","NewTaskForm","props","console","log","name","initialValues","remember","onFinish","values","user_id","taskTime","format","date","newTask","onFinishFailed","errorInfo","Item","label","rules","required","message","onChange","value","dateString","rows","type","htmlType","SET_TASK_LIST","initialState","taskList","setTaskList","taskReducer","state","action","stateCopy","Tasks","connect","task","data","dispatch","requestOptions","method","headers","body","JSON","stringify","fetch","then","response","json","catch","e","ToDoHeader","onDateChange","defaultValue","selectedDate","style","marginLeft","shape","icon","FileAddOutlined","size","onClick","showDrawer","disabled","isAddActive","ToDoList","useState","moment","setselectedDate","visible","setVisible","setIsAddActive","timeScaleBlock","setTimeScaleBlock","useEffect","getTaskList","timeScaleArrey","index","push","orientation","i","length","element","timeVal","Number","time","split","placement","title","descriptions","className","join","getTimeScaleArrey","bordered","closable","onClose","width","redusers","combineReducers","store","createStore","applyMiddleware","thunkMiddleware","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.71ba9910.chunk.js","sourcesContent":["import * as React from 'react'\r\nimport moment from 'moment'\r\nimport { Form, Input, Button, TimePicker, DatePicker } from 'antd'\r\n\r\nconst layout = {\r\n    labelCol: { span: 8 },\r\n    wrapperCol: { span: 16 },\r\n}\r\nconst tailLayout = {\r\n    wrapperCol: { offset: 8, span: 16 },\r\n}\r\n\r\ntype PropsType = {\r\n    selectedDate: moment.Moment\r\n}\r\n\r\nconst { TextArea } = Input;\r\n\r\nconst timeFormat: string = 'HH:mm';\r\n\r\nconst NewTaskForm: React.FC<PropsType> = (props:any) => {\r\n    const onFinish = (values: any) => {\r\n        console.log('Success:', values);\r\n        values.user_id = '1'\r\n        values.taskTime = values.taskTime.format('HH:mm');\r\n        values.date = values.date.format('YYYY-MM-DD');\r\n        // props.createNewTask(values)\r\n        props.newTask(values)\r\n    };\r\n\r\n    const onFinishFailed = (errorInfo: any) => {\r\n        console.log('Failed:', errorInfo);\r\n        \r\n    };\r\n\r\n    const onTimeChange = (value: moment.Moment | null, dateString: string):void => {\r\n        console.log(value, dateString);\r\n    }\r\n\r\n    console.log(props)\r\n\r\n    return (\r\n        <Form\r\n            {...layout}\r\n            name=\"basic\"\r\n            initialValues={{ remember: true }}\r\n            onFinish={onFinish}\r\n            onFinishFailed={onFinishFailed}\r\n        >\r\n            <Form.Item\r\n                label=\"Task name\"\r\n                name=\"taskName\"\r\n                rules={[{ required: true, message: 'Please input task name!' }]}\r\n            >\r\n                <Input />\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n                label=\"Task date\"\r\n                name=\"date\"\r\n                // rules={[{ required: true, message: 'Please input time!' }]}\r\n            >\r\n                <DatePicker  />\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n                label=\"Task time\"\r\n                name=\"taskTime\"\r\n                rules={[{ required: true, message: 'Please input time!' }]}\r\n            >\r\n                <TimePicker \r\n                    onChange={onTimeChange} \r\n                    // defaultValue={moment('12:08', timeFormat)} \r\n                    format={timeFormat} \r\n                />\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n                label=\"Description\"\r\n                name=\"description\"\r\n            >\r\n                <TextArea rows={2} />\r\n            </Form.Item>\r\n\r\n            <Form.Item {...tailLayout}>\r\n                <Button type=\"primary\" htmlType=\"submit\">\r\n                    Create\r\n                </Button>\r\n            </Form.Item>\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default NewTaskForm","// import { taskAPI } from '../api/api'\r\n\r\nconst SET_TASK_LIST = \"SET_TASK_LIST\"\r\n\r\nlet initialState = {\r\n    taskList: null,\r\n}\r\n\r\nconst taskReducer = (state = initialState, action: any) => {\r\n    let stateCopy = { ...state }\r\n    switch (action.type) {\r\n        case SET_TASK_LIST:\r\n            stateCopy.taskList = action.taskList.Tasks\r\n            return stateCopy\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setTaskList = (taskList: any) => ({ type: SET_TASK_LIST, taskList })\r\n// export const setTest = (toDoData) => ({ type: TEST_CONSTANT, testData })\r\n// export const setTest = (toDoData) => ({ type: TEST_CONSTANT, testData })\r\n// export const setTest = (toDoData) => ({ type: TEST_CONSTANT, testData })\r\n\r\nexport const getTaskList = (date: string) => {\r\n    return (dispatch: any) => {\r\n        const requestOptions = {\r\n            method: 'GET',\r\n            headers: { 'Content-Type': 'application/json'},\r\n        }\r\n        // const url = 'http://127.0.0.1:8000/api/tasks?date=' + date\r\n        const url = 'https://81.90.181.175/api/tasks?date=' + date\r\n        fetch(url, requestOptions)\r\n            .then( response => response.json() )\r\n            .then(data => {\r\n                console.log('response getTaskList: ', data)\r\n                dispatch(setTaskList(data));\r\n            })\r\n            .catch((e) => console.log(\"Canâ€™t access  Error:.\", e))\r\n    }\r\n}\r\n\r\ntype newTaskDataType = {\r\n    task: string,\r\n    user_id: string,\r\n    taskTime: string,\r\n    date: string\r\n    description?: string\r\n}\r\nexport const newTask = (data: newTaskDataType) => {\r\n    return (dispatch: any) => {\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json'},\r\n            body: JSON.stringify(data)\r\n        }\r\n        const url = 'https://81.90.181.175/api/tasks'\r\n        console.log('requestOptions: ', requestOptions)\r\n        fetch(url, requestOptions)\r\n            .then( response => {\r\n                console.log('response: ',response)\r\n                return response.json()\r\n            } )\r\n            .then(data => {\r\n                console.log('response: ', data)\r\n                // return data\r\n                dispatch(setTaskList(data));\r\n            })\r\n            .catch((e) => console.log(\"Canâ€™t access  Error:.\", e))\r\n    }\r\n}\r\n\r\nexport const editTask = (data: any) => {\r\n}\r\n\r\nexport const deleteTask = (data: any) => {\r\n}\r\n\r\nexport default taskReducer\r\n","import {connect} from 'react-redux'\r\nimport NewTaskForm from './NewTaskForm'\r\nimport {newTask} from './../redux/taskReducer'\r\n\r\nlet mapStateToProps = (state:any) => {\r\n    return {\r\n        taskList: state.task.taskList\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, \r\n    {newTask}) \r\n    (NewTaskForm);\r\n\r\n\r\n","import React from 'react'\r\nimport { DatePicker, Button } from 'antd'\r\nimport { FileAddOutlined } from '@ant-design/icons'\r\n\r\nconst ToDoHeader = (props: any) => {\r\n    return (\r\n        <>\r\n            <label>Select date:</label>\r\n            <DatePicker\r\n                onChange={props.onDateChange}\r\n                defaultValue={props.selectedDate}\r\n                format='DD-MM-YYYY'\r\n                style={{ marginLeft: 10 }}\r\n            />\r\n            <Button\r\n                type=\"primary\"\r\n                shape=\"round\"\r\n                icon={<FileAddOutlined />}\r\n                style={{ marginLeft: 10 }}\r\n                size=\"small\"\r\n                onClick={props.showDrawer}\r\n                disabled={props.isAddActive}\r\n            >\r\n                Add\r\n            </Button>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ToDoHeader","import React, { useState, useEffect } from 'react'\r\nimport { DatePicker, Card, Divider, Button, Drawer, Tooltip } from 'antd'\r\nimport moment from 'moment'\r\nimport NewTaskForm from './NewTaskFormContainer'\r\nimport ToDoHeader from './ToDoHeader'\r\n\r\nconst ToDoList: React.FC = (props: any) => {\r\n    const [selectedDate, setselectedDate] = useState<moment.Moment>(moment())\r\n    const [visible, setVisible] = useState(false)\r\n    const [isAddActive, setIsAddActive] = useState(false)\r\n    const [timeScaleBlock, setTimeScaleBlock] = useState<Array<React.ReactElement<string>> | null>(null)\r\n\r\n    useEffect(() => {\r\n        props.getTaskList(selectedDate.format('YYYY-MM-DD'))\r\n    }, [selectedDate]);\r\n\r\n    useEffect(() => {\r\n        const getTimeScaleArrey = ():Array<React.ReactElement<string>> => {\r\n            let timeScaleArrey: Array<React.ReactElement<string>> = []\r\n            for (let index: number = 0; index < 24; index++) {\r\n                timeScaleArrey.push(\r\n                    <Divider key={index} orientation=\"left\">\r\n                        {index <= 9 ? '0' : null}{index}:00\r\n                    </Divider>\r\n                )\r\n\r\n                if (props.taskList !== null) {\r\n                    for (let i = 0; i < props.taskList.length; i++) {\r\n                        const element = props.taskList[i];\r\n                        const timeVal = Number(element.time.split(':', 1))\r\n                        const nextHour = index + 1\r\n                        if (timeVal >= index && timeVal < nextHour) {\r\n                            timeScaleArrey.push(\r\n                                <Tooltip key={index+'-'+i} placement=\"topLeft\" title={element.descriptions}>\r\n                                    <p className=\"ml-5\">{element.time.split(':', 2).join(':')} - {element.name}</p>\r\n                                </Tooltip>\r\n                            )\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return timeScaleArrey\r\n        }\r\n\r\n        setTimeScaleBlock(getTimeScaleArrey());\r\n    }, [props.taskList]);\r\n\r\n    const onDateChange = (value: moment.Moment | null, dateString: string): void => {\r\n        if (value !== null) {\r\n            setselectedDate(value)\r\n            setIsAddActive(false)\r\n        } else {\r\n            setselectedDate(moment(null))\r\n            setIsAddActive(true)\r\n        }\r\n    }\r\n\r\n    const showDrawer = (): void => {\r\n        setVisible(true);\r\n    }\r\n\r\n    const onClose = (): void => {\r\n        setVisible(false);\r\n    }\r\n\r\n    // console.log('ToDoList props: ', props)\r\n    return (\r\n        <>\r\n            <div className=\"site-card-border-less-wrapper\">\r\n                <Card\r\n                    title={ <ToDoHeader onDateChange={onDateChange} selectedDate={selectedDate} showDrawer={showDrawer} isAddActive={isAddActive} />}\r\n                    bordered={false}\r\n                >\r\n                    {timeScaleBlock}\r\n                </Card>\r\n\r\n                <Drawer\r\n                    title={\"Create New Task for \" + selectedDate.format('DD MMM YYYY')}\r\n                    placement=\"right\"\r\n                    closable={false}\r\n                    onClose={onClose}\r\n                    visible={visible}\r\n                    width=\"80%\"\r\n                >\r\n                    <NewTaskForm selectedDate={selectedDate} />\r\n                </Drawer>\r\n            </div>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ToDoList","import {connect} from 'react-redux'\r\nimport ToDoList from './ToDoList'\r\nimport {getTaskList} from './../redux/taskReducer'\r\n\r\nlet mapStateToProps = (state:any) => {\r\n    return {\r\n        taskList: state.task.taskList\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, \r\n    {getTaskList}) \r\n    (ToDoList);\r\n    \r\n\r\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport taskReducer from './taskReducer';\r\n\r\n\r\nlet redusers = combineReducers({\r\n    task: taskReducer\r\n});\r\n\r\nlet store = createStore(redusers, applyMiddleware(thunkMiddleware));\r\n\r\nexport default store;","import React from 'react'\r\nimport './App.css'\r\nimport ToDoList from './Components/ToDoListContainer'\r\nimport 'antd/dist/antd.css'\r\nimport { Provider } from 'react-redux';\r\nimport store from './redux/store';\r\n\r\nconst App = (props: any) => {\r\n\r\n  return (\r\n    <Provider store={store}>\r\n      <div className=\"container\">\r\n        <ToDoList />\r\n      </div>\r\n    </Provider>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}
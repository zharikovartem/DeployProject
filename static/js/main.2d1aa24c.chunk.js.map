{"version":3,"sources":["api/api.ts","Components/ToDo/NewTaskForm/NewTaskForm.tsx","api/taskApi.ts","redux/taskReducer.ts","Components/ToDo/NewTaskForm/NewTaskFormContainer.tsx","Components/ToDo/ToDoHeader/ToDoHeader.tsx","Components/ToDo/ToDoHeader/ToDoHeaderMobile.tsx","Components/ToDo/ToDoHeader/ToDoHeaderContainer.tsx","Components/ToDo/Settings/SettingsModal.tsx","Components/ToDo/Settings/SettingsModalContainer.tsx","Components/TimeScale/TaskItem/TaskItem.tsx","Components/TimeScale/TaskItem/TaskItemContainer.tsx","utils/array-helpers.ts","Components/TimeScale/TimeScale.tsx","Components/TimeScale/TimeScaleContainer.tsx","Components/ToDo/ToDoList.tsx","Components/ToDo/ToDoListContainer.tsx","api/authAPI.ts","redux/authReducer.ts","redux/appReducer.ts","api/taskListAPI.ts","redux/TaskListReducer.ts","redux/store.ts","Components/Header/MenuBrowser.tsx","Components/Header/MenuBrowserConainer.tsx","Components/Header/MenuPopover.tsx","Components/Header/MenuMobile.tsx","Components/Header/MenuMobileContainer.tsx","Components/Header/Header.tsx","Components/Header/HeaderContainer.tsx","utils/Formik/CreateAntField.tsx","utils/Formik/ValidateFields.ts","Components/Login/LoginForm.tsx","Components/Login/Login.tsx","Components/Login/LoginContainer.tsx","Components/Orders/Orders.tsx","Components/Orders/OrdersContainer.tsx","Components/TasksTree/NewTaskTreeForm.tsx","Components/TasksTree/TasksTreeBrowser.tsx","Components/TasksTree/TaskTreeItem.tsx","Components/TasksTree/TasksTreeMobile.tsx","Components/TasksTree/TasksTreeContainer.tsx","Components/Register/RegisterForm.tsx","Components/Register/Register.tsx","Components/Register/RegisterContainer.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ResultCodesEnum","layout","labelCol","span","wrapperCol","tailLayout","offset","TextArea","Input","NewTaskForm","props","Form","useForm","form","useState","moment","selectedDate","setSelectedDate","taskSaveStatus","saveStatus","setSaveStatus","useEffect","message","success","onClose","onReset","error","errorMessage","resetFields","title","format","placement","closable","visible","width","name","onFinish","values","data","date","taskTime","taskName","user_id","userId","description","isBetween","dateInterval","startDate","endDate","undefined","createNewTask","Item","label","rules","required","initialValue","onChange","value","dateString","autoComplete","rows","type","htmlType","className","onClick","instance","axios","create","withCredentials","baseURL","taskAPI","post","then","response","status","catch","err","request","defaults","headers","common","localStorage","getItem","taskId","delete","put","console","log","initialState","taskList","taskListIsFetching","isInterval","actions","setTaskList","setTaskSaveStatus","setErrorMessage","setTaskListIsFetching","isFetchingValue","setIsInterval","getTaskList","dispatch","getState","a","start_date","end_date","taskReducer","state","action","Tasks","connect","task","auth","user","id","reload","RangePicker","DatePicker","ToDoHeader","dates","setDates","isSame","formatString","defaultValue","style","marginLeft","e","target","checked","shape","icon","FileAddOutlined","fontSize","showDrawer","showModal","SettingOutlined","ToDoHeaderMobile","locale","enUs","mode","Date","extra","size","isMobile","settingasInstanse","ToDo","singlDateView","timeScale","isCompletedVisible","intervalDateView","SettingsModal","viewSettings","settings","settingsBlock","propName","Object","prototype","hasOwnProperty","call","element","push","isModalVisible","onOk","handleOk","onCancel","handleCancel","FormItem","settingsItem","href","TaskItem","isCompleted","setChecked","deleteingInProgess","setDeleteingInProgess","ListGroup","updateTask","time","split","join","descriptions","textDecoration","EditOutlined","danger","taskid","deleteTask","DeleteOutlined","sortTaskArrayByParams","field","b","TimeScale","selestedDates","setSelectedDates","getTimeScaleArrey","timeScaleArrey","tomorowTasks","sort","getHeadlineLabel","headlineDate","length","index","orientation","i","timeVal","Number","concat","ToDoList","setVisible","setIsModalVisible","bordered","authAPI","get","remember_token","setItem","removeItem","creds","token","isAuth","setAuthUserData","logout","login","authReducer","JSON","parse","view_settings","initialized","location","appReducer","taskListAPI","isTaskListLoaded","selectedTasks","setSelectedTasks","backSelectedTasks","taskListReducer","newSelectedTasks","pop","rootReducer","combineReducers","app","store","createStore","applyMiddleware","thunkMiddleware","SubMenu","Menu","MenuBrowser","history","useHistory","theme","menuData","map","item","childs","children","to","replace","appLocation","Popover","MenuPopover","mask","overlay","onVisibleChange","onSelect","opt","onLogout","height","padding","marginRight","display","alignItems","MenuMobile","useLocation","show","setShow","initData","forEach","dataItem","pathname","getSelectedMenuItem","selectedMenuItem","setSelectedMenuItem","subMenu","cItem","menuEl","document","documentElement","clientHeight","loadingEl","justifyContent","leftContent","src","alt","onLeftClick","preventDefault","rightContent","Header","disabled","Option","Select","CheckboxItem","CheckboxMobile","CreateAntField","AntComponent","hasFeedback","selectOptions","submitCount","touched","submitted","hasError","errors","submittedError","touchedError","onInputChange","setFieldValue","Array","isArray","onBlur","setFieldTouched","help","validateStatus","allowClear","AntSelect","Picker","AntInput","InputItem","AntInputPassword","Password","AntTimePicker","DatePickerMobile","TimePicker","AntCheckbox","Checkbox","AntTextArea","TextareaItem","MobileComponent","setValue","key","autoHeight","cols","v","onPickerChange","validateRequired","validateEmail","test","LoginForm","onSubmit","handleSubmit","component","validate","initialValues","Login","formProps","remember","render","block","Orders","NewTaskTreeForm","taskTypes","taskType","setTaskType","task_type","initialDrewerData","Collapse","Panel","header","TasksTreeBrowser","setInitialFormValues","drawerData","setDrawerData","initialFormValues","dataSource","getTaskTreeItems","deleteTaskList","updateTaskList","renderItem","draggable","formPropsCopy","time_to_complete","createNewTaskList","enableReinitialize","onStatusChange","day","zone","splitTime","hours","parseInt","minutes","seconds","milliseconds","parent_id","onEdit","List","TaskTreeItemMobile","useDispatch","backgroundColor","autoClose","right","text","onPress","color","taskItem","left","setHours","setMinutes","setSeconds","setMilliseconds","onComplet","email","TasksTreeMobile","initialTimeToComplete","onOpenChange","args","inline","minHeight","enableDragHandle","contentStyle","textAlign","paddingTop","sidebar","open","parentId","RegisterForm","Register","register","credsToLogin","password","AppContainer","compose","withRouter","initializeApp","promise","resultCode","Promise","all","addLocation","instanseCreds","parseQueryString","exact","path","MainApp","params","search","substr","pair","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.2d1aa24c.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nexport const instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://crmapiserver.h1n.ru/api/',\r\n    // baseURL: 'https://81.90.181.175/api/',\r\n    // headers:     {\r\n    //     'X-Auth-Token': localStorage.getItem('remember_token')\r\n    // }\r\n})\r\n\r\nexport enum ResultCodesEnum {\r\n    Success = 0,\r\n    Error = 1\r\n}\r\n\r\nexport type APIResponseType<D = {}, RC = ResultCodesEnum> = {\r\n    data: D\r\n    messages: Array<string>\r\n    resultCode: RC\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport moment from 'moment'\r\nimport { Form, Input, Button, TimePicker, DatePicker, Drawer, Spin, message } from 'antd'\r\nimport { NewTaskFormPropsType } from './NewTaskFormContainer'\r\nimport './../style.css'\r\n\r\nconst layout = {\r\n    labelCol: { span: 8 },\r\n    wrapperCol: { span: 16 },\r\n}\r\nconst tailLayout = {\r\n    wrapperCol: { offset: 8, span: 16 },\r\n}\r\n\r\nexport type NewTaskFormOwnPropsType = {\r\n    onClose: () => void\r\n    visible: boolean,\r\n    setVisible: (visible: boolean) => void\r\n}\r\n\r\nconst { TextArea } = Input\r\n\r\nconst timeFormat: string = 'HH:mm'\r\n\r\nconst NewTaskForm: React.FC<NewTaskFormPropsType> = (props) => {\r\n    const [form] = Form.useForm()\r\n    const [selectedDate, setSelectedDate] = useState<moment.Moment>(moment())\r\n    const [saveStatus, setSaveStatus] = useState<string>(props.taskSaveStatus)\r\n\r\n    useEffect(() => {\r\n        switch (props.taskSaveStatus) {\r\n            case 'inProgress':\r\n                setSaveStatus(props.taskSaveStatus)\r\n                break\r\n            case 'success':\r\n                message.success('The task was successfully created')\r\n                props.onClose()\r\n                setSaveStatus('')\r\n                onReset()\r\n                break\r\n            case 'error':\r\n                message.error('Error: ' + props.errorMessage)\r\n                setSaveStatus(props.taskSaveStatus)\r\n                break\r\n\r\n            default:\r\n                break\r\n        }\r\n    }, [props.taskSaveStatus])\r\n\r\n    type OnFinishType = {\r\n        taskName: string,\r\n        date: moment.Moment,\r\n        taskTime: moment.Moment,\r\n        description?: string\r\n    }\r\n    const onFinish = (values: OnFinishType) => {\r\n        const data = {\r\n            date: values.date.format('YYYY-MM-DD'),\r\n            taskTime: values.taskTime.format('HH:mm'),\r\n            taskName: values.taskName,\r\n            user_id: props.userId,\r\n            description: values.description\r\n        }\r\n\r\n        if (!moment(selectedDate.format('YYYY-MM-DD')).isBetween(\r\n            props.dateInterval.startDate.format('YYYY-MM-DD'),\r\n            props.dateInterval.endDate.format('YYYY-MM-DD'),\r\n            undefined, '[]'\r\n        )) {\r\n            props.createNewTask(data, false)\r\n        } else {\r\n            props.createNewTask(data, true)\r\n        }\r\n    }\r\n\r\n    const onReset = () => {\r\n        form.resetFields()\r\n    }\r\n\r\n    const onDateChange = (value: moment.Moment | null, dateString: string): void => {\r\n        if (value !== null) {\r\n            setSelectedDate(value)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Drawer\r\n            title={\"Create New Task for \" + selectedDate.format('DD MMM YYYY')}\r\n            placement=\"right\"\r\n            closable={true}\r\n            onClose={props.onClose}\r\n            visible={props.visible}\r\n            width=\"90%\"\r\n        >\r\n            <Form\r\n                {...layout}\r\n                form={form}\r\n                name=\"control-hooks\"\r\n                onFinish={onFinish}\r\n            >\r\n                <Form.Item\r\n                    label=\"Task name\"\r\n                    name=\"taskName\"\r\n                    rules={[{ required: true, message: 'Please input task name!' }]}\r\n                >\r\n                    <Input />\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    label=\"Task date\"\r\n                    name=\"date\"\r\n                    initialValue={selectedDate}\r\n                    rules={[{ required: true, message: 'Please input task date!' }]}\r\n                >\r\n                    <DatePicker\r\n                        onChange={onDateChange}\r\n                        format='DD-MM-YYYY'\r\n                        autoComplete=\"off\"\r\n                    />\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    label=\"Task time\"\r\n                    name=\"taskTime\"\r\n                    rules={[{ required: true, message: 'Please input task time!' }]}\r\n                >\r\n                    <TimePicker\r\n                        format={timeFormat}\r\n                    />\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    label=\"Description\"\r\n                    name=\"description\"\r\n                >\r\n                    <TextArea rows={2} />\r\n                </Form.Item>\r\n\r\n                <Form.Item {...tailLayout}>\r\n                    {saveStatus === 'inProgress' ?\r\n                        <Spin></Spin>\r\n                        :\r\n                        <>\r\n                            <Button type=\"primary\" htmlType=\"submit\">\r\n                                Create\r\n                            </Button>\r\n                            <Button className=\"ml-3\" type=\"primary\" onClick={onReset}>\r\n                                Reset\r\n                            </Button>\r\n                        </>\r\n                    }\r\n                </Form.Item>\r\n            </Form>\r\n\r\n        </Drawer>\r\n    )\r\n}\r\n\r\n\r\nexport default NewTaskForm","import { NewTaskDataType, TaskType } from '../Types/types'\r\nimport {instance} from './api'\r\n\r\nexport type TaskListType = {\r\n    Tasks: Array<TaskType>\r\n}\r\n\r\nexport const taskAPI = {\r\n    createNewTask(values: NewTaskDataType) {\r\n        return instance.post<TaskListType>(`tasks`, values)\r\n        .then(response => {\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                return err.response\r\n            } else if (err.request) {\r\n                //console.log('request', err.request)\r\n            } else {\r\n                //console.log('anything else: ', err)\r\n            }\r\n            return null\r\n        })\r\n    },\r\n\r\n    getTaskList(values: getTaskListValuesType) {\r\n        instance.defaults.headers.common['X-Auth-Token'] = localStorage.getItem('remember_token')\r\n        // .headers = {\r\n        //     'X-Auth-Token': localStorage.getItem('remember_token')\r\n        // }\r\n        return instance.post<TaskListType>(`tasks/part`, values)\r\n        .then(response => {\r\n            //console.log(response)\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                //console.log('request', err.request)\r\n                return err.response\r\n            } else if (err.request) {\r\n                //console.log('request', err.request)\r\n            } else {\r\n                //console.log('anything else: ', err)\r\n            }\r\n            return null\r\n        })\r\n    },\r\n\r\n    deleteTask(taskId: number) {\r\n        return instance.delete<TaskListType>(`tasks/${taskId}`).then(response => {\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                return err.response\r\n            } else if (err.request) {\r\n                //console.log('request', err.request)\r\n            } else {\r\n                //console.log('anything else: ', err)\r\n            }\r\n            return null\r\n        })\r\n    }, \r\n\r\n    updateTask(values: any, taskId: number) {\r\n        return instance.put<any>(`tasks/${taskId}`, values)\r\n        .then(response => {\r\n            console.log(response)\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                console.log(err.response)\r\n                return err.response\r\n            } else if (err.request) {\r\n                //console.log('request', err.request)\r\n            } else {\r\n                //console.log('anything else: ', err)\r\n            }\r\n            return null\r\n        })\r\n    }\r\n}\r\n\r\nexport type getTaskListValuesType = {\r\n    start_date: string, \r\n    end_date: string\r\n}","import { Dispatch } from 'redux'\r\nimport { taskAPI, TaskListType } from '../api/taskApi'\r\nimport { NewTaskDataType, TaskType } from '../Types/types'\r\nimport {BaseThunkType, InferActionsTypes} from './store'\r\nimport moment from 'moment'\r\n\r\nexport type InitialStateType = {\r\n    taskList: null | Array<TaskType>,\r\n    taskListIsFetching: boolean,\r\n    taskSaveStatus: 'no' | 'inProgress' | 'success' | 'error'\r\n    errorMessage: null | string,\r\n    isInterval: boolean,\r\n    dateInterval: {\r\n        startDate: moment.Moment,\r\n        endDate: moment.Moment\r\n    }\r\n}\r\n\r\nlet initialState:InitialStateType = {\r\n    taskList: null,\r\n    taskListIsFetching: false,\r\n    taskSaveStatus: 'no',\r\n    errorMessage: null,\r\n    isInterval: false,\r\n    dateInterval: {\r\n        startDate: moment(),\r\n        endDate: moment()\r\n    }\r\n}\r\n\r\nconst taskReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n    \r\n    switch (action.type) {\r\n        case 'SN/TASK/SET_TASK_LIST':\r\n            return {...state, taskList: action.taskList.Tasks}\r\n\r\n        case 'SN/TASK/SET_TASK_SAVE_STATUS':\r\n            return {...state, taskSaveStatus: action.taskSaveStatus}\r\n\r\n        case 'SN/TASK/SET_ERROR_MESSAGE':\r\n            return {...state, errorMessage: action.message}\r\n\r\n        case 'SN/TASK/SET_TASK_LIST_IS_FETCHING':\r\n            return {...state, taskListIsFetching: action.isFetchingValue}\r\n\r\n        case 'SN/TASK/SET_IS_INTERVAL':\r\n            const dateInterval = {\r\n                startDate: action.date.startDate,\r\n                endDate: action.date.endDate\r\n            }\r\n            return {...state, isInterval: action.isInterval, dateInterval }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    setTaskList: (taskList: TaskListType) => ({ type: 'SN/TASK/SET_TASK_LIST', taskList } as const),\r\n    setTaskSaveStatus: (taskSaveStatus: 'no' | 'inProgress' | 'success' | 'error') => ({ type: 'SN/TASK/SET_TASK_SAVE_STATUS', taskSaveStatus } as const),\r\n    setErrorMessage: (message: string | null) => ({type: 'SN/TASK/SET_ERROR_MESSAGE', message} as const),\r\n    setTaskListIsFetching: (isFetchingValue: boolean) => ({type: 'SN/TASK/SET_TASK_LIST_IS_FETCHING', isFetchingValue} as const),\r\n    setIsInterval: (isInterval: boolean, date: {startDate: moment.Moment, endDate: moment.Moment}) => ({type: 'SN/TASK/SET_IS_INTERVAL', isInterval, date} as const)\r\n}\r\n\r\nexport const createNewTask = (values: NewTaskDataType, reload:boolean = true): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        dispatch(actions.setTaskSaveStatus('inProgress'))\r\n\r\n        let response = await taskAPI.createNewTask(values)\r\n\r\n        if (response && response.status && response.status === 200) {\r\n            if (reload) {\r\n                const state = getState()\r\n                const startDate = state.task.dateInterval.startDate.format('YYYY-MM-DD')\r\n                const endDate = state.task.dateInterval.endDate.format('YYYY-MM-DD')\r\n                dispatch(getTaskList(startDate, endDate))\r\n            }\r\n            dispatch(actions.setTaskSaveStatus('success'))\r\n            dispatch(actions.setTaskSaveStatus('no'))\r\n        } else {\r\n            if (response && response.data) {\r\n                dispatch(actions.setErrorMessage(response.data.message))\r\n                dispatch(actions.setTaskSaveStatus('error'))\r\n                dispatch(actions.setTaskSaveStatus('no'))\r\n                dispatch( actions.setErrorMessage(null) )\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport const getTaskList = (startDate: string, endDate:string): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        dispatch(actions.setTaskListIsFetching(true))\r\n\r\n        const values = {start_date: startDate, end_date: endDate}\r\n        let response = await taskAPI.getTaskList(values)\r\n\r\n        if (response !== undefined && response !== null) {\r\n            dispatch(actions.setTaskList(response.data))\r\n        } else {\r\n            // add error message\r\n        }\r\n        dispatch(actions.setTaskListIsFetching(false))\r\n    }\r\n}\r\n\r\nexport const deleteTask = (taskid: number, startDate: string, endDate:string): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        let response = await taskAPI.deleteTask(taskid)\r\n\r\n        if (response !== null) {\r\n            dispatch(actions.setErrorMessage('Task deletion was successful'))\r\n            dispatch(getTaskList(startDate, endDate))\r\n            dispatch( actions.setErrorMessage(null) )\r\n        }\r\n    }\r\n}\r\n\r\nexport const updateTask = (values: any, taskId: number): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        let response = await taskAPI.updateTask(values, taskId)\r\n        console.log(response)\r\n        // dispatch(actions.setTaskList(response.data.Tasks))\r\n    }\r\n}\r\n\r\nexport default taskReducer\r\n\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsTypes>\r\nexport type DispatchType = Dispatch<ActionsTypes>\r\n","import {connect} from 'react-redux'\r\nimport NewTaskForm, { NewTaskFormOwnPropsType } from './NewTaskForm'\r\nimport {createNewTask} from '../../../redux/taskReducer'\r\nimport { AppStateType } from '../../../redux/store'\r\nimport {NewTaskDataType} from '../../../Types/types'\r\n\r\nexport type MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype DispatchPropsType = {\r\n    createNewTask: (values:NewTaskDataType, reload:boolean)=> void\r\n}\r\n\r\nexport type NewTaskFormPropsType = MapPropsType & DispatchPropsType & NewTaskFormOwnPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        taskList: state.task.taskList,\r\n        taskSaveStatus: state.task.taskSaveStatus,\r\n        errorMessage: state.task.errorMessage,\r\n        dateInterval: state.task.dateInterval,\r\n        userId: state.auth.user?.id\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, DispatchPropsType, NewTaskFormOwnPropsType, AppStateType>(mapStateToProps, \r\n    {createNewTask}) \r\n    (NewTaskForm)\r\n\r\n\r\n","import React, { useState, useEffect } from 'react'\r\nimport { DatePicker, Checkbox, Button } from 'antd'\r\nimport { FileAddOutlined, SettingOutlined } from '@ant-design/icons'\r\nimport { CheckboxChangeEvent } from 'antd/lib/checkbox'\r\nimport {RangeValue} from '../../../Types/types'\r\nimport { ToDoHeaderPropsType } from './ToDoHeaderContainer'\r\nimport moment from 'moment'\r\n\r\nconst { RangePicker } = DatePicker\r\n\r\nexport type OwnToDoHeaderPropsType = {\r\n    showDrawer: () => void,\r\n    showModal: () => void,\r\n}\r\n\r\nconst ToDoHeader: React.FC<ToDoHeaderPropsType> = (props) => {\r\n    const [isInterval, setIsInterval] = useState(false)\r\n    const [dates, setDates] = useState<{startDate: moment.Moment, endDate: moment.Moment}>({startDate: moment(), endDate: moment()})\r\n\r\n    useEffect(() => {\r\n        if ( \r\n            !props.dateInterval.startDate.isSame(dates.startDate.format('YYYY-MM-DD'), \"day\" ) ||\r\n            !props.dateInterval.endDate.isSame(dates.endDate.format('YYYY-MM-DD'), \"day\" )\r\n        ) {\r\n            props.setIsInterval(isInterval, dates)\r\n        }\r\n        \r\n    }, [isInterval, dates, props])\r\n\r\n\r\n    const onDateTypeChange = (e: CheckboxChangeEvent) => {\r\n        if (!e.target.checked) {\r\n            setDates({\r\n                startDate: dates.startDate,\r\n                endDate: dates.startDate\r\n            })\r\n        }\r\n        setIsInterval(e.target.checked)\r\n    }\r\n\r\n    const onDateRangeChange = (values: RangeValue<moment.Moment>, formatString: [string, string]): void => {\r\n        if (values !== null && values[0] !== null && values[1] !== null ) {\r\n            setDates({\r\n                startDate: values[0],\r\n                endDate: values[1],\r\n            })\r\n        }\r\n        \r\n    }\r\n\r\n    const onDateChange = (value: moment.Moment | null, dateString: string):void => {\r\n        if (value !== null) {\r\n            setDates({\r\n                startDate: value,\r\n                endDate: value,\r\n            })\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"row\" >\r\n            <div className=\"col-12 col-md-8 col-lg-6\">\r\n                <div className=\"d-none d-sm-inline\">\r\n                    <label >Select {isInterval ? \"date interval\" : \"date\"}:</label>\r\n                </div>\r\n\r\n                <div className=\"d-inline\">\r\n                    {isInterval ?\r\n                        <RangePicker\r\n                            onChange={onDateRangeChange}\r\n                            defaultValue={[props.dateInterval.startDate, props.dateInterval.endDate]}\r\n                            value = {[props.dateInterval.startDate, props.dateInterval.endDate]}\r\n                            format='DD-MM-YYYY'\r\n                            style={{ marginLeft: 10 }}\r\n                        />\r\n                        :\r\n                        <DatePicker\r\n                            onChange={onDateChange}\r\n                            defaultValue={props.dateInterval.startDate}\r\n                            format='DD-MM-YYYY'\r\n                            style={{ marginLeft: 10 }}\r\n                        />\r\n                    }\r\n                </div>\r\n            </div>\r\n            <div className=\"col-12 col-md-4 col-lg-2 m-2 m-md-0\" >\r\n                <Checkbox className=\"ml-3\" onChange={onDateTypeChange}>Date interval</Checkbox>\r\n            </div>\r\n            <div className=\"col-12 col-md-12 col-lg-4\">\r\n                <Button\r\n                    type=\"primary\"\r\n                    shape=\"round\"\r\n                    icon={\r\n                        <div className=\"d-flex flex-wrap align-content-start\">\r\n                            <FileAddOutlined style={{ fontSize: '18px' }} />\r\n                            <span className=\"ml-1\" style={{ fontSize: '14px' }}>Add</span>\r\n                        </div>}\r\n                    style={{ marginLeft: 10 }}\r\n                    onClick={props.showDrawer}\r\n                />\r\n\r\n                <Button className=\"\"\r\n                    type=\"primary\"\r\n                    shape=\"round\"\r\n                    style={{ marginLeft: 10 }}\r\n                    onClick={props.showModal}\r\n                    icon={\r\n                        <div className=\"d-flex flex-wrap align-content-start\">\r\n                            <SettingOutlined style={{ fontSize: '18px' }} />\r\n                            <span className=\"ml-1\" style={{ fontSize: '14px' }}>Settings</span>\r\n                        </div>} \r\n                    />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ToDoHeader","import React, { useState } from 'react'\r\nimport { ToDoHeaderPropsType } from './ToDoHeaderContainer'\r\nimport { Button, DatePicker, List, Switch } from 'antd-mobile'\r\nimport enUs from 'antd-mobile/lib/date-picker/locale/en_US'\r\nimport moment from \"moment\"\r\n\r\nexport type OwnToDoHeaderPropsType = {\r\n    showDrawer: () => void,\r\n    showModal: () => void,\r\n}\r\n\r\nconst ToDoHeaderMobile: React.FC<ToDoHeaderPropsType> = (props) => {\r\n    const [isInterval, setIsInterval] = useState(false)\r\n\r\n    const onIntervalChange = (e: any) => {\r\n        setIsInterval(!isInterval)\r\n    }\r\n    return (\r\n        <div>\r\n            <DatePicker\r\n                locale={enUs}\r\n                mode=\"date\"\r\n                value={new Date()}\r\n                onChange={(date: any) => { console.log(date) }}\r\n            >\r\n                <List.Item className=\"w-100\">\r\n                {isInterval ?\r\n                    <DatePicker\r\n                        // className=\"w-100\"\r\n                        locale={enUs}\r\n                        mode=\"date\"\r\n                        value={new Date()}\r\n                        onChange={(date: any) => { console.log(date) }}\r\n                    >\r\n                        <List.Item ></List.Item>\r\n                    </DatePicker>\r\n                    :\r\n                    <List.Item ></List.Item>\r\n                }\r\n                </List.Item>\r\n            </DatePicker>\r\n            {/* {isInterval ?\r\n                <DatePicker\r\n                    locale={enUs}\r\n                    mode=\"date\"\r\n                    value={new Date()}\r\n                    onChange={(date: any) => { console.log(date) }}\r\n                >\r\n                    <List.Item >End</List.Item>\r\n                </DatePicker>\r\n                :\r\n                null\r\n            } */}\r\n            <List.Item\r\n                extra={\r\n                        <Switch\r\n                            checked={isInterval}\r\n                            onChange={onIntervalChange}\r\n                        />\r\n                }\r\n                >\r\n                Date interval\r\n            </List.Item>\r\n\r\n            <Button\r\n                // inline\r\n                size=\"small\"\r\n                className=\"ml-3\"\r\n                // style={{ marginRight: '4px' }} \r\n                // onClick={onOpenChange}\r\n                type=\"primary\"\r\n            >\r\n                Add\r\n            </Button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ToDoHeaderMobile","import {connect} from 'react-redux'\r\nimport ToDoHeader, { OwnToDoHeaderPropsType } from './ToDoHeader'\r\nimport {actions} from '../../../redux/taskReducer'\r\nimport { AppStateType } from '../../../redux/store'\r\nimport { isMobile } from 'react-device-detect'\r\nimport ToDoHeaderMobile from './ToDoHeaderMobile'\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    setIsInterval: (isInterval: boolean, date: {startDate: moment.Moment, endDate: moment.Moment}) => {\r\n        type: \"SN/TASK/SET_IS_INTERVAL\",\r\n        isInterval: boolean,\r\n        date: {startDate: moment.Moment, endDate: moment.Moment}\r\n    }\r\n}\r\n\r\nexport type ToDoHeaderPropsType = MapPropsType & MapDispatchPropsType & OwnToDoHeaderPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        dateInterval: state.task.dateInterval\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnToDoHeaderPropsType, AppStateType>(mapStateToProps, \r\n    {setIsInterval: actions.setIsInterval}) \r\n    (isMobile ? ToDoHeaderMobile : ToDoHeader)\r\n    \r\n\r\n","import React, {useState} from 'react'\r\nimport { Card, Modal } from 'antd'\r\nimport { SettingsModalPropsType } from './SettingsModalContainer'\r\n\r\nconst settingasInstanse = {\r\n    ToDo: {\r\n        singlDateView: {\r\n            timeScale: true,\r\n            isCompletedVisible: true\r\n        },\r\n        intervalDateView: {\r\n            timeScale: false,\r\n            isCompletedVisible: true\r\n        }\r\n    }\r\n}\r\n\r\nexport type OwmSettingsModalPropsType = {\r\n    isModalVisible: boolean,\r\n    handleOk: () => void,\r\n    handleCancel: () => void\r\n}\r\n\r\n\r\n\r\nconst SettingsModal = (props:any) => {\r\n\r\n    const [settings, setSettings] = useState(props.viewSettings!==null ? props.viewSettings : settingasInstanse)\r\n\r\n    let settingsBlock: Array<any> = []\r\n\r\n        for (const propName in settings.ToDo) {\r\n            if (Object.prototype.hasOwnProperty.call(settings.ToDo, propName)) {\r\n                const element = settings.ToDo[propName]\r\n                console.log(propName, element)\r\n                settingsBlock.push(<FormItem title={propName} data={element}/>)\r\n            }\r\n        }\r\n    \r\n\r\n    return (\r\n        <Modal title=\"Task display settings\" visible={props.isModalVisible} onOk={props.handleOk} onCancel={props.handleCancel}>\r\n            {settingsBlock}\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default SettingsModal\r\n\r\nconst FormItem: React.FC<any> = (props) => {\r\n    let settingsItem: Array<any> = []\r\n    for (const propName in props.data) {\r\n        if (Object.prototype.hasOwnProperty.call(props.data, propName)) {\r\n            const element = props.data[propName]\r\n            settingsItem.push(<div>{propName} = {element ? 'yes' : 'no'}</div>)\r\n        }\r\n    }\r\n\r\n    return(\r\n        <Card title={props.title} extra={<a href=\"#\">More</a>} >\r\n            {settingsItem}\r\n        </Card>\r\n    )\r\n}","import {connect} from 'react-redux'\r\nimport SettingsModal, { OwmSettingsModalPropsType } from './SettingsModal'\r\nimport { AppStateType } from '../../../redux/store'\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    // getTaskList: (start_date: string, end_date:string)=>void\r\n}\r\n\r\nexport type SettingsModalPropsType = MapPropsType & MapDispatchPropsType & OwmSettingsModalPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    console.log(state)\r\n    return {\r\n        viewSettings: state.auth.viewSettings\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwmSettingsModalPropsType, AppStateType>(mapStateToProps, \r\n    {}) \r\n    (SettingsModal)\r\n    \r\n\r\n","import React, { useState } from 'react'\r\nimport { Col, Row, Checkbox, Tooltip, Button, Spin } from 'antd'\r\nimport { CheckboxChangeEvent } from 'antd/lib/checkbox'\r\nimport { ListGroup } from 'react-bootstrap'\r\nimport { TaskType } from '../../../Types/types'\r\nimport { DeleteOutlined, EditOutlined } from '@ant-design/icons'\r\nimport { TaskItemPropsType } from './TaskItemContainer'\r\n\r\nexport type OwnTaskItemPropsType = {\r\n    element: TaskType\r\n}\r\n\r\nconst TaskItem: React.FC<TaskItemPropsType> = (props) => {\r\n    // type PropsElementType = typeof props.element.isCompleted\r\n    const [checked, setChecked] = useState(props.element.isCompleted === 1 ? true : false)\r\n    const [deleteingInProgess, setDeleteingInProgess] = useState(false)\r\n\r\n    const onisCompletedChange = (e: CheckboxChangeEvent) => {\r\n        setChecked(!checked)\r\n        const values = { isCompleted: e.target.checked }\r\n        props.updateTask(values, props.element.id)\r\n    }\r\n\r\n    const onEdit = () => {\r\n        console.log(props.element)\r\n    }\r\n\r\n    const deleteTask: (taskid: number) => void = (taskid) => {\r\n        setDeleteingInProgess(true)\r\n        props.deleteTask(taskid, props.dateInterval.startDate.format('YYYY-MM-DD'), props.dateInterval.endDate.format('YYYY-MM-DD'))\r\n    }\r\n\r\n    return (\r\n        <ListGroup.Item action className=\"\">\r\n            <Row className=\"px-0 ml-0 ml-sm-5\">\r\n                <Col className=\"mx-2\">\r\n                    <Checkbox \r\n                        // checked={props.element.isCompleted === 1 ? true : false} \r\n                        onChange={onisCompletedChange} \r\n                        checked={checked}\r\n                        />\r\n                </Col>\r\n                <Col className=\"mx-2\">\r\n                    {props.element.time.split(':', 2).join(':')}\r\n                </Col>\r\n                <Col className=\"mx-2\">\r\n                    <Tooltip key={props.element.id} placement=\"topLeft\" title={props.element.descriptions}>\r\n                        <span\r\n                            style={{ textDecoration: checked ? 'line-through' : '' }}\r\n                            // className=\"text-break\"\r\n                        >\r\n                            {props.element.name}\r\n                        </span>\r\n                    </Tooltip>\r\n                </Col>\r\n                <Col className=\"mr-auto ml-0 mr-sm-2 ml-sm-auto\">\r\n                    <Button className=\"\"\r\n                        type=\"primary\"\r\n                        shape=\"circle\"\r\n                        size=\"small\"\r\n                        style={{ marginLeft: 10 }}\r\n                        onClick={onEdit}\r\n                        icon={\r\n                            <div className=\"d-flex flex-wrap align-content-start\">\r\n                                <EditOutlined className=\"ml-1\" style={{ fontSize: '14px' }} />\r\n                            </div>\r\n                        }\r\n                    />\r\n\r\n                    {!deleteingInProgess ? \r\n                    <Button \r\n                        danger\r\n                        type=\"primary\"\r\n                        shape=\"circle\"\r\n                        size=\"small\"\r\n                        style={{ marginLeft: 10 }}\r\n                        onClick={() => { deleteTask(props.element.id) }}\r\n                        icon={\r\n                            <div className=\"d-flex flex-wrap align-content-start\">\r\n                                <DeleteOutlined className=\"ml-1\" style={{ fontSize: '14px' }} />\r\n                            </div>\r\n                        }\r\n                    />\r\n                    :\r\n                    <Spin key=\"spin\" size=\"small\" />\r\n                    }\r\n                </Col>\r\n            </Row>\r\n\r\n        </ListGroup.Item>\r\n    )\r\n}\r\n\r\nexport default TaskItem\r\n","import {connect} from 'react-redux'\r\nimport TaskItem, { OwnTaskItemPropsType } from './TaskItem'\r\nimport {deleteTask, getTaskList, updateTask} from './../../../redux/taskReducer'\r\nimport {AppStateType} from '../../../redux/store'\r\n\r\nexport type MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype DispatchPropsType = {\r\n    deleteTask: (taskid: number, startDate: string, endDate: string) => void\r\n    getTaskList: (startDate: string, endDate: string) => void,\r\n    updateTask: (values: any, taskId: number) => void,\r\n}\r\n\r\nexport type TaskItemPropsType = MapPropsType & DispatchPropsType & OwnTaskItemPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        dateInterval: state.task.dateInterval,\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, DispatchPropsType, OwnTaskItemPropsType, AppStateType>(mapStateToProps, \r\n    {deleteTask, getTaskList, updateTask}) \r\n    (TaskItem)","import { TaskType } from \"../Types/types\"\r\n\r\nexport const sortTaskArrayByParams = (field: 'date' | 'time') => {\r\n    if (field === 'date') {\r\n        return (a: TaskType, b: TaskType) => a['date'] > b['date'] ? 1 : -1\r\n    } else {\r\n        return (a: TaskType, b: TaskType) => a['time'] > b['time'] ? -1 : 1\r\n    }\r\n}","import React, { useEffect, useState } from 'react'\r\nimport { TaskType } from '../../Types/types'\r\nimport moment from 'moment'\r\nimport { TimeScalePropsType } from './TimeScaleContainer'\r\nimport { Divider, Spin, Tooltip, message } from 'antd'\r\nimport TaskItem from './TaskItem/TaskItemContainer'\r\nimport { sortTaskArrayByParams } from '../../utils/array-helpers'\r\n\r\nexport type OwnTaskTimeScaleType = {}\r\nconst TimeScale: React.FC<TimeScalePropsType> = (props) => {\r\n    type SelestedDatesType = typeof props.dateInterval\r\n    const [selestedDates, setSelectedDates] = useState<SelestedDatesType>({ startDate: moment(null), endDate: moment() })\r\n    // const [isInterval, setIsInterval] = useState(\r\n    //     props.dateInterval.startDate.format('YYYY-MM-DD') === props.dateInterval.endDate.format('YYYY-MM-DD') ? false : true\r\n    //     )\r\n    useEffect(() => {\r\n        if (\r\n            props.dateInterval.startDate.isSame(selestedDates.startDate.format('YYYY-MM-DD'), \"day\" ) &&\r\n            props.dateInterval.endDate.isSame(selestedDates.endDate.format('YYYY-MM-DD'), \"day\" )\r\n        ) { }\r\n        else {\r\n            if (props.dateInterval.startDate !== null) {\r\n                props.getTaskList(\r\n                    props.dateInterval.startDate.format('YYYY-MM-DD'),\r\n                    props.dateInterval.endDate.format('YYYY-MM-DD')\r\n                )\r\n                setSelectedDates(props.dateInterval)\r\n            }\r\n        }\r\n    }, [props.dateInterval])\r\n\r\n    useEffect(() => {\r\n        if (props.errorMessage !== null) {\r\n            message.success(props.errorMessage)\r\n        }\r\n    }, [props.errorMessage])\r\n    \r\n    console.log(props.dateInterval)\r\n\r\n    if (props.taskList !== undefined) {\r\n        if (props.taskList !== null) {\r\n            return (\r\n                <>\r\n                    {getTimeScaleArrey(props.taskList, props.isInterval)}\r\n                </>\r\n            )\r\n        } else {\r\n            return (\r\n                <Spin key=\"spin\" size=\"large\" />\r\n            )\r\n        }\r\n    } else {\r\n        return <div>Authorization required to get a list of tasks</div>\r\n    }\r\n    \r\n}\r\n\r\nexport default TimeScale\r\n\r\n\r\nconst getTimeScaleArrey = (taskList: Array<TaskType>, isInterval:boolean): Array<React.ReactElement<string>> => {\r\n    let timeScaleArrey: Array<React.ReactElement<string>> = []\r\n    let tomorowTasks: Array<TaskType> = []\r\n\r\n    console.log('isInterval: ', isInterval)\r\n\r\n    taskList.sort(sortTaskArrayByParams('time')).sort(sortTaskArrayByParams('date'))\r\n\r\n    const getHeadlineLabel = (task: TaskType) => {\r\n        return moment(task.date).format('D MMMM')\r\n    }\r\n\r\n    let headlineDate: string | null = null\r\n\r\n    if (taskList !== null && taskList.length > 0) {\r\n        headlineDate = getHeadlineLabel(taskList[0])\r\n        timeScaleArrey.push(\r\n            <h5 \r\n                key={headlineDate + 'title'}\r\n                className={isInterval ? \"text-left\" : \"\"}\r\n            >\r\n                {headlineDate}:\r\n            </h5>\r\n        )\r\n    }\r\n\r\n    for (let index: number = 0; index < 24; index++) {\r\n        if (taskList.length > 0) {\r\n            if (!isInterval && index > 7) {\r\n                timeScaleArrey.push(\r\n                    <Divider key={index + 'to' + headlineDate} orientation=\"left\">\r\n                        {index <= 9 ? '0' : null}{index}:00\r\n                    </Divider>\r\n                )\r\n            }\r\n        } else {\r\n            timeScaleArrey.push(<h3 key=\"noTasks\">no tasks</h3>)\r\n            break\r\n        }\r\n\r\n        if (taskList !== null) {\r\n            for (let i = 0; i < taskList.length; i++) {\r\n                const element: TaskType = taskList[i]\r\n                const timeVal = Number(element.time.split(':', 1))\r\n                const nextHour = index + 1\r\n                if (timeVal >= index && timeVal < nextHour) {\r\n                    if (getHeadlineLabel(element) === headlineDate) {\r\n                        timeScaleArrey.push(\r\n                            <Tooltip key={index + '-' + element.id} placement=\"topLeft\" title={element.descriptions}>\r\n                                <TaskItem element={element} />\r\n                            </Tooltip>\r\n                        )\r\n                    }\r\n                    else {\r\n                        tomorowTasks.push(element)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (tomorowTasks.length > 0) {\r\n        timeScaleArrey = timeScaleArrey.concat(getTimeScaleArrey(tomorowTasks, isInterval))\r\n    }\r\n\r\n    return timeScaleArrey\r\n}","import {connect} from 'react-redux'\r\nimport TimeScale from './TimeScale'\r\nimport {getTaskList} from './../../redux/taskReducer'\r\nimport { AppStateType } from '../../redux/store'\r\nimport { OwnTaskTimeScaleType } from './TimeScale'\r\n\r\nexport type MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype DispatchPropsType = {\r\n    getTaskList: (startDate: string, endDate: string) => void\r\n}\r\n\r\nexport type TimeScalePropsType = MapPropsType & DispatchPropsType & OwnTaskTimeScaleType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        taskList: state.task.taskList,\r\n        taskSaveStatus: state.task.taskSaveStatus,\r\n        taskListIsFetching: state.task.taskListIsFetching,\r\n        dateInterval: state.task.dateInterval,\r\n        errorMessage: state.task.errorMessage,\r\n        isInterval: state.task.isInterval\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, DispatchPropsType, OwnTaskTimeScaleType, AppStateType>(mapStateToProps, \r\n    {getTaskList}) \r\n    (TimeScale)\r\n\r\n\r\n","import React, { useState } from 'react'\r\nimport { Card } from 'antd'\r\nimport NewTaskForm from './NewTaskForm/NewTaskFormContainer'\r\nimport ToDoHeader from './ToDoHeader/ToDoHeaderContainer'\r\nimport SettingsModal from './Settings/SettingsModalContainer'\r\nimport { ToDoListPropsType } from './ToDoListContainer'\r\nimport TimeScale from '../TimeScale/TimeScaleContainer'\r\n\r\nexport type OwnToDoListPropsType = {}\r\n\r\nconst ToDoList: React.FC<ToDoListPropsType> = (props) => {\r\n    const [visible, setVisible] = useState(false)\r\n    const [isModalVisible, setIsModalVisible] = useState(false)\r\n\r\n    const showDrawer = (): void => {\r\n        setVisible(true)\r\n    }\r\n\r\n    const onClose = (): void => {\r\n        setVisible(false)\r\n    }\r\n\r\n    const showModal = () => {\r\n        setIsModalVisible(true)\r\n    }\r\n\r\n    const handleOk = () => {\r\n        setIsModalVisible(false)\r\n    }\r\n\r\n    const handleCancel = () => {\r\n        setIsModalVisible(false)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"site-card-border-less-wrapper\">\r\n                <Card\r\n                    title={<ToDoHeader\r\n                        showDrawer={showDrawer}\r\n                        showModal={showModal}\r\n                    />}\r\n                    bordered={false}\r\n                >\r\n\r\n                    <SettingsModal \r\n                        isModalVisible={isModalVisible} \r\n                        handleOk={handleOk} \r\n                        handleCancel={handleCancel}\r\n                    />\r\n\r\n                    <TimeScale />\r\n\r\n                </Card>\r\n\r\n                <NewTaskForm\r\n                    onClose={onClose}\r\n                    visible={visible}\r\n                    setVisible={setVisible}\r\n                />\r\n\r\n            </div>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ToDoList","import {connect} from 'react-redux'\r\nimport ToDoList, { OwnToDoListPropsType } from './ToDoList'\r\nimport {getTaskList} from '../../redux/taskReducer'\r\nimport { AppStateType } from '../../redux/store'\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    getTaskList: (start_date: string, end_date:string)=>void\r\n}\r\n\r\nexport type ToDoListPropsType = MapPropsType & MapDispatchPropsType & OwnToDoListPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        taskList: state.task.taskList,\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnToDoListPropsType, AppStateType>(mapStateToProps, \r\n    {getTaskList}) \r\n    (ToDoList)\r\n    \r\n\r\n","import {instance, APIResponseType} from \"./api\";\r\n\r\ntype MeResponseDataType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n    // remember_token?: string,\r\n    // user?: any\r\n    // error?: boolean,\r\n    // message?: string\r\n}\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get(`authMe/`+localStorage.getItem('remember_token')).then( (response) => {\r\n            //console.log('login: ', response)\r\n            return response\r\n        })\r\n    },\r\n    login(data: any) {\r\n        return instance.post('login', data)\r\n        .then(response => {\r\n            //console.log('login: ', response)\r\n            if (response.data.remember_token !== null) {\r\n                localStorage.setItem('remember_token', response.data.remember_token);\r\n            } else {\r\n                localStorage.removeItem('remember_token');\r\n            }\r\n            return response.status === 200 ? response : null;\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                //console.log(err.response)\r\n                return err.response\r\n            } else if (err.request) {\r\n                //console.log('request', err.request)\r\n            } else {\r\n                //console.log('anything else: ', err)\r\n            }\r\n            return null\r\n        })\r\n    },\r\n    register(creds: any) {\r\n        return instance.post('register', creds)\r\n        .then(response => {\r\n            //console.log('login: ', response)\r\n            if (response.data.remember_token !== null) {\r\n                localStorage.setItem('remember_token', response.data.token);\r\n            } else {\r\n                localStorage.removeItem('remember_token');\r\n            }\r\n            return response.status === 200 ? response : null;\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                //console.log(err.response)\r\n                return err.response\r\n            } else if (err.request) {\r\n                //console.log('request', err.request)\r\n            } else {\r\n                //console.log('anything else: ', err)\r\n            }\r\n            return null\r\n        })\r\n    }\r\n}","import { authAPI } from \"../api/authAPI\";\r\nimport { BaseThunkType, InferActionsTypes } from \"./store\"\r\n// import {FormAction} from 'redux-form/lib/actions';\r\n\r\ntype InitialStateType = {\r\n    user: UserType | null,\r\n    remember_token: string | null,\r\n    isAuth: boolean\r\n    viewSettings: any\r\n}\r\nlet initialState: InitialStateType = {\r\n    user: null,\r\n    remember_token: null,\r\n    isAuth: false,\r\n    viewSettings: null\r\n}\r\n\r\nconst authReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/AUTH/SET_USER_DATA':\r\n            if (action.user !== null) {\r\n                //console.log('1')\r\n                return { ...state, \r\n                            user: action.user, \r\n                            remember_token: action.remember_token, \r\n                            isAuth: true, \r\n                            viewSettings: JSON.parse(action.user.view_settings)\r\n                        }\r\n            } else {\r\n                return initialState;\r\n            }\r\n            \r\n        case 'SN/AUTH/LOGOUT':\r\n            localStorage.removeItem('remember_token');\r\n            return initialState;\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport type UserType = {\r\n    created_at: string\r\n    email: string\r\n    email_verified_at: null | any\r\n    id: number\r\n    name: string\r\n    status: string\r\n    updated_at: string,\r\n    view_settings: any\r\n}\r\nexport const actions = {\r\n    setAuthUserData: (user: UserType | null, remember_token: string | null) => ({ type: 'SN/AUTH/SET_USER_DATA', user, remember_token } as const),\r\n    logout: () => ({type: 'SN/AUTH/LOGOUT'} as const),\r\n}\r\n\r\n// export const getAuthUserData = (): ThunkType => async (dispatch) => {\r\n//     let response = await authAPI.me()\r\n//     //console.log('getAuthUserData', response)\r\n// }\r\n\r\nexport const getAuthUserData = (): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        let response = await authAPI.me()\r\n\r\n        if (response !== null) {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(actions.setAuthUserData(response.data.user, response.data.remember_token))\r\n            } else {\r\n                //console.log(response.data.messages[0])\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport type credsType = {\r\n    email: string,\r\n    password: string,\r\n    remember: boolean\r\n}\r\n\r\nexport const login = (data: credsType): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        let response = await authAPI.login(data)\r\n        if (response) {\r\n            //console.log(response)\r\n            if (response.status === 200) {\r\n                dispatch(actions.setAuthUserData(response.data.user, response.data.remember_token))\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport const register = (creds: any): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        let response = await authAPI.register(creds)\r\n        //console.log(response)\r\n        const credsToLogin: credsType = {\r\n            email: creds.email,\r\n            password: creds.password,\r\n            remember: creds.remember\r\n        }\r\n        dispatch(login(credsToLogin))\r\n    }\r\n}\r\n\r\nexport default authReducer;\r\n\r\n// export type InitialStateType = typeof initialState;\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType< ActionsTypes>\r\n\r\n","import {getAuthUserData} from \"./authReducer\"\r\nimport {InferActionsTypes} from './store'\r\n\r\nlet initialState = {\r\n    initialized: false,\r\n    location: '/'\r\n}\r\n\r\n// export type InitialStateType = typeof initialState\r\nexport type InitialStateType ={\r\n    initialized: boolean,\r\n    location: string\r\n}\r\n\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\n\r\nconst appReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/APP/INITIALIZED_SUCCESS':\r\n            //console.log('INITIALIZED_SUCCESS: true')\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            }\r\n\r\n        case 'SN/APP/SET_LOCATION':\r\n            //console.log('location in appReducer:', action.location)\r\n            return  {\r\n                ...state,\r\n                location: action.location\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    initializedSuccess: () => ({type: 'SN/APP/INITIALIZED_SUCCESS'} as const),\r\n    setLocation: (location: string) => ({type: 'SN/APP/SET_LOCATION', location} as const),\r\n}\r\n\r\nexport const initializeApp = () => (dispatch: any) => {\r\n    let promise = dispatch(getAuthUserData());\r\n    Promise.all([promise])\r\n        .then(() => {\r\n            //console.log('dispatch(actions.initializedSuccess());')\r\n            dispatch(actions.initializedSuccess());\r\n        });\r\n}\r\n\r\nexport const addLocation = (location: string) => (dispatch: any) => {\r\n    dispatch(actions.setLocation(location));\r\n}\r\n\r\n\r\nexport default appReducer;","import { TaskListType } from '../Types/types'\r\nimport {instance} from './api'\r\n\r\ninstance.defaults.headers.common['X-Auth-Token'] = localStorage.getItem('remember_token')\r\n\r\nexport const taskListAPI = {\r\n    getTaskList() {\r\n        return instance.get<TaskListType>(`taskList`)\r\n        .then(response => {\r\n            //console.log(response)\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                //console.log(err.response)\r\n                return err.response\r\n            } else if (err.request) {\r\n                //console.log('request', err.request)\r\n            } else {\r\n                //console.log('anything else: ', err)\r\n            }\r\n            return null\r\n        })\r\n    },\r\n    createNewTaskList(values: any) {\r\n        return instance.post<TaskListType>(`taskList`, values)\r\n        .then(response => {\r\n            console.log(response)\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                console.log(err.response)\r\n                return err.response\r\n            } else if (err.request) {\r\n                console.log('request', err.request)\r\n            } else {\r\n                console.log('anything else: ', err)\r\n            }\r\n            return null\r\n        })\r\n    },\r\n    deleteTask(taskId: number) {\r\n        return instance.delete<TaskListType>(`taskList/${taskId}`).then(response => {\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                return err.response\r\n            } else if (err.request) {\r\n                //console.log('request', err.request)\r\n            } else {\r\n                //console.log('anything else: ', err)\r\n            }\r\n            return null\r\n        })\r\n    },\r\n    updateTask(values: any, taskId: number) {\r\n        return instance.put<TaskListType>(`taskList/${taskId}`, values)\r\n        .then(response => {\r\n            console.log(response)\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                console.log(err.response)\r\n                return err.response\r\n            } else if (err.request) {\r\n                //console.log('request', err.request)\r\n            } else {\r\n                //console.log('anything else: ', err)\r\n            }\r\n            return null\r\n        })\r\n    }\r\n}\r\n//descriptions\r\n//descriptions","import { Dispatch } from \"react\";\r\nimport { BaseThunkType, InferActionsTypes } from \"./store\";\r\nimport { taskListAPI } from './../api/taskListAPI'\r\nimport { TaskListType } from \"../Types/types\";\r\n\r\n\r\nexport type InitialStateType = {\r\n    taskList: Array<TaskListType>,\r\n    taskListIsFetching: boolean,\r\n    isTaskListLoaded: boolean,\r\n    selectedTasks: Array<number>\r\n    // taskSaveStatus: 'no' | 'inProgress' | 'success' | 'error'\r\n    // errorMessage: null | string,\r\n    // isInterval: boolean,\r\n    // dateInterval: {\r\n    //     startDate: moment.Moment,\r\n    //     endDate: moment.Moment\r\n    // }\r\n}\r\n\r\nlet initialState:InitialStateType = {\r\n    taskList: [],\r\n    taskListIsFetching: false,\r\n    isTaskListLoaded: false,\r\n    selectedTasks:[]\r\n    // taskSaveStatus: 'no',\r\n    // errorMessage: null,\r\n    // isInterval: false,\r\n    // dateInterval: {\r\n    //     startDate: moment(),\r\n    //     endDate: moment()\r\n    // }\r\n}\r\n\r\nconst taskListReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/TASK_LIST/BACK_SELECTED_TASK':\r\n            let newSelectedTasks: Array<number> = [...state.selectedTasks]\r\n            if (newSelectedTasks.length > 0) {\r\n                newSelectedTasks.pop()\r\n            }              \r\n            return { ...state, selectedTasks: newSelectedTasks }\r\n        case 'SN/TASK_LIST/SET_SELECTED_TASK':\r\n            console.log( { ...state, selectedTasks: [...state.selectedTasks, action.taskId] })\r\n            return { ...state, selectedTasks: [...state.selectedTasks, action.taskId] }\r\n        case 'SN/TASK_LIST/SET_TASK_LIST':\r\n            return { ...state, taskList: action.taskList, isTaskListLoaded: true}\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    setTaskList: (taskList: Array<any>) => ({ type: 'SN/TASK_LIST/SET_TASK_LIST', taskList } as const),\r\n    setSelectedTasks: (taskId: number) => ({ type: 'SN/TASK_LIST/SET_SELECTED_TASK', taskId } as const),\r\n    backSelectedTasks: () => ({type: 'SN/TASK_LIST/BACK_SELECTED_TASK'} as const),\r\n    // setTaskSaveStatus: (taskSaveStatus: 'no' | 'inProgress' | 'success' | 'error') => ({ type: 'SN/TASK/SET_TASK_SAVE_STATUS', taskSaveStatus } as const),\r\n    // setErrorMessage: (message: string | null) => ({type: 'SN/TASK/SET_ERROR_MESSAGE', message} as const),\r\n    // setTaskListIsFetching: (isFetchingValue: boolean) => ({type: 'SN/TASK/SET_TASK_LIST_IS_FETCHING', isFetchingValue} as const),\r\n    // setIsInterval: (isInterval: boolean, date: {startDate: moment.Moment, endDate: moment.Moment}) => ({type: 'SN/TASK/SET_IS_INTERVAL', isInterval, date} as const)\r\n}\r\n\r\nexport const getTaskList = (): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        // dispatch(actions.setTaskListIsFetching(true))\r\n\r\n        let response = await taskListAPI.getTaskList()\r\n        //console.log(response)\r\n\r\n        if (response !== undefined && response !== null) {\r\n            dispatch(actions.setTaskList(response.data.Tasks))\r\n        } else {\r\n            // add error message\r\n        }\r\n        // dispatch(actions.setTaskListIsFetching(false))\r\n    }\r\n}\r\n\r\nexport const createNewTaskList = (values: any): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        let response = await taskListAPI.createNewTaskList(values)\r\n        //console.log(response)\r\n        dispatch(actions.setTaskList(response.data.Tasks))\r\n    }\r\n}\r\n\r\nexport const deleteTaskList = (taskId: number): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        let response = await taskListAPI.deleteTask(taskId)\r\n        //console.log(response)\r\n        dispatch(actions.setTaskList(response.data.Tasks))\r\n    }\r\n}\r\n\r\nexport const updateTaskList = (values: any, taskId: number): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        let response = await taskListAPI.updateTask(values, taskId)\r\n        //console.log(response)\r\n        dispatch(actions.setTaskList(response.data.Tasks))\r\n    }\r\n}\r\n\r\nexport default taskListReducer\r\n\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsTypes>\r\nexport type DispatchType = Dispatch<ActionsTypes>","import {Action, applyMiddleware, combineReducers, createStore} from \"redux\"\r\nimport thunkMiddleware, {ThunkAction} from \"redux-thunk\"\r\nimport appReducer from \"./appReducer\"\r\nimport authReducer from \"./authReducer\"\r\nimport taskListReducer from \"./TaskListReducer\"\r\nimport taskReducer from './taskReducer'\r\n\r\n\r\nlet rootReducer = combineReducers({\r\n    task: taskReducer,\r\n    app: appReducer,\r\n    auth: authReducer,\r\n    taskList: taskListReducer,\r\n})\r\n\r\ntype rootReducerType = typeof rootReducer\r\nexport type AppStateType = ReturnType<rootReducerType>\r\n\r\nexport type InferActionsTypes<T> = T extends { [keys: string]: (...args: any[]) => infer U } ? U : never\r\nexport type BaseThunkType<A extends Action = Action, R = Promise<void>> = ThunkAction<R, AppStateType, unknown, A>\r\n\r\nlet store = createStore(rootReducer, applyMiddleware(thunkMiddleware))\r\n\r\n// console.log('global State:', store.getState())\r\n\r\nexport default store","import React, {useState} from 'react'\r\nimport { Button, Menu } from 'antd';\r\nimport {Link, useHistory} from 'react-router-dom'\r\n// import { MailOutlined, AppstoreOutlined, SettingOutlined } from '@ant-design/icons';\r\nimport {LogoutOutlined} from '@ant-design/icons'\r\nimport {MenuBrowserPropsType} from './MenuBrowserConainer'\r\nimport { TaskListType } from '../../Types/types';\r\nimport { MenuDataType } from './Header';\r\n\r\nconst { SubMenu } = Menu;\r\n\r\nexport type OwnMenuBrowserPropsType = {\r\n    menuData: any,\r\n    // logout: any,\r\n    // appLocation: string | null\r\n}\r\n\r\nconst MenuBrowser: React.FC<MenuBrowserPropsType> = (props) => {\r\n    let history = useHistory();\r\n    const [state, setState] = useState<Array<string>>([])\r\n    const handleClick = (e: any | undefined) => {\r\n        // //console.log('click ', e);\r\n        // setState({ current: e.key });\r\n    }\r\n\r\n    const getMenuItem = (childs: any):any => {\r\n        // return <Menu.Item key=\"setting:1\">Option 1</Menu.Item>\r\n        const menuItems = childs.map( (item: any) => {\r\n            return (\r\n                <Menu.Item key={item.value}>\r\n                    <Link to={item.value}>{item.label}</Link>\r\n                </Menu.Item>\r\n            )\r\n        })\r\n        return menuItems\r\n    }\r\n\r\n    const getSubMenu = () => {\r\n        // //console.log(props.menuData)\r\n        const subMenu = props.menuData.map( (item: any) => {\r\n            // //console.log(item)\r\n            return (\r\n                <SubMenu \r\n                    key={item.value} \r\n                    // icon={<MailOutlined />}\r\n                    title={item.label}\r\n                >\r\n                    {getMenuItem(item.children)}\r\n                </SubMenu >\r\n            )\r\n        })\r\n        // subMenu.push(\r\n        //     <Menu.Item key=\"login\">\r\n        //         <Link to={props.appLocation +\"login\"} >Login</Link>\r\n        //     </Menu.Item>\r\n        // )\r\n        return subMenu\r\n    }\r\n\r\n    const onLogout = () => {\r\n        // onChange(['', ''])\r\n        history.replace(props.appLocation+'login')\r\n        props.logout()\r\n    }\r\n\r\n    //console.log(props)\r\n\r\n    return (\r\n        <Menu \r\n            onClick={handleClick} \r\n            // selectedKeys={[current]} \r\n            mode=\"horizontal\"\r\n            theme=\"dark\"\r\n        >\r\n            {getSubMenu()}\r\n\r\n            {!props.isAuth ? \r\n                <Menu.Item key=\"login\">\r\n                    <Link to={props.appLocation +\"login\"} >Login</Link>\r\n                </Menu.Item>\r\n            :\r\n                <SubMenu \r\n                    key={props.user?.name} \r\n                    title={props.user?.name}\r\n                >\r\n                    <Menu.Item key=\"login\" onClick={onLogout}>\r\n                        {/* <Link to={props.appLocation +\"login\"} > */}\r\n                            Logout\r\n                        {/* </Link> */}\r\n                    </Menu.Item>\r\n                </SubMenu >\r\n                \r\n            }\r\n        </Menu>\r\n    )\r\n}\r\n\r\nexport default MenuBrowser","import {connect} from 'react-redux'\r\nimport MenuBrowser, { OwnMenuBrowserPropsType } from './MenuBrowser'\r\nimport { AppStateType } from '../../redux/store'\r\nimport {actions} from './../../redux/authReducer'\r\n\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    logout: ()=>void\r\n}\r\n\r\nexport type MenuBrowserPropsType = MapPropsType & MapDispatchPropsType & OwnMenuBrowserPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n        user: state.auth.user,\r\n        appLocation: state.app.location\r\n        \r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnMenuBrowserPropsType, AppStateType>(mapStateToProps, \r\n    {logout: actions.logout}) \r\n    (MenuBrowser)\r\n    \r\n\r\n","import { Popover, Icon } from 'antd-mobile'\r\nimport React, { useState } from 'react'\r\n\r\nconst Item = Popover.Item\r\n\r\nconst MenuPopover: React.FC<any> = (props) => {\r\n    const [visible, setVisible] = useState(false)\r\n\r\n    const onSelect = (opt: any, index?: number) => {\r\n        // console.log(opt.props);\r\n        setVisible(false)\r\n        if(opt.props.children === \"Logout\") {\r\n            props.onLogout()\r\n        }\r\n    }\r\n\r\n    const handleVisibleChange = (visible: boolean) => {\r\n        setVisible(visible)\r\n    }\r\n\r\n    const fortest:String = \"fortest\"\r\n\r\n    return (\r\n        <div className=\"mr-3\">\r\n        <Popover \r\n            mask\r\n            visible={visible}\r\n            overlay={[\r\n                (<Item key=\"1\" >Logout</Item>),\r\n                (<Item key=\"2\" >Info</Item>),\r\n                (<Item key=\"3\" >Help</Item>),\r\n            ]}\r\n            onVisibleChange={handleVisibleChange}\r\n            onSelect={onSelect}\r\n        >\r\n            <div style={{\r\n                height: '100%',\r\n                padding: '0 15px',\r\n                marginRight: '-20px',\r\n                display: 'flex',\r\n                alignItems: 'center',\r\n            }}\r\n            >\r\n                <Icon type=\"ellipsis\" />\r\n            </div>\r\n        </Popover>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MenuPopover","import React, { useState } from 'react'\r\nimport { Menu, ActivityIndicator, NavBar, Button } from 'antd-mobile'\r\nimport { ValueType } from 'antd-mobile/lib/menu/PropsType'\r\nimport './MenuMobile.css'\r\nimport { useHistory, useLocation } from 'react-router-dom'\r\nimport { MenuDataType } from './Header'\r\nimport { MenuMobilePropsType } from './MenuMobileContainer'\r\nimport { Link } from 'react-router-dom'\r\nimport { LogoutOutlined } from '@ant-design/icons'\r\nimport MenuPopover from './MenuPopover'\r\n\r\nexport type OwnMenuMobilePropsType = {\r\n    menuData: MenuDataType,\r\n    logout: () => void\r\n}\r\n\r\nconst MenuMobile: React.FC<MenuMobilePropsType> = (props) => {\r\n    let history = useHistory();\r\n    const location = useLocation();\r\n    const [show, setShow] = useState(false)\r\n    type DataType = typeof props.menuData\r\n    const data = [...props.menuData]\r\n    const [initData, setInitData] = useState<DataType>(data)\r\n\r\n    const getSelectedMenuItem = (): ValueType => {\r\n        let response: ValueType = [data[0].value, '']\r\n        data.forEach((dataItem: any) => {\r\n            if (dataItem.children) {\r\n                dataItem.children.forEach((item: any) => {\r\n                    //console.log('/',item.value,'===',location.pathname)\r\n                    if (item.value === location.pathname) {\r\n                        response = [dataItem.value, item.value]\r\n                    }\r\n                })\r\n            }\r\n        })\r\n        //console.log('getSelectedMenuItem response: ', response)\r\n        return response\r\n    }\r\n\r\n    const [selectedMenuItem, setSelectedMenuItem] = useState<ValueType>(getSelectedMenuItem())\r\n\r\n    const handleClick = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\r\n        e.preventDefault(); // Fix event propagation on Android\r\n        setShow(!show)\r\n        // if (!initData) {\r\n        //     setInitData(data)\r\n        // }\r\n    }\r\n\r\n    const onChange = (value?: ValueType | undefined) => {\r\n        //console.log('input values: ', value)\r\n        if (value) {\r\n            let subMenu = value[0]\r\n\r\n            data.forEach((dataItem) => {\r\n                if (dataItem.value === value[0]) {\r\n                    subMenu = value[0]\r\n                    if (dataItem.children && value[1]) {\r\n                        dataItem.children.forEach((cItem: { value: string | string[]; label: any }) => {\r\n                            if (cItem.value === value[1]) {\r\n                                history.replace(`${cItem.value}`)\r\n                                setShow(false)\r\n                            }\r\n                        })\r\n                    }\r\n                }\r\n            })\r\n        \r\n            if (subMenu === '') {\r\n                subMenu = data[0].value\r\n            }\r\n            //console.log('set values: ', [subMenu, value[1]])\r\n            setSelectedMenuItem([subMenu, value[1]])\r\n        }\r\n        \r\n    }\r\n\r\n    const onMaskClick = () => {\r\n        setShow(false)\r\n    }\r\n\r\n    const menuEl = (\r\n        <Menu\r\n            className=\"foo-menu\"\r\n            data={initData}\r\n            value={selectedMenuItem}\r\n            onChange={onChange}\r\n            height={document.documentElement.clientHeight * 0.6}\r\n        />\r\n    );\r\n\r\n    const loadingEl = (\r\n        <div style={{ width: '100%', height: document.documentElement.clientHeight * 0.6, display: 'flex', justifyContent: 'center' }}>\r\n            <ActivityIndicator size=\"large\" />\r\n        </div>\r\n    );\r\n\r\n    //console.log(props)\r\n\r\n    const onLogout = () => {\r\n        onChange(['', ''])\r\n        history.replace(props.appLocation + 'login')\r\n        props.logout()\r\n    }\r\n\r\n    return (\r\n        <div className={show ? 'menu-active' : ''}>\r\n            <div>\r\n                <NavBar\r\n                    leftContent=\"\"\r\n                    mode=\"light\"\r\n                    icon={<img src=\"https://gw.alipayobjects.com/zos/rmsportal/iXVHARNNlmdCGnwWxQPH.svg\" className=\"am-icon am-icon-md\" alt=\"\" />}\r\n                    onLeftClick={handleClick}\r\n                    className=\"top-nav-bar\"\r\n                    rightContent={props.isAuth ? <MenuPopover onLogout={onLogout} /> : null}\r\n                >\r\n                    {!props.isAuth ?\r\n                        <Link\r\n                            to={props.appLocation + \"login\"}\r\n                            onClick={() => { onChange(['', '']) }}\r\n                        >\r\n                            <span className=\"text-white\">Login</span>\r\n                        </Link>\r\n                        :\r\n                        <>\r\n                        <div>\r\n                            {props.user?.name}\r\n                            {/* <Button className=\"ml-5\" size=\"small\" icon={<LogoutOutlined />} onClick={onLogout} inline >\r\n\r\n                            </Button> */}\r\n                        </div>\r\n                        {/* <div className=\"w-100\">\r\n                            \r\n                        </div> */}\r\n                        </>\r\n                    }\r\n                    \r\n\r\n                </NavBar>\r\n            </div>\r\n            {show ? initData ? menuEl : loadingEl : null}\r\n            {show ? <div className=\"menu-mask\" onClick={onMaskClick} /> : null}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default (MenuMobile)\r\n\r\n\r\n","import {connect} from 'react-redux'\r\nimport MenuMobile, { OwnMenuMobilePropsType } from './MenuMobile'\r\n// import {getTaskList} from '../../redux/taskReducer'\r\nimport { AppStateType } from '../../redux/store'\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    // getTaskList: (start_date: string, end_date:string)=>void\r\n}\r\n\r\nexport type MenuMobilePropsType = MapPropsType & MapDispatchPropsType & OwnMenuMobilePropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        appLocation: state.app.location,\r\n        isAuth: state.auth.isAuth,\r\n        user: state.auth.user\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnMenuMobilePropsType, AppStateType>(mapStateToProps, \r\n    {}) \r\n    (MenuMobile)\r\n    \r\n\r\n","import React from 'react'\r\nimport {\r\n    BrowserView,\r\n    MobileView,\r\n    isBrowser,\r\n    isMobile\r\n} from \"react-device-detect\"\r\nimport { HeaderPropsType } from './HeaderContainer'\r\nimport MenuBrowser from './MenuBrowserConainer'\r\nimport MenuMobile from './MenuMobileContainer'\r\n// import {useHistory, useLocation} from 'react-router-dom'\r\n\r\n// type MenuDataType = Array<any>\r\n\r\nexport type OwnHeaderPropsType = {}\r\n\r\nconst Header: React.FC<HeaderPropsType> = (props) => {\r\n    // const location = useLocation()\r\n    //console.log('Header')\r\n\r\n    if (isMobile) {\r\n        return <MenuMobile menuData={menuData(props.appLocation)} logout={props.logout}/>\r\n    } else {\r\n        return <MenuBrowser menuData={menuData(props.appLocation)}/>\r\n    }\r\n}\r\n\r\nexport default Header\r\n\r\n\r\nexport type MenuDataType = ReturnType<typeof menuData>\r\n\r\nconst menuData = (appLocation: string) => {\r\n    const data = [\r\n    {\r\n        value: 'planning',\r\n        label: 'Planning',\r\n        children: [\r\n            {\r\n                label: 'ToDo list',\r\n                // label: <Link to='/toDoList'>ToDo list</Link>,\r\n                value: appLocation + 'toDoList',\r\n                disabled: false,\r\n            },\r\n            {\r\n                label: 'Tasks tree',\r\n                value: appLocation + 'tasksTree',\r\n            },\r\n            {\r\n                label: 'Analysis',\r\n                value: appLocation + 'analysis',\r\n                disabled: true,\r\n            }\r\n        ],\r\n    }, {\r\n        value: 'catalog',\r\n        label: 'Catalog',\r\n        children: [\r\n            {\r\n                label: 'Products',\r\n                value: appLocation + 'products',\r\n            }\r\n            , {\r\n                label: 'Providers',\r\n                value: appLocation + 'providers',\r\n            }\r\n        ],\r\n    },\r\n    {\r\n        value: 'orders',\r\n        label: 'Orders',\r\n        // isLeaf: true,\r\n        children: [\r\n            {\r\n                label: 'Orders',\r\n                value: appLocation + 'orders',\r\n            },\r\n            {\r\n                label: 'Leads',\r\n                value: appLocation + 'leads',\r\n            },\r\n        ],\r\n    },\r\n    ]\r\n    return data\r\n}\r\n","import {connect} from 'react-redux'\r\nimport Header, { OwnHeaderPropsType } from './Header'\r\nimport {actions} from '../../redux/authReducer'\r\nimport { AppStateType } from '../../redux/store'\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    logout: ()=>void\r\n}\r\n\r\nexport type HeaderPropsType = MapPropsType & MapDispatchPropsType & OwnHeaderPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        appLocation: state.app.location,\r\n        user: state.auth.user\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnHeaderPropsType, AppStateType>(mapStateToProps, \r\n    {logout: actions.logout}) \r\n    (Header)\r\n    \r\n\r\n","import React, { useState, useEffect } from 'react'\r\nimport { isMobile } from \"react-device-detect\"\r\nimport {\r\n    DatePicker,\r\n    Form,\r\n    Input,\r\n    TimePicker,\r\n    Select,\r\n    Checkbox\r\n} from \"antd\"\r\nimport enUs from 'antd-mobile/lib/date-picker/locale/en_US'\r\nimport {\r\n    List,\r\n    InputItem,\r\n    Checkbox as CheckboxMobile,\r\n    TextareaItem,\r\n    Picker,\r\n    DatePicker as DatePickerMobile,\r\n} from 'antd-mobile'\r\n\r\nconst FormItem = Form.Item\r\nconst Option: React.FC<any> = Select.Option\r\nconst CheckboxItem = CheckboxMobile.CheckboxItem\r\nconst { TextArea } = Input;\r\n\r\nconst CreateAntField = (AntComponent: any) => (\r\n    {\r\n        field,\r\n        form,\r\n        hasFeedback,\r\n        label,\r\n        selectOptions,\r\n        submitCount,\r\n        type,\r\n        ...props\r\n    }: any\r\n) => {\r\n\r\n    const touched = form.touched[field.name];\r\n    const submitted = submitCount > 0;\r\n    const hasError = form.errors[field.name];\r\n    const submittedError = hasError && submitted;\r\n    const touchedError = hasError && touched;\r\n\r\n    // type OnInputChangeValueType = React.ChangeEvent<HTMLInputElement> | moment.Moment | Date | string\r\n    // const onInputChange = (value: OnInputChangeValueType, field: any) => {\r\n    const onInputChange = (value: any) => {\r\n        // console.log('value: ', value)\r\n        // console.log('field: ', field)\r\n        // console.log('type: ', type)\r\n        if (value === undefined) {\r\n            if (type == 'select' || type == 'time') {\r\n                form.setFieldValue(field.name, null)\r\n            }\r\n        } else if(value === null) {\r\n            form.setFieldValue(field.name, null)\r\n        } else if (value.target) {\r\n            form.setFieldValue(field.name, value.target.value)\r\n        } else {\r\n            if (type === 'time') {\r\n                // if (value instanceof moment) {\r\n                //     console.log('moment')\r\n                //     form.setFieldValue(field.name, value)\r\n                // } else {\r\n                //     console.log('not moment')\r\n                //     // form.setFieldValue(field.name, moment(value.setSeconds(0)))\r\n                //     form.setFieldValue(field.name, value)\r\n                // }\r\n                form.setFieldValue(field.name, value)\r\n            } else if (Array.isArray(value)) {\r\n                // добавтить проверуку на пустой массив\r\n                form.setFieldValue(field.name, value[0])\r\n            } else {\r\n                form.setFieldValue(field.name, value)\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    const onChange = (value: string | React.ChangeEvent<HTMLInputElement>) => {\r\n        // console.log('onChange: ', value)\r\n        if (typeof value !== \"string\" && value.target.type === 'checkbox') {\r\n            form.setFieldValue(field.name, value.target.checked)\r\n        } else {\r\n            form.setFieldValue(field.name, value)\r\n        }\r\n    }\r\n\r\n    const onBlur = () => form.setFieldTouched(field.name, true);\r\n\r\n    return (\r\n        <FormItem\r\n            label={!isMobile ? label : null}\r\n            hasFeedback={\r\n                (hasFeedback && submitted) || (hasFeedback && touched) ? true : false\r\n            }\r\n            help={submittedError || touchedError ? hasError : false}\r\n            validateStatus={submittedError || touchedError ? \"error\" : \"success\"}\r\n        >\r\n            {isMobile ?\r\n                <MobileComponent\r\n                    AntComponent={AntComponent}\r\n                    onBlur={onBlur}\r\n                    type={type}\r\n                    onInputChange={onInputChange}\r\n                    onChange={onChange}\r\n                    label={label}\r\n                    selectOptions={selectOptions}\r\n                    value={field.value}\r\n                />\r\n                :\r\n                <AntComponent\r\n                    {...field}\r\n                    {...props}\r\n                    allowClear={selectOptions ? \"true\" : \"false\"}\r\n                    onBlur={onBlur}\r\n                    onChange={type ? onInputChange : onChange}\r\n                >\r\n                    {selectOptions &&\r\n                        selectOptions.map((item: any) => <Option title={item.name} value={item.value} key={item.name}>{item.name}</Option>)}\r\n\r\n\r\n                </AntComponent>\r\n            }\r\n\r\n        </FormItem>\r\n    )\r\n}\r\n\r\nexport const AntSelect = !isMobile ? CreateAntField(Select) : CreateAntField(Picker)\r\nexport const AntDatePicker = CreateAntField(DatePicker)\r\nexport const AntInput = !isMobile ? CreateAntField(Input) : CreateAntField(InputItem)\r\nexport const AntInputPassword = !isMobile ? CreateAntField(Input.Password) : CreateAntField(InputItem)\r\nexport const AntTimePicker = !isMobile ? CreateAntField(TimePicker) : CreateAntField(DatePickerMobile)\r\nexport const AntCheckbox = !isMobile ? CreateAntField(Checkbox) : CreateAntField(CheckboxItem)\r\nexport const AntTextArea = !isMobile ? CreateAntField(TextArea) : CreateAntField(TextareaItem)\r\n\r\ntype MobileComponentType = {\r\n    onInputChange: (value: any) => void,\r\n    selectOptions: Array<any>,\r\n    AntComponent: any,\r\n    onBlur: () => void,\r\n    type: 'select' | 'date' | 'text' | 'number' | 'password' | 'time' | 'checkbox' | 'textarea',\r\n    onChange: (value: any) => void,\r\n    label: string,\r\n    value: any\r\n}\r\n\r\n// const MobileComponent: React.FC<any> = (props) => {\r\nconst MobileComponent: React.FC<MobileComponentType> = (props) => {\r\n    const [defaultValue, setValue] = useState(props.type === 'select' ? [props.value] : props.value)\r\n\r\n    useEffect(() => {\r\n        if (props.type === 'select' && props.label === 'task_type') {\r\n            console.log('useEffect parent_id: ',props.value)\r\n        }\r\n\r\n        setValue(props.value)\r\n\r\n    }, [props.value])\r\n\r\n    const onInputChange = (value: any) => {\r\n        setValue(value)\r\n        props.onInputChange(value)\r\n    }\r\n\r\n    const onPickerChange = (value:any) => {\r\n        console.log('onPickerChange: ',defaultValue)\r\n        setValue(value)\r\n    }\r\n\r\n    // const onOk = (value:any) => {\r\n    //     console.log('onOk; ', value)\r\n    //     setValue(value)\r\n    // }\r\n\r\n    type DataType = Array<\r\n        {\r\n            label: string,\r\n            value: string,\r\n            key: string\r\n        }\r\n    >\r\n\r\n    let data: DataType\r\n    if (props.selectOptions !== null && props.selectOptions !== undefined) {\r\n        data = props.selectOptions.map((item: any) => {\r\n            return (\r\n                {\r\n                    label: item.name,\r\n                    value: item.value,\r\n                    key: item.name\r\n                }\r\n            )\r\n        })\r\n    } else {\r\n        data = []\r\n    }\r\n\r\n    if (props.type === 'select' && props.label === 'task Types') {\r\n        console.log('render: ',props.value)\r\n    }\r\n    \r\n    return (\r\n        <List>\r\n            <props.AntComponent\r\n                onBlur={props.onBlur}\r\n                type={props.type}\r\n                onChange={props.type ? onInputChange : props.onChange}\r\n                mode={props.type === 'time' ? \"time\" : null}\r\n                defaultValue={props.label === 'parent_id' ? [38] : defaultValue}\r\n                value={defaultValue}\r\n                key={props.label}\r\n                title={props.label}\r\n                locale={enUs}\r\n                autoHeight\r\n                className={props.type === 'text' ? 'pl-0' : null}\r\n                data={data}\r\n                cols={1}\r\n                onOk={(v:any) => setValue(v)}\r\n                onPickerChange={onPickerChange}\r\n            >\r\n                <List.Item\r\n                    className=\"pl-0\"\r\n                >\r\n                    {props.label}\r\n                </List.Item>\r\n            </props.AntComponent>\r\n        </List>\r\n    )\r\n}","// import { userAPI } from \"../../api/userAPI\";\r\n\r\nexport const validateRequired = (value: string) => {\r\n    let errors;\r\n    if (!value) {\r\n        errors = \"Required!\";\r\n    }\r\n    return errors;\r\n}\r\n\r\nexport const validateEmail = (value: string) => {\r\n    let errors;\r\n\r\n    if (!value) {\r\n        errors = \"Required!\";\r\n    } else if (!/^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/.test(value)) {\r\n        errors = \"Invalid email address!\";\r\n    }\r\n\r\n    return errors;\r\n};\r\n\r\nexport const validateAsync = (value: string) => {\r\n    const sleep = () => new Promise(resolve => setTimeout(resolve, 2000));\r\n    return sleep().then(() => {\r\n        if (['admin', 'null', 'god'].includes(value)) {\r\n            return 'Nice try'\r\n        }\r\n    })\r\n}\r\n\r\n// export const validateUserExistense = (value: string) => {\r\n//     //console.log(value)\r\n//     return userAPI.checkUserForExistence(value).then( (result) => {\r\n//         //console.log(result.status)\r\n//         if (result.status !== 404) {\r\n//             return 'Name is bisy'\r\n//         } \r\n//     })\r\n//     //console.log(test)\r\n\r\n// }","import React, { ReactNode } from 'react'\r\nimport { Form, Field, FormikProps } from \"formik\"\r\nimport { AntInput, AntCheckbox, AntInputPassword } from '../../utils/Formik/CreateAntField'\r\nimport { validateEmail, validateRequired } from '../../utils/Formik/ValidateFields'\r\n\r\nconst LoginForm: ((props: FormikProps<{}>) => ReactNode) = (props) => {\r\n    return (\r\n        <Form \r\n            className=\"form-container\" \r\n            onSubmit={props.handleSubmit}\r\n        >\r\n            <Field\r\n                component={AntInput}\r\n                name=\"email\"\r\n                type=\"email\"\r\n                label=\"Email\"\r\n                validate={validateEmail}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n            <Field\r\n                component={AntInputPassword}\r\n                name=\"password\"\r\n                type=\"password\"\r\n                label=\"Password\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n            <Field\r\n                component={AntCheckbox}\r\n                name=\"remember\"\r\n                label=\"Remember Me\"\r\n                submitCount={props.submitCount}\r\n            />\r\n            <div className=\"submit-container\">\r\n                <button className=\"ant-btn ant-btn-primary\" type=\"submit\">\r\n                    Login\r\n                </button>\r\n            </div>\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default LoginForm","import React from 'react'\r\nimport { LoginPropsType } from './LoginContainer'\r\nimport { List, InputItem, Checkbox } from 'antd-mobile'\r\nimport { Formik } from \"formik\"\r\nimport moment from \"moment\"\r\nimport LoginForm from './LoginForm'\r\nimport { propTypes } from 'react-bootstrap/esm/Image'\r\nimport { Button } from 'antd'\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst CheckboxItem = Checkbox.CheckboxItem;\r\n\r\nconst initialValues = {\r\n    // bookingClient: \"\",\r\n    // bookingDate: moment(Date.now()),\r\n    // bookingTime: moment(Date.now()),\r\n    // selectOptions: [\"Mark\", \"Bob\", \"Anthony\"]\r\n}\r\n\r\n// export const dateFormat = \"YYYY--MM-DD\";\r\n// export const timeFormat = \"h:mm A\";\r\n\r\nexport type OwnLoginPropsType = {}\r\n\r\nconst Login: React.FC<LoginPropsType> = (props) => {\r\n    const handleSubmit = (formProps: any) => {\r\n        //console.log('formProps: ', formProps)\r\n        if (!formProps.remember) {\r\n            formProps.remember = false\r\n        }\r\n        props.login(formProps)\r\n    }\r\n\r\n    //console.log(props)\r\n\r\n    return (\r\n        <>\r\n            <h1 className=\"mb-5 mx-auto\">Login Form</h1>\r\n            <Formik\r\n                initialValues={initialValues}\r\n                onSubmit={handleSubmit}\r\n                render={LoginForm}\r\n            />\r\n            <div className=\"mt-3\">\r\n                <Link to={props.location +\"register\"}><Button type=\"link\" block>Register</Button></Link>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Login","import {connect} from 'react-redux'\r\nimport Login, { OwnLoginPropsType } from './Login'\r\nimport { AppStateType } from '../../redux/store'\r\nimport {credsType, login} from './../../redux/authReducer'\r\n\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    login: (data: credsType)=>void\r\n}\r\n\r\nexport type LoginPropsType = MapPropsType & MapDispatchPropsType & OwnLoginPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        auth: state.auth,\r\n        location: state.app.location\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnLoginPropsType, AppStateType>(mapStateToProps, \r\n    {login}) \r\n    (Login)\r\n    \r\n\r\n","import { formatCountdown } from 'antd/lib/statistic/utils'\r\nimport React from 'react'\r\nimport { OrdersPropsType } from './OrdersContainer'\r\n\r\nexport type OwnOrdersPropsType = {}\r\nconst Orders: React.FC<OrdersPropsType> = (props) => {\r\n    return(\r\n        <div>Orders</div>\r\n    )\r\n}\r\n\r\nexport default Orders","import {connect} from 'react-redux'\r\nimport Orders, { OwnOrdersPropsType } from './Orders'\r\n// import {getTaskList} from '../../redux/taskReducer'\r\nimport { AppStateType } from '../../redux/store'\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    // getTaskList: (start_date: string, end_date:string)=>void\r\n}\r\n\r\nexport type OrdersPropsType = MapPropsType & MapDispatchPropsType & OwnOrdersPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        appLocation: state.app.location\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnOrdersPropsType, AppStateType>(mapStateToProps, \r\n    {}) \r\n    (Orders)\r\n    \r\n\r\n","import { Form, Field, FormikProps } from 'formik'\r\nimport React, { ReactNode, useState, useEffect } from 'react'\r\nimport { AntInput, AntSelect, AntTextArea, AntTimePicker } from '../../utils/Formik/CreateAntField'\r\nimport { validateRequired } from '../../utils/Formik/ValidateFields'\r\nimport { Select } from 'antd';\r\n\r\nconst { Option }: any = Select;\r\n\r\n\r\nconst NewTaskTreeForm: ((props: FormikProps<{}>) => ReactNode) = (props) => {\r\n    const values: any = props.values\r\n    //console.log(values)\r\n    const selectOptions = values.selectOptions\r\n    const taskTypes = values.taskTypes // ++++++\r\n\r\n    const [taskType, setTaskType] = useState(values.taskType)\r\n\r\n    useEffect(() => {\r\n        const values: any = props.values\r\n        const taskTypes = values.task_type\r\n        setTaskType(taskTypes)\r\n\r\n        // console.log('useEffect NewTaskTreeForm', props.initialValues)\r\n    }, [props.values])\r\n\r\n    //console.log('NewTaskTreeForm props: ', props)\r\n\r\n    // const handleSubmit = (formProps: any) => {\r\n    //     //console.log('formProps in NewTaskTreeForm: ',formProps)\r\n    //     props.handleSubmit(formProps)\r\n    // }\r\n\r\n    // console.log('NewTaskTreeForm', props)\r\n    // console.log('NewTaskTreeForm render', values)\r\n\r\n    return (\r\n        <Form\r\n            className=\"form-container\"\r\n            onSubmit={props.handleSubmit}\r\n        >\r\n            <Field\r\n                component={AntInput}\r\n                name=\"name\"\r\n                type=\"text\"\r\n                label=\"Name\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n\r\n            <Field\r\n                component={AntSelect}\r\n\r\n                selectOptions={selectOptions}\r\n\r\n                name=\"parent_id\"\r\n                type=\"select\"\r\n                label=\"Parent\"\r\n                // validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n            // hasFeedback\r\n            />\r\n\r\n            <Field\r\n                component={AntTextArea}\r\n                name=\"descriptions\"\r\n                type=\"text\"\r\n                label=\"Descriptions\"\r\n                // validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                // hasFeedback\r\n            />\r\n\r\n            <Field\r\n                component={AntTimePicker}\r\n                name=\"time_to_complete\"\r\n                type=\"time\"\r\n                label=\"Time to complete\"\r\n                // validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n            // hasFeedback\r\n            />\r\n\r\n            <Field\r\n                component={AntSelect}\r\n\r\n                selectOptions={taskTypes}\r\n\r\n                name=\"task_type\"\r\n                type=\"select\"\r\n                label=\"task Types\"\r\n                // validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                // hasFeedback\r\n            />\r\n\r\n\r\n            {taskType === 2 ?\r\n                <>\r\n                    <Field\r\n                        component={AntInput}\r\n                        name=\"context1\"\r\n                        type=\"text\"\r\n                        label=\"context1\"\r\n                        validate={validateRequired}\r\n                        submitCount={props.submitCount}\r\n                        hasFeedback\r\n                    />\r\n                    <Field\r\n                        component={AntInput}\r\n                        name=\"context2\"\r\n                        type=\"text\"\r\n                        label=\"context2\"\r\n                        validate={validateRequired}\r\n                        submitCount={props.submitCount}\r\n                        hasFeedback\r\n                    />\r\n                </>\r\n                :\r\n                null\r\n            }\r\n\r\n            <div className=\"submit-container\">\r\n                <button className=\"ant-btn ant-btn-primary\" type=\"submit\">\r\n                    Save\r\n                </button>\r\n            </div>\r\n\r\n        </Form>\r\n    )\r\n    // )\r\n}\r\nexport default NewTaskTreeForm","import { Button, Card, Drawer, List, Checkbox, Collapse } from 'antd'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { TasksTreePropsType } from './TasksTreeContainer'\r\nimport { FileAddOutlined, SettingOutlined } from '@ant-design/icons'\r\nimport NewTaskTreeForm from './NewTaskTreeForm'\r\nimport { Formik, FormikProps } from 'formik'\r\nimport moment from \"moment\"\r\nimport { DeleteOutlined, EditOutlined } from '@ant-design/icons'\r\n\r\nconst { Panel } = Collapse;\r\n\r\ntype InitialDrewerDataType = {\r\n    header: string,\r\n    taskId: false | number\r\n}\r\n\r\nconst initialDrewerData: InitialDrewerDataType = {\r\n    header: 'Create New Task',\r\n    taskId: false\r\n}\r\n\r\nconst TasksTreeBrowser: React.FC<TasksTreePropsType> = (props) => {\r\n    useEffect(() => {\r\n        if (props.taskList !== undefined && props.taskList.length === 0 && !props.isTaskListLoaded) {\r\n            props.getTaskList()\r\n        }\r\n        else if (props.taskList === undefined) {\r\n            props.getTaskList()\r\n        }\r\n        setVisible(false)\r\n        setInitialFormValues(initialValues)\r\n    }, [props.taskList])\r\n\r\n    const [visible, setVisible] = useState(false)\r\n    const [drawerData, setDrawerData] = useState(initialDrewerData)\r\n\r\n    const getSelectOptions = () => {\r\n        if (props.taskList !== undefined && props.taskList.length > 0) {\r\n            return props.taskList.map((item) => {\r\n                return ({\r\n                    name: item.name,\r\n                    value: item.id\r\n                })\r\n            })\r\n        } else {\r\n            return null\r\n        }\r\n    }\r\n\r\n    const initialValues: any = {\r\n        selectOptions: getSelectOptions(),\r\n        taskTypes: [\r\n            {\r\n                name: 'Простая задача',\r\n                value: 1\r\n            },\r\n            {\r\n                name: 'Задача с контектом',\r\n                value: 2\r\n            }\r\n        ],\r\n        task_type: 1,\r\n        name: '',\r\n        // new: true\r\n\r\n    }\r\n\r\n    const [initialFormValues, setInitialFormValues] = useState(initialValues)\r\n\r\n    const onClose = () => {\r\n        setVisible(false)\r\n    }\r\n\r\n    const showDrawer = () => {\r\n        setVisible(true)\r\n    }\r\n\r\n    const onAdd = () => {\r\n        setDrawerData(initialDrewerData)\r\n        setInitialFormValues(initialValues)\r\n        // console.log(initialValues)\r\n        showDrawer()\r\n    }\r\n\r\n    const handleSubmit = (formProps: any) => {\r\n        let formPropsCopy: any = { ...formProps }\r\n        delete formPropsCopy.selectOptions\r\n        delete formPropsCopy.taskTypes\r\n        if (formPropsCopy.time_to_complete !== undefined) {\r\n            formPropsCopy.time_to_complete = formPropsCopy.time_to_complete.format('HH:mm:ss')\r\n        }\r\n\r\n        formPropsCopy.user_id = props.userId\r\n        if (!drawerData.taskId) {\r\n            props.createNewTaskList(formPropsCopy)\r\n        } else {\r\n            // console.log(formPropsCopy)\r\n            props.updateTaskList(formPropsCopy, drawerData.taskId)\r\n        }\r\n\r\n    }\r\n\r\n    // console.log('initialFormValues: ', initialFormValues)\r\n\r\n    return (\r\n        <>\r\n            <div className=\"site-card-border-less-wrapper\">\r\n                <Card\r\n                    title={\r\n                        <div\r\n                            // className=\"col-12 col-md-12 col-lg-4\"\r\n                            className=\"inline\"\r\n                        >\r\n                            <div ><h2>Tasks Tree</h2></div>\r\n\r\n\r\n                        </div>\r\n                    }\r\n                    extra={\r\n                        <>\r\n                            <Button\r\n                                type=\"primary\"\r\n                                shape=\"round\"\r\n                                icon={\r\n                                    <div className=\"d-flex flex-wrap align-content-start\">\r\n                                        <FileAddOutlined style={{ fontSize: '18px' }} />\r\n                                        <span className=\"ml-1\" style={{ fontSize: '14px' }}>Add</span>\r\n                                    </div>}\r\n                                style={{ marginLeft: 10 }}\r\n                                onClick={onAdd}\r\n                            />\r\n\r\n                            <Button className=\"\"\r\n                                type=\"primary\"\r\n                                shape=\"round\"\r\n                                style={{ marginLeft: 10 }}\r\n                                // onClick={props.showModal}\r\n                                icon={\r\n                                    <div className=\"d-flex flex-wrap align-content-start\">\r\n                                        <SettingOutlined style={{ fontSize: '18px' }} />\r\n                                        <span className=\"ml-1\" style={{ fontSize: '14px' }}>Settings</span>\r\n                                    </div>}\r\n                            />\r\n                        </>\r\n                    }\r\n                    bordered={false}\r\n                >\r\n\r\n                    {/* { getTaskTreeItems(props.taskList) } */}\r\n                    <List\r\n                        size=\"small\"\r\n                        // header={<h2>Tasks Tree</h2>}\r\n                        // footer={<div>Footer</div>}\r\n                        bordered\r\n                        dataSource={getTaskTreeItems(\r\n                            props.taskList,\r\n                            props.deleteTaskList,\r\n                            props.updateTaskList,\r\n                            showDrawer,\r\n                            setDrawerData,\r\n                            initialFormValues,\r\n                            setInitialFormValues\r\n                        )}\r\n\r\n                        renderItem={item => <List.Item draggable>{item}</List.Item>}\r\n                    />\r\n\r\n                    <Drawer\r\n                        title={drawerData.header}\r\n                        placement=\"right\"\r\n                        closable={true}\r\n                        onClose={onClose}\r\n                        visible={visible}\r\n                        width=\"90%\"\r\n                    >\r\n\r\n                        <Formik\r\n                            initialValues={initialFormValues}\r\n                            onSubmit={handleSubmit}\r\n                            render={NewTaskTreeForm}\r\n                            enableReinitialize={true}\r\n                        />\r\n\r\n                    </Drawer>\r\n\r\n                </Card>\r\n            </div>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default TasksTreeBrowser\r\n\r\nconst getTaskTreeItems = (\r\n    taskList: Array<any>,\r\n    deleteTask: (taskId: number) => void,\r\n    updateTaskList: (values: any, taskId: number)=> void,\r\n    showDrawer: () => void,\r\n    setDrawerData: (drawerData: any) => void,\r\n    initialFormValues: any,\r\n    setInitialFormValues: (initialFormValues: any) => void\r\n) => {\r\n    const onEdit = (task: any) => {\r\n        setDrawerData({\r\n            header: 'Edit: \"' + task.name + '\"',\r\n            taskId: task.id\r\n        })\r\n\r\n\r\n        let day = moment().zone('GMT')\r\n        if (task.time_to_complete !== null) {\r\n            const splitTime = task.time_to_complete.split(/:/)\r\n            day.hours(parseInt(splitTime[0])).minutes(parseInt(splitTime[1])).seconds(0).milliseconds(0);\r\n        } else {\r\n            day.hours(0).minutes(0).seconds(0).milliseconds(0);\r\n        }\r\n\r\n        setInitialFormValues(\r\n            {\r\n                ...initialFormValues,\r\n                // new: false,\r\n                name: task.name,\r\n                time_to_complete: day,\r\n                descriptions: task.descriptions,\r\n                parent_id: task.parent_id,\r\n                task_type: Number(task.task_type)\r\n            }\r\n        )\r\n        showDrawer()\r\n    }\r\n\r\n    const onStatusChange = (e:any) => {\r\n        const values = { isCompleted: e.target.checked }\r\n        console.log(e)\r\n        updateTaskList(values, e.target.id)\r\n    }\r\n\r\n    if (taskList !== undefined && taskList.length > 0) {\r\n        return taskList.map((item) => {\r\n            return (\r\n                <>\r\n                    <div><Checkbox checked={item.isCompleted} id={item.id} onClick={onStatusChange}/></div>\r\n                    <div className=\"w-100 float-left\" key={item.id}>\r\n                        <div className=\"ml-3 float-left\">\r\n                            \r\n                            {item.isCompleted ? <span className=\"text-black-50\">{item.name}</span> : <span>{item.name}</span>}\r\n                            \r\n                        </div>\r\n                        <div className=\"ml-3 float-right\">\r\n                            {item.time_to_complete}\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"d-flex flex-row\">\r\n                        <Button className=\"\"\r\n                            type=\"primary\"\r\n                            shape=\"circle\"\r\n                            size=\"small\"\r\n                            style={{ marginLeft: 10 }}\r\n                            onClick={() => { onEdit(item) }}\r\n                            icon={\r\n                                <div className=\"d-flex flex-wrap align-content-start\">\r\n                                    <EditOutlined className=\"ml-1\" style={{ fontSize: '14px' }} />\r\n                                </div>\r\n                            }\r\n                        />\r\n                        <Button className=\"\"\r\n                            type=\"primary\"\r\n                            danger\r\n                            shape=\"circle\"\r\n                            size=\"small\"\r\n                            style={{ marginLeft: 10 }}\r\n                            onClick={() => { deleteTask(item.id) }}\r\n                            icon={\r\n                                <div className=\"d-flex flex-wrap align-content-start\">\r\n                                    <DeleteOutlined className=\"ml-1\" style={{ fontSize: '14px' }} />\r\n                                </div>\r\n                            }\r\n                        />\r\n                    </div>\r\n                </>\r\n            )\r\n        })\r\n    } else {\r\n        return []\r\n    }\r\n}","import { SwipeAction, List } from 'antd-mobile'\r\nimport React from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { taskAPI } from '../../api/taskApi'\r\nimport { TaskListType } from '../../Types/types'\r\nimport {actions} from './../../redux/TaskListReducer'\r\n\r\nconst Item = List.Item\r\n\r\n\r\n\r\n\r\nexport type OwnTaskTreeItemsType = {\r\n    taskItem: TaskListType,\r\n    deleteTaskList: (taskId: number) => void,\r\n    showDrawer: () => void,\r\n    setDrawerData: (drawerData: any) => void,\r\n    initialFormValues: any,\r\n    setInitialFormValues: (initialFormValues: any) => void\r\n    updateTaskList: (values: any, taskId: number)=> void,\r\n}\r\nexport const TaskTreeItemMobile: React.FC<OwnTaskTreeItemsType> = (props) => {\r\n    const dispatch = useDispatch()\r\n    function handleDispatch(email: number) {\r\n        dispatch(actions.setSelectedTasks(email));\r\n    }\r\n\r\n    const onEdit = (task: TaskListType) => {\r\n        props.setDrawerData({\r\n            header: 'Edit: \"' + task.name + '\"',\r\n            taskId: task.id\r\n        })\r\n\r\n        let time_to_complete = new Date()\r\n        if (task.time_to_complete !== null) {\r\n            const splitTime = task.time_to_complete.split(/:/)\r\n            time_to_complete.setHours( parseInt(splitTime[0]) )\r\n            time_to_complete.setMinutes( parseInt(splitTime[1]) )\r\n            time_to_complete.setSeconds(0)\r\n            time_to_complete.setMilliseconds(0)\r\n        } else {\r\n            time_to_complete.setHours(0)\r\n            time_to_complete.setMinutes(0)\r\n            time_to_complete.setSeconds(0)\r\n            time_to_complete.setMilliseconds(0)\r\n        }\r\n\r\n        props.setInitialFormValues({\r\n                ...props.initialFormValues,\r\n                name: task.name,\r\n                time_to_complete: time_to_complete,\r\n                descriptions: task.descriptions,\r\n                parent_id: [ task.parent_id ],\r\n                task_type: [ Number(task.task_type) ]\r\n            })\r\n\r\n        props.showDrawer()\r\n    }\r\n\r\n    const onItemOpen = () => {\r\n        console.log(props.taskItem.id, 'is open')\r\n\r\n        handleDispatch(props.taskItem.id)\r\n    }\r\n\r\n    const onComplet = () => {\r\n        console.log('onComplet')\r\n        const values = { isCompleted: !props.taskItem.isCompleted }\r\n        props.updateTaskList(values, props.taskItem.id)\r\n    }\r\n\r\n    return (\r\n        <SwipeAction\r\n            style={{ backgroundColor: 'gray' }}\r\n            autoClose\r\n            right={[\r\n                {\r\n                    text: 'Cancel',\r\n                    onPress: () => {\r\n                        //console.log('cancel') \r\n                    },\r\n                    style: { backgroundColor: '#ddd', color: 'white' },\r\n                },\r\n                {\r\n                    text: 'Delete',\r\n                    onPress: () => props.deleteTaskList(props.taskItem.id),\r\n                    style: { backgroundColor: '#F4333C', color: 'white' },\r\n                },\r\n            ]}\r\n            left={[\r\n                {\r\n                    text: 'Edit',\r\n                    onPress: () => { onEdit(props.taskItem) },\r\n                    style: { backgroundColor: '#108ee9', color: 'white' },\r\n                },\r\n                {\r\n                    text: 'Execute',\r\n                    onPress: () => onComplet(),\r\n                    style: { backgroundColor: 'green', color: 'white' },\r\n                },\r\n            ]}\r\n        // onOpen={() => console.log('global open')}\r\n        // onClose={() => console.log('global close')}\r\n        >\r\n            <Item\r\n                // className=\"my-3\"\r\n                onClick={onItemOpen}\r\n                // arrow=\"horizontal\"\r\n                key={props.taskItem.id}\r\n            >\r\n                {props.taskItem.isCompleted ? <span className=\"text-black-50\">{props.taskItem.name}</span> : <span>{props.taskItem.name}</span>}\r\n            </Item>\r\n\r\n        </SwipeAction>\r\n    )\r\n}","import React, { useState, useEffect } from 'react'\r\nimport { TasksTreePropsType } from './TasksTreeContainer'\r\nimport { Drawer, List, SwipeAction, Icon, Button, Card, WingBlank, WhiteSpace } from 'antd-mobile'\r\nimport NewTaskTreeForm from './NewTaskTreeForm'\r\nimport './TasksTreeMobile.css'\r\nimport { Formik } from 'formik'\r\nimport { Spin, Empty } from 'antd'\r\nimport { propTypes } from 'react-bootstrap/esm/Image'\r\nimport moment from \"moment\"\r\nimport { TaskListType } from '../../Types/types'\r\nimport { useDispatch } from 'react-redux'\r\nimport { TaskTreeItemMobile } from './TaskTreeItem'\r\n\r\nconst Item = List.Item\r\n\r\ntype InitialDrewerDataType = {\r\n    header: string,\r\n    taskId: false | number\r\n}\r\n\r\nconst initialDrewerData: InitialDrewerDataType = {\r\n    header: 'Create New Task',\r\n    taskId: false\r\n}\r\n\r\nconst TasksTreeMobile: React.FC<TasksTreePropsType> = (props) => {\r\n    useEffect(() => {\r\n        if (props.taskList && props.taskList.length === 0 && !props.isTaskListLoaded) {\r\n            props.getTaskList()\r\n        }else if (props.taskList === undefined) {\r\n            props.getTaskList()\r\n        }\r\n        setVisible(false)\r\n        // console.log('initialValues: ', initialValues)\r\n        setInitialFormValues(initialValues)\r\n    }, [props.taskList])\r\n\r\n    const getSelectOptions = () => {\r\n        if (props.taskList !== undefined && props.taskList.length > 0) {\r\n            return props.taskList.map((item) => {\r\n                return ({\r\n                    name: item.name,\r\n                    value: item.id\r\n                })\r\n            })\r\n        } else {\r\n            //console.log('вернули пыстой список', props.taskList)\r\n            return null\r\n        }\r\n    }\r\n\r\n    let initialTimeToComplete = new Date()\r\n    initialTimeToComplete.setHours(0)\r\n    initialTimeToComplete.setMinutes(0)\r\n    initialTimeToComplete.setSeconds(0)\r\n    initialTimeToComplete.setMilliseconds(0)\r\n\r\n    const initialValues: any = {\r\n        selectOptions: getSelectOptions(),\r\n        taskTypes: [\r\n            {\r\n                name: 'Простая задача',\r\n                value: 1\r\n            },\r\n            {\r\n                name: 'Задача с контектом',\r\n                value: 2\r\n            }\r\n        ],\r\n        task_type: 1,\r\n        time_to_complete: initialTimeToComplete\r\n        // parent_id:[]\r\n    }\r\n\r\n    const [visible, setVisible] = useState(false)\r\n    const [initialFormValues, setInitialFormValues] = useState(initialValues)\r\n    const [drawerData, setDrawerData] = useState(initialDrewerData)\r\n\r\n    const handleSubmit = (formProps: any) => {\r\n        // console.log('handleSubmit TasksTreeMobile: ', formProps.time_to_complete)\r\n        let formPropsCopy: any = { ...formProps }\r\n        delete formPropsCopy.selectOptions\r\n        delete formPropsCopy.taskTypes\r\n        if (formPropsCopy.time_to_complete !== undefined) {\r\n            // console.log(formPropsCopy.time_to_complete)\r\n            const time_to_complete = moment(formPropsCopy.time_to_complete)\r\n            formPropsCopy.time_to_complete = time_to_complete.format('HH:mm:ss')\r\n        }\r\n        if ( Array.isArray(formPropsCopy.parent_id) ){\r\n            formPropsCopy.parent_id = formPropsCopy.parent_id[0]\r\n        }\r\n        \r\n        //console.log('NewTaskMobile submit: ', formPropsCopy)\r\n\r\n        formPropsCopy.user_id = props.userId\r\n        // props.createNewTaskList(formPropsCopy)\r\n        // setInitialFormValues(initialValues)\r\n        if (!drawerData.taskId) {\r\n            // console.log('createNewTaskList: ', formPropsCopy)\r\n            props.createNewTaskList(formPropsCopy)\r\n        } else {\r\n            console.log('updateTaskList: ', formPropsCopy)\r\n            props.updateTaskList(formPropsCopy, drawerData.taskId)\r\n        }\r\n    }\r\n\r\n    const onOpenChange = (args: any) => {\r\n        setInitialFormValues(initialValues)\r\n        setVisible(!visible)\r\n    }\r\n\r\n    const showDrawer = () => {\r\n        setVisible(true)\r\n    }\r\n\r\n    const onBack = () => {\r\n        props.backSelectedTasks()\r\n    }\r\n\r\n    console.log('TasksTreeMobile props: ', props)\r\n    // console.log('TasksTreeMobile name: ', initialFormValues.name)\r\n\r\n    // if (props.taskList !== undefined) {\r\n        return (\r\n            <WingBlank size=\"lg\">\r\n            <WhiteSpace size=\"lg\" />\r\n            <Card>\r\n\r\n                <div \r\n                    // className=\"d-flex justify-content-end\"\r\n                >\r\n                <Card.Header\r\n                    title={<h4 className=\"w-100 text-center\">Tasks Tree</h4>}\r\n                    extra = {\r\n                                <div className=\"d-flex flex-row\">\r\n                                {props.selectedTasks.length>0 ? \r\n                                    <Button\r\n                                        inline\r\n                                        size=\"small\"\r\n                                        className=\"mx-3 my-2\"\r\n                                        // style={{ marginRight: '4px' }} \r\n                                        onClick={onBack}\r\n                                        type=\"primary\"\r\n                                    >\r\n                                        Back\r\n                                    </Button>\r\n                                :\r\n                                    null\r\n                                }\r\n                                <Button\r\n                                    inline\r\n                                    size=\"small\"\r\n                                    className=\"mx-3 my-2\"\r\n                                    // style={{ marginRight: '4px' }} \r\n                                    onClick={onOpenChange}\r\n                                    type=\"primary\"\r\n                                >\r\n                                    Add\r\n                                </Button>\r\n                                </div>\r\n                            }\r\n                >\r\n                    \r\n                </Card.Header>\r\n                </div>\r\n\r\n                <Drawer\r\n                    className=\"my-drawer\"\r\n                    style={{ minHeight: document.documentElement.clientHeight }}\r\n                    enableDragHandle\r\n                    contentStyle={{ color: '#A6A6A6', textAlign: 'center', paddingTop: 0, width: \"100%\" }}\r\n                    sidebar={\r\n                        <div className=\"mt-4\">\r\n                            <Formik\r\n                                initialValues={initialFormValues}\r\n                                onSubmit={handleSubmit}\r\n                                render={NewTaskTreeForm}\r\n                                enableReinitialize={true}\r\n                            />\r\n                        </div>\r\n                    }\r\n                    open={visible}\r\n                    onOpenChange={onOpenChange}\r\n                >\r\n                    <List\r\n                    // renderHeader={() => 'taskList'}\r\n                    >\r\n                        {/* {getTaskTreeItems(\r\n                                            props.taskList, \r\n                                            props.deleteTaskList,\r\n                                            showDrawer,\r\n                                            setDrawerData,\r\n                                            initialFormValues,\r\n                                            setInitialFormValues\r\n                                        )\r\n                        } */}\r\n\r\n                        {\r\n                        props.taskList !== undefined ?\r\n                        props.taskList.map( (item) => {\r\n                            let parentId: number\r\n                            if (props.selectedTasks.length !== 0) {\r\n                                parentId = props.selectedTasks[props.selectedTasks.length-1] \r\n                                if (item.parent_id === parentId) {\r\n                                    return(\r\n                                        <TaskTreeItemMobile\r\n                                            taskItem={item} \r\n                                            deleteTaskList={props.deleteTaskList}\r\n                                            showDrawer={showDrawer}\r\n                                            setDrawerData={setDrawerData}\r\n                                            initialFormValues={initialFormValues}\r\n                                            setInitialFormValues={setInitialFormValues}\r\n                                            updateTaskList={props.updateTaskList}\r\n                                        />\r\n                                    )\r\n                                }\r\n                            } else {\r\n                                if (item.parent_id === null) {\r\n                                    return (\r\n                                        <TaskTreeItemMobile\r\n                                            taskItem={item} \r\n                                            deleteTaskList={props.deleteTaskList}\r\n                                            showDrawer={showDrawer}\r\n                                            setDrawerData={setDrawerData}\r\n                                            initialFormValues={initialFormValues}\r\n                                            setInitialFormValues={setInitialFormValues}\r\n                                            updateTaskList={props.updateTaskList}\r\n                                        />\r\n                                    )\r\n                                }\r\n                            }\r\n                            \r\n                        })\r\n                        :\r\n                        null\r\n                        }\r\n\r\n                    </List>\r\n                </Drawer>\r\n\r\n\r\n\r\n            </Card>\r\n            </WingBlank>\r\n        )\r\n    // } else {\r\n    //     return <Spin key=\"spin\" size=\"large\" />\r\n    // }\r\n}\r\n\r\nexport default TasksTreeMobile\r\n\r\nconst getTaskTreeItems = (\r\n        taskList: Array<any>, \r\n        deleteTaskList:(taskId:number)=>void,\r\n        showDrawer: () => void,\r\n        setDrawerData: (drawerData: any) => void,\r\n        initialFormValues: any,\r\n        setInitialFormValues: (initialFormValues: any) => void\r\n    ) => {\r\n    const onEdit = (task: any) => {\r\n        // console.log(task)\r\n\r\n        setDrawerData({\r\n            header: 'Edit: \"' + task.name + '\"',\r\n            taskId: task.id\r\n        })\r\n\r\n        let day = new Date()\r\n        if (task.time_to_complete !== null) {\r\n            const splitTime = task.time_to_complete.split(/:/)\r\n            day.setHours( parseInt(splitTime[0]) )\r\n            day.setMinutes( parseInt(splitTime[1]) )\r\n            day.setSeconds(0)\r\n            day.setMilliseconds(0)\r\n        } else {\r\n            day.setHours(0)\r\n            day.setMinutes(0)\r\n            day.setSeconds(0)\r\n            day.setMilliseconds(0)\r\n        }\r\n\r\n        setInitialFormValues(\r\n            {\r\n                ...initialFormValues,\r\n                // new: false,\r\n                name: task.name,\r\n                time_to_complete: day,\r\n                descriptions: task.descriptions,\r\n                parent_id: [task.parent_id],\r\n                task_type: [Number(task.task_type)]\r\n            }\r\n        )\r\n\r\n        showDrawer()\r\n    }\r\n\r\n    const onItemOpen = (itemId: number) => {\r\n        console.log(itemId, 'is open')\r\n        // const dispatch = useDispatch()\r\n        // dispatch( { type: 'SN/TASK_LIST/SET_SELECTED_TASK', itemId } )\r\n    }\r\n\r\n    // console.log(taskList)\r\n\r\n    if (taskList && taskList.length > 0) {\r\n        return taskList.map((item) => {\r\n            //console.log('!!!!!!!')\r\n            return (\r\n                <SwipeAction\r\n                    style={{ backgroundColor: 'gray' }}\r\n                    autoClose\r\n                    right={[\r\n                        {\r\n                            text: 'Cancel',\r\n                            onPress: () => { \r\n                                //console.log('cancel') \r\n                            },\r\n                            style: { backgroundColor: '#ddd', color: 'white' },\r\n                        },\r\n                        {\r\n                            text: 'Delete',\r\n                            onPress: () => deleteTaskList(item.id),\r\n                            style: { backgroundColor: '#F4333C', color: 'white' },\r\n                        },\r\n                    ]}\r\n                    left={[\r\n                        {\r\n                            text: 'Edit',\r\n                            onPress: () => {onEdit(item)},\r\n                            style: { backgroundColor: '#108ee9', color: 'white' },\r\n                        },\r\n                        {\r\n                            text: 'Execute',\r\n                            onPress: () => {\r\n                                // console.log('cancel')\r\n                            },\r\n                            style: { backgroundColor: 'green', color: 'white' },\r\n                        },\r\n                    ]}\r\n                    // onOpen={() => console.log('global open')}\r\n                    // onClose={() => console.log('global close')}\r\n                >\r\n                    <Item\r\n                        // className=\"my-3\"\r\n                        onClick={()=>{onItemOpen(item.id)}}\r\n                        arrow=\"horizontal\"\r\n                        key={item.id}\r\n                    >\r\n                        {item.name}\r\n                    </Item>\r\n\r\n                </SwipeAction>\r\n            )\r\n        })\r\n    } else {\r\n        return(\r\n            <Empty />\r\n        )\r\n    }\r\n\r\n\r\n}\r\n\r\n","import {connect} from 'react-redux'\r\n// import TasksTree, { OwnTasksTreePropsType } from './TasksTree'\r\nimport { AppStateType } from '../../redux/store'\r\nimport {getTaskList, createNewTaskList, deleteTaskList, updateTaskList, actions} from './../../redux/TaskListReducer'\r\nimport { isMobile } from 'react-device-detect'\r\nimport TasksTreeBrowser from './TasksTreeBrowser'\r\nimport TasksTreeMobile from './TasksTreeMobile'\r\nimport { act } from '@testing-library/react'\r\n\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    getTaskList: ()=>void,\r\n    createNewTaskList: (values: any)=>void,\r\n    deleteTaskList: (taskId: number)=>void,\r\n    updateTaskList: (values: any, taskId: number)=> void,\r\n    backSelectedTasks: ()=>void,\r\n}\r\n\r\ntype OwnTasksTreePropsType = {\r\n\r\n}\r\n\r\nexport type TasksTreePropsType = MapPropsType & MapDispatchPropsType & OwnTasksTreePropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        taskList: state.taskList.taskList,\r\n        userId: state.auth.user?.id,\r\n        isTaskListLoaded: state.taskList.isTaskListLoaded,\r\n        selectedTasks: state.taskList.selectedTasks\r\n    }\r\n}\r\n\r\n// const TasksTree: React.FC<TasksTreePropsType> = (props) => {\r\n//     return {\r\n\r\n//     }\r\n// }\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnTasksTreePropsType, AppStateType>(mapStateToProps, \r\n    {getTaskList, createNewTaskList, deleteTaskList, updateTaskList, backSelectedTasks: actions.backSelectedTasks}) \r\n    (isMobile ? TasksTreeMobile : TasksTreeBrowser)\r\n    \r\n\r\n","import React, { ReactNode } from 'react'\r\nimport { Form, Field, FormikProps } from \"formik\"\r\nimport { AntCheckbox, AntInput, AntInputPassword } from '../../utils/Formik/CreateAntField'\r\nimport { validateEmail, validateRequired } from '../../utils/Formik/ValidateFields'\r\n\r\nconst RegisterForm: ((props: FormikProps<{}>) => ReactNode) = (props) => {\r\n    return(\r\n        <Form\r\n            className=\"form-container\" \r\n            onSubmit={props.handleSubmit}\r\n        >\r\n            <Field\r\n                component={AntInput}\r\n                name=\"name\"\r\n                type=\"text\"\r\n                label=\"Name\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n            <Field\r\n                component={AntInput}\r\n                name=\"email\"\r\n                type=\"email\"\r\n                label=\"Email\"\r\n                validate={validateEmail}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n            <Field\r\n                component={AntInputPassword}\r\n                name=\"password\"\r\n                type=\"password\"\r\n                label=\"Password\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n\r\n            <Field\r\n                component={AntInputPassword}\r\n                name=\"c_password\"\r\n                type=\"password\"\r\n                label=\"Confirm\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n\r\n            <Field\r\n                component={AntCheckbox}\r\n                name=\"remember\"\r\n                label=\"Remember Me\"\r\n                submitCount={props.submitCount}\r\n            />\r\n            <div className=\"submit-container\">\r\n                <button className=\"ant-btn ant-btn-primary\" type=\"submit\">\r\n                    Register\r\n                </button>\r\n            </div>\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default RegisterForm","import { Formik } from 'formik'\r\nimport React, { useEffect } from 'react'\r\nimport RegisterForm from './RegisterForm'\r\nimport { RegisterPropsType } from './RegisterContainer'\r\nimport { propTypes } from 'react-bootstrap/esm/Image'\r\nimport { Redirect, Route, useHistory } from 'react-router-dom'\r\n\r\nconst initialValues = {\r\n    // parent_id :['1', '2', '3']\r\n}\r\n\r\nexport type OwnRegisterPropsType = {}\r\n\r\nconst Register: React.FC<RegisterPropsType> = (props) => {\r\n    let history = useHistory();\r\n    useEffect( () => {\r\n        //console.log('useEffect in Register: ', props.isAuth)\r\n        if(props.isAuth) {\r\n            history.replace(props.appLocation+'toDoList')\r\n        }\r\n    }, [props.isAuth])\r\n    const handleSubmit = (formProps: any) => {\r\n        //console.log(formProps)\r\n        formProps.status = 'guest'\r\n        props.register(formProps)\r\n    }\r\n\r\n    //console.log('Register', props)\r\n    return (\r\n        <>\r\n            <h1 className=\"mb-5 mx-auto\">Register Form</h1>\r\n            <Formik\r\n                initialValues={initialValues}\r\n                onSubmit={handleSubmit}\r\n                render={RegisterForm}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Register","import {connect} from 'react-redux'\r\nimport Register, { OwnRegisterPropsType } from './Register'\r\nimport { AppStateType } from '../../redux/store'\r\nimport {register} from './../../redux/authReducer'\r\n\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    register: (creds: any)=>void\r\n}\r\n\r\nexport type RegisterPropsType = MapPropsType & MapDispatchPropsType & OwnRegisterPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n        appLocation: state.app.location\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnRegisterPropsType, AppStateType>(mapStateToProps, \r\n    {register}) \r\n    (Register)\r\n    \r\n\r\n","import React, { useEffect, useState } from 'react'\r\nimport './App.css'\r\nimport ToDoList from './Components/ToDo/ToDoListContainer'\r\nimport { BrowserRouter, Redirect, Route, Switch, withRouter, useLocation } from 'react-router-dom'\r\nimport { connect, Provider } from 'react-redux'\r\nimport 'antd/dist/antd.css'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport 'antd-mobile/dist/antd-mobile.css'\r\nimport store, { AppStateType } from './redux/store'\r\nimport { Layout, Spin } from 'antd'\r\nimport { compose } from 'redux'\r\nimport { initializeApp, addLocation } from './redux/appReducer'\r\nimport {login} from './redux/authReducer'\r\nimport Header from './Components/Header/HeaderContainer'\r\nimport { isMobile } from \"react-device-detect\"\r\nimport Login from './Components/Login/LoginContainer'\r\nimport Orders from './Components/Orders/OrdersContainer'\r\nimport TasksTree from './Components/TasksTree/TasksTreeContainer'\r\nimport Register from './Components/Register/RegisterContainer'\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\ntype DispatchPropsType = {\r\n  initializeApp: () => void,\r\n  addLocation: (location: string) => void,\r\n  login: (data: any)=> void,\r\n}\r\n\r\nconst App = (props: MapPropsType & DispatchPropsType) => {\r\n  const [location, setLocation] = useState(useLocation().pathname)\r\n\r\n  useEffect(() => {\r\n    if (!props.initialized) {\r\n      // http://localhost:3000/?email=7383125@gmail.com&password=gfhjkm4501\r\n      let instanseCreds = parseQueryString()\r\n      if (instanseCreds.email && instanseCreds.password) {\r\n        instanseCreds.remember = true\r\n        props.login(instanseCreds)\r\n      }\r\n\r\n      if (location === '/front1/') {\r\n        props.addLocation(location)\r\n      }\r\n      //console.log('initialized FALSE', props)\r\n      props.initializeApp()\r\n    } else {\r\n      //console.log('initialized TRUE', props)\r\n    }\r\n  }, [props.initialized])\r\n\r\n\r\n  if (!props.initialized) {\r\n    return <Spin key=\"spin\" size=\"large\" />\r\n  }\r\n\r\n  return (\r\n    <Layout>\r\n      <Header />\r\n      <Switch>\r\n        {!props.isAuth ?\r\n          <Route exact path={props.appLocation}\r\n            render={() => <Redirect to={props.appLocation+'login'} />} />\r\n        :\r\n          <Route exact path={props.appLocation}\r\n            render={() => <Redirect to={props.appLocation+'toDoList'} />} />\r\n        }\r\n        \r\n        {props.isAuth ?\r\n            <Route exact path={props.appLocation+'login'}\r\n              render={ () => <Redirect to={props.appLocation+'toDoList'} /> } \r\n            />  \r\n          :\r\n            null\r\n        }\r\n\r\n        <Route path={props.appLocation+'login'}\r\n          render={() => <Login />} />\r\n        \r\n         <Route path={props.appLocation+'toDoList'}\r\n            render={() => <ToDoList />} />\r\n\r\n          <Route path={props.appLocation+'tasksTree'}\r\n            render={() => <TasksTree />} />\r\n\r\n          <Route path={props.appLocation+'orders'}\r\n            render={() => <Orders />} />\r\n\r\n          <Route path={props.appLocation+'register'}\r\n            render={() => <Register />} />\r\n\r\n          <Route path={props.appLocation+'*'}\r\n            render={() => <div>404 NOT FOUND</div>} />\r\n      </Switch>\r\n    </Layout>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n  initialized: state.app.initialized,\r\n  appLocation: state.app.location,\r\n  isAuth: state.auth.isAuth\r\n})\r\n\r\nlet AppContainer = compose<React.ComponentType>(\r\n  withRouter,\r\n  connect(mapStateToProps, { initializeApp, addLocation, login }))(App)\r\n\r\nconst MainApp = () => {\r\n  return (\r\n    <BrowserRouter>\r\n      <Provider store={store}>\r\n        <div className={isMobile ? \"\" : \"container\"}>\r\n          <AppContainer />\r\n        </div>\r\n      </Provider>\r\n    </BrowserRouter>\r\n  )\r\n}\r\n\r\nexport default MainApp\r\n\r\nconst parseQueryString = (): any => {\r\n  const params:  any = {}\r\n  document.location.search.substr(1).split('&').forEach( (pair) => {\r\n      const [key, value] = pair.split('=')\r\n      params[key] = value\r\n  })\r\n  return params;\r\n};\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './App'\r\nimport reportWebVitals from './reportWebVitals'\r\n\r\nReactDOM.render(\r\n  // <React.StrictMode>\r\n    <App />\r\n  // </React.StrictMode>\r\n  ,\r\n  document.getElementById('root')\r\n)\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(// //console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals()\r\n"],"sourceRoot":""}
[{"C:\\OSPanel\\domains\\epam-app\\src\\index.tsx":"1","C:\\OSPanel\\domains\\epam-app\\src\\reportWebVitals.ts":"2","C:\\OSPanel\\domains\\epam-app\\src\\App.tsx":"3","C:\\OSPanel\\domains\\epam-app\\src\\Components\\ToDoList.tsx":"4","C:\\OSPanel\\domains\\epam-app\\src\\Components\\NewTaskForm.tsx":"5","C:\\OSPanel\\domains\\epam-app\\src\\Components\\NewTaskFormContainer.tsx":"6","C:\\OSPanel\\domains\\epam-app\\src\\redux\\store.js":"7","C:\\OSPanel\\domains\\epam-app\\src\\redux\\taskReducer.js":"8","C:\\OSPanel\\domains\\epam-app\\src\\api\\api.js":"9","C:\\OSPanel\\domains\\epam-app\\src\\Components\\ToDoListContainer.tsx":"10"},{"size":517,"mtime":1611045973904,"results":"11","hashOfConfig":"12"},{"size":440,"mtime":1611045973906,"results":"13","hashOfConfig":"12"},{"size":403,"mtime":1611049435370,"results":"14","hashOfConfig":"12"},{"size":3867,"mtime":1611052142828,"results":"15","hashOfConfig":"12"},{"size":2149,"mtime":1611048221812,"results":"16","hashOfConfig":"12"},{"size":316,"mtime":1611048090660,"results":"17","hashOfConfig":"12"},{"size":319,"mtime":1611047738393,"results":"18","hashOfConfig":"12"},{"size":1357,"mtime":1611051184206,"results":"19","hashOfConfig":"12"},{"size":1393,"mtime":1611051922021,"results":"20","hashOfConfig":"12"},{"size":319,"mtime":1611049340666,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"547qvp",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"24"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"39"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"C:\\OSPanel\\domains\\epam-app\\src\\index.tsx",[],["47","48"],"C:\\OSPanel\\domains\\epam-app\\src\\reportWebVitals.ts",[],"C:\\OSPanel\\domains\\epam-app\\src\\App.tsx",[],"C:\\OSPanel\\domains\\epam-app\\src\\Components\\ToDoList.tsx",["49"],"import React, { useState, useEffect } from 'react'\r\nimport { DatePicker, Card, Divider, Button, Drawer } from 'antd'\r\nimport { FileAddOutlined } from '@ant-design/icons'\r\nimport moment from 'moment'\r\nimport NewTaskForm from './NewTaskFormContainer'\r\n\r\nconst ToDoList: React.FC = (props: any) => {\r\n    const [selectedDate, setselectedDate] = useState<moment.Moment>(moment())\r\n    const [visible, setVisible] = useState(false)\r\n    const [isAddActive, setIsAddActive] = useState(false)\r\n\r\n    useEffect(() => {\r\n        console.log('useEffect', props)\r\n        if (props.taskList === null) {\r\n            console.log('getTaskList')\r\n\r\n            const requestOptions = {\r\n                method: 'GET',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    // 'Authorization': 'Bearer ' + localStorage.getItem('accessToken')\r\n                },\r\n            };\r\n\r\n            fetch('http://81.90.181.175/api/tasks', requestOptions)\r\n                .then(response => response.json())\r\n                .then(data => console.log(data))\r\n                .catch(() => console.log(\"Canâ€™t access  response. Blocked by browser?\"))\r\n        }\r\n\r\n        // props.getTaskList()\r\n\r\n    }, [props.taskList]);\r\n\r\n    const onDateChange = (value: moment.Moment | null, dateString: string): void => {\r\n        if (value !== null) {\r\n            setselectedDate(value)\r\n            setIsAddActive(false)\r\n        } else {\r\n            setselectedDate(moment(null))\r\n            setIsAddActive(true)\r\n        }\r\n    }\r\n\r\n    const showDrawer = (): void => {\r\n        setVisible(true);\r\n    }\r\n\r\n    const onClose = (): void => {\r\n        setVisible(false);\r\n    }\r\n\r\n    type timeScaleItemType = React.ReactElement<string>\r\n    const timeScale = (): Array<timeScaleItemType> => {\r\n        let timeScaleArrey: Array<timeScaleItemType> = []\r\n        for (let index: number = 0; index < 24; index++) {\r\n\r\n            timeScaleArrey.push(\r\n                <Divider key={index} orientation=\"left\">\r\n                    {index <= 9 ? '0' : null}{index}:00\r\n                </Divider>)\r\n        }\r\n        return timeScaleArrey\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"site-card-border-less-wrapper\">\r\n                <Card\r\n                    title={\r\n                        <>\r\n                            <label>Select date:</label>\r\n                            <DatePicker\r\n                                onChange={onDateChange}\r\n                                defaultValue={selectedDate}\r\n                                format='DD-MM-YYYY'\r\n                                style={{ marginLeft: 10 }}\r\n                            />\r\n                            <Button\r\n                                type=\"primary\"\r\n                                shape=\"round\"\r\n                                icon={<FileAddOutlined />}\r\n                                style={{ marginLeft: 10 }}\r\n                                size=\"small\"\r\n                                onClick={showDrawer}\r\n                                disabled={isAddActive}\r\n                            >\r\n                                Add\r\n                            </Button>\r\n                        </>\r\n                    }\r\n                    bordered={false}\r\n                >\r\n                    {timeScale()}\r\n                </Card>\r\n\r\n                <Drawer\r\n                    title={\"Create New Task for \" + selectedDate.format('DD MMM YYYY')}\r\n                    placement=\"right\"\r\n                    closable={false}\r\n                    onClose={onClose}\r\n                    visible={visible}\r\n                    width=\"80%\"\r\n                >\r\n                    <NewTaskForm selectedDate={selectedDate} />\r\n                </Drawer>\r\n            </div>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ToDoList","C:\\OSPanel\\domains\\epam-app\\src\\Components\\NewTaskForm.tsx",["50"],"import * as React from 'react'\r\nimport moment from 'moment'\r\nimport { Form, Input, Button, Checkbox, TimePicker } from 'antd'\r\n\r\nconst layout = {\r\n    labelCol: { span: 8 },\r\n    wrapperCol: { span: 16 },\r\n}\r\nconst tailLayout = {\r\n    wrapperCol: { offset: 8, span: 16 },\r\n}\r\n\r\ntype PropsType = {\r\n    selectedDate: moment.Moment\r\n}\r\n\r\nconst { TextArea } = Input;\r\n\r\nconst timeFormat: string = 'HH:mm';\r\n\r\nconst NewTaskForm: React.FC<PropsType> = (props:any) => {\r\n    const onFinish = (values: any) => {\r\n        console.log('Success:', values);\r\n        props.newTask(values)\r\n    };\r\n\r\n    const onFinishFailed = (errorInfo: any) => {\r\n        console.log('Failed:', errorInfo);\r\n    };\r\n\r\n    const onTimeChange = (value: moment.Moment | null, dateString: string):void => {\r\n        console.log(value, dateString);\r\n    }\r\n\r\n    console.log(props)\r\n\r\n    return (\r\n        <Form\r\n            {...layout}\r\n            name=\"basic\"\r\n            initialValues={{ remember: true }}\r\n            onFinish={onFinish}\r\n            onFinishFailed={onFinishFailed}\r\n        >\r\n            <Form.Item\r\n                label=\"Task name\"\r\n                name=\"taskNime\"\r\n                rules={[{ required: true, message: 'Please input task name!' }]}\r\n            >\r\n                <Input />\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n                label=\"Task time\"\r\n                name=\"taskTime\"\r\n                rules={[{ required: true, message: 'Please input time!' }]}\r\n            >\r\n                <TimePicker \r\n                    onChange={onTimeChange} \r\n                    // defaultValue={moment('12:08', timeFormat)} \r\n                    format={timeFormat} \r\n                />\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n                label=\"Description\"\r\n                name=\"description\"\r\n            >\r\n                <TextArea rows={2} />\r\n            </Form.Item>\r\n\r\n            <Form.Item {...tailLayout}>\r\n                <Button type=\"primary\" htmlType=\"submit\">\r\n                    Create\r\n                </Button>\r\n            </Form.Item>\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default NewTaskForm","C:\\OSPanel\\domains\\epam-app\\src\\Components\\NewTaskFormContainer.tsx",[],"C:\\OSPanel\\domains\\epam-app\\src\\redux\\store.js",[],["51","52"],"C:\\OSPanel\\domains\\epam-app\\src\\redux\\taskReducer.js",[],"C:\\OSPanel\\domains\\epam-app\\src\\api\\api.js",["53"],"// const baseURL = 'http://127.0.0.1:8000/api/'\r\nconst baseURL = 'http://81.90.181.175/api/'\r\n\r\nconst postOptions = {\r\n    method: 'POST',\r\n    headers: { 'Content-Type': 'application/json' },\r\n    // Â Â Â Â body: JSON.stringify(state)\r\n}\r\n\r\nconst getOptions = {\r\n    method: 'GET',\r\n    headers: { 'Content-Type': 'application/json' },\r\n    // Â Â Â Â body: JSON.stringify(state)\r\n}\r\n\r\nexport const taskAPI = {\r\n    getTaskList() {\r\n        \r\n        const requestOptions = {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                // 'Authorization': 'Bearer ' + localStorage.getItem('accessToken')\r\n            },\r\n        };\r\n        \r\n        fetch('http://81.90.181.175/api/tasks', requestOptions)\r\n        .then(response => response.json())\r\n        .then(data => console.log(data))\r\n        .catch(() => console.log(\"Canâ€™t access  response. Blocked by browser?\"))\r\n          \r\n    },\r\n\r\n    newTask(data) {\r\n        console.log('data in api',data)\r\n        postOptions.body = JSON.stringify(data)\r\n        console.log('postOptions',postOptions)\r\n        fetch(baseURL, postOptions)\r\n            .then((response) => {\r\n                console.log(response.json());\r\n                return response.json();\r\n            })\r\n            .then((data) => {\r\n                console.log(data);\r\n            })\r\n    },\r\n}\r\n","C:\\OSPanel\\domains\\epam-app\\src\\Components\\ToDoListContainer.tsx",[],{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","severity":1,"message":"59","line":33,"column":8,"nodeType":"60","endLine":33,"endColumn":24,"suggestions":"61"},{"ruleId":"62","severity":1,"message":"63","line":3,"column":31,"nodeType":"64","messageId":"65","endLine":3,"endColumn":39},{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","replacedBy":"57"},{"ruleId":"66","severity":1,"message":"67","line":10,"column":7,"nodeType":"64","messageId":"65","endLine":10,"endColumn":17},"no-native-reassign",["68"],"no-negated-in-lhs",["69"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array.","ArrayExpression",["70"],"@typescript-eslint/no-unused-vars","'Checkbox' is defined but never used.","Identifier","unusedVar","no-unused-vars","'getOptions' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"71","fix":"72"},"Update the dependencies array to be: [props, props.taskList]",{"range":"73","text":"74"},[1232,1248],"[props, props.taskList]"]
[{"C:\\OpenServer\\domains\\front1\\src\\index.tsx":"1","C:\\OpenServer\\domains\\front1\\src\\reportWebVitals.ts":"2","C:\\OpenServer\\domains\\front1\\src\\App.tsx":"3","C:\\OpenServer\\domains\\front1\\src\\redux\\store.ts":"4","C:\\OpenServer\\domains\\front1\\src\\redux\\appReducer.ts":"5","C:\\OpenServer\\domains\\front1\\src\\redux\\authReducer.ts":"6","C:\\OpenServer\\domains\\front1\\src\\Components\\Header\\HeaderContainer.tsx":"7","C:\\OpenServer\\domains\\front1\\src\\Components\\Login\\LoginContainer.tsx":"8","C:\\OpenServer\\domains\\front1\\src\\Components\\ToDo\\ToDoListContainer.tsx":"9","C:\\OpenServer\\domains\\front1\\src\\Components\\Orders\\OrdersContainer.tsx":"10","C:\\OpenServer\\domains\\front1\\src\\Components\\TasksTree\\TasksTreeContainer.tsx":"11","C:\\OpenServer\\domains\\front1\\src\\Components\\Register\\RegisterContainer.tsx":"12","C:\\OpenServer\\domains\\front1\\src\\redux\\taskReducer.ts":"13","C:\\OpenServer\\domains\\front1\\src\\redux\\TaskListReducer.ts":"14","C:\\OpenServer\\domains\\front1\\src\\api\\authAPI.ts":"15","C:\\OpenServer\\domains\\front1\\src\\Components\\Login\\Login.tsx":"16","C:\\OpenServer\\domains\\front1\\src\\Components\\ToDo\\ToDoList.tsx":"17","C:\\OpenServer\\domains\\front1\\src\\Components\\Orders\\Orders.tsx":"18","C:\\OpenServer\\domains\\front1\\src\\Components\\Header\\Header.tsx":"19","C:\\OpenServer\\domains\\front1\\src\\Components\\TasksTree\\TasksTreeMobile.tsx":"20","C:\\OpenServer\\domains\\front1\\src\\Components\\TasksTree\\TasksTreeBrowser.tsx":"21","C:\\OpenServer\\domains\\front1\\src\\Components\\Register\\Register.tsx":"22","C:\\OpenServer\\domains\\front1\\src\\api\\taskListAPI.ts":"23","C:\\OpenServer\\domains\\front1\\src\\api\\taskApi.ts":"24","C:\\OpenServer\\domains\\front1\\src\\api\\api.ts":"25","C:\\OpenServer\\domains\\front1\\src\\Components\\Header\\MenuMobileContainer.tsx":"26","C:\\OpenServer\\domains\\front1\\src\\Components\\Login\\LoginForm.tsx":"27","C:\\OpenServer\\domains\\front1\\src\\Components\\TimeScale\\TimeScaleContainer.tsx":"28","C:\\OpenServer\\domains\\front1\\src\\Components\\ToDo\\Settings\\SettingsModal.tsx":"29","C:\\OpenServer\\domains\\front1\\src\\Components\\Header\\MenuBrowserConainer.tsx":"30","C:\\OpenServer\\domains\\front1\\src\\Components\\Register\\RegisterForm.tsx":"31","C:\\OpenServer\\domains\\front1\\src\\Components\\TasksTree\\NewTaskTreeForm.tsx":"32","C:\\OpenServer\\domains\\front1\\src\\Components\\ToDo\\ToDoHeader\\ToDoHeaderContainer.tsx":"33","C:\\OpenServer\\domains\\front1\\src\\Components\\ToDo\\NewTaskForm\\NewTaskFormContainer.tsx":"34","C:\\OpenServer\\domains\\front1\\src\\utils\\Formik\\ValidateFields.ts":"35","C:\\OpenServer\\domains\\front1\\src\\Components\\Header\\MenuMobile.tsx":"36","C:\\OpenServer\\domains\\front1\\src\\Components\\TimeScale\\TimeScale.tsx":"37","C:\\OpenServer\\domains\\front1\\src\\utils\\Formik\\CreateAntField.tsx":"38","C:\\OpenServer\\domains\\front1\\src\\Components\\Header\\MenuBrowser.tsx":"39","C:\\OpenServer\\domains\\front1\\src\\Components\\ToDo\\ToDoHeader\\ToDoHeader.tsx":"40","C:\\OpenServer\\domains\\front1\\src\\Components\\ToDo\\NewTaskForm\\NewTaskForm.tsx":"41","C:\\OpenServer\\domains\\front1\\src\\utils\\array-helpers.ts":"42","C:\\OpenServer\\domains\\front1\\src\\Components\\TimeScale\\TaskItem\\TaskItemContainer.tsx":"43","C:\\OpenServer\\domains\\front1\\src\\Components\\TimeScale\\TaskItem\\TaskItem.tsx":"44"},{"size":525,"mtime":1612209745096,"results":"45","hashOfConfig":"46"},{"size":440,"mtime":1611941586994,"results":"47","hashOfConfig":"46"},{"size":4010,"mtime":1612550577649,"results":"48","hashOfConfig":"46"},{"size":873,"mtime":1612209745123,"results":"49","hashOfConfig":"46"},{"size":1600,"mtime":1612209745112,"results":"50","hashOfConfig":"46"},{"size":3111,"mtime":1612550577750,"results":"51","hashOfConfig":"46"},{"size":713,"mtime":1612209745029,"results":"52","hashOfConfig":"46"},{"size":708,"mtime":1612209745041,"results":"53","hashOfConfig":"46"},{"size":727,"mtime":1611941586913,"results":"54","hashOfConfig":"46"},{"size":709,"mtime":1611941586835,"results":"55","hashOfConfig":"46"},{"size":1220,"mtime":1612550577710,"results":"56","hashOfConfig":"46"},{"size":734,"mtime":1612550577699,"results":"57","hashOfConfig":"46"},{"size":4730,"mtime":1611941586991,"results":"58","hashOfConfig":"46"},{"size":2805,"mtime":1612550577747,"results":"59","hashOfConfig":"46"},{"size":2127,"mtime":1612550577735,"results":"60","hashOfConfig":"46"},{"size":1479,"mtime":1612560103925,"results":"61","hashOfConfig":"46"},{"size":1806,"mtime":1611941586910,"results":"62","hashOfConfig":"46"},{"size":308,"mtime":1611941586833,"results":"63","hashOfConfig":"46"},{"size":2204,"mtime":1612550577656,"results":"64","hashOfConfig":"46"},{"size":4050,"mtime":1612561674757,"results":"65","hashOfConfig":"46"},{"size":4601,"mtime":1612550577707,"results":"66","hashOfConfig":"46"},{"size":1198,"mtime":1612550577670,"results":"67","hashOfConfig":"46"},{"size":1344,"mtime":1612550577742,"results":"68","hashOfConfig":"46"},{"size":2171,"mtime":1612550577738,"results":"69","hashOfConfig":"46"},{"size":497,"mtime":1612550577732,"results":"70","hashOfConfig":"46"},{"size":805,"mtime":1612209745036,"results":"71","hashOfConfig":"46"},{"size":1508,"mtime":1612550577667,"results":"72","hashOfConfig":"46"},{"size":961,"mtime":1611941586855,"results":"73","hashOfConfig":"46"},{"size":872,"mtime":1612550577725,"results":"74","hashOfConfig":"46"},{"size":798,"mtime":1612550577661,"results":"75","hashOfConfig":"46"},{"size":2110,"mtime":1612550577703,"results":"76","hashOfConfig":"46"},{"size":3990,"mtime":1612559267317,"results":"77","hashOfConfig":"46"},{"size":998,"mtime":1611941586906,"results":"78","hashOfConfig":"46"},{"size":997,"mtime":1612550577722,"results":"79","hashOfConfig":"46"},{"size":1096,"mtime":1612210291676,"results":"80","hashOfConfig":"46"},{"size":4886,"mtime":1612550577664,"results":"81","hashOfConfig":"46"},{"size":4029,"mtime":1612550577716,"results":"82","hashOfConfig":"46"},{"size":4621,"mtime":1612559547401,"results":"83","hashOfConfig":"46"},{"size":3024,"mtime":1612550577660,"results":"84","hashOfConfig":"46"},{"size":4536,"mtime":1611941586902,"results":"85","hashOfConfig":"46"},{"size":5022,"mtime":1612550577719,"results":"86","hashOfConfig":"46"},{"size":318,"mtime":1611941587001,"results":"87","hashOfConfig":"46"},{"size":832,"mtime":1611941586850,"results":"88","hashOfConfig":"46"},{"size":2923,"mtime":1611941586847,"results":"89","hashOfConfig":"46"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},"183mcre",{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"92"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"92"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"92"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"92"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"92"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"92"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"92"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"92"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"92"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"92"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175","usedDeprecatedRules":"92"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"178","usedDeprecatedRules":"92"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"181","usedDeprecatedRules":"92"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186","usedDeprecatedRules":"92"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\OpenServer\\domains\\front1\\src\\index.tsx",[],["193","194"],"C:\\OpenServer\\domains\\front1\\src\\reportWebVitals.ts",[],"C:\\OpenServer\\domains\\front1\\src\\App.tsx",["195","196"],"import React, { useEffect, useState } from 'react'\r\nimport './App.css'\r\nimport ToDoList from './Components/ToDo/ToDoListContainer'\r\nimport { BrowserRouter, Redirect, Route, Switch, withRouter, useLocation } from 'react-router-dom'\r\nimport { connect, Provider } from 'react-redux'\r\nimport 'antd/dist/antd.css'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport 'antd-mobile/dist/antd-mobile.css'\r\nimport store, { AppStateType } from './redux/store'\r\nimport { Layout, Spin } from 'antd'\r\nimport { compose } from 'redux'\r\nimport { initializeApp, addLocation } from './redux/appReducer'\r\nimport {login} from './redux/authReducer'\r\nimport Header from './Components/Header/HeaderContainer'\r\nimport { isMobile } from \"react-device-detect\"\r\nimport Login from './Components/Login/LoginContainer'\r\nimport Orders from './Components/Orders/OrdersContainer'\r\nimport TasksTree from './Components/TasksTree/TasksTreeContainer'\r\nimport Register from './Components/Register/RegisterContainer'\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\ntype DispatchPropsType = {\r\n  initializeApp: () => void,\r\n  addLocation: (location: string) => void,\r\n  login: (data: any)=> void,\r\n}\r\n\r\nconst App = (props: MapPropsType & DispatchPropsType) => {\r\n  const [location, setLocation] = useState(useLocation().pathname)\r\n\r\n  useEffect(() => {\r\n    if (!props.initialized) {\r\n      // http://localhost:3000/?email=7383125@gmail.com&password=gfhjkm4501\r\n      let instanseCreds = parseQueryString()\r\n      if (instanseCreds.email && instanseCreds.password) {\r\n        instanseCreds.remember = true\r\n        props.login(instanseCreds)\r\n      }\r\n\r\n      if (location === '/front1/') {\r\n        props.addLocation(location)\r\n      }\r\n      //console.log('initialized FALSE', props)\r\n      props.initializeApp()\r\n    } else {\r\n      // console.log('initialized TRUE', props)\r\n    }\r\n  }, [props.initialized])\r\n\r\n\r\n  if (!props.initialized) {\r\n    return <Spin key=\"spin\" size=\"large\" />\r\n  }\r\n\r\n  return (\r\n    <Layout>\r\n      <Header />\r\n      <Switch>\r\n        {!props.isAuth ?\r\n          <Route exact path={props.appLocation}\r\n            render={() => <Redirect to={props.appLocation+'login'} />} />\r\n        :\r\n          <Route exact path={props.appLocation}\r\n            render={() => <Redirect to={props.appLocation+'toDoList'} />} />\r\n        }\r\n        \r\n        {props.isAuth ?\r\n            <Route exact path={props.appLocation+'login'}\r\n              render={ () => <Redirect to={props.appLocation+'toDoList'} /> } \r\n            />  \r\n          :\r\n            null\r\n        }\r\n\r\n        <Route path={props.appLocation+'login'}\r\n          render={() => <Login />} />\r\n        \r\n         <Route path={props.appLocation+'toDoList'}\r\n            render={() => <ToDoList />} />\r\n\r\n          <Route path={props.appLocation+'tasksTree'}\r\n            render={() => <TasksTree />} />\r\n\r\n          <Route path={props.appLocation+'orders'}\r\n            render={() => <Orders />} />\r\n\r\n          <Route path={props.appLocation+'register'}\r\n            render={() => <Register />} />\r\n\r\n          <Route path={props.appLocation+'*'}\r\n            render={() => <div>404 NOT FOUND</div>} />\r\n      </Switch>\r\n    </Layout>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n  initialized: state.app.initialized,\r\n  appLocation: state.app.location,\r\n  isAuth: state.auth.isAuth\r\n})\r\n\r\nlet AppContainer = compose<React.ComponentType>(\r\n  withRouter,\r\n  connect(mapStateToProps, { initializeApp, addLocation, login }))(App)\r\n\r\nconst MainApp = () => {\r\n  return (\r\n    <BrowserRouter>\r\n      <Provider store={store}>\r\n        <div className={isMobile ? \"\" : \"container\"}>\r\n          <AppContainer />\r\n        </div>\r\n      </Provider>\r\n    </BrowserRouter>\r\n  )\r\n}\r\n\r\nexport default MainApp\r\n\r\nconst parseQueryString = (): any => {\r\n  const params:  any = {}\r\n  document.location.search.substr(1).split('&').forEach( (pair) => {\r\n      const [key, value] = pair.split('=')\r\n      params[key] = value\r\n  })\r\n  return params;\r\n};\r\n","C:\\OpenServer\\domains\\front1\\src\\redux\\store.ts",[],"C:\\OpenServer\\domains\\front1\\src\\redux\\appReducer.ts",[],"C:\\OpenServer\\domains\\front1\\src\\redux\\authReducer.ts",[],"C:\\OpenServer\\domains\\front1\\src\\Components\\Header\\HeaderContainer.tsx",[],"C:\\OpenServer\\domains\\front1\\src\\Components\\Login\\LoginContainer.tsx",[],"C:\\OpenServer\\domains\\front1\\src\\Components\\ToDo\\ToDoListContainer.tsx",[],"C:\\OpenServer\\domains\\front1\\src\\Components\\Orders\\OrdersContainer.tsx",[],"C:\\OpenServer\\domains\\front1\\src\\Components\\TasksTree\\TasksTreeContainer.tsx",[],"C:\\OpenServer\\domains\\front1\\src\\Components\\Register\\RegisterContainer.tsx",[],"C:\\OpenServer\\domains\\front1\\src\\redux\\taskReducer.ts",[],"C:\\OpenServer\\domains\\front1\\src\\redux\\TaskListReducer.ts",[],"C:\\OpenServer\\domains\\front1\\src\\api\\authAPI.ts",["197","198"],"import {instance, APIResponseType} from \"./api\";\r\n\r\ntype MeResponseDataType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n    // remember_token?: string,\r\n    // user?: any\r\n    // error?: boolean,\r\n    // message?: string\r\n}\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get(`authMe/`+localStorage.getItem('remember_token')).then( (response) => {\r\n            console.log('login: ', response)\r\n            return response\r\n        })\r\n    },\r\n    login(data: any) {\r\n        return instance.post('login', data)\r\n        .then(response => {\r\n            console.log('login: ', response)\r\n            if (response.data.remember_token !== null) {\r\n                localStorage.setItem('remember_token', response.data.remember_token);\r\n            } else {\r\n                localStorage.removeItem('remember_token');\r\n            }\r\n            return response.status === 200 ? response : null;\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                console.log(err.response)\r\n                return err.response\r\n            } else if (err.request) {\r\n                console.log('request', err.request)\r\n            } else {\r\n                console.log('anything else: ', err)\r\n            }\r\n            return null\r\n        })\r\n    },\r\n    register(creds: any) {\r\n        return instance.post('register', creds)\r\n        .then(response => {\r\n            console.log('login: ', response)\r\n            if (response.data.remember_token !== null) {\r\n                localStorage.setItem('remember_token', response.data.token);\r\n            } else {\r\n                localStorage.removeItem('remember_token');\r\n            }\r\n            return response.status === 200 ? response : null;\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                console.log(err.response)\r\n                return err.response\r\n            } else if (err.request) {\r\n                console.log('request', err.request)\r\n            } else {\r\n                console.log('anything else: ', err)\r\n            }\r\n            return null\r\n        })\r\n    }\r\n}","C:\\OpenServer\\domains\\front1\\src\\Components\\Login\\Login.tsx",["199","200","201","202","203"],"import React from 'react'\r\nimport { LoginPropsType } from './LoginContainer'\r\nimport { List, InputItem, Checkbox } from 'antd-mobile'\r\nimport { Formik } from \"formik\"\r\nimport moment from \"moment\"\r\nimport LoginForm from './LoginForm'\r\nimport { propTypes } from 'react-bootstrap/esm/Image'\r\nimport { Button } from 'antd'\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst CheckboxItem = Checkbox.CheckboxItem;\r\n\r\nconst initialValues = {\r\n    // bookingClient: \"\",\r\n    // bookingDate: moment(Date.now()),\r\n    // bookingTime: moment(Date.now()),\r\n    // selectOptions: [\"Mark\", \"Bob\", \"Anthony\"]\r\n}\r\n\r\n// export const dateFormat = \"YYYY--MM-DD\";\r\n// export const timeFormat = \"h:mm A\";\r\n\r\nexport type OwnLoginPropsType = {}\r\n\r\nconst Login: React.FC<LoginPropsType> = (props) => {\r\n    const handleSubmit = (formProps: any) => {\r\n        console.log('formProps: ', formProps)\r\n        if (!formProps.remember) {\r\n            formProps.remember = false\r\n        }\r\n        props.login(formProps)\r\n    }\r\n\r\n    console.log(props)\r\n\r\n    return (\r\n        <>\r\n            <h1 className=\"mb-5 mx-auto\">Login Form</h1>\r\n            <Formik\r\n                initialValues={initialValues}\r\n                onSubmit={handleSubmit}\r\n                render={LoginForm}\r\n            />\r\n            <div className=\"mt-3\">\r\n                <Link to={props.location +\"register\"}><Button type=\"link\" block>Register</Button></Link>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Login","C:\\OpenServer\\domains\\front1\\src\\Components\\ToDo\\ToDoList.tsx",[],"C:\\OpenServer\\domains\\front1\\src\\Components\\Orders\\Orders.tsx",["204"],"import { formatCountdown } from 'antd/lib/statistic/utils'\r\nimport React from 'react'\r\nimport { OrdersPropsType } from './OrdersContainer'\r\n\r\nexport type OwnOrdersPropsType = {}\r\nconst Orders: React.FC<OrdersPropsType> = (props) => {\r\n    return(\r\n        <div>Orders</div>\r\n    )\r\n}\r\n\r\nexport default Orders","C:\\OpenServer\\domains\\front1\\src\\Components\\Header\\Header.tsx",["205","206","207"],"import React from 'react'\r\nimport {\r\n    BrowserView,\r\n    MobileView,\r\n    isBrowser,\r\n    isMobile\r\n} from \"react-device-detect\"\r\nimport { HeaderPropsType } from './HeaderContainer'\r\nimport MenuBrowser from './MenuBrowserConainer'\r\nimport MenuMobile from './MenuMobileContainer'\r\n// import {useHistory, useLocation} from 'react-router-dom'\r\n\r\n// type MenuDataType = Array<any>\r\n\r\nexport type OwnHeaderPropsType = {}\r\n\r\nconst Header: React.FC<HeaderPropsType> = (props) => {\r\n    // const location = useLocation()\r\n    console.log('Header')\r\n\r\n    if (isMobile) {\r\n        return <MenuMobile menuData={menuData(props.appLocation)} logout={props.logout}/>\r\n    } else {\r\n        return <MenuBrowser menuData={menuData(props.appLocation)}/>\r\n    }\r\n}\r\n\r\nexport default Header\r\n\r\n\r\nexport type MenuDataType = ReturnType<typeof menuData>\r\n\r\nconst menuData = (appLocation: string) => {\r\n    const data = [\r\n    {\r\n        value: 'planning',\r\n        label: 'Planning',\r\n        children: [\r\n            {\r\n                label: 'ToDo list',\r\n                // label: <Link to='/toDoList'>ToDo list</Link>,\r\n                value: appLocation + 'toDoList',\r\n                disabled: false,\r\n            },\r\n            {\r\n                label: 'Tasks tree',\r\n                value: appLocation + 'tasksTree',\r\n            },\r\n            {\r\n                label: 'Analysis',\r\n                value: appLocation + 'analysis',\r\n                disabled: true,\r\n            }\r\n        ],\r\n    }, {\r\n        value: 'catalog',\r\n        label: 'Catalog',\r\n        children: [\r\n            {\r\n                label: 'Products',\r\n                value: appLocation + 'products',\r\n            }\r\n            , {\r\n                label: 'Providers',\r\n                value: appLocation + 'providers',\r\n            }\r\n        ],\r\n    },\r\n    {\r\n        value: 'orders',\r\n        label: 'Orders',\r\n        // isLeaf: true,\r\n        children: [\r\n            {\r\n                label: 'Orders',\r\n                value: appLocation + 'orders',\r\n            },\r\n            {\r\n                label: 'Leads',\r\n                value: appLocation + 'leads',\r\n            },\r\n        ],\r\n    },\r\n    ]\r\n    return data\r\n}\r\n","C:\\OpenServer\\domains\\front1\\src\\Components\\TasksTree\\TasksTreeMobile.tsx",["208","209","210","211"],"import React, { useState, useEffect } from 'react'\r\nimport { TasksTreePropsType } from './TasksTreeContainer'\r\nimport { Drawer, List, NavBar, Icon, Button } from 'antd-mobile'\r\nimport NewTaskTreeForm from './NewTaskTreeForm'\r\nimport './TasksTreeMobile.css'\r\nimport { Formik } from 'formik'\r\n\r\nconst Item = List.Item\r\n\r\nconst TasksTreeMobile: React.FC<TasksTreePropsType> = (props) => {\r\n    useEffect(() => {\r\n        if (props.taskList.length === 0 && !props.isTaskListLoaded) {\r\n            props.getTaskList()\r\n        }\r\n    }, [props.taskList])\r\n    const getSelectOptions = () => {\r\n        return props.taskList.map((item) => {\r\n            return ({\r\n                name: item.name,\r\n                value: item.id\r\n            })\r\n        })\r\n    }\r\n\r\n    const initialValues: any = {\r\n        selectOptions: getSelectOptions(),\r\n        taskTypes: [\r\n            {\r\n                name: 'Простая задача',\r\n                value: 'soft'\r\n            },\r\n            {\r\n                name: 'Задача с контектом',\r\n                value: 'context'\r\n            }\r\n        ],\r\n        task_type: 'soft'\r\n\r\n    }\r\n    const [state, setState] = useState(false)\r\n    const sidebar = (<List>\r\n        {[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15].map((i, index) => {\r\n            if (index === 0) {\r\n                return (<List.Item key={index}\r\n                    thumb=\"https://zos.alipayobjects.com/rmsportal/eOZidTabPoEbPeU.png\"\r\n                    multipleLine\r\n                >Category</List.Item>);\r\n            }\r\n            return (<List.Item key={index}\r\n                thumb=\"https://zos.alipayobjects.com/rmsportal/eOZidTabPoEbPeU.png\"\r\n            >Category{index}</List.Item>);\r\n        })}\r\n    </List>)\r\n\r\n    const handleSubmit = (formProps: any) => {\r\n        let formPropsCopy: any = { ...formProps }\r\n        delete formPropsCopy.selectOptions\r\n        delete formPropsCopy.taskTypes\r\n        if (formPropsCopy.time_to_complete !== undefined) {\r\n            console.log(formPropsCopy.time_to_complete.format('HH:mm:ss'))\r\n            formPropsCopy.time_to_complete = formPropsCopy.time_to_complete.format('HH:mm:ss')\r\n        }\r\n        console.log('NewTaskTreeForm Props: ', formPropsCopy)\r\n        // if (!formProps.remember) {\r\n        //     formProps.remember = false\r\n        // }\r\n        // formPropsCopy.user_id = props.userId\r\n        // props.createNewTaskList(formPropsCopy)\r\n    }\r\n\r\n    const onOpenChange = (args: any) => {\r\n        console.log(args);\r\n        setState(!state)\r\n    }\r\n\r\n    console.log('TTM props: ', props)\r\n\r\n    return (<div>\r\n        <Button\r\n            inline\r\n            size=\"small\"\r\n            className=\"mx-3\"\r\n            // style={{ marginRight: '4px' }} \r\n            onClick={onOpenChange}\r\n            type=\"primary\">\r\n            Add\r\n        </Button>\r\n\r\n        <Drawer\r\n            className=\"my-drawer\"\r\n            style={{ minHeight: document.documentElement.clientHeight }}\r\n            enableDragHandle\r\n            contentStyle={{ color: '#A6A6A6', textAlign: 'center', paddingTop: 0, width: \"100%\" }}\r\n            sidebar={\r\n                <div className=\"mt-4\">\r\n                <Formik\r\n                    initialValues={initialValues}\r\n                    onSubmit={handleSubmit}\r\n                    render={NewTaskTreeForm}\r\n                />\r\n                </div>\r\n            }\r\n            open={state}\r\n            onOpenChange={onOpenChange}\r\n        >\r\n            <List \r\n                // renderHeader={() => 'taskList'}\r\n            >\r\n                {getTaskTreeItems(props.taskList)}\r\n            </List>\r\n        </Drawer>\r\n\r\n\r\n\r\n    </div>)\r\n}\r\n\r\nexport default TasksTreeMobile\r\n\r\nconst getTaskTreeItems = (taskList: Array<any>) => {\r\n    return taskList.map((item) => {\r\n        console.log('!!!!!!!')\r\n        return (\r\n            <Item \r\n                className=\"my-3\" \r\n                key={item.id}\r\n            >\r\n                {item.name}\r\n            </Item>\r\n        )\r\n    })\r\n}","C:\\OpenServer\\domains\\front1\\src\\Components\\TasksTree\\TasksTreeBrowser.tsx",["212","213","214"],"import { Button, Card, Drawer } from 'antd'\r\nimport React, { useEffect, useState} from 'react'\r\nimport { TasksTreePropsType } from './TasksTreeContainer'\r\nimport { FileAddOutlined, SettingOutlined } from '@ant-design/icons'\r\nimport NewTaskTreeForm from './NewTaskTreeForm'\r\nimport { Formik, FormikProps } from 'formik'\r\nimport moment from \"moment\"\r\n\r\n\r\n\r\nconst TasksTreeBrowser: React.FC<TasksTreePropsType> = (props) => {\r\n    useEffect(() => {\r\n        if (props.taskList.length === 0 && !props.isTaskListLoaded) {\r\n            props.getTaskList()\r\n        }\r\n    }, [props.taskList])\r\n\r\n    const [visible, setVisible] = useState(false)\r\n\r\n    const getSelectOptions = () => {\r\n        return props.taskList.map( (item) => {\r\n            return ({\r\n                name: item.name,\r\n                value: item.id\r\n            })\r\n        })\r\n    }\r\n\r\n    const initialValues: any = {\r\n        selectOptions: getSelectOptions(),\r\n        taskTypes: [\r\n            {\r\n                name: 'Простая задача',\r\n                value: 'soft'\r\n            },\r\n            {\r\n                name: 'Задача с контектом',\r\n                value: 'context'\r\n            }\r\n        ],\r\n        task_type: 'soft'\r\n\r\n    }\r\n\r\n    const getTaskTreeItems  = (taskList: Array<any>) => {\r\n        return taskList.map( (item) => {\r\n            return(\r\n                <div key={item.id}>{item.name}</div>\r\n            )\r\n        })\r\n    }\r\n\r\n    const onClose = () => {\r\n        setVisible(false)\r\n    }\r\n\r\n    const showDrawer = () => {\r\n        setVisible(true)\r\n    }\r\n\r\n    const handleSubmit = (formProps: any) => {\r\n        let formPropsCopy:any = {...formProps}\r\n        delete formPropsCopy.selectOptions\r\n        delete formPropsCopy.taskTypes\r\n        if (formPropsCopy.time_to_complete !== undefined) {\r\n            console.log(formPropsCopy.time_to_complete.format('HH:mm:ss'))\r\n            formPropsCopy.time_to_complete = formPropsCopy.time_to_complete.format('HH:mm:ss')\r\n        }\r\n        console.log('NewTaskTreeForm Props: ', formPropsCopy)\r\n        // if (!formProps.remember) {\r\n        //     formProps.remember = false\r\n        // }\r\n        formPropsCopy.user_id = props.userId\r\n        props.createNewTaskList(formPropsCopy)\r\n    }\r\n    \r\n    return(\r\n        <>\r\n            <div className=\"site-card-border-less-wrapper\">\r\n                <Card\r\n                    title={\r\n                        <div className=\"col-12 col-md-12 col-lg-4\">\r\n                        <Button\r\n                            type=\"primary\"\r\n                            shape=\"round\"\r\n                            icon={\r\n                                <div className=\"d-flex flex-wrap align-content-start\">\r\n                                    <FileAddOutlined style={{ fontSize: '18px' }} />\r\n                                    <span className=\"ml-1\" style={{ fontSize: '14px' }}>Add</span>\r\n                                </div>}\r\n                            style={{ marginLeft: 10 }}\r\n                            onClick={showDrawer}\r\n                        />\r\n        \r\n                        <Button className=\"\"\r\n                            type=\"primary\"\r\n                            shape=\"round\"\r\n                            style={{ marginLeft: 10 }}\r\n                            // onClick={props.showModal}\r\n                            icon={\r\n                                <div className=\"d-flex flex-wrap align-content-start\">\r\n                                    <SettingOutlined style={{ fontSize: '18px' }} />\r\n                                    <span className=\"ml-1\" style={{ fontSize: '14px' }}>Settings</span>\r\n                                </div>} \r\n                        />\r\n                    </div>\r\n                    }\r\n                    bordered={false}\r\n                >\r\n\r\n                    { getTaskTreeItems(props.taskList) }\r\n\r\n                    <Drawer\r\n                        title={\"Create New Task\"}\r\n                        placement=\"right\"\r\n                        closable={true}\r\n                        onClose={onClose}\r\n                        visible={visible}\r\n                        width=\"90%\"\r\n                    >\r\n\r\n                        <Formik\r\n                            initialValues={initialValues}\r\n                            onSubmit={handleSubmit}\r\n                            render={NewTaskTreeForm}\r\n                        />\r\n\r\n                    </Drawer>\r\n                    \r\n                </Card>\r\n            </div>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default TasksTreeBrowser","C:\\OpenServer\\domains\\front1\\src\\Components\\Register\\Register.tsx",["215","216","217","218"],"import { Formik } from 'formik'\r\nimport React, { useEffect } from 'react'\r\nimport RegisterForm from './RegisterForm'\r\nimport { RegisterPropsType } from './RegisterContainer'\r\nimport { propTypes } from 'react-bootstrap/esm/Image'\r\nimport { Redirect, Route, useHistory } from 'react-router-dom'\r\n\r\nconst initialValues = {\r\n    // parent_id :['1', '2', '3']\r\n}\r\n\r\nexport type OwnRegisterPropsType = {}\r\n\r\nconst Register: React.FC<RegisterPropsType> = (props) => {\r\n    let history = useHistory();\r\n    useEffect( () => {\r\n        console.log('useEffect in Register: ', props.isAuth)\r\n        if(props.isAuth) {\r\n            history.replace(props.appLocation+'toDoList')\r\n        }\r\n    }, [props.isAuth])\r\n    const handleSubmit = (formProps: any) => {\r\n        console.log(formProps)\r\n        formProps.status = 'guest'\r\n        props.register(formProps)\r\n    }\r\n\r\n    console.log('Register', props)\r\n    return (\r\n        <>\r\n            <h1 className=\"mb-5 mx-auto\">Register Form</h1>\r\n            <Formik\r\n                initialValues={initialValues}\r\n                onSubmit={handleSubmit}\r\n                render={RegisterForm}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Register","C:\\OpenServer\\domains\\front1\\src\\api\\taskListAPI.ts",[],"C:\\OpenServer\\domains\\front1\\src\\api\\taskApi.ts",[],"C:\\OpenServer\\domains\\front1\\src\\api\\api.ts",[],"C:\\OpenServer\\domains\\front1\\src\\Components\\Header\\MenuMobileContainer.tsx",[],"C:\\OpenServer\\domains\\front1\\src\\Components\\Login\\LoginForm.tsx",[],"C:\\OpenServer\\domains\\front1\\src\\Components\\TimeScale\\TimeScaleContainer.tsx",[],"C:\\OpenServer\\domains\\front1\\src\\Components\\ToDo\\Settings\\SettingsModal.tsx",[],"C:\\OpenServer\\domains\\front1\\src\\Components\\Header\\MenuBrowserConainer.tsx",[],"C:\\OpenServer\\domains\\front1\\src\\Components\\Register\\RegisterForm.tsx",[],"C:\\OpenServer\\domains\\front1\\src\\Components\\TasksTree\\NewTaskTreeForm.tsx",["219"],"import { Form, Field, FormikProps } from 'formik'\r\nimport React, { ReactNode, useState, useEffect } from 'react'\r\nimport { AntInput, AntSelect, AntTextArea, AntTimePicker } from '../../utils/Formik/CreateAntField'\r\nimport { validateRequired } from '../../utils/Formik/ValidateFields'\r\nimport { Select } from 'antd';\r\n\r\nconst { Option }: any = Select;\r\n\r\n\r\nconst NewTaskTreeForm: ((props: FormikProps<{}>) => ReactNode) = (props) => {\r\n\r\n    // const children: Array<any> = []\r\n    // for (let i = 0; i < 5; i++) {\r\n    //     children.push(i + 'optionName')\r\n    // }\r\n\r\n\r\n\r\n    const values: any = props.values\r\n    const selectOptions = values.selectOptions\r\n    const taskTypes = values.taskTypes\r\n\r\n    const [taskType, setTaskType] = useState(values.taskType)\r\n\r\n    useEffect(() => {\r\n        // console.log(props.values)\r\n        const values: any = props.values\r\n        const taskTypes = values.task_type\r\n        setTaskType(taskTypes)\r\n    }, [props.values])\r\n\r\n    console.log('NewTaskTreeForm props: ', props)\r\n\r\n    const handleSubmit = (formProps: any) => {\r\n        props.handleSubmit(formProps)\r\n    }\r\n\r\n    return (\r\n        <Form\r\n            className=\"form-container\"\r\n            onSubmit={handleSubmit}\r\n        >\r\n            <Field\r\n                component={AntInput}\r\n                name=\"name\"\r\n                type=\"text\"\r\n                label=\"Name\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n\r\n            <Field\r\n                component={AntSelect}\r\n\r\n                selectOptions={selectOptions}\r\n\r\n                name=\"parent_id\"\r\n                type=\"select\"\r\n                label=\"Parent\"\r\n                // validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n            // hasFeedback\r\n            />\r\n\r\n            <Field\r\n                component={AntTextArea}\r\n                name=\"descriptions\"\r\n                type=\"text\"\r\n                label=\"Descriptions\"\r\n                // validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n\r\n            <Field\r\n                component={AntTimePicker}\r\n                name=\"time_to_complete\"\r\n                type=\"time\"\r\n                label=\"Time to complete\"\r\n                // validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n            // hasFeedback\r\n            />\r\n\r\n            <Field\r\n                component={AntSelect}\r\n\r\n                selectOptions={taskTypes}\r\n\r\n                name=\"task_type\"\r\n                type=\"select\"\r\n                label=\"task Types\"\r\n                // validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n\r\n\r\n            {taskType === 'context' ?\r\n                <>\r\n                    <Field\r\n                        component={AntInput}\r\n                        name=\"context1\"\r\n                        type=\"text\"\r\n                        label=\"context1\"\r\n                        validate={validateRequired}\r\n                        submitCount={props.submitCount}\r\n                        hasFeedback\r\n                    />\r\n                    <Field\r\n                        component={AntInput}\r\n                        name=\"context2\"\r\n                        type=\"text\"\r\n                        label=\"context2\"\r\n                        validate={validateRequired}\r\n                        submitCount={props.submitCount}\r\n                        hasFeedback\r\n                    />\r\n                </>\r\n                :\r\n                null\r\n            }\r\n\r\n            <div className=\"submit-container\">\r\n                <button className=\"ant-btn ant-btn-primary\" type=\"submit\">\r\n                    Save\r\n                </button>\r\n            </div>\r\n\r\n        </Form>\r\n    )\r\n    // )\r\n}\r\nexport default NewTaskTreeForm","C:\\OpenServer\\domains\\front1\\src\\Components\\ToDo\\ToDoHeader\\ToDoHeaderContainer.tsx",[],"C:\\OpenServer\\domains\\front1\\src\\Components\\ToDo\\NewTaskForm\\NewTaskFormContainer.tsx",[],"C:\\OpenServer\\domains\\front1\\src\\utils\\Formik\\ValidateFields.ts",[],"C:\\OpenServer\\domains\\front1\\src\\Components\\Header\\MenuMobile.tsx",["220"],"import React, { useState } from 'react'\r\nimport { Menu, ActivityIndicator, NavBar, Button } from 'antd-mobile'\r\nimport { ValueType } from 'antd-mobile/lib/menu/PropsType'\r\nimport './MenuMobile.css'\r\nimport { useHistory, useLocation } from 'react-router-dom'\r\nimport { MenuDataType } from './Header'\r\nimport { MenuMobilePropsType } from './MenuMobileContainer'\r\nimport { Link } from 'react-router-dom'\r\nimport { LogoutOutlined } from '@ant-design/icons'\r\n\r\nexport type OwnMenuMobilePropsType = {\r\n    menuData: MenuDataType,\r\n    logout: () => void\r\n}\r\n\r\nconst MenuMobile: React.FC<MenuMobilePropsType> = (props) => {\r\n    let history = useHistory();\r\n    const location = useLocation();\r\n    const [show, setShow] = useState(false)\r\n    type DataType = typeof props.menuData\r\n    const data = [...props.menuData]\r\n    const [initData, setInitData] = useState<DataType>(data)\r\n\r\n    const getSelectedMenuItem = (): ValueType => {\r\n        let response: ValueType = [data[0].value, '']\r\n        data.forEach((dataItem: any) => {\r\n            if (dataItem.children) {\r\n                dataItem.children.forEach((item: any) => {\r\n                    //console.log('/',item.value,'===',location.pathname)\r\n                    if (item.value === location.pathname) {\r\n                        response = [dataItem.value, item.value]\r\n                    }\r\n                })\r\n            }\r\n        })\r\n        //console.log('getSelectedMenuItem response: ', response)\r\n        return response\r\n    }\r\n\r\n    const [selectedMenuItem, setSelectedMenuItem] = useState<ValueType>(getSelectedMenuItem())\r\n\r\n    const handleClick = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\r\n        e.preventDefault(); // Fix event propagation on Android\r\n        setShow(!show)\r\n        // if (!initData) {\r\n        //     setInitData(data)\r\n        // }\r\n    }\r\n\r\n    const onChange = (value?: ValueType | undefined) => {\r\n        console.log('input values: ', value)\r\n        if (value) {\r\n            let subMenu = value[0]\r\n\r\n            data.forEach((dataItem) => {\r\n                if (dataItem.value === value[0]) {\r\n                    subMenu = value[0]\r\n                    if (dataItem.children && value[1]) {\r\n                        dataItem.children.forEach((cItem: { value: string | string[]; label: any }) => {\r\n                            if (cItem.value === value[1]) {\r\n                                history.replace(`${cItem.value}`)\r\n\r\n                            }\r\n                        })\r\n                    }\r\n                }\r\n            })\r\n        \r\n            if (subMenu === '') {\r\n                subMenu = data[0].value\r\n            }\r\n            console.log('set values: ', [subMenu, value[1]])\r\n            setSelectedMenuItem([subMenu, value[1]])\r\n        }\r\n        \r\n    }\r\n\r\n    const onMaskClick = () => {\r\n        setShow(false)\r\n    }\r\n\r\n    const menuEl = (\r\n        <Menu\r\n            className=\"foo-menu\"\r\n            data={initData}\r\n            value={selectedMenuItem}\r\n            onChange={onChange}\r\n            height={document.documentElement.clientHeight * 0.6}\r\n        />\r\n    );\r\n\r\n    const loadingEl = (\r\n        <div style={{ width: '100%', height: document.documentElement.clientHeight * 0.6, display: 'flex', justifyContent: 'center' }}>\r\n            <ActivityIndicator size=\"large\" />\r\n        </div>\r\n    );\r\n\r\n    // console.log(props)\r\n\r\n    const onLogout = () => {\r\n        onChange(['', ''])\r\n        history.replace(props.appLocation + 'login')\r\n        props.logout()\r\n    }\r\n\r\n    return (\r\n        <div className={show ? 'menu-active' : ''}>\r\n            <div>\r\n                <NavBar\r\n                    leftContent=\"\"\r\n                    mode=\"light\"\r\n                    icon={<img src=\"https://gw.alipayobjects.com/zos/rmsportal/iXVHARNNlmdCGnwWxQPH.svg\" className=\"am-icon am-icon-md\" alt=\"\" />}\r\n                    onLeftClick={handleClick}\r\n                    className=\"top-nav-bar\"\r\n                >\r\n                    {!props.isAuth ?\r\n                        <Link\r\n                            to={props.appLocation + \"login\"}\r\n                            onClick={() => { onChange(['', '']) }}\r\n                        >\r\n                            <span className=\"text-white\">Login</span>\r\n                        </Link>\r\n                        :\r\n                        <div>\r\n                            {props.user?.name}\r\n                            <Button className=\"ml-5\" size=\"small\" icon={<LogoutOutlined />} onClick={onLogout} inline >\r\n\r\n                            </Button>\r\n                        </div>\r\n                    }\r\n\r\n                </NavBar>\r\n            </div>\r\n            {show ? initData ? menuEl : loadingEl : null}\r\n            {show ? <div className=\"menu-mask\" onClick={onMaskClick} /> : null}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default (MenuMobile)\r\n\r\n\r\n","C:\\OpenServer\\domains\\front1\\src\\Components\\TimeScale\\TimeScale.tsx",["221"],"import React, { useEffect, useState } from 'react'\r\nimport { TaskType } from '../../Types/types'\r\nimport moment from 'moment'\r\nimport { TimeScalePropsType } from './TimeScaleContainer'\r\nimport { Divider, Spin, Tooltip, message } from 'antd'\r\nimport TaskItem from './TaskItem/TaskItemContainer'\r\nimport { sortTaskArrayByParams } from '../../utils/array-helpers'\r\n\r\nexport type OwnTaskTimeScaleType = {}\r\nconst TimeScale: React.FC<TimeScalePropsType> = (props) => {\r\n    type SelestedDatesType = typeof props.dateInterval\r\n    const [selestedDates, setSelectedDates] = useState<SelestedDatesType>({ startDate: moment(null), endDate: moment() })\r\n    useEffect(() => {\r\n        if (\r\n            props.dateInterval.startDate.isSame(selestedDates.startDate.format('YYYY-MM-DD'), \"day\" ) &&\r\n            props.dateInterval.endDate.isSame(selestedDates.endDate.format('YYYY-MM-DD'), \"day\" )\r\n        ) { }\r\n        else {\r\n            if (props.dateInterval.startDate !== null) {\r\n                props.getTaskList(\r\n                    props.dateInterval.startDate.format('YYYY-MM-DD'),\r\n                    props.dateInterval.endDate.format('YYYY-MM-DD')\r\n                )\r\n                setSelectedDates(props.dateInterval)\r\n            }\r\n        }\r\n    }, [props.dateInterval])\r\n\r\n    useEffect(() => {\r\n        if (props.errorMessage !== null) {\r\n            message.success(props.errorMessage)\r\n        }\r\n    }, [props.errorMessage])\r\n\r\n    if (props.taskList !== undefined) {\r\n        if (props.taskList !== null) {\r\n            return (\r\n                <>\r\n                    {getTimeScaleArrey(props.taskList)}\r\n                </>\r\n            )\r\n        } else {\r\n            return (\r\n                <Spin key=\"spin\" size=\"large\" />\r\n            )\r\n        }\r\n    } else {\r\n        return <div>Authorization required to get a list of tasks</div>\r\n    }\r\n    \r\n}\r\n\r\nexport default TimeScale\r\n\r\n\r\nconst getTimeScaleArrey = (taskList: Array<TaskType>): Array<React.ReactElement<string>> => {\r\n    let timeScaleArrey: Array<React.ReactElement<string>> = []\r\n    let tomorowTasks: Array<TaskType> = []\r\n\r\n    taskList.sort(sortTaskArrayByParams('time')).sort(sortTaskArrayByParams('date'))\r\n\r\n    const getHeadlineLabel = (task: TaskType) => {\r\n        return moment(task.date).format('DD MMMM')\r\n    }\r\n\r\n    let headlineDate: string | null = null\r\n\r\n    if (taskList !== null && taskList.length > 0) {\r\n        headlineDate = getHeadlineLabel(taskList[0])\r\n        timeScaleArrey.push(\r\n            <h3 key={headlineDate + 'title'}>{headlineDate}:</h3>\r\n        )\r\n    }\r\n\r\n    for (let index: number = 0; index < 24; index++) {\r\n        if (taskList.length > 0) {\r\n            timeScaleArrey.push(\r\n                <Divider key={index + 'to' + headlineDate} orientation=\"left\">\r\n                    {index <= 9 ? '0' : null}{index}:00\r\n                </Divider>\r\n            )\r\n        } else {\r\n            timeScaleArrey.push(<h3 key=\"noTasks\">no tasks</h3>)\r\n            break\r\n        }\r\n\r\n        if (taskList !== null) {\r\n            for (let i = 0; i < taskList.length; i++) {\r\n                const element: TaskType = taskList[i]\r\n                const timeVal = Number(element.time.split(':', 1))\r\n                const nextHour = index + 1\r\n                if (timeVal >= index && timeVal < nextHour) {\r\n                    if (getHeadlineLabel(element) === headlineDate) {\r\n                        timeScaleArrey.push(\r\n                            <Tooltip key={index + '-' + element.id} placement=\"topLeft\" title={element.descriptions}>\r\n                                <TaskItem element={element} />\r\n                            </Tooltip>\r\n                        )\r\n                    }\r\n                    else {\r\n                        tomorowTasks.push(element)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (tomorowTasks.length > 0) {\r\n        timeScaleArrey = timeScaleArrey.concat(getTimeScaleArrey(tomorowTasks))\r\n    }\r\n\r\n    return timeScaleArrey\r\n}","C:\\OpenServer\\domains\\front1\\src\\utils\\Formik\\CreateAntField.tsx",["222"],"import React from 'react'\r\nimport { isMobile } from \"react-device-detect\"\r\nimport { DatePicker, Form, Input, TimePicker, Select, Checkbox } from \"antd\"\r\nimport enUs from 'antd-mobile/lib/date-picker/locale/en_US';\r\nimport { List, InputItem, Checkbox as CheckboxMobile, TextareaItem, Picker, \r\n    DatePicker as DatePickerMobile, \r\n    LocaleProvider} from 'antd-mobile'\r\n\r\nconst FormItem = Form.Item\r\nconst Option: React.FC<any> = Select.Option\r\nconst CheckboxItem = CheckboxMobile.CheckboxItem\r\nconst { TextArea } = Input;\r\n\r\n// const layout = {\r\n//     labelCol: { span: 8 },\r\n//     wrapperCol: { span: 16 },\r\n//   };\r\n\r\n\r\nconst CreateAntField = (AntComponent: any) => (\r\n    {\r\n        field,\r\n        form,\r\n        hasFeedback,\r\n        label,\r\n        selectOptions,\r\n        submitCount,\r\n        type,\r\n        ...props\r\n    }: any\r\n) => {\r\n    // //console.log('field: ', field)\r\n    // //console.log('form: ', form)\r\n\r\n    const touched = form.touched[field.name];\r\n    const submitted = submitCount > 0;\r\n    const hasError = form.errors[field.name];\r\n    const submittedError = hasError && submitted;\r\n    const touchedError = hasError && touched;\r\n\r\n    // const onInputChange = ({ target: { value } }: any) => {\r\n    const onInputChange = (value: any) => {\r\n        // console.log(value)\r\n        // //console.log(field.name)\r\n        if (value.target) {\r\n            // console.log(value)\r\n            form.setFieldValue(field.name, value.target.value)\r\n        } else {\r\n            console.log(field.name, \": \", value)\r\n            form.setFieldValue(field.name, value)\r\n        }\r\n        \r\n    }\r\n    const onChange = (value: any) => {\r\n        console.log(value)\r\n        //console.log(field.name,'=',value)\r\n        if (value.target.type === 'checkbox') {\r\n            form.setFieldValue(field.name, value.target.checked)\r\n        } else {\r\n            form.setFieldValue(field.name, value)\r\n        }\r\n    }\r\n    const onBlur = () => form.setFieldTouched(field.name, true);\r\n    return (\r\n        <div >\r\n            <FormItem\r\n                label={!isMobile ? label : null}\r\n                hasFeedback={\r\n                    (hasFeedback && submitted) || (hasFeedback && touched) ? true : false\r\n                }\r\n                help={submittedError || touchedError ? hasError : false}\r\n                validateStatus={submittedError || touchedError ? \"error\" : \"success\"}\r\n            >\r\n                {isMobile ? \r\n                <List>\r\n                    <AntComponent\r\n                        onBlur={onBlur}\r\n                        onChange={type ? onInputChange : onChange}\r\n                        mode={ type==='time' ? \"time\": null}\r\n                        key={label}\r\n                        type={type}\r\n                        title={label}\r\n                        locale={enUs}\r\n                        autoHeight\r\n                    >\r\n                        {/* {label} */}\r\n                        <List.Item \r\n                            // arrow=\"horizontal\"\r\n                        >\r\n                            {label}\r\n                        </List.Item>\r\n                    </AntComponent>\r\n                </List>\r\n                : \r\n                <AntComponent\r\n                    {...field}\r\n                    {...props}\r\n                    // key={i.value}\r\n                    allowClear = {selectOptions ? \"true\": \"false\"}\r\n                    onBlur={onBlur}\r\n                    onChange={type ? onInputChange : onChange}\r\n                >\r\n                    {selectOptions &&\r\n                        selectOptions.map((item: any) => <Option title={item.name} value={item.value} key={item.name}>{item.name}</Option>)}\r\n                    \r\n                    \r\n                </AntComponent>\r\n                }\r\n                \r\n            </FormItem>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const AntSelect = !isMobile ? CreateAntField(Select) : CreateAntField(Picker)\r\nexport const AntDatePicker = CreateAntField(DatePicker)\r\n\r\n// export const AntInput = !isMobile ? CreateAntField(Input) : <List>CreateAntField(InputItem)</List>\r\nexport const AntInput = !isMobile ? CreateAntField(Input) : CreateAntField(InputItem)\r\n\r\nexport const AntInputPassword = !isMobile ? CreateAntField(Input.Password) : CreateAntField(InputItem)\r\n\r\nexport const AntTimePicker = !isMobile ? CreateAntField(TimePicker) : CreateAntField(DatePickerMobile)\r\nexport const AntCheckbox = !isMobile ? CreateAntField(Checkbox) : CreateAntField(CheckboxItem)\r\n// TextArea\r\nexport const AntTextArea = !isMobile ? CreateAntField(TextArea) : CreateAntField(TextareaItem)","C:\\OpenServer\\domains\\front1\\src\\Components\\Header\\MenuBrowser.tsx",["223","224","225","226","227","228"],"import React, {useState} from 'react'\r\nimport { Button, Menu } from 'antd';\r\nimport {Link, useHistory} from 'react-router-dom'\r\n// import { MailOutlined, AppstoreOutlined, SettingOutlined } from '@ant-design/icons';\r\nimport {LogoutOutlined} from '@ant-design/icons'\r\nimport {MenuBrowserPropsType} from './MenuBrowserConainer'\r\nimport { TaskListType } from '../../Types/types';\r\nimport { MenuDataType } from './Header';\r\n\r\nconst { SubMenu } = Menu;\r\n\r\nexport type OwnMenuBrowserPropsType = {\r\n    menuData: any,\r\n    // logout: any,\r\n    // appLocation: string | null\r\n}\r\n\r\nconst MenuBrowser: React.FC<MenuBrowserPropsType> = (props) => {\r\n    let history = useHistory();\r\n    const [state, setState] = useState<Array<string>>([])\r\n    const handleClick = (e: any | undefined) => {\r\n        // //console.log('click ', e);\r\n        // setState({ current: e.key });\r\n    }\r\n\r\n    const getMenuItem = (childs: any):any => {\r\n        // return <Menu.Item key=\"setting:1\">Option 1</Menu.Item>\r\n        const menuItems = childs.map( (item: any) => {\r\n            return (\r\n                <Menu.Item key={item.value}>\r\n                    <Link to={item.value}>{item.label}</Link>\r\n                </Menu.Item>\r\n            )\r\n        })\r\n        return menuItems\r\n    }\r\n\r\n    const getSubMenu = () => {\r\n        // //console.log(props.menuData)\r\n        const subMenu = props.menuData.map( (item: any) => {\r\n            // //console.log(item)\r\n            return (\r\n                <SubMenu \r\n                    key={item.value} \r\n                    // icon={<MailOutlined />}\r\n                    title={item.label}\r\n                >\r\n                    {getMenuItem(item.children)}\r\n                </SubMenu >\r\n            )\r\n        })\r\n        // subMenu.push(\r\n        //     <Menu.Item key=\"login\">\r\n        //         <Link to={props.appLocation +\"login\"} >Login</Link>\r\n        //     </Menu.Item>\r\n        // )\r\n        return subMenu\r\n    }\r\n\r\n    const onLogout = () => {\r\n        // onChange(['', ''])\r\n        history.replace(props.appLocation+'login')\r\n        props.logout()\r\n    }\r\n\r\n    console.log(props)\r\n\r\n    return (\r\n        <Menu \r\n            onClick={handleClick} \r\n            // selectedKeys={[current]} \r\n            mode=\"horizontal\"\r\n            theme=\"dark\"\r\n        >\r\n            {getSubMenu()}\r\n\r\n            {!props.isAuth ? \r\n                <Menu.Item key=\"login\">\r\n                    <Link to={props.appLocation +\"login\"} >Login</Link>\r\n                </Menu.Item>\r\n            :\r\n                <SubMenu \r\n                    key={props.user?.name} \r\n                    title={props.user?.name}\r\n                >\r\n                    <Menu.Item key=\"login\" onClick={onLogout}>\r\n                        {/* <Link to={props.appLocation +\"login\"} > */}\r\n                            Logout\r\n                        {/* </Link> */}\r\n                    </Menu.Item>\r\n                </SubMenu >\r\n                \r\n            }\r\n        </Menu>\r\n    )\r\n}\r\n\r\nexport default MenuBrowser","C:\\OpenServer\\domains\\front1\\src\\Components\\ToDo\\ToDoHeader\\ToDoHeader.tsx",[],"C:\\OpenServer\\domains\\front1\\src\\Components\\ToDo\\NewTaskForm\\NewTaskForm.tsx",["229"],"import React, { useState, useEffect } from 'react'\r\nimport moment from 'moment'\r\nimport { Form, Input, Button, TimePicker, DatePicker, Drawer, Spin, message } from 'antd'\r\nimport { NewTaskFormPropsType } from './NewTaskFormContainer'\r\nimport './../style.css'\r\n\r\nconst layout = {\r\n    labelCol: { span: 8 },\r\n    wrapperCol: { span: 16 },\r\n}\r\nconst tailLayout = {\r\n    wrapperCol: { offset: 8, span: 16 },\r\n}\r\n\r\nexport type NewTaskFormOwnPropsType = {\r\n    onClose: () => void\r\n    visible: boolean,\r\n    setVisible: (visible: boolean) => void\r\n}\r\n\r\nconst { TextArea } = Input\r\n\r\nconst timeFormat: string = 'HH:mm'\r\n\r\nconst NewTaskForm: React.FC<NewTaskFormPropsType> = (props) => {\r\n    const [form] = Form.useForm()\r\n    const [selectedDate, setSelectedDate] = useState<moment.Moment>(moment())\r\n    const [saveStatus, setSaveStatus] = useState<string>(props.taskSaveStatus)\r\n\r\n    useEffect(() => {\r\n        switch (props.taskSaveStatus) {\r\n            case 'inProgress':\r\n                setSaveStatus(props.taskSaveStatus)\r\n                break\r\n            case 'success':\r\n                message.success('The task was successfully created')\r\n                props.onClose()\r\n                setSaveStatus('')\r\n                onReset()\r\n                break\r\n            case 'error':\r\n                message.error('Error: ' + props.errorMessage)\r\n                setSaveStatus(props.taskSaveStatus)\r\n                break\r\n\r\n            default:\r\n                break\r\n        }\r\n    }, [props.taskSaveStatus])\r\n\r\n    type OnFinishType = {\r\n        taskName: string,\r\n        date: moment.Moment,\r\n        taskTime: moment.Moment,\r\n        description?: string\r\n    }\r\n    const onFinish = (values: OnFinishType) => {\r\n        const data = {\r\n            date: values.date.format('YYYY-MM-DD'),\r\n            taskTime: values.taskTime.format('HH:mm'),\r\n            taskName: values.taskName,\r\n            user_id: props.userId,\r\n            description: values.description\r\n        }\r\n\r\n        if (!moment(selectedDate.format('YYYY-MM-DD')).isBetween(\r\n            props.dateInterval.startDate.format('YYYY-MM-DD'),\r\n            props.dateInterval.endDate.format('YYYY-MM-DD'),\r\n            undefined, '[]'\r\n        )) {\r\n            props.createNewTask(data, false)\r\n        } else {\r\n            props.createNewTask(data, true)\r\n        }\r\n    }\r\n\r\n    const onReset = () => {\r\n        form.resetFields()\r\n    }\r\n\r\n    const onDateChange = (value: moment.Moment | null, dateString: string): void => {\r\n        if (value !== null) {\r\n            setSelectedDate(value)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Drawer\r\n            title={\"Create New Task for \" + selectedDate.format('DD MMM YYYY')}\r\n            placement=\"right\"\r\n            closable={true}\r\n            onClose={props.onClose}\r\n            visible={props.visible}\r\n            width=\"90%\"\r\n        >\r\n            <Form\r\n                {...layout}\r\n                form={form}\r\n                name=\"control-hooks\"\r\n                onFinish={onFinish}\r\n            >\r\n                <Form.Item\r\n                    label=\"Task name\"\r\n                    name=\"taskName\"\r\n                    rules={[{ required: true, message: 'Please input task name!' }]}\r\n                >\r\n                    <Input />\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    label=\"Task date\"\r\n                    name=\"date\"\r\n                    initialValue={selectedDate}\r\n                    rules={[{ required: true, message: 'Please input task date!' }]}\r\n                >\r\n                    <DatePicker\r\n                        onChange={onDateChange}\r\n                        format='DD-MM-YYYY'\r\n                        autoComplete=\"off\"\r\n                    />\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    label=\"Task time\"\r\n                    name=\"taskTime\"\r\n                    rules={[{ required: true, message: 'Please input task time!' }]}\r\n                >\r\n                    <TimePicker\r\n                        format={timeFormat}\r\n                    />\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    label=\"Description\"\r\n                    name=\"description\"\r\n                >\r\n                    <TextArea rows={2} />\r\n                </Form.Item>\r\n\r\n                <Form.Item {...tailLayout}>\r\n                    {saveStatus === 'inProgress' ?\r\n                        <Spin></Spin>\r\n                        :\r\n                        <>\r\n                            <Button type=\"primary\" htmlType=\"submit\">\r\n                                Create\r\n                            </Button>\r\n                            <Button className=\"ml-3\" type=\"primary\" onClick={onReset}>\r\n                                Reset\r\n                            </Button>\r\n                        </>\r\n                    }\r\n                </Form.Item>\r\n            </Form>\r\n\r\n        </Drawer>\r\n    )\r\n}\r\n\r\n\r\nexport default NewTaskForm","C:\\OpenServer\\domains\\front1\\src\\utils\\array-helpers.ts",[],"C:\\OpenServer\\domains\\front1\\src\\Components\\TimeScale\\TaskItem\\TaskItemContainer.tsx",[],"C:\\OpenServer\\domains\\front1\\src\\Components\\TimeScale\\TaskItem\\TaskItem.tsx",[],{"ruleId":"230","replacedBy":"231"},{"ruleId":"232","replacedBy":"233"},{"ruleId":"234","severity":1,"message":"235","line":29,"column":20,"nodeType":"236","messageId":"237","endLine":29,"endColumn":31},{"ruleId":"238","severity":1,"message":"239","line":48,"column":6,"nodeType":"240","endLine":48,"endColumn":25,"suggestions":"241"},{"ruleId":"234","severity":1,"message":"242","line":1,"column":19,"nodeType":"236","messageId":"237","endLine":1,"endColumn":34},{"ruleId":"234","severity":1,"message":"243","line":3,"column":6,"nodeType":"236","messageId":"237","endLine":3,"endColumn":24},{"ruleId":"234","severity":1,"message":"244","line":3,"column":10,"nodeType":"236","messageId":"237","endLine":3,"endColumn":14},{"ruleId":"234","severity":1,"message":"245","line":3,"column":16,"nodeType":"236","messageId":"237","endLine":3,"endColumn":25},{"ruleId":"234","severity":1,"message":"246","line":5,"column":8,"nodeType":"236","messageId":"237","endLine":5,"endColumn":14},{"ruleId":"234","severity":1,"message":"247","line":7,"column":10,"nodeType":"236","messageId":"237","endLine":7,"endColumn":19},{"ruleId":"234","severity":1,"message":"248","line":11,"column":7,"nodeType":"236","messageId":"237","endLine":11,"endColumn":19},{"ruleId":"234","severity":1,"message":"249","line":1,"column":10,"nodeType":"236","messageId":"237","endLine":1,"endColumn":25},{"ruleId":"234","severity":1,"message":"250","line":3,"column":5,"nodeType":"236","messageId":"237","endLine":3,"endColumn":16},{"ruleId":"234","severity":1,"message":"251","line":4,"column":5,"nodeType":"236","messageId":"237","endLine":4,"endColumn":15},{"ruleId":"234","severity":1,"message":"252","line":5,"column":5,"nodeType":"236","messageId":"237","endLine":5,"endColumn":14},{"ruleId":"234","severity":1,"message":"253","line":3,"column":24,"nodeType":"236","messageId":"237","endLine":3,"endColumn":30},{"ruleId":"234","severity":1,"message":"254","line":3,"column":32,"nodeType":"236","messageId":"237","endLine":3,"endColumn":36},{"ruleId":"238","severity":1,"message":"255","line":15,"column":8,"nodeType":"240","endLine":15,"endColumn":24,"suggestions":"256"},{"ruleId":"234","severity":1,"message":"257","line":41,"column":11,"nodeType":"236","messageId":"237","endLine":41,"endColumn":18},{"ruleId":"234","severity":1,"message":"258","line":6,"column":18,"nodeType":"236","messageId":"237","endLine":6,"endColumn":29},{"ruleId":"234","severity":1,"message":"246","line":7,"column":8,"nodeType":"236","messageId":"237","endLine":7,"endColumn":14},{"ruleId":"238","severity":1,"message":"255","line":16,"column":8,"nodeType":"240","endLine":16,"endColumn":24,"suggestions":"259"},{"ruleId":"234","severity":1,"message":"247","line":5,"column":10,"nodeType":"236","messageId":"237","endLine":5,"endColumn":19},{"ruleId":"234","severity":1,"message":"260","line":6,"column":10,"nodeType":"236","messageId":"237","endLine":6,"endColumn":18},{"ruleId":"234","severity":1,"message":"261","line":6,"column":20,"nodeType":"236","messageId":"237","endLine":6,"endColumn":25},{"ruleId":"238","severity":1,"message":"262","line":21,"column":8,"nodeType":"240","endLine":21,"endColumn":22,"suggestions":"263"},{"ruleId":"234","severity":1,"message":"264","line":7,"column":9,"nodeType":"236","messageId":"237","endLine":7,"endColumn":15},{"ruleId":"234","severity":1,"message":"265","line":22,"column":22,"nodeType":"236","messageId":"237","endLine":22,"endColumn":33},{"ruleId":"238","severity":1,"message":"266","line":27,"column":8,"nodeType":"240","endLine":27,"endColumn":28,"suggestions":"267"},{"ruleId":"234","severity":1,"message":"268","line":7,"column":5,"nodeType":"236","messageId":"237","endLine":7,"endColumn":19},{"ruleId":"234","severity":1,"message":"269","line":2,"column":10,"nodeType":"236","messageId":"237","endLine":2,"endColumn":16},{"ruleId":"234","severity":1,"message":"270","line":5,"column":9,"nodeType":"236","messageId":"237","endLine":5,"endColumn":23},{"ruleId":"234","severity":1,"message":"271","line":7,"column":10,"nodeType":"236","messageId":"237","endLine":7,"endColumn":22},{"ruleId":"234","severity":1,"message":"272","line":8,"column":10,"nodeType":"236","messageId":"237","endLine":8,"endColumn":22},{"ruleId":"234","severity":1,"message":"273","line":20,"column":12,"nodeType":"236","messageId":"237","endLine":20,"endColumn":17},{"ruleId":"234","severity":1,"message":"274","line":20,"column":19,"nodeType":"236","messageId":"237","endLine":20,"endColumn":27},{"ruleId":"238","severity":1,"message":"275","line":49,"column":8,"nodeType":"240","endLine":49,"endColumn":30,"suggestions":"276"},"no-native-reassign",["277"],"no-negated-in-lhs",["278"],"@typescript-eslint/no-unused-vars","'setLocation' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'location' and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["279"],"'APIResponseType' is defined but never used.","'MeResponseDataType' is defined but never used.","'List' is defined but never used.","'InputItem' is defined but never used.","'moment' is defined but never used.","'propTypes' is defined but never used.","'CheckboxItem' is assigned a value but never used.","'formatCountdown' is defined but never used.","'BrowserView' is defined but never used.","'MobileView' is defined but never used.","'isBrowser' is defined but never used.","'NavBar' is defined but never used.","'Icon' is defined but never used.","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["280"],"'sidebar' is assigned a value but never used.","'FormikProps' is defined but never used.",["281"],"'Redirect' is defined but never used.","'Route' is defined but never used.","React Hook useEffect has missing dependencies: 'history' and 'props.appLocation'. Either include them or remove the dependency array.",["282"],"'Option' is assigned a value but never used.","'setInitData' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'props', 'selestedDates.endDate', and 'selestedDates.startDate'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["283"],"'LocaleProvider' is defined but never used.","'Button' is defined but never used.","'LogoutOutlined' is defined but never used.","'TaskListType' is defined but never used.","'MenuDataType' is defined but never used.","'state' is assigned a value but never used.","'setState' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'onReset' and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["284"],"no-global-assign","no-unsafe-negation",{"desc":"285","fix":"286"},{"desc":"287","fix":"288"},{"desc":"287","fix":"289"},{"desc":"290","fix":"291"},{"desc":"292","fix":"293"},{"desc":"294","fix":"295"},"Update the dependencies array to be: [location, props, props.initialized]",{"range":"296","text":"297"},"Update the dependencies array to be: [props, props.taskList]",{"range":"298","text":"299"},{"range":"300","text":"299"},"Update the dependencies array to be: [history, props.appLocation, props.isAuth]",{"range":"301","text":"302"},"Update the dependencies array to be: [props, props.dateInterval, selestedDates.endDate, selestedDates.startDate]",{"range":"303","text":"304"},"Update the dependencies array to be: [onReset, props, props.taskSaveStatus]",{"range":"305","text":"306"},[1864,1883],"[location, props, props.initialized]",[532,548],"[props, props.taskList]",[569,585],[686,700],"[history, props.appLocation, props.isAuth]",[1258,1278],"[props, props.dateInterval, selestedDates.endDate, selestedDates.startDate]",[1499,1521],"[onReset, props, props.taskSaveStatus]"]
[{"C:\\OSPanel\\domains\\DeployProject\\src\\index.tsx":"1","C:\\OSPanel\\domains\\DeployProject\\src\\reportWebVitals.ts":"2","C:\\OSPanel\\domains\\DeployProject\\src\\App.tsx":"3","C:\\OSPanel\\domains\\DeployProject\\src\\redux\\store.ts":"4","C:\\OSPanel\\domains\\DeployProject\\src\\redux\\authReducer.ts":"5","C:\\OSPanel\\domains\\DeployProject\\src\\redux\\appReducer.ts":"6","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Header\\HeaderContainer.tsx":"7","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\ToDo\\ToDoContainer.tsx":"8","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Login\\LoginContainer.tsx":"9","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\TasksTree\\TasksTreeContainer.tsx":"10","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Register\\RegisterContainer.tsx":"11","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Users\\UsersContainer.tsx":"12","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Users\\CurrentUser\\CurrentUserContainer.tsx":"13","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Orders\\OrdersContainer.tsx":"14","C:\\OSPanel\\domains\\DeployProject\\src\\redux\\projectReducer.ts":"15","C:\\OSPanel\\domains\\DeployProject\\src\\redux\\TaskListReducer.ts":"16","C:\\OSPanel\\domains\\DeployProject\\src\\redux\\taskReducer.ts":"17","C:\\OSPanel\\domains\\DeployProject\\src\\redux\\usersReducer.ts":"18","C:\\OSPanel\\domains\\DeployProject\\src\\api\\authAPI.ts":"19","C:\\OSPanel\\domains\\DeployProject\\src\\redux\\usersSelector.ts":"20","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Header\\Header.tsx":"21","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\ToDo\\ToDoBrowser.tsx":"22","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\ToDo\\ToDoMobile.tsx":"23","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Login\\Login.tsx":"24","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\TasksTree\\TasksTreeBrowser.tsx":"25","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\TasksTree\\TasksTreeMobile.tsx":"26","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Register\\Register.tsx":"27","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Users\\Users.tsx":"28","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Users\\UsersMobile.tsx":"29","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Users\\CurrentUser\\CurrentUser.tsx":"30","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Users\\CurrentUser\\CurrentUserMobile.tsx":"31","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Orders\\Orders.tsx":"32","C:\\OSPanel\\domains\\DeployProject\\src\\api\\projectAPI.ts":"33","C:\\OSPanel\\domains\\DeployProject\\src\\api\\taskListAPI.ts":"34","C:\\OSPanel\\domains\\DeployProject\\src\\api\\usersAPI.ts":"35","C:\\OSPanel\\domains\\DeployProject\\src\\api\\taskApi.ts":"36","C:\\OSPanel\\domains\\DeployProject\\src\\api\\api.ts":"37","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\TasksTree\\TaskListActions\\TaskListActions.ts":"38","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Header\\MenuContainer.tsx":"39","C:\\OSPanel\\domains\\DeployProject\\src\\utils\\Date\\NewDeteByString.ts":"40","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Login\\LoginForm.tsx":"41","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Register\\RegisterForm.tsx":"42","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\ToDo\\Settings\\SettingsModalContainer.tsx":"43","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\ToDo\\ToDoForm\\ToDoForm.tsx":"44","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\ToDo\\ToDoHeader\\ToDoHeaderMobile.tsx":"45","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Users\\CurrentUser\\UserDataForm.tsx":"46","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\ToDo\\ToDoHeader\\ToDoHeader.tsx":"47","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\TasksTree\\TaskTreeMobileItem.tsx":"48","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\ToDo\\TimeScale\\TimeScale.tsx":"49","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\TasksTree\\TaskTreeForm\\NewTaskTreeForm.tsx":"50","C:\\OSPanel\\domains\\DeployProject\\src\\utils\\Formik\\ValidateFields.ts":"51","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\TasksTree\\TaskTreeBrowserItemContainer.tsx":"52","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\TasksTree\\RunTask.tsx\\RunTaskForm.tsx":"53","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Header\\MenuBrowser.tsx":"54","C:\\OSPanel\\domains\\DeployProject\\src\\utils\\Formik\\CreateAntField.tsx":"55","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\ToDo\\Settings\\SettingsModal.tsx":"56","C:\\OSPanel\\domains\\DeployProject\\src\\utils\\array-helpers.ts":"57","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\ToDo\\TimeScale\\TaskItem\\TaskItemContainer.tsx":"58","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\TasksTree\\TaskTreeForm\\Project\\ProjectForm.tsx":"59","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\TasksTree\\TaskTreeBrowserItem.tsx":"60","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\ToDo\\TimeScale\\TaskItem\\TaskItem.tsx":"61","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\TasksTree\\TaskTreeForm\\Project\\OldProject\\OldProjectFormContainer.tsx":"62","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\TasksTree\\TaskTreeForm\\Project\\NewProject\\NewProjectForm.tsx":"63","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\ToDo\\ToDoActions\\ToDoActionsRouter.tsx":"64","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\TasksTree\\TaskTreeForm\\Project\\OldProject\\OldProjectForm.tsx":"65","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\TasksTree\\TaskTreeForm\\Project\\BackendForm\\BackendFormContainer.tsx":"66","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\TasksTree\\TaskTreeForm\\Project\\BackendForm\\BackendForm.tsx":"67","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Header\\MenuMobile.tsx":"68","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\ToDo\\ToDoHeader\\ToDoHeaderContainer.tsx":"69","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\ToDo\\TimeScale\\TimeScaleContainer.tsx":"70","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Header\\MenuPopover.tsx":"71","C:\\OSPanel\\domains\\DeployProject\\src\\redux\\codeReducer.ts":"72","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\ProjectsContainer.tsx":"73","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\CurrentProject\\CurrentProjectContainer.tsx":"74","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\Projects.tsx":"75","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\CurrentProject\\CurrentProject.tsx":"76","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\BackendContainer.tsx":"77","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Backend.tsx":"78","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Instanses\\InstansesForm.tsx":"79","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Models\\ModelsContainer.tsx":"80","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Controllers\\ControllersContainer.tsx":"81","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Models\\Models.tsx":"82","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Controllers\\Controllers.tsx":"83","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Models\\FieldListContainer.tsx":"84","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Models\\ModelForm.tsx":"85","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Models\\FieldForm.tsx":"86","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Controllers\\ControllerForm.tsx":"87","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Development\\Code\\CodeModalContainer.tsx":"88","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Models\\FieldList.tsx":"89","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Development\\Code\\CodeModal.tsx":"90","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Development\\Code\\Model\\ModelCodeContainer.tsx":"91","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Development\\Code\\Model\\ModelCode.tsx":"92","C:\\OSPanel\\domains\\DeployProject\\src\\api\\ControllerMethodsAPI.ts":"93","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Controllers\\ControllerMethodsContainer.tsx":"94","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Controllers\\ControllerMethods.tsx":"95","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Controllers\\ControllerMethodsItem\\ControllerMethodsItem.tsx":"96","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Controllers\\ControllerMethodsForm\\ControllerMethodsForm.tsx":"97","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Controllers\\ControllerMethodsForm\\RequestItem.tsx":"98","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Controllers\\ControllerMethodsForm\\ControllerMethodsCode.tsx":"99","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Controllers\\ControllerMethodsForm\\ResponseItem.tsx":"100","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\English\\English.tsx":"101","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\CurrentProject\\Frontend\\Frontend.tsx":"102","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\CurrentProject\\Frontend\\Instanses\\InstansesFrontendForm.tsx":"103","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Controllers\\FullControllerMethodCode\\FullControllerMethodCode.tsx":"104","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Controllers\\FullControllerMethodCode\\FullControllerMethodCodeContainer.tsx":"105","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\English\\EnglishContainer.tsx":"106","C:\\OSPanel\\domains\\DeployProject\\src\\redux\\vocabularyReducer.ts":"107","C:\\OSPanel\\domains\\DeployProject\\src\\api\\vocabularyAPI.ts":"108","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\English\\Trening\\Trening.tsx":"109","C:\\ospanel\\domains\\DeployProject\\src\\index.tsx":"110","C:\\ospanel\\domains\\DeployProject\\src\\reportWebVitals.ts":"111","C:\\ospanel\\domains\\DeployProject\\src\\App.tsx":"112","C:\\ospanel\\domains\\DeployProject\\src\\redux\\store.ts":"113","C:\\ospanel\\domains\\DeployProject\\src\\redux\\authReducer.ts":"114","C:\\ospanel\\domains\\DeployProject\\src\\redux\\appReducer.ts":"115","C:\\ospanel\\domains\\DeployProject\\src\\Components\\ToDo\\ToDoContainer.tsx":"116","C:\\ospanel\\domains\\DeployProject\\src\\Components\\Login\\LoginContainer.tsx":"117","C:\\ospanel\\domains\\DeployProject\\src\\Components\\Header\\HeaderContainer.tsx":"118","C:\\ospanel\\domains\\DeployProject\\src\\Components\\Orders\\OrdersContainer.tsx":"119","C:\\ospanel\\domains\\DeployProject\\src\\Components\\TasksTree\\TasksTreeContainer.tsx":"120","C:\\ospanel\\domains\\DeployProject\\src\\Components\\Register\\RegisterContainer.tsx":"121","C:\\ospanel\\domains\\DeployProject\\src\\Components\\Users\\UsersContainer.tsx":"122","C:\\ospanel\\domains\\DeployProject\\src\\Components\\Users\\CurrentUser\\CurrentUserContainer.tsx":"123","C:\\ospanel\\domains\\DeployProject\\src\\Components\\English\\EnglishContainer.tsx":"124","C:\\ospanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\CurrentProject\\CurrentProjectContainer.tsx":"125","C:\\ospanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\ProjectsContainer.tsx":"126","C:\\ospanel\\domains\\DeployProject\\src\\redux\\codeReducer.ts":"127","C:\\ospanel\\domains\\DeployProject\\src\\redux\\taskReducer.ts":"128","C:\\ospanel\\domains\\DeployProject\\src\\redux\\TaskListReducer.ts":"129","C:\\ospanel\\domains\\DeployProject\\src\\redux\\usersReducer.ts":"130","C:\\ospanel\\domains\\DeployProject\\src\\redux\\vocabularyReducer.ts":"131","C:\\ospanel\\domains\\DeployProject\\src\\redux\\projectReducer.ts":"132","C:\\ospanel\\domains\\DeployProject\\src\\api\\authAPI.ts":"133","C:\\ospanel\\domains\\DeployProject\\src\\redux\\usersSelector.ts":"134","C:\\ospanel\\domains\\DeployProject\\src\\Components\\ToDo\\ToDoMobile.tsx":"135","C:\\ospanel\\domains\\DeployProject\\src\\Components\\Login\\Login.tsx":"136","C:\\ospanel\\domains\\DeployProject\\src\\Components\\ToDo\\ToDoBrowser.tsx":"137","C:\\ospanel\\domains\\DeployProject\\src\\Components\\Header\\Header.tsx":"138","C:\\ospanel\\domains\\DeployProject\\src\\Components\\Orders\\Orders.tsx":"139","C:\\ospanel\\domains\\DeployProject\\src\\Components\\TasksTree\\TasksTreeBrowser.tsx":"140","C:\\ospanel\\domains\\DeployProject\\src\\Components\\TasksTree\\TasksTreeMobile.tsx":"141","C:\\ospanel\\domains\\DeployProject\\src\\Components\\Register\\Register.tsx":"142","C:\\ospanel\\domains\\DeployProject\\src\\Components\\Users\\Users.tsx":"143","C:\\ospanel\\domains\\DeployProject\\src\\Components\\Users\\UsersMobile.tsx":"144","C:\\ospanel\\domains\\DeployProject\\src\\Components\\Users\\CurrentUser\\CurrentUser.tsx":"145","C:\\ospanel\\domains\\DeployProject\\src\\Components\\Users\\CurrentUser\\CurrentUserMobile.tsx":"146","C:\\ospanel\\domains\\DeployProject\\src\\Components\\English\\English.tsx":"147","C:\\ospanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\CurrentProject\\CurrentProject.tsx":"148","C:\\ospanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\Projects.tsx":"149","C:\\ospanel\\domains\\DeployProject\\src\\api\\taskListAPI.ts":"150","C:\\ospanel\\domains\\DeployProject\\src\\api\\usersAPI.ts":"151","C:\\ospanel\\domains\\DeployProject\\src\\api\\vocabularyAPI.ts":"152","C:\\ospanel\\domains\\DeployProject\\src\\api\\ControllerMethodsAPI.ts":"153","C:\\ospanel\\domains\\DeployProject\\src\\api\\api.ts":"154","C:\\ospanel\\domains\\DeployProject\\src\\api\\projectAPI.ts":"155","C:\\ospanel\\domains\\DeployProject\\src\\api\\taskApi.ts":"156","C:\\ospanel\\domains\\DeployProject\\src\\Components\\TasksTree\\TaskListActions\\TaskListActions.ts":"157","C:\\ospanel\\domains\\DeployProject\\src\\utils\\Date\\NewDeteByString.ts":"158","C:\\ospanel\\domains\\DeployProject\\src\\Components\\Login\\LoginForm.tsx":"159","C:\\ospanel\\domains\\DeployProject\\src\\Components\\Header\\MenuContainer.tsx":"160","C:\\ospanel\\domains\\DeployProject\\src\\Components\\Register\\RegisterForm.tsx":"161","C:\\ospanel\\domains\\DeployProject\\src\\Components\\ToDo\\Settings\\SettingsModalContainer.tsx":"162","C:\\ospanel\\domains\\DeployProject\\src\\Components\\ToDo\\ToDoForm\\ToDoForm.tsx":"163","C:\\ospanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\CurrentProject\\Frontend\\Frontend.tsx":"164","C:\\ospanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\BackendContainer.tsx":"165","C:\\ospanel\\domains\\DeployProject\\src\\Components\\English\\Trening\\TreningContainer.tsx":"166","C:\\ospanel\\domains\\DeployProject\\src\\Components\\ToDo\\ToDoHeader\\ToDoHeaderMobile.tsx":"167","C:\\ospanel\\domains\\DeployProject\\src\\Components\\Users\\CurrentUser\\UserDataForm.tsx":"168","C:\\ospanel\\domains\\DeployProject\\src\\Components\\ToDo\\ToDoHeader\\ToDoHeader.tsx":"169","C:\\ospanel\\domains\\DeployProject\\src\\Components\\ToDo\\TimeScale\\TimeScale.tsx":"170","C:\\ospanel\\domains\\DeployProject\\src\\Components\\TasksTree\\TaskTreeMobileItem.tsx":"171","C:\\ospanel\\domains\\DeployProject\\src\\utils\\Formik\\ValidateFields.ts":"172","C:\\ospanel\\domains\\DeployProject\\src\\Components\\Header\\MenuBrowser.tsx":"173","C:\\ospanel\\domains\\DeployProject\\src\\Components\\TasksTree\\TaskTreeForm\\NewTaskTreeForm.tsx":"174","C:\\ospanel\\domains\\DeployProject\\src\\utils\\Formik\\CreateAntField.tsx":"175","C:\\ospanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Backend.tsx":"176","C:\\ospanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\CurrentProject\\Frontend\\Instanses\\InstansesFrontendForm.tsx":"177","C:\\ospanel\\domains\\DeployProject\\src\\Components\\English\\Trening\\Trening.tsx":"178","C:\\ospanel\\domains\\DeployProject\\src\\utils\\array-helpers.ts":"179","C:\\ospanel\\domains\\DeployProject\\src\\Components\\ToDo\\TimeScale\\TaskItem\\TaskItemContainer.tsx":"180","C:\\ospanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Controllers\\ControllersContainer.tsx":"181","C:\\ospanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Instanses\\InstansesForm.tsx":"182","C:\\ospanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Models\\ModelsContainer.tsx":"183","C:\\ospanel\\domains\\DeployProject\\src\\Components\\ToDo\\TimeScale\\TaskItem\\TaskItem.tsx":"184","C:\\ospanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Models\\Models.tsx":"185","C:\\ospanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Controllers\\Controllers.tsx":"186","C:\\ospanel\\domains\\DeployProject\\src\\Components\\ToDo\\ToDoActions\\ToDoActionsRouter.tsx":"187","C:\\ospanel\\domains\\DeployProject\\src\\Components\\Development\\Code\\CodeModalContainer.tsx":"188","C:\\ospanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Controllers\\ControllerMethodsContainer.tsx":"189","C:\\ospanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Controllers\\ControllerForm.tsx":"190","C:\\ospanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Controllers\\FullControllerMethodCode\\FullControllerMethodCodeContainer.tsx":"191","C:\\ospanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Models\\FieldForm.tsx":"192","C:\\ospanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Models\\ModelForm.tsx":"193","C:\\ospanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Models\\FieldListContainer.tsx":"194","C:\\ospanel\\domains\\DeployProject\\src\\Components\\Development\\Code\\CodeModal.tsx":"195","C:\\ospanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Controllers\\ControllerMethods.tsx":"196","C:\\ospanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Controllers\\FullControllerMethodCode\\FullControllerMethodCode.tsx":"197","C:\\ospanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Models\\FieldList.tsx":"198","C:\\ospanel\\domains\\DeployProject\\src\\Components\\Development\\Code\\Model\\ModelCodeContainer.tsx":"199","C:\\ospanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Controllers\\ControllerMethodsForm\\ControllerMethodsForm.tsx":"200","C:\\ospanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Controllers\\ControllerMethodsForm\\ControllerMethodsCode.tsx":"201","C:\\ospanel\\domains\\DeployProject\\src\\Components\\Development\\Code\\Model\\ModelCode.tsx":"202","C:\\ospanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Controllers\\ControllerMethodsForm\\ResponseItem.tsx":"203","C:\\ospanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Controllers\\ControllerMethodsForm\\RequestItem.tsx":"204","C:\\ospanel\\domains\\DeployProject\\src\\Components\\TasksTree\\TaskTreeForm\\Project\\ProjectForm.tsx":"205","C:\\ospanel\\domains\\DeployProject\\src\\Components\\TasksTree\\TaskTreeForm\\Project\\OldProject\\OldProjectFormContainer.tsx":"206","C:\\ospanel\\domains\\DeployProject\\src\\Components\\TasksTree\\TaskTreeForm\\Project\\NewProject\\NewProjectForm.tsx":"207","C:\\ospanel\\domains\\DeployProject\\src\\Components\\TasksTree\\TaskTreeForm\\Project\\OldProject\\OldProjectForm.tsx":"208","C:\\ospanel\\domains\\DeployProject\\src\\Components\\TasksTree\\TaskTreeForm\\Project\\BackendForm\\BackendFormContainer.tsx":"209","C:\\ospanel\\domains\\DeployProject\\src\\Components\\TasksTree\\TaskTreeForm\\Project\\BackendForm\\BackendForm.tsx":"210","C:\\ospanel\\domains\\DeployProject\\src\\Components\\ToDo\\Settings\\SettingsModal.tsx":"211","C:\\ospanel\\domains\\DeployProject\\src\\Components\\Header\\MenuMobile.tsx":"212","C:\\ospanel\\domains\\DeployProject\\src\\Components\\TasksTree\\TaskTreeBrowserItemContainer.tsx":"213","C:\\ospanel\\domains\\DeployProject\\src\\Components\\ToDo\\TimeScale\\TimeScaleContainer.tsx":"214","C:\\ospanel\\domains\\DeployProject\\src\\Components\\TasksTree\\RunTask.tsx\\RunTaskForm.tsx":"215","C:\\ospanel\\domains\\DeployProject\\src\\Components\\ToDo\\ToDoHeader\\ToDoHeaderContainer.tsx":"216","C:\\ospanel\\domains\\DeployProject\\src\\Components\\Header\\MenuPopover.tsx":"217","C:\\ospanel\\domains\\DeployProject\\src\\Components\\TasksTree\\TaskTreeBrowserItem.tsx":"218"},{"size":406,"mtime":1614757619514,"results":"219","hashOfConfig":"220"},{"size":440,"mtime":1614757619522,"results":"221","hashOfConfig":"220"},{"size":5848,"mtime":1616513811240,"results":"222","hashOfConfig":"220"},{"size":1174,"mtime":1616514347969,"results":"223","hashOfConfig":"220"},{"size":5172,"mtime":1614757619517,"results":"224","hashOfConfig":"220"},{"size":1346,"mtime":1614757619517,"results":"225","hashOfConfig":"220"},{"size":713,"mtime":1616513710185,"results":"226","hashOfConfig":"220"},{"size":1377,"mtime":1614757619493,"results":"227","hashOfConfig":"220"},{"size":750,"mtime":1614757619466,"results":"228","hashOfConfig":"220"},{"size":3067,"mtime":1614757619484,"results":"229","hashOfConfig":"220"},{"size":843,"mtime":1614757619470,"results":"230","hashOfConfig":"220"},{"size":920,"mtime":1614757619506,"results":"231","hashOfConfig":"220"},{"size":1572,"mtime":1614757619503,"results":"232","hashOfConfig":"220"},{"size":586,"mtime":1614757619469,"results":"233","hashOfConfig":"220"},{"size":7922,"mtime":1615993884874,"results":"234","hashOfConfig":"220"},{"size":2921,"mtime":1614757619516,"results":"235","hashOfConfig":"220"},{"size":5502,"mtime":1616076394907,"results":"236","hashOfConfig":"220"},{"size":2713,"mtime":1614757619520,"results":"237","hashOfConfig":"220"},{"size":2394,"mtime":1614757619510,"results":"238","hashOfConfig":"220"},{"size":278,"mtime":1614757619521,"results":"239","hashOfConfig":"220"},{"size":3155,"mtime":1615963643815,"results":"240","hashOfConfig":"220"},{"size":4374,"mtime":1614757619492,"results":"241","hashOfConfig":"220"},{"size":16691,"mtime":1614757619498,"results":"242","hashOfConfig":"220"},{"size":1345,"mtime":1614757619466,"results":"243","hashOfConfig":"220"},{"size":9309,"mtime":1614757619483,"results":"244","hashOfConfig":"220"},{"size":10793,"mtime":1614757619485,"results":"245","hashOfConfig":"220"},{"size":1303,"mtime":1614757619470,"results":"246","hashOfConfig":"220"},{"size":2518,"mtime":1614757619505,"results":"247","hashOfConfig":"220"},{"size":1112,"mtime":1614757619507,"results":"248","hashOfConfig":"220"},{"size":8717,"mtime":1614757619502,"results":"249","hashOfConfig":"220"},{"size":8716,"mtime":1614757619503,"results":"250","hashOfConfig":"220"},{"size":248,"mtime":1614757619468,"results":"251","hashOfConfig":"220"},{"size":6491,"mtime":1616152240534,"results":"252","hashOfConfig":"220"},{"size":2054,"mtime":1614757619512,"results":"253","hashOfConfig":"220"},{"size":1113,"mtime":1616076871764,"results":"254","hashOfConfig":"220"},{"size":2069,"mtime":1614757619511,"results":"255","hashOfConfig":"220"},{"size":773,"mtime":1614757619509,"results":"256","hashOfConfig":"220"},{"size":512,"mtime":1614757619474,"results":"257","hashOfConfig":"220"},{"size":944,"mtime":1614757619463,"results":"258","hashOfConfig":"220"},{"size":939,"mtime":1614757619524,"results":"259","hashOfConfig":"220"},{"size":1508,"mtime":1616152240534,"results":"260","hashOfConfig":"220"},{"size":2784,"mtime":1616152240534,"results":"261","hashOfConfig":"220"},{"size":849,"mtime":1614757619487,"results":"262","hashOfConfig":"220"},{"size":2119,"mtime":1616152240534,"results":"263","hashOfConfig":"220"},{"size":3131,"mtime":1614757619497,"results":"264","hashOfConfig":"220"},{"size":4260,"mtime":1616152240534,"results":"265","hashOfConfig":"220"},{"size":4632,"mtime":1614757619495,"results":"266","hashOfConfig":"220"},{"size":5447,"mtime":1614757619482,"results":"267","hashOfConfig":"220"},{"size":4854,"mtime":1614757619490,"results":"268","hashOfConfig":"220"},{"size":3927,"mtime":1616152240534,"results":"269","hashOfConfig":"220"},{"size":1954,"mtime":1614757619526,"results":"270","hashOfConfig":"220"},{"size":1241,"mtime":1614757619475,"results":"271","hashOfConfig":"220"},{"size":1451,"mtime":1616152240534,"results":"272","hashOfConfig":"220"},{"size":2380,"mtime":1614757619462,"results":"273","hashOfConfig":"220"},{"size":8790,"mtime":1615286139682,"results":"274","hashOfConfig":"220"},{"size":4879,"mtime":1616152240534,"results":"275","hashOfConfig":"220"},{"size":318,"mtime":1614757619526,"results":"276","hashOfConfig":"220"},{"size":919,"mtime":1614757619489,"results":"277","hashOfConfig":"220"},{"size":1610,"mtime":1614757619481,"results":"278","hashOfConfig":"220"},{"size":10535,"mtime":1614757619474,"results":"279","hashOfConfig":"220"},{"size":4041,"mtime":1614757619488,"results":"280","hashOfConfig":"220"},{"size":1353,"mtime":1614757619480,"results":"281","hashOfConfig":"220"},{"size":5751,"mtime":1614757619479,"results":"282","hashOfConfig":"220"},{"size":3151,"mtime":1616152240534,"results":"283","hashOfConfig":"220"},{"size":1554,"mtime":1614757619480,"results":"284","hashOfConfig":"220"},{"size":1332,"mtime":1614757619478,"results":"285","hashOfConfig":"220"},{"size":2398,"mtime":1614757619477,"results":"286","hashOfConfig":"220"},{"size":4428,"mtime":1614757619464,"results":"287","hashOfConfig":"220"},{"size":1068,"mtime":1614757619496,"results":"288","hashOfConfig":"220"},{"size":1056,"mtime":1614757619490,"results":"289","hashOfConfig":"220"},{"size":1438,"mtime":1614757619465,"results":"290","hashOfConfig":"220"},{"size":1948,"mtime":1615821526817,"results":"291","hashOfConfig":"220"},{"size":784,"mtime":1615285732836,"results":"292","hashOfConfig":"220"},{"size":1660,"mtime":1615285703775,"results":"293","hashOfConfig":"220"},{"size":1253,"mtime":1614757619459,"results":"294","hashOfConfig":"220"},{"size":1834,"mtime":1615988882640,"results":"295","hashOfConfig":"220"},{"size":1445,"mtime":1615285692252,"results":"296","hashOfConfig":"220"},{"size":3427,"mtime":1616153868559,"results":"297","hashOfConfig":"220"},{"size":2493,"mtime":1616152240523,"results":"298","hashOfConfig":"220"},{"size":1239,"mtime":1616153859631,"results":"299","hashOfConfig":"220"},{"size":1289,"mtime":1615374755474,"results":"300","hashOfConfig":"220"},{"size":15440,"mtime":1616153818368,"results":"301","hashOfConfig":"220"},{"size":8407,"mtime":1616152240523,"results":"302","hashOfConfig":"220"},{"size":1031,"mtime":1615288399566,"results":"303","hashOfConfig":"220"},{"size":1642,"mtime":1616152240523,"results":"304","hashOfConfig":"220"},{"size":4713,"mtime":1616152240523,"results":"305","hashOfConfig":"220"},{"size":1761,"mtime":1616152240508,"results":"306","hashOfConfig":"220"},{"size":1039,"mtime":1615288259167,"results":"307","hashOfConfig":"220"},{"size":2756,"mtime":1615288333649,"results":"308","hashOfConfig":"220"},{"size":869,"mtime":1615292490630,"results":"309","hashOfConfig":"220"},{"size":1085,"mtime":1615289865687,"results":"310","hashOfConfig":"220"},{"size":6648,"mtime":1615639520381,"results":"311","hashOfConfig":"220"},{"size":2183,"mtime":1615910387317,"results":"312","hashOfConfig":"220"},{"size":1571,"mtime":1615968636275,"results":"313","hashOfConfig":"220"},{"size":6610,"mtime":1616069257737,"results":"314","hashOfConfig":"220"},{"size":378,"mtime":1615448179776,"results":"315","hashOfConfig":"220"},{"size":9999,"mtime":1616152240523,"results":"316","hashOfConfig":"220"},{"size":2940,"mtime":1615637295666,"results":"317","hashOfConfig":"220"},{"size":5420,"mtime":1616069006352,"results":"318","hashOfConfig":"220"},{"size":8797,"mtime":1615977853855,"results":"319","hashOfConfig":"220"},{"size":3980,"mtime":1616581596254,"results":"320","hashOfConfig":"220"},{"size":2117,"mtime":1616509697779,"results":"321","hashOfConfig":"220"},{"size":4571,"mtime":1616152401471,"results":"322","hashOfConfig":"220"},{"size":2031,"mtime":1616074932685,"results":"323","hashOfConfig":"220"},{"size":1629,"mtime":1616064964054,"results":"324","hashOfConfig":"220"},{"size":865,"mtime":1616573938569,"results":"325","hashOfConfig":"220"},{"size":1526,"mtime":1616574314966,"results":"326","hashOfConfig":"220"},{"size":904,"mtime":1616578283384,"results":"327","hashOfConfig":"220"},{"size":1812,"mtime":1616583608187,"results":"328","hashOfConfig":"220"},{"size":406,"mtime":1614757619514,"results":"329","hashOfConfig":"330"},{"size":440,"mtime":1614757619522,"results":"331","hashOfConfig":"330"},{"size":5848,"mtime":1616513811240,"results":"332","hashOfConfig":"330"},{"size":1174,"mtime":1616514347969,"results":"333","hashOfConfig":"330"},{"size":5172,"mtime":1614757619517,"results":"334","hashOfConfig":"330"},{"size":1346,"mtime":1614757619517,"results":"335","hashOfConfig":"330"},{"size":1377,"mtime":1614757619493,"results":"336","hashOfConfig":"330"},{"size":750,"mtime":1614757619466,"results":"337","hashOfConfig":"330"},{"size":713,"mtime":1616513710185,"results":"338","hashOfConfig":"330"},{"size":586,"mtime":1614757619469,"results":"339","hashOfConfig":"330"},{"size":3067,"mtime":1614757619484,"results":"340","hashOfConfig":"330"},{"size":843,"mtime":1614757619470,"results":"341","hashOfConfig":"330"},{"size":920,"mtime":1614757619506,"results":"342","hashOfConfig":"330"},{"size":1572,"mtime":1614757619503,"results":"343","hashOfConfig":"330"},{"size":967,"mtime":1616591422644,"results":"344","hashOfConfig":"330"},{"size":1660,"mtime":1615285703775,"results":"345","hashOfConfig":"330"},{"size":784,"mtime":1615285732836,"results":"346","hashOfConfig":"330"},{"size":1948,"mtime":1615821526817,"results":"347","hashOfConfig":"330"},{"size":5502,"mtime":1616076394907,"results":"348","hashOfConfig":"330"},{"size":2921,"mtime":1614757619516,"results":"349","hashOfConfig":"330"},{"size":2713,"mtime":1614757619520,"results":"350","hashOfConfig":"330"},{"size":1990,"mtime":1616593854650,"results":"351","hashOfConfig":"330"},{"size":7922,"mtime":1615993884874,"results":"352","hashOfConfig":"330"},{"size":2394,"mtime":1614757619510,"results":"353","hashOfConfig":"330"},{"size":278,"mtime":1614757619521,"results":"354","hashOfConfig":"330"},{"size":16691,"mtime":1614757619498,"results":"355","hashOfConfig":"330"},{"size":1345,"mtime":1614757619466,"results":"356","hashOfConfig":"330"},{"size":4374,"mtime":1614757619492,"results":"357","hashOfConfig":"330"},{"size":3155,"mtime":1615963643815,"results":"358","hashOfConfig":"330"},{"size":248,"mtime":1614757619468,"results":"359","hashOfConfig":"330"},{"size":9309,"mtime":1614757619483,"results":"360","hashOfConfig":"330"},{"size":10793,"mtime":1614757619485,"results":"361","hashOfConfig":"330"},{"size":1303,"mtime":1614757619470,"results":"362","hashOfConfig":"330"},{"size":2518,"mtime":1614757619505,"results":"363","hashOfConfig":"330"},{"size":1112,"mtime":1614757619507,"results":"364","hashOfConfig":"330"},{"size":8717,"mtime":1614757619502,"results":"365","hashOfConfig":"330"},{"size":8716,"mtime":1614757619503,"results":"366","hashOfConfig":"330"},{"size":4459,"mtime":1616592146653,"results":"367","hashOfConfig":"330"},{"size":1834,"mtime":1615988882640,"results":"368","hashOfConfig":"330"},{"size":1253,"mtime":1614757619459,"results":"369","hashOfConfig":"330"},{"size":2054,"mtime":1614757619512,"results":"370","hashOfConfig":"330"},{"size":1113,"mtime":1616076871764,"results":"371","hashOfConfig":"330"},{"size":1606,"mtime":1616593887891,"results":"372","hashOfConfig":"330"},{"size":2183,"mtime":1615910387317,"results":"373","hashOfConfig":"330"},{"size":773,"mtime":1614757619509,"results":"374","hashOfConfig":"330"},{"size":6491,"mtime":1616152240534,"results":"375","hashOfConfig":"330"},{"size":2069,"mtime":1614757619511,"results":"376","hashOfConfig":"330"},{"size":512,"mtime":1614757619474,"results":"377","hashOfConfig":"330"},{"size":939,"mtime":1614757619524,"results":"378","hashOfConfig":"330"},{"size":1508,"mtime":1616152240534,"results":"379","hashOfConfig":"330"},{"size":944,"mtime":1614757619463,"results":"380","hashOfConfig":"330"},{"size":2784,"mtime":1616152240534,"results":"381","hashOfConfig":"330"},{"size":849,"mtime":1614757619487,"results":"382","hashOfConfig":"330"},{"size":2119,"mtime":1616152240534,"results":"383","hashOfConfig":"330"},{"size":2117,"mtime":1616509697779,"results":"384","hashOfConfig":"330"},{"size":1445,"mtime":1615285692252,"results":"385","hashOfConfig":"330"},{"size":934,"mtime":1616593949491,"results":"386","hashOfConfig":"330"},{"size":3131,"mtime":1614757619497,"results":"387","hashOfConfig":"330"},{"size":4260,"mtime":1616152240534,"results":"388","hashOfConfig":"330"},{"size":4632,"mtime":1614757619495,"results":"389","hashOfConfig":"330"},{"size":4854,"mtime":1614757619490,"results":"390","hashOfConfig":"330"},{"size":5447,"mtime":1614757619482,"results":"391","hashOfConfig":"330"},{"size":1954,"mtime":1614757619526,"results":"392","hashOfConfig":"330"},{"size":2380,"mtime":1614757619462,"results":"393","hashOfConfig":"330"},{"size":3927,"mtime":1616152240534,"results":"394","hashOfConfig":"330"},{"size":8790,"mtime":1615286139682,"results":"395","hashOfConfig":"330"},{"size":3427,"mtime":1616153868559,"results":"396","hashOfConfig":"330"},{"size":4571,"mtime":1616152401471,"results":"397","hashOfConfig":"330"},{"size":3302,"mtime":1616595819881,"results":"398","hashOfConfig":"330"},{"size":318,"mtime":1614757619526,"results":"399","hashOfConfig":"330"},{"size":919,"mtime":1614757619489,"results":"400","hashOfConfig":"330"},{"size":1289,"mtime":1615374755474,"results":"401","hashOfConfig":"330"},{"size":2493,"mtime":1616152240523,"results":"402","hashOfConfig":"330"},{"size":1239,"mtime":1616153859631,"results":"403","hashOfConfig":"330"},{"size":4041,"mtime":1614757619488,"results":"404","hashOfConfig":"330"},{"size":15440,"mtime":1616153818368,"results":"405","hashOfConfig":"330"},{"size":8407,"mtime":1616152240523,"results":"406","hashOfConfig":"330"},{"size":3151,"mtime":1616152240534,"results":"407","hashOfConfig":"330"},{"size":1039,"mtime":1615288259167,"results":"408","hashOfConfig":"330"},{"size":1571,"mtime":1615968636275,"results":"409","hashOfConfig":"330"},{"size":1761,"mtime":1616152240508,"results":"410","hashOfConfig":"330"},{"size":1629,"mtime":1616064964054,"results":"411","hashOfConfig":"330"},{"size":4713,"mtime":1616152240523,"results":"412","hashOfConfig":"330"},{"size":1642,"mtime":1616152240523,"results":"413","hashOfConfig":"330"},{"size":1031,"mtime":1615288399566,"results":"414","hashOfConfig":"330"},{"size":869,"mtime":1615292490630,"results":"415","hashOfConfig":"330"},{"size":6610,"mtime":1616069257737,"results":"416","hashOfConfig":"330"},{"size":2031,"mtime":1616074932685,"results":"417","hashOfConfig":"330"},{"size":2756,"mtime":1615288333649,"results":"418","hashOfConfig":"330"},{"size":1085,"mtime":1615289865687,"results":"419","hashOfConfig":"330"},{"size":9999,"mtime":1616152240523,"results":"420","hashOfConfig":"330"},{"size":5420,"mtime":1616069006352,"results":"421","hashOfConfig":"330"},{"size":6648,"mtime":1615639520381,"results":"422","hashOfConfig":"330"},{"size":8797,"mtime":1615977853855,"results":"423","hashOfConfig":"330"},{"size":2940,"mtime":1615637295666,"results":"424","hashOfConfig":"330"},{"size":1610,"mtime":1614757619481,"results":"425","hashOfConfig":"330"},{"size":1353,"mtime":1614757619480,"results":"426","hashOfConfig":"330"},{"size":5751,"mtime":1614757619479,"results":"427","hashOfConfig":"330"},{"size":1554,"mtime":1614757619480,"results":"428","hashOfConfig":"330"},{"size":1332,"mtime":1614757619478,"results":"429","hashOfConfig":"330"},{"size":2398,"mtime":1614757619477,"results":"430","hashOfConfig":"330"},{"size":4879,"mtime":1616152240534,"results":"431","hashOfConfig":"330"},{"size":4428,"mtime":1614757619464,"results":"432","hashOfConfig":"330"},{"size":1241,"mtime":1614757619475,"results":"433","hashOfConfig":"330"},{"size":1056,"mtime":1614757619490,"results":"434","hashOfConfig":"330"},{"size":1451,"mtime":1616152240534,"results":"435","hashOfConfig":"330"},{"size":1068,"mtime":1614757619496,"results":"436","hashOfConfig":"330"},{"size":1438,"mtime":1614757619465,"results":"437","hashOfConfig":"330"},{"size":10535,"mtime":1614757619474,"results":"438","hashOfConfig":"330"},{"filePath":"439","messages":"440","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"441"},"1pat49e",{"filePath":"442","messages":"443","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"441"},{"filePath":"444","messages":"445","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"441"},{"filePath":"446","messages":"447","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"441"},{"filePath":"448","messages":"449","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"441"},{"filePath":"450","messages":"451","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"441"},{"filePath":"452","messages":"453","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"441"},{"filePath":"454","messages":"455","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"441"},{"filePath":"456","messages":"457","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"441"},{"filePath":"458","messages":"459","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"441"},{"filePath":"460","messages":"461","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"441"},{"filePath":"462","messages":"463","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"441"},{"filePath":"464","messages":"465","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"441"},{"filePath":"466","messages":"467","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"441"},{"filePath":"468","messages":"469","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"441"},{"filePath":"470","messages":"471","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"441"},{"filePath":"472","messages":"473","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"441"},{"filePath":"474","messages":"475","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"441"},{"filePath":"476","messages":"477","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"441"},{"filePath":"478","messages":"479","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"441"},{"filePath":"480","messages":"481","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"441"},{"filePath":"482","messages":"483","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"441"},{"filePath":"484","messages":"485","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"441"},{"filePath":"486","messages":"487","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"441"},{"filePath":"488","messages":"489","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"441"},{"filePath":"490","messages":"491","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"441"},{"filePath":"492","messages":"493","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"441"},{"filePath":"494","messages":"495","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"441"},{"filePath":"496","messages":"497","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"441"},{"filePath":"498","messages":"499","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"441"},{"filePath":"500","messages":"501","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"441"},{"filePath":"502","messages":"503","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"441"},{"filePath":"504","messages":"505","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"441"},{"filePath":"506","messages":"507","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"441"},{"filePath":"508","messages":"509","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"441"},{"filePath":"510","messages":"511","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"441"},{"filePath":"512","messages":"513","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"441"},{"filePath":"514","messages":"515","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"441"},{"filePath":"516","messages":"517","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"441"},{"filePath":"518","messages":"519","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"441"},{"filePath":"520","messages":"521","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"441"},{"filePath":"522","messages":"523","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"441"},{"filePath":"524","messages":"525","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"441"},{"filePath":"526","messages":"527","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"441"},{"filePath":"528","messages":"529","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"441"},{"filePath":"530","messages":"531","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"441"},{"filePath":"532","messages":"533","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"441"},{"filePath":"534","messages":"535","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"441"},{"filePath":"536","messages":"537","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"441"},{"filePath":"538","messages":"539","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"441"},{"filePath":"540","messages":"541","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"441"},{"filePath":"542","messages":"543","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"441"},{"filePath":"544","messages":"545","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"441"},{"filePath":"546","messages":"547","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"441"},{"filePath":"548","messages":"549","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"441"},{"filePath":"550","messages":"551","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"441"},{"filePath":"552","messages":"553","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"441"},{"filePath":"554","messages":"555","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"441"},{"filePath":"556","messages":"557","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"441"},{"filePath":"558","messages":"559","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"441"},{"filePath":"560","messages":"561","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"441"},{"filePath":"562","messages":"563","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"441"},{"filePath":"564","messages":"565","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"566","usedDeprecatedRules":"441"},{"filePath":"567","messages":"568","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"441"},{"filePath":"569","messages":"570","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"441"},{"filePath":"571","messages":"572","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"441"},{"filePath":"573","messages":"574","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"575","usedDeprecatedRules":"441"},{"filePath":"576","messages":"577","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"441"},{"filePath":"578","messages":"579","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"441"},{"filePath":"580","messages":"581","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"441"},{"filePath":"582","messages":"583","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"441"},{"filePath":"584","messages":"585","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"441"},{"filePath":"586","messages":"587","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"441"},{"filePath":"588","messages":"589","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"590","usedDeprecatedRules":"441"},{"filePath":"591","messages":"592","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"593","usedDeprecatedRules":"441"},{"filePath":"594","messages":"595","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"596","usedDeprecatedRules":"441"},{"filePath":"597","messages":"598","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"599","usedDeprecatedRules":"441"},{"filePath":"600","messages":"601","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"602","usedDeprecatedRules":"441"},{"filePath":"603","messages":"604","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"441"},{"filePath":"605","messages":"606","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"441"},{"filePath":"607","messages":"608","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"441"},{"filePath":"609","messages":"610","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"611","usedDeprecatedRules":"441"},{"filePath":"612","messages":"613","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"614","usedDeprecatedRules":"441"},{"filePath":"615","messages":"616","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"441"},{"filePath":"617","messages":"618","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"619","usedDeprecatedRules":"441"},{"filePath":"620","messages":"621","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"441"},{"filePath":"622","messages":"623","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"624","usedDeprecatedRules":"441"},{"filePath":"625","messages":"626","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"441"},{"filePath":"627","messages":"628","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"441"},{"filePath":"629","messages":"630","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"631","usedDeprecatedRules":"441"},{"filePath":"632","messages":"633","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"441"},{"filePath":"634","messages":"635","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"636","usedDeprecatedRules":"441"},{"filePath":"637","messages":"638","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"441"},{"filePath":"639","messages":"640","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"641","usedDeprecatedRules":"441"},{"filePath":"642","messages":"643","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"644","usedDeprecatedRules":"441"},{"filePath":"645","messages":"646","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"647","messages":"648","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"649","usedDeprecatedRules":"441"},{"filePath":"650","messages":"651","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"652","usedDeprecatedRules":"441"},{"filePath":"653","messages":"654","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"655","usedDeprecatedRules":"441"},{"filePath":"656","messages":"657","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":2,"source":"658","usedDeprecatedRules":"659"},{"filePath":"660","messages":"661","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"662","usedDeprecatedRules":"441"},{"filePath":"663","messages":"664","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"665","usedDeprecatedRules":"441"},{"filePath":"666","messages":"667","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"668","usedDeprecatedRules":"441"},{"filePath":"669","messages":"670","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"671","usedDeprecatedRules":"441"},{"filePath":"672","messages":"673","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"674","usedDeprecatedRules":"441"},{"filePath":"675","messages":"676","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"677","usedDeprecatedRules":"441"},{"filePath":"678","messages":"679","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"680","usedDeprecatedRules":"441"},{"filePath":"681","messages":"682","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"683","usedDeprecatedRules":"441"},{"filePath":"684","messages":"685","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"441"},{"filePath":"686","messages":"687","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"op53id",{"filePath":"688","messages":"689","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"690","messages":"691","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"692","messages":"693","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"694","messages":"695","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"696","messages":"697","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"698","messages":"699","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"700","messages":"701","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"702","messages":"703","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"704","messages":"705","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"706","messages":"707","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"708","messages":"709","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"710","messages":"711","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"712","messages":"713","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"714","messages":"715","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"716","messages":"717","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"718","messages":"719","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"720","messages":"721","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"722","messages":"723","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"724","messages":"725","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"726","messages":"727","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"728","messages":"729","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"730","messages":"731","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"732","messages":"733","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"734","messages":"735","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"736","messages":"737","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"738","messages":"739","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"740","messages":"741","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"742","messages":"743","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"744","messages":"745","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"746","messages":"747","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"748","messages":"749","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"750","messages":"751","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"752","messages":"753","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"754","messages":"755","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"756","messages":"757","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"758","messages":"759","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"760","messages":"761","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"762","usedDeprecatedRules":"763"},{"filePath":"764","messages":"765","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"766","messages":"767","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"768","messages":"769","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"770","messages":"771","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"772","messages":"773","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"774","messages":"775","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"776","messages":"777","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"778","messages":"779","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"780","messages":"781","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"782","messages":"783","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"784","messages":"785","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"786","messages":"787","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"788","messages":"789","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"790","messages":"791","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"792","messages":"793","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"794","messages":"795","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"796","messages":"797","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"798","messages":"799","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"800","messages":"801","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"802","messages":"803","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"804","messages":"805","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"806","messages":"807","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"808","messages":"809","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"810","messages":"811","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"812","messages":"813","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"814","messages":"815","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"816","messages":"817","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"818","messages":"819","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"820","messages":"821","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"822","messages":"823","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"824","messages":"825","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"826","messages":"827","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"828","messages":"829","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"830","messages":"831","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"832","messages":"833","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"834","messages":"835","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"836","messages":"837","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"838","messages":"839","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"840","messages":"841","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"842","messages":"843","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"844","messages":"845","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"846","messages":"847","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"848","messages":"849","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"850","messages":"851","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"852","messages":"853","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"854","messages":"855","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"856","messages":"857","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"858","messages":"859","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"860","messages":"861","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"862","messages":"863","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"864","messages":"865","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"866","messages":"867","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"868","messages":"869","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"870","messages":"871","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"872","messages":"873","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"874","messages":"875","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":2,"source":null},{"filePath":"876","messages":"877","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"878","messages":"879","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"880","messages":"881","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"882","messages":"883","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"884","messages":"885","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"886","messages":"887","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"888","messages":"889","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"890","messages":"891","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"892","messages":"893","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"894","messages":"895","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"896","messages":"897","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"898","messages":"899","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"900","messages":"901","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"902","messages":"903","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"904","messages":"905","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\OSPanel\\domains\\DeployProject\\src\\index.tsx",[],["906","907"],"C:\\OSPanel\\domains\\DeployProject\\src\\reportWebVitals.ts",[],"C:\\OSPanel\\domains\\DeployProject\\src\\App.tsx",[],"C:\\OSPanel\\domains\\DeployProject\\src\\redux\\store.ts",[],"C:\\OSPanel\\domains\\DeployProject\\src\\redux\\authReducer.ts",[],"C:\\OSPanel\\domains\\DeployProject\\src\\redux\\appReducer.ts",[],"C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Header\\HeaderContainer.tsx",[],"C:\\OSPanel\\domains\\DeployProject\\src\\Components\\ToDo\\ToDoContainer.tsx",[],"C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Login\\LoginContainer.tsx",[],"C:\\OSPanel\\domains\\DeployProject\\src\\Components\\TasksTree\\TasksTreeContainer.tsx",[],"C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Register\\RegisterContainer.tsx",[],"C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Users\\UsersContainer.tsx",[],"C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Users\\CurrentUser\\CurrentUserContainer.tsx",[],"C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Orders\\OrdersContainer.tsx",[],"C:\\OSPanel\\domains\\DeployProject\\src\\redux\\projectReducer.ts",[],"C:\\OSPanel\\domains\\DeployProject\\src\\redux\\TaskListReducer.ts",[],"C:\\OSPanel\\domains\\DeployProject\\src\\redux\\taskReducer.ts",[],"C:\\OSPanel\\domains\\DeployProject\\src\\redux\\usersReducer.ts",[],"C:\\OSPanel\\domains\\DeployProject\\src\\api\\authAPI.ts",[],"C:\\OSPanel\\domains\\DeployProject\\src\\redux\\usersSelector.ts",[],"C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Header\\Header.tsx",[],"C:\\OSPanel\\domains\\DeployProject\\src\\Components\\ToDo\\ToDoBrowser.tsx",[],"C:\\OSPanel\\domains\\DeployProject\\src\\Components\\ToDo\\ToDoMobile.tsx",[],"C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Login\\Login.tsx",[],"C:\\OSPanel\\domains\\DeployProject\\src\\Components\\TasksTree\\TasksTreeBrowser.tsx",[],"C:\\OSPanel\\domains\\DeployProject\\src\\Components\\TasksTree\\TasksTreeMobile.tsx",[],"C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Register\\Register.tsx",[],"C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Users\\Users.tsx",[],"C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Users\\UsersMobile.tsx",[],"C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Users\\CurrentUser\\CurrentUser.tsx",[],"C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Users\\CurrentUser\\CurrentUserMobile.tsx",[],"C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Orders\\Orders.tsx",[],"C:\\OSPanel\\domains\\DeployProject\\src\\api\\projectAPI.ts",[],"C:\\OSPanel\\domains\\DeployProject\\src\\api\\taskListAPI.ts",[],"C:\\OSPanel\\domains\\DeployProject\\src\\api\\usersAPI.ts",[],"C:\\OSPanel\\domains\\DeployProject\\src\\api\\taskApi.ts",[],"C:\\OSPanel\\domains\\DeployProject\\src\\api\\api.ts",[],"C:\\OSPanel\\domains\\DeployProject\\src\\Components\\TasksTree\\TaskListActions\\TaskListActions.ts",[],"C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Header\\MenuContainer.tsx",[],"C:\\OSPanel\\domains\\DeployProject\\src\\utils\\Date\\NewDeteByString.ts",[],"C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Login\\LoginForm.tsx",[],"C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Register\\RegisterForm.tsx",[],"C:\\OSPanel\\domains\\DeployProject\\src\\Components\\ToDo\\Settings\\SettingsModalContainer.tsx",[],"C:\\OSPanel\\domains\\DeployProject\\src\\Components\\ToDo\\ToDoForm\\ToDoForm.tsx",[],"C:\\OSPanel\\domains\\DeployProject\\src\\Components\\ToDo\\ToDoHeader\\ToDoHeaderMobile.tsx",[],"C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Users\\CurrentUser\\UserDataForm.tsx",[],"C:\\OSPanel\\domains\\DeployProject\\src\\Components\\ToDo\\ToDoHeader\\ToDoHeader.tsx",[],"C:\\OSPanel\\domains\\DeployProject\\src\\Components\\TasksTree\\TaskTreeMobileItem.tsx",[],"C:\\OSPanel\\domains\\DeployProject\\src\\Components\\ToDo\\TimeScale\\TimeScale.tsx",[],"C:\\OSPanel\\domains\\DeployProject\\src\\Components\\TasksTree\\TaskTreeForm\\NewTaskTreeForm.tsx",[],"C:\\OSPanel\\domains\\DeployProject\\src\\utils\\Formik\\ValidateFields.ts",[],"C:\\OSPanel\\domains\\DeployProject\\src\\Components\\TasksTree\\TaskTreeBrowserItemContainer.tsx",[],"C:\\OSPanel\\domains\\DeployProject\\src\\Components\\TasksTree\\RunTask.tsx\\RunTaskForm.tsx",[],"C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Header\\MenuBrowser.tsx",[],"C:\\OSPanel\\domains\\DeployProject\\src\\utils\\Formik\\CreateAntField.tsx",[],"C:\\OSPanel\\domains\\DeployProject\\src\\Components\\ToDo\\Settings\\SettingsModal.tsx",[],"C:\\OSPanel\\domains\\DeployProject\\src\\utils\\array-helpers.ts",[],"C:\\OSPanel\\domains\\DeployProject\\src\\Components\\ToDo\\TimeScale\\TaskItem\\TaskItemContainer.tsx",[],"C:\\OSPanel\\domains\\DeployProject\\src\\Components\\TasksTree\\TaskTreeForm\\Project\\ProjectForm.tsx",[],"C:\\OSPanel\\domains\\DeployProject\\src\\Components\\TasksTree\\TaskTreeBrowserItem.tsx",[],"C:\\OSPanel\\domains\\DeployProject\\src\\Components\\ToDo\\TimeScale\\TaskItem\\TaskItem.tsx",[],"C:\\OSPanel\\domains\\DeployProject\\src\\Components\\TasksTree\\TaskTreeForm\\Project\\OldProject\\OldProjectFormContainer.tsx",[],"C:\\OSPanel\\domains\\DeployProject\\src\\Components\\TasksTree\\TaskTreeForm\\Project\\NewProject\\NewProjectForm.tsx",["908","909","910"],"import { Tooltip } from 'antd'\r\nimport { Field } from 'formik'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { AntCheckbox, AntInput, AntSelect } from '../../../../../utils/Formik/CreateAntField'\r\nimport { validateRequired } from '../../../../../utils/Formik/ValidateFields'\r\nimport BackendForm from '../BackendForm/BackendFormContainer'\r\n\r\ntype NewProjectFormPropsType = {\r\n    submitCount: (val: any)=>void\r\n}\r\n\r\nconst NewProjectForm: React.FC<NewProjectFormPropsType> = (props) => {\r\n    const [frontend, setFrontend] = useState(false)\r\n    const [backend, setBackend] = useState(false)\r\n    const [isBackendNew, setIsBackendNew] = useState(false)\r\n\r\n    const submitFrontEnd = (val: any) => {\r\n        setFrontend(val.target.checked)\r\n    }\r\n\r\n    const submitBackEnd = (val: any) => {\r\n        setBackend(val.target.checked)\r\n    }\r\n\r\n    const onSelectBackEndType = (val:any) => {\r\n\r\n    }\r\n\r\n    const submitBackendIsNew = (val: any) => {\r\n        setIsBackendNew(val.target.checked)\r\n    }\r\n\r\n    const backendTypeOptions = [\r\n        {\r\n            name: 'Laravel',\r\n            value: 'laravel'\r\n        },\r\n        {\r\n            name: 'Other',\r\n            value: 'other'\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <>\r\n            <Field\r\n                component={AntInput}\r\n                name=\"name\"\r\n                type=\"text\"\r\n                label=\"Project Name\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n            <Field\r\n                component={AntCheckbox}\r\n                name=\"isHasBackEnd\"\r\n                type=\"checkbox\"\r\n                label=\"BackEnd\"\r\n                submitCount={props.submitCount}\r\n                onClick={submitBackEnd}\r\n                // onSelect={submitBackEnd}\r\n            />\r\n\r\n\r\n\r\n\r\n            {backend ? \r\n            <>\r\n                <h5>backend initial options:</h5><br />\r\n\r\n                <Field\r\n                    component={AntCheckbox}\r\n                    type=\"checkbox\"\r\n                    name=\"isBackendNew\"\r\n                    label=\"New Backend\"\r\n                    submitCount={props.submitCount}\r\n                    onClick={submitBackendIsNew}\r\n                />\r\n\r\n                <BackendForm \r\n                    isBackendNew={isBackendNew} \r\n                    onSelectBackEndType={onSelectBackEndType} \r\n                    submitCount={props.submitCount}\r\n                    />\r\n\r\n                {/* {isBackendNew ?\r\n                    <Field\r\n                        component={AntSelect}\r\n                        selectOptions={backendTypeOptions}\r\n                        name=\"backendType\"\r\n                        type=\"select\"\r\n                        label=\"Backend type\"\r\n                        onSelect = {onSelectBackEndType}\r\n                        submitCount={props.submitCount}\r\n                    />\r\n                :\r\n                    <Field\r\n                        component={AntSelect}\r\n                        selectOptions={backendTypeOptions}\r\n                        name=\"backend_project\"\r\n                        type=\"select\"\r\n                        label=\"Choise backend project\"\r\n                        onSelect = {onSelectBackEndType}\r\n                        submitCount={props.submitCount}\r\n                    />\r\n                } */}\r\n\r\n                \r\n                </>\r\n            :null}\r\n\r\n\r\n\r\n\r\n\r\n            <Field\r\n                component={AntCheckbox}\r\n                name=\"isHasFrontEnd\"\r\n                type=\"checkbox\"\r\n                label=\"FrontEnd\"\r\n                submitCount={props.submitCount}\r\n                onClick={submitFrontEnd}\r\n                onSelect={submitFrontEnd}\r\n            />\r\n            {frontend ? <>\r\n                <h5>Frontend initial options:</h5><br />\r\n                <Field\r\n                    component={AntCheckbox}\r\n                    name=\"isCRA\"\r\n                    label=\"Create React App\"\r\n                    submitCount={props.submitCount}\r\n                />\r\n                <Field\r\n                    component={AntCheckbox}\r\n                    name=\"isTS\"\r\n                    label=\"Type Script\"\r\n                    submitCount={props.submitCount}\r\n                />\r\n                <Field\r\n                    component={AntCheckbox}\r\n                    name=\"isMenu\"\r\n                    label=\"Menu\"\r\n                    submitCount={props.submitCount}\r\n                />\r\n                <Field\r\n                    component={AntCheckbox}\r\n                    name=\"isRouter\"\r\n                    label=\"Router\"\r\n                    submitCount={props.submitCount}\r\n                />\r\n                <Field\r\n                    component={AntCheckbox}\r\n                    name=\"isLogin\"\r\n                    label=\"Login/ Register\"\r\n                    submitCount={props.submitCount}\r\n                />\r\n                <Field\r\n                    component={AntCheckbox}\r\n                    name=\"isBAM\"\r\n                    label={\r\n                        <Tooltip title={<><p>Использование методологии БЭМ дваомтвщкмтущмшсвкумзкумз куцмзкцмозущкмзщк\r\n                            зщсоуцшр сщрумщкуцмрщкму цршуцщмшрцщкушмщмкшцщш шомзущцкомзкумо зщумозщ3уом</p><p>Второй абзац</p></>}>\r\n                            <span>БЭМ</span>\r\n                        </Tooltip>\r\n                }\r\n                    submitCount={props.submitCount}\r\n                />\r\n\r\n            </> : null}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default NewProjectForm","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\ToDo\\ToDoActions\\ToDoActionsRouter.tsx",[],"C:\\OSPanel\\domains\\DeployProject\\src\\Components\\TasksTree\\TaskTreeForm\\Project\\OldProject\\OldProjectForm.tsx",[],"C:\\OSPanel\\domains\\DeployProject\\src\\Components\\TasksTree\\TaskTreeForm\\Project\\BackendForm\\BackendFormContainer.tsx",[],"C:\\OSPanel\\domains\\DeployProject\\src\\Components\\TasksTree\\TaskTreeForm\\Project\\BackendForm\\BackendForm.tsx",["911","912","913"],"import { Field } from 'formik'\r\nimport React, {useState, useEffect} from 'react'\r\nimport { AntdOptionsType } from '../../../../../Types/types'\r\nimport { AntSelect } from '../../../../../utils/Formik/CreateAntField'\r\nimport {BackendFormPropsType} from './BackendFormContainer'\r\n\r\nexport type OwnBackendFormPropsType = {\r\n    isBackendNew: boolean,\r\n    onSelectBackEndType: (val: any) => void,\r\n    submitCount: (val: any)=>void\r\n}\r\n\r\nconst BackendForm: React.FC<BackendFormPropsType> = (props) => {\r\n    useEffect( ()=> {\r\n        if (!props.isBackendNew && !props.isProjectListLoaded) {\r\n            props.getProjectList()\r\n        }\r\n    }, [props.isBackendNew, props.isProjectListLoaded])\r\n\r\n    useEffect( ()=> {\r\n        if(props.projectList && props.projectList.length>0) {\r\n            setOldProjectsData(props.projectList.map(item => {\r\n                return(\r\n                    {name: item.name, value: item.name}\r\n                )\r\n            }))\r\n        }\r\n    }, [props.projectList])\r\n\r\n    const [isBackendNew, setIsBackendNew] = useState(props.isBackendNew)\r\n    const [oldProjectsData, setOldProjectsData] = useState<Array<AntdOptionsType>>([])\r\n\r\n    const submitBackendIsNew = (val: any) => {\r\n        setIsBackendNew(val.target.checked)\r\n    }\r\n\r\n    const backendTypeOptions = [\r\n        {\r\n            name: 'Laravel',\r\n            value: 'laravel'\r\n        },\r\n        {\r\n            name: 'Other',\r\n            value: 'other'\r\n        },\r\n    ]\r\n\r\n    // console.log(props)\r\n\r\n    if (props.isBackendNew) {\r\n        return(\r\n            <Field\r\n                component={AntSelect}\r\n                selectOptions={backendTypeOptions}\r\n                name=\"backendType\"\r\n                type=\"select\"\r\n                label=\"Backend type\"\r\n                onSelect = {props.onSelectBackEndType}\r\n                submitCount={props.submitCount}\r\n            />\r\n        )\r\n    } else {\r\n        return(\r\n            <>\r\n            get old projects\r\n            <Field\r\n                component={AntSelect}\r\n                selectOptions={oldProjectsData}\r\n                name=\"backend_project\"\r\n                type=\"select\"\r\n                label=\"Choise backend project\"\r\n                onSelect = {props.onSelectBackEndType}\r\n                submitCount={props.submitCount}\r\n            />\r\n            </>\r\n        )\r\n    }\r\n    \r\n}\r\n\r\nexport default BackendForm","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Header\\MenuMobile.tsx",[],"C:\\OSPanel\\domains\\DeployProject\\src\\Components\\ToDo\\ToDoHeader\\ToDoHeaderContainer.tsx",[],"C:\\OSPanel\\domains\\DeployProject\\src\\Components\\ToDo\\TimeScale\\TimeScaleContainer.tsx",[],"C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Header\\MenuPopover.tsx",[],"C:\\OSPanel\\domains\\DeployProject\\src\\redux\\codeReducer.ts",[],"C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\ProjectsContainer.tsx",[],"C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\CurrentProject\\CurrentProjectContainer.tsx",["914","915"],"import {connect} from 'react-redux'\r\nimport CurrentProject from './CurrentProject'\r\nimport { AppStateType } from '../../../../redux/store'\r\nimport { isMobile } from 'react-device-detect'\r\nimport { getUsersList, updateUser, actions } from '../../../../redux/usersReducer'\r\nimport { getProjectList } from '../../../../redux/projectReducer'\r\nimport { UserType } from '../../../../redux/authReducer'\r\n// import CurrentUserMobile from './CurrentUserMobile'\r\n\r\ntype OwnCurrentProjectPropsType = {\r\n    match: any\r\n    location: any\r\n    history: any\r\n}\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    getProjectList: ()=>void,\r\n    updateUser: (values: UserType, userId: number)=>void,\r\n    // setUsersDataChanged: (isUsersDataChanged: boolean)=>void\r\n}\r\n\r\nexport type CurrenProjectPropsType = MapPropsType & MapDispatchPropsType & OwnCurrentProjectPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        projectsList: state.projects.projectList,\r\n        isProjectsLoaded: state.projects.isProjectLoaded\r\n        // errorMessage: state.task.errorMessage,\r\n        // isInterval: state.task.isInterval,\r\n        // taskSaveStatus: state.task.taskSaveStatus,\r\n        // settings:state.auth.viewSettings,\r\n        // appLocation: state.app.location,\r\n        // viewSettings: state.auth.viewSettings,\r\n        // isUsersDataChanged: state.users.isUsersDataChanged\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnCurrentProjectPropsType, AppStateType>(mapStateToProps, \r\n    {getProjectList, updateUser}) \r\n    (isMobile ? CurrentProject : CurrentProject)\r\n    \r\n\r\n","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\Projects.tsx",["916","917","918","919","920"],"import { List, Typography } from 'antd'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Link, useRouteMatch } from 'react-router-dom'\r\nimport { ProjectsPropsType } from './ProjectsContainer'\r\n\r\nexport type OwnProjectsPropsType = {}\r\n\r\nconst Projects: React.FC<ProjectsPropsType> = (props) => {\r\n    useEffect(() => {\r\n        if (!props.isProjectListLoaded) {\r\n            props.getProjectList()\r\n        }\r\n    }, [props.isProjectListLoaded, props.projectList])\r\n\r\n    const [projectList, setProjectList] = useState<Array<any>>()\r\n\r\n    let { url } = useRouteMatch();\r\n    \r\n    console.log(props)\r\n\r\n    return (\r\n        <>\r\n            <h4>Projects</h4>\r\n            <li>Add project</li>\r\n            <List\r\n                // header={<div>Header</div>}\r\n                // footer={<div>Footer</div>}\r\n                bordered\r\n                dataSource={props.projectList}\r\n                renderItem={item => (\r\n                    <List.Item\r\n                        actions={[<a key=\"list-loadmore-edit\">show</a>,]}\r\n                    >\r\n                         <Link to={url+'/'+item.id}>{item.name}</Link>\r\n                    </List.Item>\r\n                )}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Projects","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\CurrentProject\\CurrentProject.tsx",["921"],"import { Collapse, Spin } from 'antd'\r\nimport React, { useEffect } from 'react'\r\nimport { ProjectItemType } from '../../../../redux/projectReducer'\r\nimport Backend from './Backend/BackendContainer'\r\nimport { CurrenProjectPropsType } from './CurrentProjectContainer'\r\nimport Frontend from './Frontend/Frontend'\r\n\r\nconst { Panel } = Collapse\r\n\r\nexport const getTargetProject = (projectList: Array<ProjectItemType>, userId: string): ProjectItemType => {\r\n    return projectList.filter((item: ProjectItemType) => item.id.toString() === userId)[0]\r\n}\r\n\r\nconst CurrentProject: React.FC<CurrenProjectPropsType> = (props) => {\r\n    useEffect(() => {\r\n        if (!props.isProjectsLoaded) {\r\n            props.getProjectList()\r\n        }\r\n    }, [props.isProjectsLoaded])\r\n\r\n    const project = getTargetProject(props.projectsList, props.match.params.userId)\r\n\r\n    if (project) {\r\n        return (\r\n            <>\r\n                <h3>{project.name}</h3>\r\n                <Collapse defaultActiveKey={[]}>\r\n                    {project.backend_id ?\r\n                        <Panel header=\"Backend\" key=\"1\">\r\n                            Backend data to {project.backend_id}\r\n                            <Backend projectId={Number(props.match.params.userId)}/>\r\n                        </Panel>\r\n                        :\r\n                        null\r\n                    }\r\n                    {project.frontend_id ?\r\n                        <Panel header=\"Frontend\" key=\"2\">\r\n                            <Frontend projectId={Number(props.match.params.userId)}/>\r\n                        </Panel>\r\n                        :\r\n                        null\r\n                    }\r\n                </Collapse>\r\n            </>\r\n        )\r\n    } else {\r\n        return <Spin key=\"spin\" size=\"large\" />\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default CurrentProject","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\BackendContainer.tsx",["922","923"],"import {connect} from 'react-redux'\r\nimport Backend from './Backend'\r\nimport { AppStateType } from '../../../../../redux/store'\r\nimport { isMobile } from 'react-device-detect'\r\n// import { getUsersList, updateUser, actions } from '../../../../../../redux/usersReducer'\r\nimport { getProjectList, getBackendData, updateBackend } from '../../../../../redux/projectReducer'\r\nimport { UserType } from '../../../../../redux/authReducer'\r\nimport { BackendType } from '../../../../../api/projectAPI'\r\n// import CurrentUserMobile from './CurrentUserMobile'\r\n\r\ntype OwnBackendPropsType = {\r\n    projectId: number\r\n}\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    getProjectList: ()=>void,\r\n    getBackendData: (projectid: number)=>void,\r\n    updateBackend: (values: BackendType, backendId: number) =>void,\r\n    // updateUser: (values: UserType, userId: number)=>void,\r\n    // setUsersDataChanged: (isUsersDataChanged: boolean)=>void\r\n}\r\n\r\nexport type BackendPropsType = MapPropsType & MapDispatchPropsType & OwnBackendPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        projectsList: state.projects.projectList,\r\n        isProjectsLoaded: state.projects.isProjectLoaded\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnBackendPropsType, AppStateType>(mapStateToProps, \r\n    {getProjectList, getBackendData, updateBackend}) \r\n    (Backend)\r\n    \r\n\r\n","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Backend.tsx",["924"],"import React, { useEffect, useState } from 'react'\r\nimport {BackendPropsType} from './BackendContainer'\r\nimport {getTargetProject} from './../CurrentProject'\r\nimport { Collapse, Spin } from 'antd'\r\nimport { Formik } from 'formik'\r\nimport InstansesForm from './Instanses/InstansesForm'\r\nimport Models from './Models/ModelsContainer'\r\nimport Controllers from './Controllers/ControllersContainer'\r\n\r\nconst { Panel } = Collapse\r\n\r\nconst Backend: React.FC<BackendPropsType> = (props) => {\r\n    const [activeKey, setActiveKey] = useState<Array<string>>()\r\n\r\n    useEffect( ()=>{\r\n        props.getBackendData(1)\r\n    }, [])\r\n\r\n    const project = getTargetProject(props.projectsList, props.projectId.toString())\r\n\r\n    // console.log('project', project)\r\n\r\n    const instansesInitialValues = {\r\n        name: project.backendData ? project.backendData.name : null,\r\n        url: project.backendData ? project.backendData.url : null,\r\n        ip: project.backendData ? project.backendData.ip : null,\r\n        login: project.backendData ? project.backendData.login : null,\r\n        password: project.backendData ? project.backendData.password : null,\r\n        folder: project.backendData ? project.backendData.folder : null,\r\n    }\r\n\r\n    // console.log(props)\r\n\r\n    const instansesHandleSubmit = (val: any) => {\r\n        // console.log(project.backendData ? project.backendData.id : undefined)\r\n        // console.log(val)\r\n        if (project.backendData) {\r\n            props.updateBackend(val, project.backendData.id)\r\n        }\r\n    }\r\n\r\n    const changePanel = (closeKey: string, openKey: Array<string>) => {\r\n        console.log(openKey)\r\n        if (openKey) {\r\n            setActiveKey(openKey)\r\n        } else {\r\n            setActiveKey([])\r\n        }\r\n        \r\n    }\r\n\r\n    const onCollapseChange = (v:any) => {\r\n        console.log('onCollapseChange', v)\r\n        console.log('activeKey: ', [activeKey])\r\n        changePanel('', v)\r\n    }\r\n\r\n    // console.log(project)\r\n\r\n    if (project.backendData) {\r\n        return(\r\n            <>\r\n                <h5>{project.backendData.name}</h5>\r\n                <Collapse defaultActiveKey={[]} activeKey={activeKey} onChange={onCollapseChange}>\r\n                    <Panel header=\"Instanses\" key=\"1\">\r\n                        <Formik\r\n                            initialValues={instansesInitialValues}\r\n                            onSubmit={instansesHandleSubmit}\r\n                            enableReinitialize={true}\r\n                        >\r\n                            {InstansesForm}\r\n                        </Formik>\r\n                    </Panel>\r\n                    <Panel header=\"Models\" key=\"2\">\r\n                        <Models backendId={project.backend_id} changePanel={changePanel} />\r\n                    </Panel>\r\n                    <Panel header=\"Controllers\" key=\"3\">\r\n                        <Controllers backendId={project.backend_id}/>\r\n                    </Panel>\r\n                    <Panel header=\"Api\" key=\"4\">\r\n\r\n                    </Panel>\r\n                </Collapse>\r\n                <br/><br/><br/>\r\n\r\n                <li>Seeders</li>\r\n                <li>Fasades</li>\r\n                <li>Middleware</li>\r\n                <li>Services</li>\r\n                <li>Events</li>\r\n                <li>Workers</li>\r\n            </>\r\n        )\r\n    } else {\r\n        return <Spin key=\"spin\" size=\"large\" />\r\n    }\r\n    \r\n}\r\n\r\nexport default Backend","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Instanses\\InstansesForm.tsx",[],"C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Models\\ModelsContainer.tsx",[],"C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Controllers\\ControllersContainer.tsx",[],"C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Models\\Models.tsx",["925","926","927","928","929"],"import { Button, Collapse, Empty  } from 'antd'\r\nimport Modal from 'antd/lib/modal/Modal'\r\nimport { Field, Form, Formik, FormikProps, FormikValues } from 'formik'\r\nimport React, { ReactNode, useEffect, useState } from 'react'\r\nimport { FieldType, ModelsType } from '../../../../../../api/projectAPI'\r\nimport { AntCheckbox, AntInput } from '../../../../../../utils/Formik/CreateAntField'\r\nimport { validateRequired } from '../../../../../../utils/Formik/ValidateFields'\r\nimport FieldList from './FieldListContainer'\r\nimport FieldForm from './FieldForm'\r\nimport { ModelsPropsType } from './ModelsContainer'\r\nimport ModelForm from './ModelForm'\r\nimport CodeModalContainer from '../../../../Code/CodeModalContainer'\r\nimport { useDispatch } from 'react-redux'\r\nimport {createController as createControllerThunk } from './../../../../../../redux/projectReducer'\r\n\r\nconst { Panel } = Collapse\r\n\r\nconst Models: React.FC<ModelsPropsType> = (props) => {\r\n    useEffect( ()=>{\r\n        props.getModelsList(props.backendId)\r\n    }, [])\r\n\r\n    const [isModalVisible, setIsModalVisible] = useState(false)\r\n    const [isCodeVisible, setIsCodeVisible] = useState(false)\r\n\r\n    const addModel = () => {\r\n        console.log('addModel')\r\n        setIsModalVisible(!isModalVisible)\r\n    }\r\n\r\n    const handleOk = () => {setIsModalVisible(!isModalVisible)}\r\n    const handleCancel = () => {setIsModalVisible(!isModalVisible)}\r\n\r\n    const handleSubmit = (vals: any) => {\r\n        console.log(vals)\r\n        console.log(props)\r\n        props.createModel({\r\n            ...vals,\r\n            backend_id: props.backendId\r\n        })\r\n    }\r\n\r\n    const callback = (key:any) => {\r\n        console.log(key)\r\n        console.log(props.modelsList)\r\n        console.log(props.modelsList.filter(item => item.id === Number(key[0]))[0])\r\n        const target = props.modelsList.filter(item => item.id === Number(key[0]))[0]\r\n        if (target) {\r\n            props.setCodeTarget(\r\n                target.name,\r\n                {\r\n                    db: target.db, \r\n                    soft_delete: target.soft_delete\r\n                }\r\n            )\r\n        }\r\n        \r\n    }\r\n\r\n    return(\r\n        <>\r\n            <div className=\"w-100 d-flex flex-row-reverse\">\r\n                <Button className=\"mr-4 ml-auto mb-3\" type=\"primary\" onClick={addModel}>Add Model</Button>\r\n            </div>\r\n\r\n            <Collapse defaultActiveKey={[]} onChange={callback}>\r\n                {\r\n                    props.modelsList ?\r\n                    props.modelsList.map(item => {\r\n                        return(\r\n                            <Panel header={item.name} key={item.id ? item.id.toString() : 'null'}>\r\n                                <ModelFormItem modelItem={item} changePanel={props.changePanel} updateModel={props.updateModel} />\r\n                            </Panel>\r\n                        )\r\n                    })\r\n                    : <div>No DATA</div>\r\n                }\r\n            </Collapse>\r\n            <Modal title=\"Create new Model\" visible={isModalVisible} onOk={handleOk} onCancel={handleCancel}>\r\n                <Formik\r\n                    // initialValues={initialModalValues}\r\n                    initialValues={{}}\r\n                    onSubmit={handleSubmit}\r\n                    enableReinitialize={true}\r\n                >\r\n                    {ModelForm}\r\n                </Formik>\r\n            </Modal>\r\n\r\n            <CodeModalContainer />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Models\r\n\r\ntype ModelFormItemPropsType = {\r\n    modelItem: ModelsType,\r\n    updateModel: (values: ModelsType, modelId: number) => void,\r\n    changePanel: (closeKey: string, openKey: Array<string>) => void,\r\n}\r\n\r\nconst ModelFormItem: React.FC<ModelFormItemPropsType> = (props) => {\r\n    console.log(props)\r\n    let fields: Array<FieldType>\r\n    if (Array.isArray(props.modelItem.fields)) {\r\n        fields = props.modelItem.fields\r\n    } else {\r\n        fields = JSON.parse(props.modelItem.fields)\r\n    }\r\n\r\n    type fieldsDataType = {[name: string]: string}\r\n    let fieldsdata: Array<FieldType> = []\r\n    let fieldInit:fieldsDataType = {}\r\n    if (fields) {\r\n        for (let index = 0; index < fields.length; index++) {\r\n            const field = fields[index];\r\n            fieldsdata.push(field)\r\n            fieldInit['field_'+field.name] = field.type\r\n        }\r\n    }\r\n\r\n    const handleSubmit = (formValues:any) => {\r\n        const oldValue = {...props.modelItem, fields: fieldsdata, ...fieldInit}\r\n        console.log('formValues: ', formValues)\r\n\r\n        // compere model\r\n        let ismodelChange = false\r\n        if ( \r\n            oldValue.name !== formValues.name\r\n            || oldValue.db !== formValues.db\r\n            || oldValue.soft_delete !== formValues.soft_delete\r\n            ) {\r\n            ismodelChange = true\r\n        }\r\n\r\n        console.log(props.modelItem)\r\n\r\n        const newFieldData: ModelsType = {\r\n            // ...props.modelItem,\r\n            fields: JSON.stringify(formValues.fields),\r\n            name: formValues.name,\r\n            backend_id: props.modelItem.backend_id,\r\n            id: props.modelItem.id,\r\n            db: formValues.db,\r\n            soft_delete: formValues.soft_delete\r\n        }\r\n\r\n        console.log(newFieldData)\r\n        props.updateModel(newFieldData, props.modelItem.id ? props.modelItem.id : 0)\r\n    }\r\n\r\n    console.log({...props.modelItem, fields: fieldsdata, ...fieldInit})\r\n    console.log(props.changePanel)\r\n    return(\r\n        <Formik\r\n            enableReinitialize={true}\r\n            initialValues={ {...props.modelItem, fields: fieldsdata, ...fieldInit, changePanel: props.changePanel} }\r\n            onSubmit={handleSubmit}\r\n            own={props.changePanel}\r\n        >\r\n            {ModelView}\r\n        </Formik>\r\n    )\r\n}\r\n\r\ntype OwnModelViewPropsType = {\r\n    own: any\r\n}\r\n\r\nconst ModelView: ((props: OwnModelViewPropsType & FormikProps<FormikValues>) => ReactNode) = (props) => {\r\n    const [initialFieldValues, setInitialFieldValues] = useState(props.initialValues)\r\n\r\n    type InitialModalValuesType = {\r\n        newFieldName: string,\r\n        newFieldType: string,\r\n        isNulleble: boolean,\r\n        isPrimary: boolean,\r\n        isNew: boolean,\r\n        id?: number,\r\n        fieldParam?: string,\r\n    }\r\n    const emptyInitialModalValues: InitialModalValuesType = {\r\n        newFieldName: '',\r\n        newFieldType: '',\r\n        isNulleble: false,\r\n        isPrimary: false,\r\n        isNew: true,\r\n        fieldParam: '',\r\n    }\r\n\r\n    const [initialModalValues, setInitialModalValues] = useState<InitialModalValuesType>(emptyInitialModalValues)\r\n    const [initialValues2 , setInitialValues2] = useState(props.initialValues)\r\n\r\n    useEffect( ()=>{\r\n    }, [initialModalValues])\r\n\r\n    const onChange = (val:any) => {\r\n        console.log('onChange in Models')\r\n        setIsDataChanged(true)\r\n    }\r\n\r\n    const openModalToAddField = (target: any | null) => {\r\n        console.log('openModalToAddField', target)\r\n\r\n        if (!target.isNew) {\r\n            console.log('ОБНУЛЯЕМ ФОРМУ', target)\r\n            setInitialModalValues({\r\n                newFieldName: target.fieldName,\r\n                newFieldType: target.fieldType,\r\n                isNulleble: target.isNulleble,\r\n                isPrimary: target.isPrimary,\r\n                isNew: false,\r\n                id: target.fieldId,\r\n                fieldParam: target.fieldParam\r\n            })\r\n        } else {\r\n            setInitialModalValues({...emptyInitialModalValues})\r\n            console.log('СОЗДАЕМ НОВЫЙ ФИЛД', initialModalValues)\r\n            \r\n        }\r\n        \r\n        setIsModalVisible(true)\r\n    }\r\n\r\n    const [isDataChanged, setIsDataChanged] = useState(false)\r\n\r\n    const [isModalVisible, setIsModalVisible] = useState(false)\r\n\r\n    const handleOk = () => {\r\n        console.log('handleOk')\r\n        setIsModalVisible(false)\r\n    }\r\n\r\n    const handleCancel = () => {\r\n        console.log('handleCancel')\r\n        setInitialModalValues(emptyInitialModalValues)\r\n        console.log(initialModalValues)\r\n        setIsModalVisible(false)\r\n    }\r\n\r\n    const deleteField = (fieldId: number) => {\r\n        console.log('deleteField', fieldId)\r\n        console.log(props)\r\n        \r\n        // @ts-ignore\r\n        const fields = initialFieldValues.fields.filter( field => field.id !== fieldId ) \r\n        console.log(fields)\r\n        setInitialValues2( {...props.initialValues, fields: fields} )\r\n        setInitialFieldValues( {...initialFieldValues, fields: fields} )\r\n        props.setValues({\r\n            ...props.values,\r\n            fields: fields\r\n        })\r\n        props.handleSubmit()\r\n    }\r\n\r\n    const handleSubmit = (modalFieldFormValues:any, actions: any) => {\r\n        console.log('handleSubmit', modalFieldFormValues)\r\n        if (!modalFieldFormValues.isNew) {\r\n            let isUpdate = false\r\n            // @ts-ignore\r\n            const newFields = initialFieldValues.fields.map( (item) => {\r\n                if (modalFieldFormValues.id === item.id) {\r\n                    if (item.name !== modalFieldFormValues.newFieldName || \r\n                        item.type !== modalFieldFormValues.newFieldType ||\r\n                        item.isNulleble !== modalFieldFormValues.isNulleble ||\r\n                        item.isPrimary !== modalFieldFormValues.isPrimary ||\r\n                        item.fieldParam !== modalFieldFormValues.fieldParam\r\n                        ) {\r\n                        isUpdate = true\r\n                        return {\r\n                            description: \"\",\r\n                            id: modalFieldFormValues.id,\r\n                            name: modalFieldFormValues.newFieldName,\r\n                            isPrimary: modalFieldFormValues.isPrimary,\r\n                            type: modalFieldFormValues.newFieldType,\r\n                            isNulleble: modalFieldFormValues.isNulleble,\r\n                            fieldParam: modalFieldFormValues.fieldParam\r\n                        }\r\n                    } else {\r\n                        return item\r\n                    }\r\n                }\r\n                return item\r\n            } )\r\n\r\n            if (isUpdate) {\r\n                setInitialValues2( {...props.initialValues, fields: newFields} )\r\n                setInitialFieldValues( {...initialFieldValues, fields: newFields} )\r\n                console.log('NEED DML!!!!', props)\r\n                props.setValues({\r\n                    ...props.values,\r\n                    fields: newFields\r\n                })\r\n                props.handleSubmit()\r\n            }\r\n        } else {\r\n            console.log('NEW FIELD')\r\n            // @ts-ignore\r\n            let newFields = initialFieldValues.fields\r\n            newFields.push({               \r\n                // @ts-ignore\r\n                id: props.initialValues.fields.length+1,\r\n                name: modalFieldFormValues.newFieldName,\r\n                isPrimary: modalFieldFormValues.isPrimary,\r\n                type: modalFieldFormValues.newFieldType,\r\n                isNulleble: modalFieldFormValues.isNulleble,\r\n                fieldParam: modalFieldFormValues.fieldParam,\r\n                description: \"\",\r\n            })\r\n            setInitialValues2( {...props.initialValues, fields: newFields} )\r\n\r\n            console.log('NEED DML!!!!', props)\r\n            props.setValues({\r\n                ...props.values,\r\n                fields: newFields\r\n            })\r\n            props.handleSubmit()\r\n        }\r\n        actions.resetForm()\r\n        setInitialModalValues(modalFieldFormValues)\r\n    }\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const createController = () => {\r\n\r\n        // console.log('createController: ', props)\r\n        let newController = {\r\n            name: props.initialValues.name+'Controller',\r\n            models: JSON.stringify([props.initialValues.id]) ,\r\n            backend_id: props.initialValues.backend_id,\r\n            isResource: true\r\n        }\r\n        // console.log('newController', newController)\r\n        props.initialValues.changePanel('', ['3'])\r\n        dispatch(createControllerThunk(newController))\r\n    }\r\n\r\n    return(\r\n        <>\r\n        <Form\r\n            className=\"form-container mt-2\"\r\n            onSubmit={props.handleSubmit}\r\n        >\r\n            <Field\r\n                component={AntInput}\r\n                name=\"name\"\r\n                type=\"text\"\r\n                label=\"Name\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n                onChange={onChange}\r\n            />\r\n            <Field\r\n                component={AntInput}\r\n                name=\"folder\"\r\n                type=\"text\"\r\n                label=\"Folder\"\r\n                submitCount={props.submitCount}\r\n                onChange={onChange}\r\n            />\r\n\r\n            <Field\r\n                component={AntCheckbox}\r\n                name=\"soft_delete\"\r\n                type=\"checkbox\"\r\n                label=\"Soft delete\"\r\n                onChange={onChange}\r\n                submitCount={props.submitCount}\r\n            />\r\n\r\n            <Field\r\n                component={AntCheckbox}\r\n                name=\"db\"\r\n                type=\"checkbox\"\r\n                label=\"Use DB\"\r\n                onChange={onChange}\r\n                submitCount={props.submitCount}\r\n            />\r\n\r\n            {isDataChanged ?\r\n                <div className=\"submit-container\">\r\n                    <button className=\"ant-btn ant-btn-primary\" type=\"submit\">\r\n                        Save\r\n                    </button>\r\n                </div>\r\n            : null}\r\n\r\n            <div className=\"w-100 d-flex flex-row mt-2 mb-2\">\r\n                <h5>Field List:</h5>\r\n                {/* <Button type=\"primary\" className=\"mr-1 ml-auto\" onClick={showCode} >Code</Button> */}\r\n                <Button className=\"mr-4 ml-auto\" type=\"primary\" onClick={()=>{openModalToAddField({isNew: true})}}>\r\n                    Add Field\r\n                </Button>\r\n            </div>\r\n            \r\n            <FieldList \r\n                fields={\r\n                // @ts-ignore\r\n                initialValues2.fields\r\n                }\r\n                openModalToAddField={openModalToAddField}\r\n                deleteField={deleteField}\r\n                targetName='user'\r\n                targetData={[]}\r\n            />\r\n\r\n            <div className=\"w-100 d-flex flex-row mt-5 mb-2\">\r\n                <h5>Methods:</h5><Button className=\"mr-4 ml-auto\" type=\"primary\">Add method</Button>\r\n            </div>\r\n\r\n            <div className=\"w-100 d-flex flex-row mt-5 mb-2\">\r\n                \r\n                <h5 className=\"mr-auto ml-auto\">Create : {\r\n                    // @ts-ignore\r\n                    props.initialValues.name\r\n                }Controller\r\n                <Button onClick={createController} className=\"ml-4\" type=\"primary\">Create</Button>\r\n                </h5>\r\n            </div>\r\n        </Form>\r\n\r\n        <Modal title=\"New Field Form\" visible={isModalVisible} onOk={handleOk} onCancel={handleCancel}>\r\n            <Formik\r\n                initialValues={initialModalValues}\r\n                onSubmit={handleSubmit}\r\n                enableReinitialize={true}\r\n            >\r\n                {FieldForm}\r\n            </Formik>\r\n        </Modal>\r\n\r\n        </>\r\n    )\r\n}","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Controllers\\Controllers.tsx",["930","931","932","933"],"import { Button, Collapse, Empty } from 'antd'\r\nimport Modal from 'antd/lib/modal/Modal'\r\nimport { Field, Form, Formik, FormikProps, FormikValues } from 'formik'\r\nimport React, { ReactNode, useEffect, useState } from 'react'\r\nimport { ControllersPropsType } from './ControllersContainer'\r\nimport ControllerForm from './ControllerForm'\r\nimport { AntCheckbox, AntSelect } from '../../../../../../utils/Formik/CreateAntField'\r\nimport { ControllersType, ModelsType } from '../../../../../../api/projectAPI'\r\nimport {SelectOptionType} from './../../../../../../Types/types'\r\nimport { initialValues } from '../../../../../ToDo/ToDoMobile'\r\nimport Item from 'antd/lib/list/Item'\r\nimport ControllerMethods from './ControllerMethodsContainer'\r\nimport FullControllerMethodCode from './FullControllerMethodCode/FullControllerMethodCodeContainer'\r\n\r\nconst { Panel } = Collapse\r\n\r\nconst Controllers: React.FC<ControllersPropsType> = (props) => {\r\n    useEffect(() => {\r\n        props.getControllersList(props.backendId)\r\n\r\n        if (props.modelsList.length === 0) {\r\n            // console.log('getModelsList')\r\n            props.getModelsList(props.backendId)\r\n        }\r\n\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n    }, [props.controllersList])\r\n\r\n    const [isModalVisible, setIsModalVisible] = useState(false)\r\n\r\n    if (props.modelsList.length > 0) {\r\n        const modelsListOptions = props.modelsList.map( (item: ModelsType) => {\r\n            return ( {\r\n                name: item.name,\r\n                value: item.id\r\n            } )\r\n        })\r\n    }\r\n    \r\n\r\n    const addController = () => {\r\n        setIsModalVisible(true)\r\n    }\r\n\r\n    const handleOk = () => { setIsModalVisible(!isModalVisible) }\r\n    const handleCancel = () => { setIsModalVisible(!isModalVisible) }\r\n\r\n    const handleSubmit = (vals: any) => {\r\n        // console.log(vals)\r\n        // console.log(props)\r\n\r\n        props.createController({\r\n            ...vals,\r\n            backend_id: props.backendId\r\n        })\r\n    }\r\n\r\n    // console.log(props)\r\n\r\n    // if (props.controllersList.length > 0) {\r\n        return (\r\n            <div>\r\n                <div className=\"w-100 d-flex flex-row-reverse\">\r\n                    <Button className=\"mr-4 ml-auto mb-3\" type=\"primary\" onClick={addController}>Add Controller</Button>\r\n                </div>\r\n\r\n                {\r\n                    props.controllersList.length > 0 ?\r\n                    <Collapse defaultActiveKey={[]}>\r\n                        {props.controllersList.map((item: ControllersType) => {\r\n                            return (\r\n                                <Panel \r\n                                    key={item.name}\r\n                                    header={item.name} \r\n                                    // extra={[<div key={'any_'+item.name}>any</div>]}\r\n                                >\r\n                                    <ControllerItem item={item} modelsList={props.modelsList} updateController={props.updateController}/>\r\n                                </Panel>\r\n                            )\r\n                        })}\r\n                    </Collapse>\r\n                    : <Empty />\r\n                }\r\n\r\n                <Modal title=\"Create new Controller\" visible={isModalVisible} onOk={handleOk} onCancel={handleCancel}>\r\n                    <Formik\r\n                        // initialValues={initialModalValues}\r\n                        initialValues={{}}\r\n                        onSubmit={handleSubmit}\r\n                        enableReinitialize={true}\r\n                    >\r\n                        {ControllerForm}\r\n                    </Formik>\r\n                </Modal>\r\n            </div>\r\n        )\r\n    // } \r\n    // else {\r\n    //     return(\r\n    //         <>\r\n    //             <div className=\"w-100 d-flex flex-row-reverse\">\r\n    //                 <Button className=\"mr-4 ml-auto mb-3\" type=\"primary\" onClick={addController}>Add Controller</Button>\r\n    //             </div>\r\n    //             <div>No Data</div>\r\n    //         </>\r\n    //     ) \r\n    // }\r\n}\r\n\r\nexport default Controllers\r\n\r\ntype ControllerItemType = {\r\n    item: ControllersType,\r\n    modelsList: Array<ModelsType>,\r\n    updateController: (values: ControllersType, controllerId: number) => void\r\n}\r\n\r\nconst ControllerItem:React.FC<ControllerItemType> = (props) => {\r\n    console.log('ControllerItem props', props)\r\n\r\n    type initialFormValuesType = {\r\n        isResurce: boolean,\r\n        modelsOptions: Array<SelectOptionType>,\r\n        models: Array<number>\r\n    }\r\n\r\n    const getOptions = ():Array<SelectOptionType> => {\r\n        let options:Array<SelectOptionType> = []\r\n        for (let index = 0; index < props.modelsList.length; index++) {\r\n            const element = props.modelsList[index];\r\n            options.push({\r\n                name: element.name,\r\n                value: element.id ? Number(element.id) : 0\r\n            })\r\n        }\r\n        return options\r\n    }\r\n\r\n    const initialFormValues: initialFormValuesType = {\r\n        isResurce: props.item.isResource,\r\n        modelsOptions: getOptions(),\r\n        models: props.item.models.length>0 ? props.item.models.map( (i: ModelsType) => i.id ) : []\r\n    }\r\n\r\n    // console.log(props)\r\n\r\n    const onControllerInstanseSubmit = (values: any) => {\r\n        // console.log(values)\r\n\r\n        props.updateController({\r\n            models: values.models,\r\n            backend_id: props.item.backend_id,\r\n            folder: props.item.folder,\r\n            id: props.item.id,\r\n            isResource: values.isResurce,\r\n            model_id: props.item.model_id,\r\n            name: props.item.name,\r\n        }, props.item.id)\r\n    }\r\n\r\n    return(\r\n    <div key={props.item.name}>\r\n        <h4>{props.item.name}</h4>\r\n        <Collapse defaultActiveKey={[]} ghost>\r\n            <Panel header=\"Instanses\" key=\"instanse\">\r\n                <Formik\r\n                    initialValues={initialFormValues}\r\n                    // initialValues={{}}\r\n                    onSubmit={onControllerInstanseSubmit}\r\n                    enableReinitialize={true}\r\n                >\r\n                    {ControllerInstansesForm}\r\n                </Formik>\r\n                \r\n            </Panel>\r\n            <Panel header=\"Methods\" key=\"methods\">\r\n                <ControllerMethods controllerData={props.item}/>\r\n            </Panel>\r\n            <Panel header=\"Full code\" key=\"code\">\r\n                <FullControllerMethodCode controllerData={props.item}/>\r\n            </Panel>\r\n            <Panel header=\"Actions to create\" key=\"actions\">\r\n                {\r\n                    props.item.models[0] ?\r\n                    <h5>php artisan make:model {props.item.models[0].name} -mcr</h5>\r\n                    : <h5>No Model</h5>\r\n                }\r\n                <br/>\r\n                {\r\n                     props.item.models[0] ?\r\n                     <>\r\n                    <h5>php artisan make:controller {props.item.name} --resource</h5>\r\n                    <h5>php artisan make:model {props.item.models[0].name} --migration</h5>\r\n                    </>\r\n                    : <h5>No Model</h5>\r\n                }\r\n            </Panel>\r\n        </Collapse>\r\n    </div>\r\n    )\r\n}\r\n\r\nconst ControllerInstansesForm: ((props: FormikProps<FormikValues>) => ReactNode) = (props) => {\r\n\r\n    // console.log(props.initialValues)\r\n\r\n    return (\r\n        <Form\r\n            className=\"form-container\"\r\n            onSubmit={props.handleSubmit}\r\n        >\r\n            <Field\r\n                component={AntCheckbox}\r\n                name=\"isResurce\"\r\n                type=\"checkbox\"\r\n                label=\"isResurce\"\r\n                submitCount={props.submitCount}\r\n                // onClick={submitBackEnd}\r\n                // onSelect={submitBackEnd}\r\n            />\r\n\r\n            <Field\r\n                component={AntSelect}\r\n                name=\"models\"\r\n                type=\"select\"\r\n                label=\"Including Models\"\r\n                mode=\"multiple\"\r\n                selectOptions={\r\n                    props.initialValues.modelsOptions\r\n                }\r\n                // onSelect = {onSelect}\r\n            />\r\n\r\n            <div className=\"submit-container\">\r\n                <button className=\"ant-btn ant-btn-primary\" type=\"submit\">\r\n                    Save\r\n                </button>\r\n            </div>\r\n\r\n        </Form>\r\n    )\r\n}\r\n\r\n\r\n","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Models\\FieldListContainer.tsx",[],"C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Models\\ModelForm.tsx",["934","935","936","937","938"],"import { Form, Field, FormikProps, FormikValues } from 'formik'\r\nimport React, { ReactNode, useState, useEffect } from 'react'\r\nimport { AntCheckbox, AntInput, AntSelect } from '../../../../../../utils/Formik/CreateAntField'\r\nimport { validateRequired } from '../../../../../../utils/Formik/ValidateFields'\r\nimport {SelectOptionType} from '../../../../../../Types/types'\r\n// import { AntInput, AntSelect, AntTextArea, AntTimePicker } from '../../../utils/Formik/CreateAntField'\r\n// import { validateRequired } from '../../../utils/Formik/ValidateFields'\r\n// import ProjectForm from './Project/ProjectForm'\r\n\r\n\r\nconst ModelForm: ((props: FormikProps<FormikValues>) => ReactNode) = (props) => {\r\n    return (\r\n        <Form\r\n            className=\"form-container\"\r\n            onSubmit={props.handleSubmit}\r\n        >\r\n            <Field\r\n                component={AntInput}\r\n                name=\"name\"\r\n                type=\"text\"\r\n                label=\"Model name\"\r\n                validate={validateRequired}\r\n                hasFeedback\r\n                // onChange={onChangeNewFieldName}\r\n            />\r\n            <Field\r\n                component={AntInput}\r\n                name=\"folder\"\r\n                type=\"text\"\r\n                label=\"Model folder\"\r\n                // validate={validateRequired}\r\n                // hasFeedback\r\n                // onChange={onChangeNewFieldName}\r\n            />\r\n            <div className=\"submit-container\">\r\n                <button className=\"ant-btn ant-btn-primary\" type=\"submit\">\r\n                    Save1\r\n                </button>\r\n            </div>\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default ModelForm","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Models\\FieldForm.tsx",[],"C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Controllers\\ControllerForm.tsx",["939","940","941","942","943","944"],"import { Form, Field, FormikProps, FormikValues } from 'formik'\r\nimport React, { ReactNode, useState, useEffect } from 'react'\r\nimport { AntCheckbox, AntInput, AntSelect } from '../../../../../../utils/Formik/CreateAntField'\r\nimport { validateRequired } from '../../../../../../utils/Formik/ValidateFields'\r\nimport {SelectOptionType} from '../../../../../../Types/types'\r\n\r\nconst ControllerForm: ((props: FormikProps<FormikValues>) => ReactNode) = (props) => {\r\n    return (\r\n        <Form\r\n            className=\"form-container\"\r\n            onSubmit={props.handleSubmit}\r\n        >\r\n            <Field\r\n                component={AntInput}\r\n                name=\"name\"\r\n                type=\"text\"\r\n                label=\"Controller name\"\r\n                validate={validateRequired}\r\n                hasFeedback\r\n            />\r\n            <Field\r\n                component={AntInput}\r\n                name=\"folder\"\r\n                type=\"text\"\r\n                label=\"Model folder\"\r\n            />\r\n\r\n            {/* <Field\r\n                component={AntSelect}\r\n                name=\"models\"\r\n                type=\"select\"\r\n                label=\"Including Models\"\r\n                mode=\"multiple\"\r\n                selectOptions={modelsListOptions}\r\n                // onSelect = {onSelect}\r\n            /> */}\r\n\r\n            <div className=\"submit-container\">\r\n                <button className=\"ant-btn ant-btn-primary\" type=\"submit\">\r\n                    Save\r\n                </button>\r\n            </div>\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default ControllerForm\r\n\r\nconst modelsListOptions = [\r\n    {\r\n        name: 'Old',\r\n        value: 1\r\n    },\r\n    {\r\n        name: 'New',\r\n        value: 2\r\n    },\r\n    {\r\n        name: 'Load From SRC',\r\n        value: 3\r\n    },\r\n]","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Development\\Code\\CodeModalContainer.tsx",[],"C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Models\\FieldList.tsx",[],"C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Development\\Code\\CodeModal.tsx",["945","946"],"import {Modal} from 'antd'\r\nimport React, {useState, useEffect} from 'react'\r\nimport { CodeModalPropsType } from './CodeModalContainer'\r\nimport ModelCodeContainer from './Model/ModelCodeContainer'\r\n\r\nconst CodeModal: React.FC<CodeModalPropsType> = (props) => {\r\n    const onClose = () => {\r\n        props.setShowCodeModal(false, props.codeType, props.codeRowsArray, props.codeTargetName, [])\r\n    }\r\n\r\n    const getTargetComponennt = () => {\r\n        switch (props.codeType) {\r\n            case 'model':\r\n                return <ModelCodeContainer />\r\n        \r\n            default:\r\n                return <div>No data</div>\r\n        }\r\n    }\r\n\r\n    return(\r\n        <Modal title=\"Code modal\" visible={props.isModalVisible} onOk={onClose} onCancel={onClose} width={1000}>\r\n            {getTargetComponennt()}\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default CodeModal\r\n\r\n","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Development\\Code\\Model\\ModelCodeContainer.tsx",[],"C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Development\\Code\\Model\\ModelCode.tsx",["947"],"import React, {useEffect} from 'react'\r\nimport { FieldType } from '../../../../api/projectAPI'\r\nimport {ModelCodePropsType} from './ModelCodeContainer'\r\n\r\nconst ModelCode: React.FC<ModelCodePropsType> = (props) => {\r\n    useEffect( ()=> {\r\n        console.log('props.codeTargetName changed')\r\n    },[props.codeTargetName])\r\n\r\n    console.log(props)\r\n\r\n    // str[0].toUpperCase() + str.slice(1)\r\n    return(\r\n        <div>\r\n            <li>!!!table name</li>\r\n            <li>Field type</li>\r\n            <li>namespace</li>\r\n\r\n            <h5>ModelCode:</h5>\r\n\r\n            <code>{'<?php'}</code>\r\n            <br/><br/>\r\n            <code>{'namespace App;'}</code>\r\n            <br/><br/>\r\n            <code>{'use Illuminate\\\\Database\\\\Eloquent\\\\Model;'}</code><br/>\r\n            {props.codeData.soft_delete ? \r\n                <><code>{'use Illuminate\\\\Database\\\\Eloquent\\\\SoftDeletes;'}</code><br/></>\r\n            :\r\n                null\r\n            }\r\n            {props.codeData.db ? \r\n                <><code>{'use Illuminate\\\\Support\\\\Facades\\\\DB;'}</code><br/></>\r\n            :\r\n                null\r\n            }\r\n            \r\n            \r\n            <br/>\r\n            <code>{'class '+props.codeTargetName[0].toUpperCase()+props.codeTargetName.slice(1)+' extends Model'}</code><br/>\r\n            \r\n            <code>{'{'}</code><br/>\r\n\r\n            {props.codeData.soft_delete ? \r\n                <><code>{tab(1,'use SoftDeletes;')}</code><br/><br/></>\r\n            :\r\n                null\r\n            }\r\n            \r\n            {/* 'protected $table = 'Models_instanses';' */}\r\n            <code>{tab(1,'protected $table = \"'+props.codeTargetName+'\";')}</code><br/>\r\n\r\n            <Fillable codeRowsArray={props.codeRowsArray}/>\r\n\r\n            <Hidden codeRowsArray={props.codeRowsArray}/>\r\n\r\n            <code>{'}'}</code><br/>\r\n\r\n            {/* {props.codeRowsArray.map( (item: any) => {\r\n                return(\r\n                    <div>\r\n                        {item.name}\r\n                    </div>\r\n                )\r\n            })} */}\r\n\r\n            <h5>Migration code:</h5>\r\n\r\n            <code>{'<?php'}</code>\r\n            <br/><br/>\r\n            <code>{'use Illuminate\\\\Database\\\\Migrations\\\\Migration;'}</code><br/>\r\n            <code>{'use Illuminate\\\\Database\\\\Schema\\\\Blueprint;'}</code><br/>\r\n            <code>{'use Illuminate\\\\Support\\\\Facades\\\\Schema;'}</code><br/>\r\n            <br/>\r\n            <code>{'class Create'+props.codeTargetName[0].toUpperCase()+props.codeTargetName.slice(1)+'Table extends Migration'}</code><br/>\r\n            <code>{'{'}</code><br/>\r\n            <code>{tab(1,'public function up()')}</code><br/>\r\n            <code>{tab(1,'{')}</code><br/>\r\n            <code>{tab(2,'Schema::create(\"'+props.codeTargetName+'\", function (Blueprint $table) {')}</code><br/>\r\n\r\n                {props.codeRowsArray.map( (item: any) => {\r\n                    const isNulleble = item.isNulleble ? '->nullable()' : ''\r\n                    return(\r\n                        <><code>{tab(3,'$table->'+getFieldtype(item)+'(\"'+item.name+'\")'+isNulleble+';')}</code><br/></>\r\n                    )\r\n                })}\r\n                {props.codeData.soft_delete ? \r\n                <><code>{tab(3,'$table->softDeletes();')}</code><br/></>\r\n                : null}\r\n                <><code>{tab(3,'$table->timestamps();')}</code><br/></>\r\n\r\n            <code>{tab(2,'});')}</code><br/>\r\n            <code>{tab(1,'}')}</code><br/>\r\n\r\n            <code>{tab(1,'}')}</code><br/>\r\n\r\n            <br/>\r\n            <code>{tab(1,'public function down()')}</code><br/>\r\n            <code>{tab(1,'{')}</code><br/>\r\n            <code>{tab(2,'Schema::dropIfExists(\"'+props.codeTargetName+'\");')}</code><br/>\r\n            <code>{tab(1,'}')}</code><br/>\r\n            <code>{'}'}</code><br/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ModelCode\r\n\r\ntype FillableType = {\r\n    codeRowsArray: Array<any>\r\n}\r\n\r\nconst Fillable: React.FC<any> = (props) => {\r\n    const fields: Array<any> = props.codeRowsArray.filter( (item: any) => item.fieldParam === 'fillable')\r\n    if (fields.length > 0) {\r\n        return(\r\n            <div>\r\n                <br/>\r\n                <code>{tab(1,'protected $fillable = [')}</code><br/>\r\n                \r\n                {fields.map( (item: any) => {\r\n                    return(\r\n                        <div key={item.name}>\r\n                        <>&nbsp;&nbsp;&nbsp;&nbsp;</>\r\n                        <>&nbsp;&nbsp;&nbsp;&nbsp;</>\r\n                        <>&nbsp;&nbsp;&nbsp;&nbsp;</>\r\n                        <>&nbsp;&nbsp;&nbsp;&nbsp;</>\r\n                        <code>{'\"'+item.name+'\", '}</code><br/>\r\n                        </div>\r\n                    )\r\n                })}\r\n                \r\n                <code>{tab(1,'];')}</code><br/>\r\n            </div>\r\n        )\r\n    } else {\r\n        return <></>\r\n    }\r\n}\r\n\r\nconst Hidden: React.FC<any> = (props) => {\r\n    const fields: Array<any> = props.codeRowsArray.filter( (item: any) => item.fieldParam === 'hidden')\r\n    if (fields.length > 0) {\r\n        return(\r\n            <>\r\n            <br/>\r\n            <code>{ tab(1,'protected $hidden = [') }</code><br/>\r\n            \r\n            {fields.map( (item: any) => {\r\n                return(\r\n                    <>\r\n                    <>&nbsp;&nbsp;&nbsp;&nbsp;</>\r\n                    <>&nbsp;&nbsp;&nbsp;&nbsp;</>\r\n                    <>&nbsp;&nbsp;&nbsp;&nbsp;</>\r\n                    <>&nbsp;&nbsp;&nbsp;&nbsp;</>\r\n                    <code>{'\"'+item.name+'\", '}</code><br/></>\r\n                )\r\n            })}\r\n            \r\n            <code>{tab(1,'];')}</code><br/>\r\n            </>\r\n        )\r\n    } else {\r\n        return <></>\r\n    }\r\n}\r\n\r\nexport const tab = (count: number, text?: string) => {\r\n    const getTabs = ():Array<JSX.Element> => {\r\n        let i = 1\r\n        let tabs: Array<JSX.Element> = []\r\n        while (i<=count) {\r\n            i++\r\n            tabs.push(\r\n                <span key={i}>\r\n                    &nbsp;&nbsp;&nbsp;&nbsp;\r\n                </span>\r\n            )\r\n        }\r\n        return tabs\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {getTabs()}\r\n            {text}\r\n        </>\r\n    )\r\n}\r\n\r\nconst getFieldtype = (field: FieldType ) => {\r\n    console.log(field.name, '=',field.type)\r\n    if (field.isPrimary) {\r\n        return 'bigIncrements'\r\n    } else {\r\n        switch (field.type) {\r\n            case 'bigint':\r\n                return 'bigInteger'\r\n    \r\n            case 'varchar':\r\n                return 'string'\r\n    \r\n            default:\r\n                return field.type\r\n        }\r\n    }\r\n}","C:\\OSPanel\\domains\\DeployProject\\src\\api\\ControllerMethodsAPI.ts",[],"C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Controllers\\ControllerMethodsContainer.tsx",["948"],"import {connect} from 'react-redux'\r\nimport ControllerMethods from './ControllerMethods'\r\nimport { AppStateType } from '../../../../../../redux/store'\r\nimport { getControllersList, createControllerMethodsList, updateControllerMethodsList, getControllerMethodsList } from '../../../../../../redux/projectReducer'\r\nimport { ControllersType } from '../../../../../../api/projectAPI'\r\n// import { ModelsType } from '../../../.././../api/projectAPI'\r\n\r\ntype OwnControllerMethodsPropsType = {\r\n    controllerData: ControllersType\r\n}\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    getControllerMethodsList: ()=>void,\r\n    updateControllerMethodsList: (values: any, controllerMethodId: number)=>void,\r\n    createControllerMethodsList: (values: any)=> void,\r\n    // getControllersList: (backendId: number) => void\r\n    // createController: (values: any) => void,\r\n    // getModelsList: (backendId: number) => void,\r\n}\r\n\r\nexport type ControllerMethodsPropsType = MapPropsType & MapDispatchPropsType & OwnControllerMethodsPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        controllersList: state.projects.controllersList,\r\n        modelsList: state.projects.modelsList,\r\n        controllerMethodsList: state.projects.controllerMethodsList\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnControllerMethodsPropsType, AppStateType>(mapStateToProps, \r\n    {getControllerMethodsList, updateControllerMethodsList, createControllerMethodsList}) \r\n    (ControllerMethods)\r\n    \r\n\r\n","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Controllers\\ControllerMethods.tsx",["949","950","951","952"],"import { Button, List, Modal } from 'antd'\r\nimport { Formik } from 'formik'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { ControllerMethodsType, rest_typeType } from '../../../../../../api/ControllerMethodsAPI'\r\nimport { ModelsType } from '../../../../../../api/projectAPI'\r\nimport { ControllerMethodsPropsType } from './ControllerMethodsContainer'\r\nimport ControllerMethodsCode from './ControllerMethodsForm/ControllerMethodsCode'\r\nimport ControllerMethodsForm, { RequestType } from './ControllerMethodsForm/ControllerMethodsForm'\r\n\r\nexport type initialValuesType = {\r\n    modelsList: Array<ModelsType>,\r\n    controllerMethodsList: Array<ControllerMethodsType>,\r\n    body_actions?: string\r\n    name: string,\r\n    rest_type?: rest_typeType,\r\n    request?: Array<RequestType>,\r\n    response?: any,\r\n    id?: number\r\n}\r\n\r\nconst ControllerMethods: React.FC<ControllerMethodsPropsType> = (props) => {\r\n\r\n    let emptyInitialValues: initialValuesType = {\r\n        modelsList: props.modelsList,\r\n        name: '',\r\n        controllerMethodsList: props.controllerMethodsList\r\n    }\r\n\r\n    const [methodData, setMethodData] = useState<ControllerMethodsType | null>(null)\r\n    const [initialValues, setinitialValues] = useState<initialValuesType>(emptyInitialValues)\r\n    const [modalTitle, setModalTitle] = useState<string>('Controller Method form')\r\n\r\n    useEffect(() => {\r\n        if (props.controllerMethodsList.length === 0) {\r\n            props.getControllerMethodsList()\r\n        }\r\n    }, [])\r\n\r\n    // console.log('props.controllerMethodsList', props.controllerMethodsList)\r\n        \r\n    useEffect(() => {\r\n        console.log('useEffect, setinitialValues for: ', props.controllerData.id)\r\n        const newControllerMethodsList = props.controllerMethodsList.filter(item=> item.controller_id === props.controllerData.id)\r\n        console.log('newControllerMethodsList', newControllerMethodsList)\r\n        setinitialValues({\r\n            ...initialValues,\r\n            controllerMethodsList: newControllerMethodsList\r\n        })\r\n        // emptyInitialValues.controllerMethodsList = props.controllerMethodsList\r\n    }, [props.controllerMethodsList])\r\n\r\n    const [isModalVisible, setIsModalVisible] = useState(false)\r\n\r\n    const showMethod = (id: number) => {\r\n        const target = props.controllerMethodsList.filter( (item) => item.id === id)[0]\r\n        console.log('target of method', target)\r\n        setModalTitle('Edit Controller Method '+ target.name)\r\n        setMethodData({\r\n            body_actions: target.body_actions,\r\n            controller_id: target.controller_id,\r\n            id: id,\r\n            isMiddleware: false,\r\n            name: target.name,\r\n            request: target.request,\r\n            response: target.response,\r\n            rest_type: target.rest_type\r\n        })\r\n        setIsModalVisible(true)\r\n        setinitialValues({\r\n            ...initialValues,\r\n            name: target.name,\r\n            request: target.request ? JSON.parse(target.request) : [],\r\n            response: target.response ? JSON.parse(target.response) : undefined,\r\n            body_actions: target.body_actions,\r\n            rest_type: target.rest_type,\r\n            id: target.id\r\n        })\r\n    }\r\n\r\n    const addMethod = () => {\r\n        setinitialValues(emptyInitialValues)\r\n        setModalTitle('Controller Method form')\r\n        setIsModalVisible(true)\r\n    }\r\n\r\n    const onOk = () => {\r\n        console.log('onOk')\r\n        setIsModalVisible(false)\r\n    }\r\n\r\n    const onHandleSubmit = (values: initialValuesType) => {\r\n        console.log('onHandleSubmit values:',values)\r\n        console.log('props: ', props)\r\n\r\n        const controllerMethods: ControllerMethodsType = {\r\n            body_actions: values.body_actions? values.body_actions : '',\r\n            controller_id: props.controllerData.id,\r\n            id: values.id ? values.id : 0,\r\n            isMiddleware: false,\r\n            name: values.name,\r\n            request: JSON.stringify(values.request),\r\n            response: JSON.stringify(values.response),\r\n            rest_type: values.rest_type ? values.rest_type : null\r\n        }\r\n\r\n        console.log(controllerMethods)\r\n\r\n        setMethodData(controllerMethods)\r\n\r\n        if(values.id) {\r\n            console.log('UPDATE: ', controllerMethods)\r\n            props.updateControllerMethodsList(controllerMethods, values.id)\r\n        } else {\r\n            console.log('CREATE: ', controllerMethods)\r\n            props.createControllerMethodsList(controllerMethods)\r\n        }\r\n    }\r\n\r\n    console.log('ControllerMethods props', props)\r\n    console.log('ControllerMethods initialValues: ', initialValues)\r\n\r\n    return (\r\n        <>\r\n            <div className=\"w-100 d-flex flex-row-reverse\">\r\n                <Button type=\"primary\" onClick={addMethod}>Add Method</Button>\r\n            </div>\r\n\r\n            {\r\n            // props.controllerMethodsList.length !== 0 ?\r\n                <>\r\n                    <List\r\n                        className=\"mt-2\"\r\n                        header={<div>Controller Methods List:</div>}\r\n                        // footer={<div>Footer</div>}\r\n                        bordered\r\n                        dataSource={initialValues.controllerMethodsList}\r\n                        renderItem={item => (\r\n                            <List.Item\r\n                                actions={[<a key=\"list-loadmore-edit\" onClick={()=>{showMethod(item.id)}}>edit</a>, <a key=\"list-loadmore-more\">code</a>]}\r\n                            >\r\n                                {/* {item.name} */}\r\n                                <div className=\"row w-100\">\r\n                                    <div className=\"col-6\">{item.name}</div>\r\n                                    <div className=\"col-3\">{item.rest_type}</div>\r\n                                </div>\r\n                            </List.Item>\r\n                        )}\r\n                    />\r\n                </>\r\n                // :\r\n                // null\r\n            }\r\n\r\n            <Modal title={modalTitle} visible={isModalVisible} onOk={onOk} onCancel={() => { setIsModalVisible(false) }} width={1000}>\r\n                <Formik\r\n                    initialValues={initialValues}\r\n                    onSubmit={onHandleSubmit}\r\n                    enableReinitialize={true}\r\n                >\r\n                    {ControllerMethodsForm}\r\n                </Formik>\r\n\r\n                <ControllerMethodsCode methodData={methodData} controllerData={props.controllerData}/>\r\n\r\n            </Modal>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ControllerMethods","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Controllers\\ControllerMethodsItem\\ControllerMethodsItem.tsx",[],"C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Controllers\\ControllerMethodsForm\\ControllerMethodsForm.tsx",["953","954","955","956","957","958","959"],"import { Form, Field, FormikProps, FormikValues } from 'formik'\r\nimport React, { ReactNode, useState, useEffect } from 'react'\r\nimport { AntCheckbox, AntInput, AntSelect } from '../../../../../../../utils/Formik/CreateAntField'\r\nimport { validateRequired } from '../../../../../../../utils/Formik/ValidateFields'\r\nimport {SelectOptionType} from '../../../../../../../Types/types'\r\nimport { Button, Checkbox, Input, TreeSelect } from 'antd'\r\nimport { ModelsType } from '../../../../../../../api/projectAPI'\r\nimport RequestItem from './RequestItem'\r\nimport ResponseItem from './ResponseItem'\r\nimport TextArea from 'antd/lib/input/TextArea'\r\n\r\nexport type RequestType = {\r\n    label: string,\r\n    type: string,\r\n    name: string,\r\n    id: number\r\n}\r\n\r\nexport type ResponreItemsType = {\r\n    key: string,\r\n    variable: string,\r\n}\r\n\r\nexport type ResponseType = {\r\n    type: 'Response' | 'method' | '',\r\n    methodId?: number,\r\n    methodName?: string,\r\n    responseItems?: Array<ResponreItemsType>\r\n}\r\n\r\nconst ControllerMethodsForm: ((props: FormikProps<FormikValues>) => ReactNode) = (props) => {\r\n    // @ts-ignore\r\n    const [request, setRequest] = useState<Array<RequestType>>(props.initialValues.request !== undefined ? props.initialValues.request : [])\r\n    // @ts-ignore\r\n    const [isRequest, setIsRequest] = useState(props.initialValues.request && props.initialValues.request.length !== 0 ? true : false)\r\n\r\n    // @ts-ignore\r\n    const [response, setResponse] = useState<ResponseType | undefined>(props.initialValues.response)\r\n    // @ts-ignore\r\n    const [isResponse, setIsResponse] = useState(props.initialValues.response? true : false)\r\n    console.log('isResponse: ', isResponse)\r\n\r\n    // @ts-ignore\r\n    const [body_actions, setBody_actions] = useState<string>(props.initialValues.body_actions)\r\n    // @ts-ignore\r\n    const [isBody_actions, setIsBody_actions] = useState(props.initialValues.body_actions ? true : false)\r\n    \r\n    const [value, setValue] = useState(undefined)\r\n\r\n    useEffect( () => {\r\n        // @ts-ignore\r\n        // console.log('!!!!!!!!!!!!useEffect ControllerMethodsForm', props.initialValues.response.responseItems)\r\n        // @ts-ignore\r\n        setRequest(props.initialValues.request !== undefined ? props.initialValues.request : [])\r\n        // @ts-ignore\r\n        setIsRequest(props.initialValues.request && props.initialValues.request.length !== 0 ? true : false)\r\n        // @ts-ignore\r\n        setResponse(props.initialValues.response ? props.initialValues.response : undefined)\r\n        // @ts-ignore\r\n        setBody_actions(props.initialValues.body_actions ? props.initialValues.body_actions : '')\r\n        // @ts-ignore\r\n        setIsBody_actions(props.initialValues.body_actions ? true : false)\r\n    },[props.initialValues])\r\n\r\n    const onRequest = (val: any) => {\r\n        console.log(val.target.checked)\r\n        console.log(request)\r\n\r\n        if (val.target.checked) {\r\n            if (request!==undefined && request.length === 0) {\r\n\r\n            }\r\n        }\r\n\r\n        if (request!==undefined && request.length === 0) {\r\n            console.log('onAddRequest')\r\n            onAddRequest()\r\n        } else {\r\n            console.log('setRequest')\r\n            setRequest([])\r\n        }\r\n        setIsRequest(!isRequest)\r\n    }\r\n\r\n    const onAddRequest = () => {\r\n        console.log('onAddRequest:', request)\r\n        let newRequest = [...request]\r\n\r\n        newRequest.push({\r\n            label: 'param '+ (request.length+1),\r\n            type: '',\r\n            name: '',\r\n            id: request.length\r\n        })\r\n        setRequest(newRequest)\r\n        props.setValues({...props.values, request: newRequest})\r\n    }\r\n\r\n    const onDeleteRequest = () => {\r\n        let newRequest = [...request]\r\n        newRequest.pop()\r\n        setRequest(newRequest)\r\n        if (newRequest.length === 0) {\r\n            setIsRequest(false)\r\n        }\r\n        props.setValues({...props.values, request: newRequest})\r\n    }\r\n\r\n    const onResponse = () => {\r\n        console.log('onResponse', isResponse)\r\n        setIsResponse(!isResponse)\r\n        console.log('response: ', response)\r\n        if (!response) {\r\n            setResponse({\r\n                type: ''\r\n            })\r\n        } else {\r\n            setResponse(undefined)\r\n        }\r\n    }\r\n\r\n    const onBodyActions = () => {\r\n        setIsBody_actions(!isBody_actions)\r\n    }\r\n\r\n    const onAddResponse = () => {\r\n        \r\n    }\r\n\r\n    const onRowChange = (id: number, type: string, name: string) => {\r\n        let requestCopy = [...request]\r\n\r\n        for (let index = 0; index < request.length; index++) {\r\n            const element = request[index];\r\n            if (element.id === id) {\r\n                requestCopy[index] = {...element, name: name, type: type}\r\n            }\r\n        }\r\n        setRequest(requestCopy)\r\n        props.setValues({...props.values, request: requestCopy})\r\n    }\r\n\r\n    const setResponseValues = (responseValues: ResponseType) => {\r\n        // console.log('setResponseValues:', responseValues)\r\n        props.setValues({...props.values, response: responseValues})\r\n    }\r\n\r\n    console.log('props.initialValues: ',props.initialValues)\r\n    // console.log(response)\r\n\r\n    // if (response !== undefined && response.type !== undefined) {\r\n    //     console.log('show response')\r\n    // }\r\n\r\n    const onKeyDown = (v: any) => {\r\n        if (v.keyCode === 9) {\r\n            v.preventDefault()\r\n\r\n            const before = body_actions.substr(0, v.target.selectionEnd)\r\n            const after = body_actions.substr(v.target.selectionEnd)\r\n\r\n            setBody_actions(before+'    '+after)\r\n            props.setValues({...props.values, body_actions: v.target.value})\r\n\r\n            const newStart = v.target.selectionStart+4\r\n            const newEnd = v.target.selectionEnd+4\r\n\r\n            setTimeout( ()=> {\r\n                v.target.selectionStart = newStart\r\n                v.target.selectionEnd = newEnd\r\n            }, 0)\r\n            \r\n        }\r\n    }\r\n\r\n    const onBodyChange = (v: any) => {\r\n        setBody_actions(v.target.value)\r\n        props.setValues({...props.values, body_actions: v.target.value})\r\n    }\r\n\r\n    console.log('ResponseItem:', response)\r\n\r\n    return (\r\n        <Form\r\n            className=\"form-container\"\r\n            onSubmit={props.handleSubmit}\r\n        >\r\n            <Field\r\n                component={AntInput}\r\n                name=\"name\"\r\n                type=\"text\"\r\n                label=\"Method name\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n            <Field\r\n                component={AntSelect}\r\n                name=\"rest_type\"\r\n                type=\"select\"\r\n                label=\"REST Type\"\r\n                selectOptions={RestTypeOtions}\r\n                validate={validateRequired}\r\n                hasFeedback\r\n            /> \r\n\r\n            <div className=\"ant-row ant-form-item \">\r\n                <div className=\"ant-col ant-form-item-label pr-2\">Request:</div>\r\n                <div className=\"ant-col ant-form-item-control\">\r\n                    <Checkbox onChange={onRequest} checked={isRequest}></Checkbox>\r\n                </div>\r\n            </div>\r\n\r\n            {request && request.length>0 ? \r\n                request.map( (item: RequestType) => {\r\n                    return <RequestItem key={item.id} item={item} initialValues={props.initialValues} onRowChange={onRowChange}/>\r\n                })\r\n            :\r\n                null\r\n            }\r\n            {request && request.length>=1 ? \r\n            <div className=\"my-2\">\r\n                <Button className=\"mr-3\" type=\"primary\" size=\"small\" onClick={onAddRequest}>Add</Button> \r\n                <Button className=\"mr-3\" type=\"primary\" size=\"small\" onClick={onDeleteRequest}>del</Button>\r\n            </div>\r\n            : null}\r\n\r\n            <div className=\"ant-row ant-form-item\">\r\n                <div className=\"ant-col ant-form-item-label pr-2\">body_actions:</div>\r\n                <div className=\"ant-col ant-form-item-control\">\r\n                    <Checkbox onChange={onBodyActions} checked={isBody_actions}></Checkbox>\r\n                </div>\r\n            </div>\r\n\r\n            {isBody_actions ? \r\n                <TextArea \r\n                    onKeyDown={onKeyDown} \r\n                    // onBlur={onBlur} \r\n                    rows={4} \r\n                    value={body_actions}\r\n                    onChange={onBodyChange}\r\n                />\r\n            : null }\r\n\r\n\r\n\r\n\r\n            <div className=\"ant-row ant-form-item \">\r\n                <div className=\"ant-col ant-form-item-label pr-2\">Response:</div>\r\n                <div className=\"ant-col ant-form-item-control\">\r\n                    <Checkbox onChange={onResponse} checked={isResponse}></Checkbox>\r\n                </div>\r\n            </div>\r\n\r\n            {response !== undefined && response.type !== undefined ? \r\n                <ResponseItem \r\n                    responseInit={response} \r\n                    initialValues={props.initialValues}\r\n                    setResponseValues={setResponseValues}\r\n                />\r\n            :\r\n            null\r\n            }\r\n\r\n\r\n\r\n\r\n\r\n            <Field\r\n                component={AntCheckbox}\r\n                name=\"isMiddleware\"\r\n                type=\"checkbox\"\r\n                label=\"isMiddleware\"\r\n                submitCount={props.submitCount}\r\n            />\r\n\r\n            <div className=\"submit-container\">\r\n                <button className=\"ant-btn ant-btn-primary\" type=\"submit\">\r\n                    Save\r\n                </button>\r\n            </div>\r\n\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default ControllerMethodsForm\r\n\r\nconst RestTypeOtions = [\r\n    {\r\n        name: 'GET',\r\n        value: 'get'\r\n    },\r\n    {\r\n        name: 'POST',\r\n        value: 'post'\r\n    },\r\n    {\r\n        name: 'PUT',\r\n        value: 'put'\r\n    },\r\n    {\r\n        name: 'DELETE',\r\n        value: 'delete'\r\n    },\r\n]","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Controllers\\ControllerMethodsForm\\RequestItem.tsx",["960"],"import { Input, TreeSelect } from 'antd'\r\nimport { TreeNode } from 'rc-tree-select'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { RequestType } from './ControllerMethodsForm'\r\n\r\ntype RequestItemPropsType = {\r\n    item: RequestType,\r\n    initialValues: any,\r\n    onRowChange: (id: number, type: string, name: string)=>void\r\n}\r\n\r\nconst RequestItem: React.FC<RequestItemPropsType> = (props) => {\r\n    const [value, setValue] = useState<RequestType>(props.item)\r\n\r\n    useEffect( () => {\r\n        setValue(props.item)\r\n    },[props.initialValues])\r\n\r\n    const onRequestTypeChange = (typeValue: string, labelList: React.ReactNode[], extra: any) => {\r\n        setValue({...value, type: typeValue})\r\n        if (typeValue) {\r\n            props.onRowChange(props.item.id, typeValue, props.item.name)\r\n        } else {\r\n            props.onRowChange(props.item.id, '', props.item.name)\r\n        }\r\n        \r\n    }\r\n\r\n    const onRequestNameChange = (event: any) => {\r\n        setValue({...value, name: event.target.value})\r\n        props.onRowChange(props.item.id, props.item.type, event.target.value)\r\n    }\r\n\r\n    return (\r\n        <div key={props.item.id} className=\"row mt-1\">\r\n            <div className=\"ant-col ant-form-item-label mt-2\">\r\n                {props.item.label}\r\n            </div>\r\n\r\n            <div className=\"col-4\">\r\n                <TreeSelect\r\n                    className=\" ml-2 TreeSelect_Request_Type\"\r\n                    style={{ width: '100%' }}\r\n                    showSearch\r\n                    value={value.type}\r\n                    dropdownStyle={{ maxHeight: 400, overflow: 'auto' }}\r\n                    placeholder=\"Reqest type\"\r\n                    allowClear\r\n                    showCheckedStrategy={'SHOW_PARENT'}\r\n                    onChange={onRequestTypeChange}\r\n                >\r\n                    <TreeNode selectable={false} per_id={props.item.id} value=\"model\" title=\"Model\">\r\n                        {\r\n                            // @ts-ignore\r\n                            props.initialValues.modelsList.map((model: ModelsType) => {\r\n                                return (\r\n                                    <TreeNode key={model.name} per_id={props.item.id} value={model.name} title={model.name}></TreeNode>\r\n                                )\r\n                            })\r\n\r\n                        }\r\n                    </TreeNode>\r\n                    <TreeNode per_id={props.item.id} value=\"Request\" title=\"Request\"></TreeNode>\r\n                    <TreeNode selectable={false} per_id={props.item.id} value=\"list\" title=\"List\"></TreeNode>\r\n                </TreeSelect>\r\n            </div>\r\n            <div className=\"col-4\">\r\n                <Input className=\"w-100 ml-2\" value={value.name} name={props.item.id.toString()} onChange={onRequestNameChange} placeholder=\"Param name\" />\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RequestItem","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Controllers\\ControllerMethodsForm\\ControllerMethodsCode.tsx",["961","962"],"import React from 'react'\r\nimport { ControllerMethodsType } from '../../../../../../../api/ControllerMethodsAPI'\r\nimport { ControllersType } from '../../../../../../../api/projectAPI'\r\nimport { tab } from '../../../../../Code/Model/ModelCode'\r\nimport { ResponreItemsType, ResponseType } from './ControllerMethodsForm'\r\n\r\ntype ControllerMethodsCodePropsType = {\r\n    methodData: ControllerMethodsType | null,\r\n    controllerData: ControllersType\r\n}\r\n\r\nconst ControllerMethodsCode: React.FC<ControllerMethodsCodePropsType> = (props) => {\r\n\r\n    let request: Array<any> = []\r\n    if (props.methodData?.request) {\r\n        // console.log(JSON.parse(props.methodData?.request))\r\n        request = JSON.parse(props.methodData?.request)\r\n    }\r\n\r\n    console.log('ControllerMethodsCode props:',props)\r\n\r\n    return (\r\n        <div>\r\n            {/* <h5>ControllerMethodsCode:</h5> */}\r\n            <code>{tab(1, '/**')}</code><br />\r\n            <code>{tab(1, '* Descriptions')}</code><br />\r\n            {request.map(item => {\r\n                return (\r\n                    <div key={item.name}>\r\n                        <code key={item.name}>{tab(1, '* @param  \\\\Illuminate\\\\Http\\\\' + item.type + '  $' + item.name)}</code><br />\r\n                    </div>\r\n                )\r\n            })}\r\n            <code>{tab(1, '* @return \\\\Illuminate\\\\Http\\\\Response')}</code><br />\r\n            <code>{tab(1, '*/')}</code><br />\r\n\r\n            <code>{tab(1, 'public function ' + props.methodData?.name + '(')}</code>\r\n\r\n            {request.length > 0 ?\r\n                request.map( (item, index: number) => {\r\n                    // return (\r\n                    //     <code key={item.name}>{tab(0, '' + item.type + '  $' + item.name)}</code>\r\n                    // )\r\n                    if (index > 0 ) {\r\n                        return (\r\n                            <code key={item.name}>{tab(0, ', ' + item.type + '  $' + item.name)}</code>\r\n                        )\r\n                    } else {\r\n                        return (\r\n                            <code key={item.name}>{tab(0, '' + item.type + '  $' + item.name)}</code>\r\n                        )\r\n                    }\r\n                })\r\n                :\r\n                null\r\n            }\r\n\r\n            <code>{tab(0, ')')}</code><br />\r\n            <code>{tab(1, '{')}</code><br />\r\n\r\n            \r\n            {/* ПОЛУЧАЕМ BODY */}\r\n            {\r\n                props.methodData !== null && props.methodData.body_actions?\r\n                <><br />\r\n                <pre className=\"ml-5\">{props.methodData?.body_actions}</pre>\r\n                </>\r\n                : <><code>{tab(2, '//...')}</code><br /></>\r\n            }\r\n\r\n\r\n            {/* <code>{tab(2, 'return response()->json([')}</code><br /> */}\r\n\r\n            {/* Получаем RESPONSE */}\r\n            {/* <code>{tab(3, getResponse( props.methodData !== null ? JSON.parse(props.methodData.response) : null))}</code><br />  */}\r\n\r\n            {\r\n                 props.methodData !== null && props.methodData.response?\r\n                getResponse(2, props.methodData !== null ? JSON.parse(props.methodData.response) : null )\r\n                : <><code>{tab(2, '//...')}</code><br /></>\r\n            }\r\n\r\n\r\n            {/* <code>{tab(2, '], 200);')}</code><br /> */}\r\n\r\n            {/* { props.methodData !== null ? getResponse( JSON.parse(props.methodData.response)) : null} */}\r\n\r\n            <code>{tab(1, '}')}</code><br />\r\n\r\n            {/* <li>Какой код возвращает метод,</li> */}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ControllerMethodsCode\r\n\r\nconst getResponse = (tab: number, responseData: ResponseType) => {\r\n    switch (responseData.type) {\r\n        case 'method':\r\n            return getMetodResponse(tab, responseData)\r\n    \r\n        case 'Response':\r\n            const responseArray: Array<JSX.Element> = getResponseResponse(tab, responseData)\r\n            return responseArray\r\n        default:\r\n            break;\r\n    }\r\n}\r\n\r\nconst getMetodResponse = (tabIndex: number, response: ResponseType) => {\r\n    const methodName = response.methodName\r\n    console.log('methodName: ', methodName)\r\n    // return <>{'return self::'+methodName+'();'}</>\r\n    return [<><code>{tab(tabIndex, 'return self::'+methodName+'();')}</code><br/></>]\r\n}\r\n\r\nconst getResponseResponse = (tabIndex: number, response: ResponseType) => {\r\n    console.log('response: ', response)\r\n    let responseBlock: Array<JSX.Element> = []\r\n    responseBlock.push(<><code>{tab(tabIndex, 'return response()->json([')}</code><br /></>)\r\n\r\n    if (response.responseItems) {\r\n        console.log(response.responseItems)\r\n        response.responseItems.map( (item: ResponreItemsType, index) => {          \r\n            // if (index > 0) {\r\n            //     responseBlock.push(<><code>{tab(tabIndex, '\"'+item.key+'\"=> $'+item.variable)}</code><br/></>)\r\n            // } else {\r\n                responseBlock.push(<><code>{tab(tabIndex+1, '\"'+item.key+'\"=> $'+item.variable+', ')}</code><br/></>)\r\n            // }\r\n        })\r\n    } else {\r\n        console.log(response.responseItems)\r\n    }\r\n\r\n    responseBlock.push(<><code>{tab(tabIndex, '], 200);')}</code><br /></>)\r\n    console.log('responseBlock: ', responseBlock)\r\n    return responseBlock\r\n}\r\n\r\nconst getBody = (tabIndex: number, body: string) => {\r\n    return <><pre>{ tab( tabIndex, body) }</pre><br /></>\r\n}","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Controllers\\ControllerMethodsForm\\ResponseItem.tsx",["963","964"],"import { Button, Input, TreeSelect } from 'antd'\r\nimport { TreeNode } from 'rc-tree-select'\r\nimport React, {useState, useEffect} from 'react'\r\nimport { ControllerMethodsType } from '../../../../../../../api/ControllerMethodsAPI'\r\nimport { ResponreItemsType } from './ControllerMethodsForm'\r\n\r\ntype ValueType = {\r\n    type: 'Response' | 'method' | '',\r\n    methodId?: number,\r\n    methodName?: string,\r\n    responseItems?: Array<ResponreItemsType>\r\n}\r\n\r\ntype ResponseItemPropsType = {\r\n    responseInit: ValueType\r\n    initialValues: any,\r\n    setResponseValues: (responseValues: ValueType)=>void\r\n    // methodList !!!!!\r\n}\r\n\r\nconst ResponseItem: React.FC<ResponseItemPropsType> = (props) => {\r\n    const [value, setValue] = useState<ValueType>(props.responseInit)\r\n    // console.log(props)\r\n\r\n    useEffect( () => {\r\n        setValue(props.responseInit)\r\n    },[props.responseInit])\r\n\r\n    const onResponseTypeChange = (typeValue: 'Response'|'method'|'', labelList: React.ReactNode[], extra: any) => {\r\n        let newResponse: Array<ResponreItemsType> = []\r\n        let methodId: number = 0\r\n        let methodName: string = ''\r\n        let type: 'Response'|'method'|'' = ''\r\n\r\n        if(typeValue === 'Response') {\r\n            type = typeValue\r\n            // if(value.responseItems && value.responseItems.length === 0) {\r\n                newResponse.push({\r\n                    key: '',\r\n                    variable: ''\r\n                })\r\n            // }\r\n        } else {\r\n            // console.log('GO TO METHOD!!!',typeValue)\r\n            // console.log(props)\r\n            methodId = props.initialValues.controllerMethodsList.filter( (item: any) => item.name === typeValue )[0].id\r\n            methodName = props.initialValues.controllerMethodsList.filter( (item: any) => item.name === typeValue )[0].name\r\n            // console.log(methodId)\r\n\r\n            type = 'method'\r\n        }\r\n\r\n        setValue({...value, type: type, responseItems: newResponse, methodId: methodId, methodName: methodName})\r\n        props.setResponseValues({...value, type: type, responseItems: newResponse, methodId: methodId, methodName: methodName})\r\n\r\n        // console.log(typeValue)\r\n        // console.log(labelList)\r\n        // console.log(extra.triggerValue)\r\n    }\r\n\r\n    const onRowChange = (rowValue: string, elementNumber: number, param: 'key'|'variable') => {\r\n        // console.log(rowValue)\r\n        // console.log(elementNumber)\r\n        // console.log(param)\r\n\r\n        let responseItems: Array<ResponreItemsType> = value.responseItems ? value.responseItems : []\r\n        if (responseItems[elementNumber]) {\r\n            responseItems[elementNumber][param] = rowValue\r\n        }\r\n        setValue({\r\n            ...value,\r\n            responseItems: responseItems\r\n        })\r\n        props.setResponseValues({\r\n            ...value,\r\n            responseItems: responseItems\r\n        })\r\n    }\r\n\r\n    const addParam = () => {\r\n        let responseItems: Array<ResponreItemsType> = value.responseItems ? [... value.responseItems] : []\r\n        responseItems.push({key:'', variable:''})\r\n        setValue({...value, responseItems: responseItems })\r\n    }\r\n\r\n    const dellParam = () => {\r\n        let responseItems: Array<ResponreItemsType> = value.responseItems ? [... value.responseItems] : []\r\n        responseItems.pop()\r\n        setValue({...value, responseItems: responseItems })\r\n    }\r\n\r\n    console.log('ResponseItem value: ', value)\r\n    console.log('ResponseItem props: ', props)\r\n\r\n    return(\r\n        <>\r\n        <div className=\"row mt-1 mb-3\">\r\n            <div className=\"ant-col ant-form-item-label mt-2\">\r\n                Response:\r\n            </div>\r\n            <div className=\"col-4\">\r\n                <TreeSelect\r\n                    className=\" ml-2 TreeSelect_Request_Type\"\r\n                    style={{ width: '100%' }}\r\n                    showSearch\r\n                    value={value.type === 'method' ?  \r\n                    props.initialValues.controllerMethodsList.filter((controllerMethod: ControllerMethodsType)=>controllerMethod.id === value.methodId)[0].name\r\n                    : value.type\r\n                    }\r\n                    dropdownStyle={{ maxHeight: 400, overflow: 'auto' }}\r\n                    placeholder=\"Reqest type\"\r\n                    allowClear\r\n                    showCheckedStrategy={'SHOW_PARENT'}\r\n                    onChange={onResponseTypeChange}\r\n\r\n                    // treeCheckable={true}\r\n                >\r\n                    <TreeNode\r\n                        // selectable={false} \r\n                        // per_id={props.item.id} \r\n                        value=\"Response\" \r\n                        title=\"Response\"\r\n                    ></TreeNode>\r\n                    <TreeNode\r\n                        selectable={false} \r\n                        // per_id={props.item.id} \r\n                        value=\"method\" \r\n                        title=\"Method\"\r\n                    >\r\n                        {\r\n                            props.initialValues.controllerMethodsList !== undefined ?\r\n                            // @ts-ignore\r\n                            props.initialValues.controllerMethodsList.filter((controllerMethod: ControllerMethodsType)=>controllerMethod.name !== props.initialValues.name)\r\n                                .map(( controllerMethod: ControllerMethodsType ) => {\r\n                                return (\r\n                                    <TreeNode \r\n                                        key={controllerMethod.name}\r\n                                        // per_id={props.item.id} \r\n                                        value={controllerMethod.name} \r\n                                        title={controllerMethod.name}\r\n                                    ></TreeNode>\r\n                                )\r\n                            })\r\n                            : null\r\n                        }\r\n                    </TreeNode>\r\n                </TreeSelect>\r\n            </div>\r\n            <div className=\"col-4\">\r\n                {value.type === 'Response' ? \r\n                    <>\r\n                        <Button className=\"ml-2\" type=\"primary\" onClick={addParam}>Add param</Button>\r\n                        <Button className=\"ml-2\" type=\"primary\" onClick={dellParam}>Del param</Button>\r\n                    </>\r\n                :null}\r\n            </div>\r\n        </div>\r\n        {value.type === 'Response' ?\r\n            <div className=\"row mt-1 mb-3\">\r\n                <ResponseRows \r\n                    responseRows={value.responseItems ? value.responseItems : []}\r\n                    onRowChange={onRowChange}\r\n                />\r\n            </div>\r\n        :\r\n        null}\r\n        {value.type === 'method' ?\r\n            <div className=\"row mt-1 mb-3\">\r\n                methodId: {value.methodId}\r\n            </div>\r\n        :\r\n        null}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ResponseItem\r\n\r\ntype ResponseRowsPropsType = {\r\n    responseRows: Array<ResponreItemsType>\r\n    onRowChange: (value: string, elementNumber: number, param: 'key'|'variable')=>void\r\n}\r\n\r\nconst ResponseRows: React.FC<ResponseRowsPropsType> = (props) => {\r\n    // console.log(props)\r\n\r\n    const onNameChange = (event: any) => {\r\n        props.onRowChange(event.target.value, Number(event.target.name), 'key')\r\n    }\r\n\r\n    const onVariableChange = (event: any) => {\r\n        props.onRowChange(event.target.value, Number(event.target.name), 'variable')\r\n    }\r\n\r\n    return(\r\n        <>\r\n            {props.responseRows.map( (item, index: number)=> {\r\n                return(\r\n                // <>\r\n                <div key={index.toString()} className=\"row w-100\" >\r\n                        <div className=\"ant-col ant-form-item-label pr-2 mt-3\">\r\n                            param {index+1}:\r\n                        </div>\r\n                    <div className=\"col-4 mt-2\">\r\n                        <Input \r\n                            className=\"w-100 ml-2\" \r\n                            value={item.key} \r\n                            name={index.toString()}  \r\n                            onChange={onNameChange} \r\n                            placeholder=\"Param name\" \r\n                        />\r\n                    </div>\r\n                    <div className=\"col-4 mt-2\">\r\n                        <Input \r\n                            className=\"w-100 ml-2\" \r\n                            value={item.variable} \r\n                            name={index.toString()} \r\n                            onChange={onVariableChange} \r\n                            placeholder=\"Param variable\" \r\n                        />\r\n                    </div>\r\n                </div>\r\n                // </>\r\n                )\r\n            })}\r\n        </>\r\n    )\r\n}",["965","966"],"C:\\OSPanel\\domains\\DeployProject\\src\\Components\\English\\English.tsx",["967","968","969","970"],"import { Button, List, Pagination, Tabs } from 'antd'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { EnglishPropsType } from './EnglishContainer'\r\nimport { VocabularyType } from './../../api/vocabularyAPI'\r\n\r\nimport SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition'\r\nimport Trening from './Trening/Trening'\r\n\r\n// import {speechSynthesis} from 'speech-synthesis'\r\n\r\nconst { TabPane } = Tabs\r\n\r\nconst English: React.FC<EnglishPropsType> = (props) => {\r\n    const [current, setCurrent] = useState(props.part)\r\n    const speechSynthesis = require('speech-synthesis')\r\n\r\n    useEffect(() => {\r\n        props.getVocabularyList(1)\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        // props.getVocabularyList(1)\r\n    }, [props.vocabularyList, props.count, props.part])\r\n\r\n    const onPlayEng = (url: string | null) => {\r\n        speechSynthesis(url, 'en-US')\r\n    }\r\n\r\n    const onPlayRus = (word: string | null) => {\r\n        speechSynthesis(word, 'ru-RU');\r\n        // speechSynthesis(word, 'en-GB')\r\n        // speechSynthesis(word, 'en-US')\r\n    }\r\n\r\n    const onPaginationChange = (pageNumber: number) => {\r\n        setCurrent(pageNumber)\r\n        console.log(pageNumber)\r\n        props.getVocabularyList(pageNumber)\r\n    }\r\n\r\n    // console.log(props.part)\r\n\r\n    return (\r\n        <Tabs defaultActiveKey=\"1\" >\r\n\r\n            <TabPane tab=\"Vocabulary List\" key=\"1\">\r\n                <Pagination\r\n                    showQuickJumper\r\n                    // defaultCurrent={1} \r\n                    defaultPageSize={100}\r\n                    current={props.part}\r\n                    total={props.count}\r\n                    onChange={onPaginationChange}\r\n                />\r\n\r\n                <List\r\n                    size=\"small\"\r\n                    header={<div>Header</div>}\r\n                    footer={<div>Footer</div>}\r\n                    bordered\r\n                    dataSource={props.vocabularyList}\r\n                    renderItem={(item: VocabularyType) =>\r\n                        <List.Item\r\n                        // actions={item.eng_sound ? [<a key={item.eng_sound} onClick={()=>{onPlay(item.eng_sound)}}>sound</a>] : []}\r\n                        >\r\n                            <div className=\"row w-100\">\r\n                                <div className=\"col-1 text-right\">{item.id}</div>\r\n                                <div className=\"col-2 text-right\">\r\n                                    {item.eng_value}\r\n                                </div>\r\n                                <div className=\"col-3 text-right\">\r\n                                    {item.rus_value + ' ' + item.part_of_speech}\r\n                                </div>\r\n                                <div className=\"col-6\">\r\n                                    <Button\r\n                                        type=\"primary\" size=\"small\"\r\n                                        onClick={() => {\r\n                                            // onPlayEng(item.eng_sound) \r\n                                            onPlayEng(item.eng_value)\r\n                                        }}\r\n                                    >Eng</Button>\r\n                                    <Button onClick={() => { onPlayRus(item.rus_value) }} className=\"ml-1\" type=\"primary\" size=\"small\">Rus</Button>\r\n                                    <Button className=\"ml-3\" type=\"primary\" size=\"small\">Lern</Button>\r\n                                    <Button className=\"ml-1\" type=\"primary\" size=\"small\">Know it</Button>\r\n                                </div>\r\n                            </div>\r\n                        </List.Item>\r\n                    }\r\n                />\r\n            </TabPane>\r\n\r\n            <TabPane tab=\"to Lern\" key=\"2\"></TabPane>\r\n            <TabPane tab=\"Active Vocabulary\" key=\"3\"></TabPane>\r\n            <TabPane tab=\"Trening\" key=\"4\">\r\n                <Trening />\r\n            </TabPane>\r\n        </Tabs>\r\n    )\r\n}\r\n\r\nexport default English","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\CurrentProject\\Frontend\\Frontend.tsx",["971"],"import { Collapse } from 'antd'\r\nimport CollapsePanel from 'antd/lib/collapse/CollapsePanel'\r\nimport { Formik } from 'formik'\r\nimport React, {useEffect} from 'react'\r\nimport InstansesFrontendForm from './Instanses/InstansesFrontendForm'\r\n\r\ntype FrontendPropsType = {\r\n    projectId: number\r\n}\r\n\r\nconst Frontend:React.FC<FrontendPropsType> = (props) => {\r\n    useEffect( ()=> {\r\n        getCurrentFrontend(props.projectId)\r\n    },[])\r\n    console.log('Frontend props: ', props)\r\n    type InstansesInitialValuesType = {\r\n\r\n    }\r\n    const instansesInitialValues: InstansesInitialValuesType = {\r\n        \r\n    }\r\n\r\n    const instansesHandleSubmit = (values: InstansesInitialValuesType) => {\r\n        console.log(values)\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            <h5>Frontend</h5>\r\n            <Collapse defaultActiveKey={[]}>\r\n                <CollapsePanel header=\"Instanses\" key=\"1\">\r\n                    <li>1) Create new component \"FrontEnd\"</li>\r\n                    <li>1.1) Create model</li>\r\n                    <li>1.2) Create migrations</li>\r\n                    <li>1.3) Create controller</li>\r\n                    <Formik\r\n                        initialValues={instansesInitialValues}\r\n                        onSubmit={instansesHandleSubmit}\r\n                    >\r\n                        {InstansesFrontendForm}\r\n                    </Formik>\r\n                </CollapsePanel>\r\n                <CollapsePanel header=\"APIs\" key=\"2\"></CollapsePanel>\r\n                <CollapsePanel header=\"Reducers\" key=\"3\"></CollapsePanel>\r\n                <CollapsePanel header=\"Components\" key=\"4\">\r\n                    <li>1) Create new component</li>\r\n                    <li>1.1) Create model</li>\r\n                    <li>1.2) Create migrations</li>\r\n                    <li>1.3) Create controller</li>\r\n                    <li>2) Get componentList</li>\r\n                   \r\n                </CollapsePanel>\r\n            </Collapse>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Frontend\r\n\r\nexport const getCurrentFrontend = (projectId: Number) => {\r\n    console.log('getCurrentFrontend for: '+projectId)\r\n}","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\CurrentProject\\Frontend\\Instanses\\InstansesFrontendForm.tsx",["972","973"],"import { Button, Tree } from \"antd\"\r\nimport { Field, Form, FormikProps, FormikValues } from \"formik\"\r\nimport React, { ReactNode, useState } from \"react\"\r\nimport { AntInput } from \"../../../../../../utils/Formik/CreateAntField\"\r\nimport { validateRequired } from \"../../../../../../utils/Formik/ValidateFields\"\r\n\r\ntype OtherProps = {\r\n\r\n}\r\n\r\nconst InstansesFrontendForm: ((props: OtherProps & FormikProps<FormikValues>) => ReactNode) = (props) => {\r\n    const [isDataChanged, setIsDataChanged] = useState(false)\r\n\r\n    // const [srcTree, setSrcTree] = useState(props.initialValues.src_tree)\r\n    const [srcTree, setSrcTree] = useState(treeData)\r\n\r\n    const addTreeItem = (trace:Array<string>) => {\r\n        for (let index = 0; index < trace.length; index++) {\r\n            const key = trace[index]\r\n            console.log(key)\r\n        }\r\n    }\r\n\r\n    const onChange = (val: any) => {\r\n        setIsDataChanged(true)\r\n    }\r\n\r\n    return (\r\n        <Form\r\n            className=\"form-container mt-2\"\r\n            onSubmit={props.handleSubmit}\r\n        >\r\n            <Field\r\n                component={AntInput}\r\n                name=\"name\"\r\n                type=\"text\"\r\n                label=\"Name\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n                onChange={onChange}\r\n            />\r\n\r\n            <TreeSRC addTreeItem={addTreeItem}/>\r\n\r\n            {isDataChanged ?\r\n                <div className=\"submit-container\">\r\n                    <button className=\"ant-btn ant-btn-primary\" type=\"submit\">\r\n                        Save\r\n                    </button>\r\n                </div>\r\n                : null}\r\n\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default InstansesFrontendForm\r\n\r\n\r\ntype TreeSRCPropsType = {\r\n    addTreeItem: (trace:Array<string>) => void,\r\n}\r\n\r\nconst TreeSRC: React.FC<TreeSRCPropsType> = (props) => {\r\n    const onSelect = (selectedKeys: React.Key[], info: any) => {\r\n        console.log('selected', selectedKeys, info);\r\n    }\r\n\r\n    const onCheck = (checkedKeys: any, info: any) => {\r\n        console.log('onCheck', checkedKeys, info);\r\n    }\r\n    return (\r\n        <div className=\"ant-row ant-form-item \">\r\n            <div className=\"ant-col ant-form-item-label pr-2\">SRC tree:</div>\r\n            <div className=\"ant-col ant-form-item-control\">\r\n            <Tree\r\n                checkable\r\n                defaultExpandedKeys={[]}\r\n                defaultSelectedKeys={['0-0-0', '0-0-1']}\r\n                defaultCheckedKeys={['0-0-0', '0-0-1']}\r\n                onSelect={onSelect}\r\n                onCheck={onCheck}\r\n                treeData={treeData}\r\n            />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype FolderRowPropsType = {\r\n    name: string,\r\n    trace: Array<string>\r\n    // addTreeItem: (trace:Array<string>) => void,\r\n    \r\n}\r\n\r\nexport const FolderRow:React.FC<FolderRowPropsType> = (props) => {\r\n    const onAdd = (v: Array<string>) => {\r\n        console.log(v)\r\n        // addTreeItem(trace).bind(props.trace)\r\n    }\r\n    return(\r\n        <div>{props.name}\r\n            <Button onClick={()=>{onAdd(props.trace)}} className=\"ml-2\" type=\"primary\" size=\"small\">Add</Button>\r\n            <Button className=\"ml-2\" type=\"primary\" size=\"small\">Dell</Button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport type treeDataItem = {\r\n    title: string | JSX.Element,\r\n    key: string,\r\n    disableCheckbox?: boolean,\r\n    disabled?: boolean,\r\n    children?: Array<treeDataItem>,\r\n    trace?: Array<string>,\r\n}\r\n\r\nconst treeData: Array<treeDataItem> = [\r\n    {\r\n        title: <FolderRow name=\"src\" trace={['src']}/>,\r\n        key: '0',\r\n        trace:['0'],\r\n        children: [\r\n        //     {\r\n        //         title: <FolderRow name=\"parent 1-0\"/>,\r\n        //         key: '0-0-0',\r\n        //         disabled: true,\r\n        //         children: [\r\n        //             {\r\n        //                 title: 'leaf0',\r\n        //                 key: '0-0-0-0',\r\n        //                 // disableCheckbox: true,\r\n        //             },\r\n        //             {\r\n        //                 title: 'leaf1',\r\n        //                 key: '0-0-0-1',\r\n        //             },\r\n        //         ],\r\n        //     },\r\n            {\r\n                title: <FolderRow name=\"Components\" trace={['src', 'Components']}/>,\r\n                key: '0-0-1',\r\n                children: [{ title: <FolderRow name=\"Development\" trace={['src', 'Components', 'Development']}/>,  key: '0-0-1-0' }],\r\n            },\r\n        ],\r\n    },\r\n];\r\n\r\n","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Controllers\\FullControllerMethodCode\\FullControllerMethodCode.tsx",["974","975","976"],"import React, { useEffect, useState } from 'react'\r\nimport { ControllerMethodsType } from '../../../../../../../api/ControllerMethodsAPI'\r\nimport { ControllersType } from '../../../../../../../api/projectAPI'\r\nimport { tab } from '../../../../../Code/Model/ModelCode'\r\nimport { FullControllerMethodCodePropsType } from './FullControllerMethodCodeContainer'\r\nimport ControllerMethodsCode from './../ControllerMethodsForm/ControllerMethodsCode'\r\n\r\nconst FullControllerMethodCode:React.FC<FullControllerMethodCodePropsType> = (props) => {\r\n    const [methods, setMethods] = useState<Array<ControllerMethodsType>>()\r\n    useEffect(() => {\r\n        if (props.controllerMethodsList.length === 0) {\r\n            props.getControllerMethodsList()\r\n        }\r\n    }, [])\r\n    useEffect(() => {\r\n        setMethods(props.controllerMethodsList.filter(item=> item.controller_id === props.controllerData.id))\r\n    }, [props.controllerMethodsList])\r\n\r\n    console.log(props)\r\n    console.log(methods)\r\n\r\n    return(\r\n        <div className=\"text-left\">\r\n            <code>{tab(0, '<?php')}</code><br/>\r\n            <br/>\r\n            <code>{tab(0, 'namespace App\\\\Http\\\\Controllers;')}</code><br/>\r\n            <br/>\r\n            <code>{tab(0, 'use App\\\\'+props.controllerData.models[0].name+';')}</code><br/>\r\n            <code>{tab(0, 'use Illuminate\\\\Http\\\\Request;')}</code><br/>\r\n            <br/>\r\n            <code>{tab(0, 'class '+props.controllerData.name+' extends Controller')}</code><br/>\r\n            <code>{tab(0, '{')}</code><br/>\r\n            <code>{tab(1, '//...')}</code><br/>\r\n            {\r\n                methods?.map(method => {\r\n                    return (\r\n                        <ControllerMethodsCode\r\n                            methodData={method}\r\n                            controllerData={props.controllerData}\r\n                        />\r\n                    ) \r\n                })\r\n            }\r\n            <code>{tab(0, '}')}</code><br/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FullControllerMethodCode","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Controllers\\FullControllerMethodCode\\FullControllerMethodCodeContainer.tsx",["977"],"import {connect} from 'react-redux'\r\nimport FullControllerMethodCode from './FullControllerMethodCode'\r\nimport { AppStateType } from '../../../../../../../redux/store'\r\nimport { getControllersList, createControllerMethodsList, updateControllerMethodsList, getControllerMethodsList } from '../../../../../../../redux/projectReducer'\r\nimport { ControllersType } from '../../../../../../../api/projectAPI'\r\n// import { ModelsType } from '../../../.././../api/projectAPI'\r\n\r\ntype OwnFullControllerMethodCodePropsType = {\r\n    controllerData: ControllersType\r\n}\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    getControllerMethodsList: ()=>void,\r\n    updateControllerMethodsList: (values: any, controllerMethodId: number)=>void,\r\n    createControllerMethodsList: (values: any)=> void,\r\n    // getControllersList: (backendId: number) => void\r\n    // createController: (values: any) => void,\r\n    // getModelsList: (backendId: number) => void,\r\n}\r\n\r\nexport type FullControllerMethodCodePropsType = MapPropsType & MapDispatchPropsType & OwnFullControllerMethodCodePropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        controllersList: state.projects.controllersList,\r\n        modelsList: state.projects.modelsList,\r\n        controllerMethodsList: state.projects.controllerMethodsList\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnFullControllerMethodCodePropsType, AppStateType>(mapStateToProps, \r\n    {getControllerMethodsList, updateControllerMethodsList, createControllerMethodsList}) \r\n    (FullControllerMethodCode)\r\n    \r\n\r\n","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\English\\EnglishContainer.tsx",["978"],"import {connect} from 'react-redux'\r\nimport English from './English'\r\nimport {actions} from '../../redux/authReducer'\r\nimport { AppStateType } from '../../redux/store'\r\nimport {getVocabularyList} from './../../redux/vocabularyReducer'\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype OwnEnglishType = {\r\n\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    getVocabularyList: (part: number)=>void\r\n}\r\n\r\nexport type EnglishPropsType = MapPropsType & MapDispatchPropsType & OwnEnglishType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        vocabularyList: state.vocabulary.vocabularyList,\r\n        part: state.vocabulary.part,\r\n        count: state.vocabulary.count,\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnEnglishType, AppStateType>(mapStateToProps, \r\n    {getVocabularyList}) \r\n    (English)\r\n    \r\n\r\n","C:\\OSPanel\\domains\\DeployProject\\src\\redux\\vocabularyReducer.ts",["979"],"\r\nimport { Dispatch } from 'redux'\r\nimport { vocabularyAPI, VocabularyType } from './../api/vocabularyAPI'\r\nimport { UserType } from './authReducer'\r\nimport { BaseThunkType, InferActionsTypes } from './store'\r\n\r\nexport type InitialStateType = {\r\n    vocabularyList: Array<VocabularyType>,\r\n    part: number,\r\n    count: number,\r\n}\r\n\r\nlet initialState: InitialStateType = {\r\n    vocabularyList: [],\r\n    part: 1,\r\n    count: 0,\r\n}\r\n\r\nconst vocabularyReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/USERS/SET_VOCABULARY_LIST':\r\n            return { ...state, vocabularyList: action.vocabularyList, part: action.part, count: action.count}\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    setVocabularyList: (vocabularyList: Array<VocabularyType>, part: number, count: number) => \r\n    ({ type: 'SN/USERS/SET_VOCABULARY_LIST', vocabularyList, part, count } as const),\r\n}\r\n\r\nexport const getVocabularyList = (part: number): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        let response = await vocabularyAPI.getVocabularyPart(part)\r\n        console.log(response)\r\n        dispatch( actions.setVocabularyList(response.data.vocabularyList, Number(response.data.part), Number(response.data.count)) )\r\n    }\r\n}\r\n\r\nexport default vocabularyReducer\r\n\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsTypes>\r\nexport type DispatchType = Dispatch<ActionsTypes>","C:\\OSPanel\\domains\\DeployProject\\src\\api\\vocabularyAPI.ts",["980","981"],"import { UserType } from '../redux/authReducer'\r\nimport {instance, getToken} from './api'\r\n\r\nexport type VocabularyType = {\r\n    eng_value: string,\r\n    eng_sound: string | null,\r\n    rus_value: string,\r\n    part_of_speech: string,\r\n    id: number,\r\n\r\n}\r\n\r\ntype GetVocabularyPartType = {\r\n    vocabularyList: Array<VocabularyType>,\r\n    part: string,\r\n    count: number,\r\n}\r\n\r\nexport const vocabularyAPI = {\r\n    getVocabularyPart(part: number) {\r\n        return instance.get<GetVocabularyPartType>(`getVocabularyPart/`+part)\r\n        .then(response => {\r\n            console.log('getVocabularyPart: ', response)\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                return err.response\r\n            } else if (err.request) {\r\n            } else {\r\n            }\r\n            return null\r\n        })\r\n    }\r\n}","C:\\OSPanel\\domains\\DeployProject\\src\\Components\\English\\Trening\\Trening.tsx",[],"C:\\ospanel\\domains\\DeployProject\\src\\index.tsx",[],"C:\\ospanel\\domains\\DeployProject\\src\\reportWebVitals.ts",[],"C:\\ospanel\\domains\\DeployProject\\src\\App.tsx",[],"C:\\ospanel\\domains\\DeployProject\\src\\redux\\store.ts",[],"C:\\ospanel\\domains\\DeployProject\\src\\redux\\authReducer.ts",[],"C:\\ospanel\\domains\\DeployProject\\src\\redux\\appReducer.ts",[],"C:\\ospanel\\domains\\DeployProject\\src\\Components\\ToDo\\ToDoContainer.tsx",[],"C:\\ospanel\\domains\\DeployProject\\src\\Components\\Login\\LoginContainer.tsx",[],"C:\\ospanel\\domains\\DeployProject\\src\\Components\\Header\\HeaderContainer.tsx",[],"C:\\ospanel\\domains\\DeployProject\\src\\Components\\Orders\\OrdersContainer.tsx",[],"C:\\ospanel\\domains\\DeployProject\\src\\Components\\TasksTree\\TasksTreeContainer.tsx",[],"C:\\ospanel\\domains\\DeployProject\\src\\Components\\Register\\RegisterContainer.tsx",[],"C:\\ospanel\\domains\\DeployProject\\src\\Components\\Users\\UsersContainer.tsx",[],"C:\\ospanel\\domains\\DeployProject\\src\\Components\\Users\\CurrentUser\\CurrentUserContainer.tsx",[],"C:\\ospanel\\domains\\DeployProject\\src\\Components\\English\\EnglishContainer.tsx",["982"],"C:\\ospanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\CurrentProject\\CurrentProjectContainer.tsx",["983","984"],"C:\\ospanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\ProjectsContainer.tsx",[],"C:\\ospanel\\domains\\DeployProject\\src\\redux\\codeReducer.ts",[],"C:\\ospanel\\domains\\DeployProject\\src\\redux\\taskReducer.ts",[],"C:\\ospanel\\domains\\DeployProject\\src\\redux\\TaskListReducer.ts",[],"C:\\ospanel\\domains\\DeployProject\\src\\redux\\usersReducer.ts",[],"C:\\ospanel\\domains\\DeployProject\\src\\redux\\vocabularyReducer.ts",["985"],"C:\\ospanel\\domains\\DeployProject\\src\\redux\\projectReducer.ts",[],"C:\\ospanel\\domains\\DeployProject\\src\\api\\authAPI.ts",[],"C:\\ospanel\\domains\\DeployProject\\src\\redux\\usersSelector.ts",[],"C:\\ospanel\\domains\\DeployProject\\src\\Components\\ToDo\\ToDoMobile.tsx",[],"C:\\ospanel\\domains\\DeployProject\\src\\Components\\Login\\Login.tsx",[],"C:\\ospanel\\domains\\DeployProject\\src\\Components\\ToDo\\ToDoBrowser.tsx",[],"C:\\ospanel\\domains\\DeployProject\\src\\Components\\Header\\Header.tsx",[],"C:\\ospanel\\domains\\DeployProject\\src\\Components\\Orders\\Orders.tsx",[],"C:\\ospanel\\domains\\DeployProject\\src\\Components\\TasksTree\\TasksTreeBrowser.tsx",[],"C:\\ospanel\\domains\\DeployProject\\src\\Components\\TasksTree\\TasksTreeMobile.tsx",[],"C:\\ospanel\\domains\\DeployProject\\src\\Components\\Register\\Register.tsx",[],"C:\\ospanel\\domains\\DeployProject\\src\\Components\\Users\\Users.tsx",[],"C:\\ospanel\\domains\\DeployProject\\src\\Components\\Users\\UsersMobile.tsx",[],"C:\\ospanel\\domains\\DeployProject\\src\\Components\\Users\\CurrentUser\\CurrentUser.tsx",[],"C:\\ospanel\\domains\\DeployProject\\src\\Components\\Users\\CurrentUser\\CurrentUserMobile.tsx",[],"C:\\ospanel\\domains\\DeployProject\\src\\Components\\English\\English.tsx",["986","987","988","989"],"import { Button, List, Pagination, Tabs } from 'antd'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { EnglishPropsType } from './EnglishContainer'\r\nimport { VocabularyType } from './../../api/vocabularyAPI'\r\n\r\nimport SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition'\r\nimport Trening from './Trening/TreningContainer'\r\n\r\n// import {speechSynthesis} from 'speech-synthesis'\r\n\r\nconst { TabPane } = Tabs\r\n\r\nconst English: React.FC<EnglishPropsType> = (props) => {\r\n    const [current, setCurrent] = useState(props.part)\r\n    const speechSynthesis = require('speech-synthesis')\r\n\r\n    useEffect(() => {\r\n        props.getVocabularyList(1)\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        // props.getVocabularyList(1)\r\n    }, [props.vocabularyList, props.count, props.part])\r\n\r\n    const onPlayEng = (url: string | null) => {\r\n        speechSynthesis(url, 'en-US')\r\n    }\r\n\r\n    const onPlayRus = (word: string | null) => {\r\n        speechSynthesis(word, 'ru-RU');\r\n        // speechSynthesis(word, 'en-GB')\r\n        // speechSynthesis(word, 'en-US')\r\n    }\r\n\r\n    const onPaginationChange = (pageNumber: number) => {\r\n        setCurrent(pageNumber)\r\n        console.log(pageNumber)\r\n        props.getVocabularyList(pageNumber)\r\n    }\r\n\r\n    const onStatusChange = (id: number, status: string) => {\r\n        props.updateVocabulary({\r\n            status: status//'inProcess'\r\n        }, id)\r\n    }\r\n\r\n    // console.log(props.part)\r\n\r\n    return (\r\n        <Tabs defaultActiveKey=\"1\" >\r\n\r\n            <TabPane tab=\"Vocabulary List\" key=\"1\">\r\n                <Pagination\r\n                    showQuickJumper\r\n                    // defaultCurrent={1} \r\n                    defaultPageSize={100}\r\n                    current={props.part}\r\n                    total={props.count}\r\n                    onChange={onPaginationChange}\r\n                />\r\n\r\n                <List\r\n                    size=\"small\"\r\n                    header={<div>Header</div>}\r\n                    footer={<div>Footer</div>}\r\n                    bordered\r\n                    dataSource={props.vocabularyList}\r\n                    renderItem={(item: VocabularyType) =>\r\n                        <List.Item\r\n                        // actions={item.eng_sound ? [<a key={item.eng_sound} onClick={()=>{onPlay(item.eng_sound)}}>sound</a>] : []}\r\n                        >\r\n                            <div className=\"row w-100\">\r\n                                <div className=\"col-1 text-right\">{item.id}</div>\r\n                                <div className=\"col-2 text-right\">\r\n                                    {item.status === 'learned' ? <b>{item.eng_value}</b> : item.eng_value}\r\n                                    \r\n                                </div>\r\n                                <div className=\"col-3 text-right\">\r\n                                    {item.rus_value + ' ' + item.part_of_speech}\r\n                                </div>\r\n                                <div className=\"col-6\">\r\n                                    <Button\r\n                                        type=\"primary\" size=\"small\"\r\n                                        onClick={() => {\r\n                                            // onPlayEng(item.eng_sound) \r\n                                            onPlayEng(item.eng_value)\r\n                                        }}\r\n                                    >Eng</Button>\r\n                                    <Button onClick={() => { onPlayRus(item.rus_value) }} className=\"ml-1\" type=\"primary\" size=\"small\">Rus</Button>\r\n                                    <Button className=\"ml-3\" type=\"primary\" size=\"small\" onClick={ ()=>{ onStatusChange(item.id, 'inProcess') } }>Lern</Button>\r\n                                    <Button className=\"ml-1\" type=\"primary\" size=\"small\" onClick={ ()=>{ onStatusChange(item.id, 'learned') } }>Know it</Button>\r\n                                    <Button className=\"ml-3\" type=\"primary\" size=\"small\">Edit</Button>\r\n                                </div>\r\n                            </div>\r\n                        </List.Item>\r\n                    }\r\n                />\r\n            </TabPane>\r\n\r\n            <TabPane tab=\"to Lern\" key=\"2\"></TabPane>\r\n            <TabPane tab=\"Active Vocabulary\" key=\"3\"></TabPane>\r\n            <TabPane tab=\"Trening\" key=\"4\">\r\n                <Trening />\r\n            </TabPane>\r\n        </Tabs>\r\n    )\r\n}\r\n\r\nexport default English",["990","991"],"C:\\ospanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\CurrentProject\\CurrentProject.tsx",["992"],"C:\\ospanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\Projects.tsx",["993","994","995","996","997"],"C:\\ospanel\\domains\\DeployProject\\src\\api\\taskListAPI.ts",[],"C:\\ospanel\\domains\\DeployProject\\src\\api\\usersAPI.ts",[],"C:\\ospanel\\domains\\DeployProject\\src\\api\\vocabularyAPI.ts",["998"],"C:\\ospanel\\domains\\DeployProject\\src\\api\\ControllerMethodsAPI.ts",[],"C:\\ospanel\\domains\\DeployProject\\src\\api\\api.ts",[],"C:\\ospanel\\domains\\DeployProject\\src\\api\\projectAPI.ts",[],"C:\\ospanel\\domains\\DeployProject\\src\\api\\taskApi.ts",[],"C:\\ospanel\\domains\\DeployProject\\src\\Components\\TasksTree\\TaskListActions\\TaskListActions.ts",[],"C:\\ospanel\\domains\\DeployProject\\src\\utils\\Date\\NewDeteByString.ts",[],"C:\\ospanel\\domains\\DeployProject\\src\\Components\\Login\\LoginForm.tsx",[],"C:\\ospanel\\domains\\DeployProject\\src\\Components\\Header\\MenuContainer.tsx",[],"C:\\ospanel\\domains\\DeployProject\\src\\Components\\Register\\RegisterForm.tsx",[],"C:\\ospanel\\domains\\DeployProject\\src\\Components\\ToDo\\Settings\\SettingsModalContainer.tsx",[],"C:\\ospanel\\domains\\DeployProject\\src\\Components\\ToDo\\ToDoForm\\ToDoForm.tsx",[],"C:\\ospanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\CurrentProject\\Frontend\\Frontend.tsx",["999"],"C:\\ospanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\BackendContainer.tsx",["1000","1001"],"C:\\ospanel\\domains\\DeployProject\\src\\Components\\English\\Trening\\TreningContainer.tsx",[],"C:\\ospanel\\domains\\DeployProject\\src\\Components\\ToDo\\ToDoHeader\\ToDoHeaderMobile.tsx",[],"C:\\ospanel\\domains\\DeployProject\\src\\Components\\Users\\CurrentUser\\UserDataForm.tsx",[],"C:\\ospanel\\domains\\DeployProject\\src\\Components\\ToDo\\ToDoHeader\\ToDoHeader.tsx",[],"C:\\ospanel\\domains\\DeployProject\\src\\Components\\ToDo\\TimeScale\\TimeScale.tsx",[],"C:\\ospanel\\domains\\DeployProject\\src\\Components\\TasksTree\\TaskTreeMobileItem.tsx",[],"C:\\ospanel\\domains\\DeployProject\\src\\utils\\Formik\\ValidateFields.ts",[],"C:\\ospanel\\domains\\DeployProject\\src\\Components\\Header\\MenuBrowser.tsx",[],"C:\\ospanel\\domains\\DeployProject\\src\\Components\\TasksTree\\TaskTreeForm\\NewTaskTreeForm.tsx",[],"C:\\ospanel\\domains\\DeployProject\\src\\utils\\Formik\\CreateAntField.tsx",[],"C:\\ospanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Backend.tsx",["1002"],"C:\\ospanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\CurrentProject\\Frontend\\Instanses\\InstansesFrontendForm.tsx",["1003","1004"],"C:\\ospanel\\domains\\DeployProject\\src\\Components\\English\\Trening\\Trening.tsx",[],"C:\\ospanel\\domains\\DeployProject\\src\\utils\\array-helpers.ts",[],"C:\\ospanel\\domains\\DeployProject\\src\\Components\\ToDo\\TimeScale\\TaskItem\\TaskItemContainer.tsx",[],"C:\\ospanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Controllers\\ControllersContainer.tsx",[],"C:\\ospanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Instanses\\InstansesForm.tsx",[],"C:\\ospanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Models\\ModelsContainer.tsx",[],"C:\\ospanel\\domains\\DeployProject\\src\\Components\\ToDo\\TimeScale\\TaskItem\\TaskItem.tsx",[],"C:\\ospanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Models\\Models.tsx",["1005","1006","1007","1008","1009"],"C:\\ospanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Controllers\\Controllers.tsx",["1010","1011","1012","1013"],"C:\\ospanel\\domains\\DeployProject\\src\\Components\\ToDo\\ToDoActions\\ToDoActionsRouter.tsx",[],"C:\\ospanel\\domains\\DeployProject\\src\\Components\\Development\\Code\\CodeModalContainer.tsx",[],"C:\\ospanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Controllers\\ControllerMethodsContainer.tsx",["1014"],"C:\\ospanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Controllers\\ControllerForm.tsx",["1015","1016","1017","1018","1019","1020"],"C:\\ospanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Controllers\\FullControllerMethodCode\\FullControllerMethodCodeContainer.tsx",["1021"],"C:\\ospanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Models\\FieldForm.tsx",[],"C:\\ospanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Models\\ModelForm.tsx",["1022","1023","1024","1025","1026"],"C:\\ospanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Models\\FieldListContainer.tsx",[],"C:\\ospanel\\domains\\DeployProject\\src\\Components\\Development\\Code\\CodeModal.tsx",["1027","1028"],"C:\\ospanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Controllers\\ControllerMethods.tsx",["1029","1030","1031","1032"],"C:\\ospanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Controllers\\FullControllerMethodCode\\FullControllerMethodCode.tsx",["1033","1034","1035"],"C:\\ospanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Models\\FieldList.tsx",[],"C:\\ospanel\\domains\\DeployProject\\src\\Components\\Development\\Code\\Model\\ModelCodeContainer.tsx",[],"C:\\ospanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Controllers\\ControllerMethodsForm\\ControllerMethodsForm.tsx",["1036","1037","1038","1039","1040","1041","1042"],"C:\\ospanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Controllers\\ControllerMethodsForm\\ControllerMethodsCode.tsx",["1043","1044"],"C:\\ospanel\\domains\\DeployProject\\src\\Components\\Development\\Code\\Model\\ModelCode.tsx",["1045"],"C:\\ospanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Controllers\\ControllerMethodsForm\\ResponseItem.tsx",["1046","1047"],"C:\\ospanel\\domains\\DeployProject\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Controllers\\ControllerMethodsForm\\RequestItem.tsx",["1048"],"C:\\ospanel\\domains\\DeployProject\\src\\Components\\TasksTree\\TaskTreeForm\\Project\\ProjectForm.tsx",[],"C:\\ospanel\\domains\\DeployProject\\src\\Components\\TasksTree\\TaskTreeForm\\Project\\OldProject\\OldProjectFormContainer.tsx",[],"C:\\ospanel\\domains\\DeployProject\\src\\Components\\TasksTree\\TaskTreeForm\\Project\\NewProject\\NewProjectForm.tsx",["1049","1050","1051"],"C:\\ospanel\\domains\\DeployProject\\src\\Components\\TasksTree\\TaskTreeForm\\Project\\OldProject\\OldProjectForm.tsx",[],"C:\\ospanel\\domains\\DeployProject\\src\\Components\\TasksTree\\TaskTreeForm\\Project\\BackendForm\\BackendFormContainer.tsx",[],"C:\\ospanel\\domains\\DeployProject\\src\\Components\\TasksTree\\TaskTreeForm\\Project\\BackendForm\\BackendForm.tsx",["1052","1053","1054"],"C:\\ospanel\\domains\\DeployProject\\src\\Components\\ToDo\\Settings\\SettingsModal.tsx",[],"C:\\ospanel\\domains\\DeployProject\\src\\Components\\Header\\MenuMobile.tsx",[],"C:\\ospanel\\domains\\DeployProject\\src\\Components\\TasksTree\\TaskTreeBrowserItemContainer.tsx",[],"C:\\ospanel\\domains\\DeployProject\\src\\Components\\ToDo\\TimeScale\\TimeScaleContainer.tsx",[],"C:\\ospanel\\domains\\DeployProject\\src\\Components\\TasksTree\\RunTask.tsx\\RunTaskForm.tsx",[],"C:\\ospanel\\domains\\DeployProject\\src\\Components\\ToDo\\ToDoHeader\\ToDoHeaderContainer.tsx",[],"C:\\ospanel\\domains\\DeployProject\\src\\Components\\Header\\MenuPopover.tsx",[],"C:\\ospanel\\domains\\DeployProject\\src\\Components\\TasksTree\\TaskTreeBrowserItem.tsx",[],{"ruleId":"1055","replacedBy":"1056"},{"ruleId":"1057","replacedBy":"1058"},{"ruleId":"1059","severity":1,"message":"1060","line":3,"column":27,"nodeType":"1061","messageId":"1062","endLine":3,"endColumn":36},{"ruleId":"1059","severity":1,"message":"1063","line":4,"column":33,"nodeType":"1061","messageId":"1062","endLine":4,"endColumn":42},{"ruleId":"1059","severity":1,"message":"1064","line":33,"column":11,"nodeType":"1061","messageId":"1062","endLine":33,"endColumn":29},{"ruleId":"1065","severity":1,"message":"1066","line":18,"column":8,"nodeType":"1067","endLine":18,"endColumn":55,"suggestions":"1068"},{"ruleId":"1059","severity":1,"message":"1069","line":30,"column":12,"nodeType":"1061","messageId":"1062","endLine":30,"endColumn":24},{"ruleId":"1059","severity":1,"message":"1070","line":33,"column":11,"nodeType":"1061","messageId":"1062","endLine":33,"endColumn":29},{"ruleId":"1059","severity":1,"message":"1071","line":5,"column":10,"nodeType":"1061","messageId":"1062","endLine":5,"endColumn":22},{"ruleId":"1059","severity":1,"message":"1072","line":5,"column":36,"nodeType":"1061","messageId":"1062","endLine":5,"endColumn":43},{"ruleId":"1059","severity":1,"message":"1073","line":1,"column":16,"nodeType":"1061","messageId":"1062","endLine":1,"endColumn":26},{"ruleId":"1065","severity":1,"message":"1066","line":13,"column":8,"nodeType":"1067","endLine":13,"endColumn":54,"suggestions":"1074"},{"ruleId":"1059","severity":1,"message":"1075","line":15,"column":12,"nodeType":"1061","messageId":"1062","endLine":15,"endColumn":23},{"ruleId":"1059","severity":1,"message":"1076","line":15,"column":25,"nodeType":"1061","messageId":"1062","endLine":15,"endColumn":39},{"ruleId":"1077","severity":1,"message":"1078","line":32,"column":35,"nodeType":"1079","endLine":32,"endColumn":63},{"ruleId":"1065","severity":1,"message":"1066","line":19,"column":8,"nodeType":"1067","endLine":19,"endColumn":32,"suggestions":"1080"},{"ruleId":"1059","severity":1,"message":"1081","line":4,"column":10,"nodeType":"1061","messageId":"1062","endLine":4,"endColumn":18},{"ruleId":"1059","severity":1,"message":"1082","line":7,"column":10,"nodeType":"1061","messageId":"1062","endLine":7,"endColumn":18},{"ruleId":"1065","severity":1,"message":"1066","line":17,"column":8,"nodeType":"1067","endLine":17,"endColumn":10,"suggestions":"1083"},{"ruleId":"1059","severity":1,"message":"1084","line":1,"column":28,"nodeType":"1061","messageId":"1062","endLine":1,"endColumn":33},{"ruleId":"1065","severity":1,"message":"1066","line":21,"column":8,"nodeType":"1067","endLine":21,"endColumn":10,"suggestions":"1085"},{"ruleId":"1059","severity":1,"message":"1086","line":24,"column":12,"nodeType":"1061","messageId":"1062","endLine":24,"endColumn":25},{"ruleId":"1059","severity":1,"message":"1087","line":24,"column":27,"nodeType":"1061","messageId":"1062","endLine":24,"endColumn":43},{"ruleId":"1059","severity":1,"message":"1088","line":134,"column":13,"nodeType":"1061","messageId":"1062","endLine":134,"endColumn":26},{"ruleId":"1059","severity":1,"message":"1089","line":10,"column":10,"nodeType":"1061","messageId":"1062","endLine":10,"endColumn":23},{"ruleId":"1059","severity":1,"message":"1090","line":11,"column":8,"nodeType":"1061","messageId":"1062","endLine":11,"endColumn":12},{"ruleId":"1065","severity":1,"message":"1066","line":26,"column":8,"nodeType":"1067","endLine":26,"endColumn":10,"suggestions":"1091"},{"ruleId":"1059","severity":1,"message":"1092","line":34,"column":15,"nodeType":"1061","messageId":"1062","endLine":34,"endColumn":32},{"ruleId":"1059","severity":1,"message":"1093","line":2,"column":28,"nodeType":"1061","messageId":"1062","endLine":2,"endColumn":36},{"ruleId":"1059","severity":1,"message":"1060","line":2,"column":38,"nodeType":"1061","messageId":"1062","endLine":2,"endColumn":47},{"ruleId":"1059","severity":1,"message":"1094","line":3,"column":10,"nodeType":"1061","messageId":"1062","endLine":3,"endColumn":21},{"ruleId":"1059","severity":1,"message":"1063","line":3,"column":33,"nodeType":"1061","messageId":"1062","endLine":3,"endColumn":42},{"ruleId":"1059","severity":1,"message":"1095","line":5,"column":9,"nodeType":"1061","messageId":"1062","endLine":5,"endColumn":25},{"ruleId":"1059","severity":1,"message":"1093","line":2,"column":28,"nodeType":"1061","messageId":"1062","endLine":2,"endColumn":36},{"ruleId":"1059","severity":1,"message":"1060","line":2,"column":38,"nodeType":"1061","messageId":"1062","endLine":2,"endColumn":47},{"ruleId":"1059","severity":1,"message":"1094","line":3,"column":10,"nodeType":"1061","messageId":"1062","endLine":3,"endColumn":21},{"ruleId":"1059","severity":1,"message":"1063","line":3,"column":33,"nodeType":"1061","messageId":"1062","endLine":3,"endColumn":42},{"ruleId":"1059","severity":1,"message":"1095","line":5,"column":9,"nodeType":"1061","messageId":"1062","endLine":5,"endColumn":25},{"ruleId":"1059","severity":1,"message":"1092","line":49,"column":7,"nodeType":"1061","messageId":"1062","endLine":49,"endColumn":24},{"ruleId":"1059","severity":1,"message":"1093","line":2,"column":16,"nodeType":"1061","messageId":"1062","endLine":2,"endColumn":24},{"ruleId":"1059","severity":1,"message":"1060","line":2,"column":26,"nodeType":"1061","messageId":"1062","endLine":2,"endColumn":35},{"ruleId":"1059","severity":1,"message":"1096","line":108,"column":6,"nodeType":"1061","messageId":"1062","endLine":108,"endColumn":18},{"ruleId":"1059","severity":1,"message":"1097","line":4,"column":10,"nodeType":"1061","messageId":"1062","endLine":4,"endColumn":28},{"ruleId":"1065","severity":1,"message":"1066","line":37,"column":8,"nodeType":"1067","endLine":37,"endColumn":10,"suggestions":"1098"},{"ruleId":"1065","severity":1,"message":"1099","line":50,"column":8,"nodeType":"1067","endLine":50,"endColumn":37,"suggestions":"1100"},{"ruleId":"1077","severity":1,"message":"1078","line":139,"column":43,"nodeType":"1079","endLine":139,"endColumn":107},{"ruleId":"1077","severity":1,"message":"1078","line":139,"column":117,"nodeType":"1079","endLine":139,"endColumn":145},{"ruleId":"1059","severity":1,"message":"1095","line":5,"column":9,"nodeType":"1061","messageId":"1062","endLine":5,"endColumn":25},{"ruleId":"1059","severity":1,"message":"1101","line":6,"column":28,"nodeType":"1061","messageId":"1062","endLine":6,"endColumn":33},{"ruleId":"1059","severity":1,"message":"1102","line":6,"column":35,"nodeType":"1061","messageId":"1062","endLine":6,"endColumn":45},{"ruleId":"1059","severity":1,"message":"1103","line":7,"column":10,"nodeType":"1061","messageId":"1062","endLine":7,"endColumn":20},{"ruleId":"1059","severity":1,"message":"1104","line":48,"column":12,"nodeType":"1061","messageId":"1062","endLine":48,"endColumn":17},{"ruleId":"1059","severity":1,"message":"1105","line":48,"column":19,"nodeType":"1061","messageId":"1062","endLine":48,"endColumn":27},{"ruleId":"1059","severity":1,"message":"1106","line":126,"column":11,"nodeType":"1061","messageId":"1062","endLine":126,"endColumn":24},{"ruleId":"1065","severity":1,"message":"1107","line":17,"column":7,"nodeType":"1067","endLine":17,"endColumn":28,"suggestions":"1108"},{"ruleId":"1109","severity":1,"message":"1110","line":124,"column":70,"nodeType":"1111","messageId":"1112","endLine":124,"endColumn":72},{"ruleId":"1059","severity":1,"message":"1113","line":140,"column":7,"nodeType":"1061","messageId":"1062","endLine":140,"endColumn":14},{"ruleId":"1114","severity":1,"message":"1115","line":81,"column":81,"nodeType":"1116","messageId":"1117","endLine":81,"endColumn":82,"fix":"1118"},{"ruleId":"1114","severity":1,"message":"1115","line":87,"column":81,"nodeType":"1116","messageId":"1117","endLine":87,"endColumn":82,"fix":"1119"},{"ruleId":"1055","replacedBy":"1120"},{"ruleId":"1057","replacedBy":"1121"},{"ruleId":"1059","severity":1,"message":"1122","line":6,"column":8,"nodeType":"1061","messageId":"1062","endLine":6,"endColumn":25},{"ruleId":"1059","severity":1,"message":"1123","line":6,"column":29,"nodeType":"1061","messageId":"1062","endLine":6,"endColumn":49},{"ruleId":"1059","severity":1,"message":"1124","line":14,"column":12,"nodeType":"1061","messageId":"1062","endLine":14,"endColumn":19},{"ruleId":"1065","severity":1,"message":"1066","line":19,"column":8,"nodeType":"1067","endLine":19,"endColumn":10,"suggestions":"1125"},{"ruleId":"1065","severity":1,"message":"1126","line":14,"column":7,"nodeType":"1067","endLine":14,"endColumn":9,"suggestions":"1127"},{"ruleId":"1059","severity":1,"message":"1128","line":15,"column":12,"nodeType":"1061","messageId":"1062","endLine":15,"endColumn":19},{"ruleId":"1059","severity":1,"message":"1129","line":15,"column":21,"nodeType":"1061","messageId":"1062","endLine":15,"endColumn":31},{"ruleId":"1059","severity":1,"message":"1130","line":3,"column":10,"nodeType":"1061","messageId":"1062","endLine":3,"endColumn":25},{"ruleId":"1065","severity":1,"message":"1066","line":14,"column":8,"nodeType":"1067","endLine":14,"endColumn":10,"suggestions":"1131"},{"ruleId":"1065","severity":1,"message":"1132","line":17,"column":8,"nodeType":"1067","endLine":17,"endColumn":37,"suggestions":"1133"},{"ruleId":"1059","severity":1,"message":"1097","line":4,"column":10,"nodeType":"1061","messageId":"1062","endLine":4,"endColumn":28},{"ruleId":"1059","severity":1,"message":"1072","line":3,"column":9,"nodeType":"1061","messageId":"1062","endLine":3,"endColumn":16},{"ruleId":"1059","severity":1,"message":"1082","line":4,"column":10,"nodeType":"1061","messageId":"1062","endLine":4,"endColumn":18},{"ruleId":"1059","severity":1,"message":"1082","line":1,"column":10,"nodeType":"1061","messageId":"1062","endLine":1,"endColumn":18},{"ruleId":"1059","severity":1,"message":"1134","line":2,"column":19,"nodeType":"1061","messageId":"1062","endLine":2,"endColumn":27},{"ruleId":"1059","severity":1,"message":"1072","line":3,"column":9,"nodeType":"1061","messageId":"1062","endLine":3,"endColumn":16},{"ruleId":"1059","severity":1,"message":"1071","line":5,"column":10,"nodeType":"1061","messageId":"1062","endLine":5,"endColumn":22},{"ruleId":"1059","severity":1,"message":"1072","line":5,"column":36,"nodeType":"1061","messageId":"1062","endLine":5,"endColumn":43},{"ruleId":"1059","severity":1,"message":"1082","line":4,"column":10,"nodeType":"1061","messageId":"1062","endLine":4,"endColumn":18},{"ruleId":"1059","severity":1,"message":"1122","line":6,"column":8,"nodeType":"1061","messageId":"1062","endLine":6,"endColumn":25},{"ruleId":"1059","severity":1,"message":"1123","line":6,"column":29,"nodeType":"1061","messageId":"1062","endLine":6,"endColumn":49},{"ruleId":"1059","severity":1,"message":"1124","line":14,"column":12,"nodeType":"1061","messageId":"1062","endLine":14,"endColumn":19},{"ruleId":"1065","severity":1,"message":"1066","line":19,"column":8,"nodeType":"1067","endLine":19,"endColumn":10,"suggestions":"1135"},{"ruleId":"1055","replacedBy":"1136"},{"ruleId":"1057","replacedBy":"1137"},{"ruleId":"1065","severity":1,"message":"1066","line":19,"column":8,"nodeType":"1067","endLine":19,"endColumn":32,"suggestions":"1138"},{"ruleId":"1059","severity":1,"message":"1073","line":1,"column":16,"nodeType":"1061","messageId":"1062","endLine":1,"endColumn":26},{"ruleId":"1065","severity":1,"message":"1066","line":13,"column":8,"nodeType":"1067","endLine":13,"endColumn":54,"suggestions":"1139"},{"ruleId":"1059","severity":1,"message":"1075","line":15,"column":12,"nodeType":"1061","messageId":"1062","endLine":15,"endColumn":23},{"ruleId":"1059","severity":1,"message":"1076","line":15,"column":25,"nodeType":"1061","messageId":"1062","endLine":15,"endColumn":39},{"ruleId":"1077","severity":1,"message":"1078","line":32,"column":35,"nodeType":"1079","endLine":32,"endColumn":63},{"ruleId":"1059","severity":1,"message":"1082","line":1,"column":10,"nodeType":"1061","messageId":"1062","endLine":1,"endColumn":18},{"ruleId":"1065","severity":1,"message":"1126","line":14,"column":7,"nodeType":"1067","endLine":14,"endColumn":9,"suggestions":"1140"},{"ruleId":"1059","severity":1,"message":"1081","line":4,"column":10,"nodeType":"1061","messageId":"1062","endLine":4,"endColumn":18},{"ruleId":"1059","severity":1,"message":"1082","line":7,"column":10,"nodeType":"1061","messageId":"1062","endLine":7,"endColumn":18},{"ruleId":"1065","severity":1,"message":"1066","line":17,"column":8,"nodeType":"1067","endLine":17,"endColumn":10,"suggestions":"1141"},{"ruleId":"1059","severity":1,"message":"1128","line":15,"column":12,"nodeType":"1061","messageId":"1062","endLine":15,"endColumn":19},{"ruleId":"1059","severity":1,"message":"1129","line":15,"column":21,"nodeType":"1061","messageId":"1062","endLine":15,"endColumn":31},{"ruleId":"1059","severity":1,"message":"1084","line":1,"column":28,"nodeType":"1061","messageId":"1062","endLine":1,"endColumn":33},{"ruleId":"1065","severity":1,"message":"1066","line":21,"column":8,"nodeType":"1067","endLine":21,"endColumn":10,"suggestions":"1142"},{"ruleId":"1059","severity":1,"message":"1086","line":24,"column":12,"nodeType":"1061","messageId":"1062","endLine":24,"endColumn":25},{"ruleId":"1059","severity":1,"message":"1087","line":24,"column":27,"nodeType":"1061","messageId":"1062","endLine":24,"endColumn":43},{"ruleId":"1059","severity":1,"message":"1088","line":134,"column":13,"nodeType":"1061","messageId":"1062","endLine":134,"endColumn":26},{"ruleId":"1059","severity":1,"message":"1089","line":10,"column":10,"nodeType":"1061","messageId":"1062","endLine":10,"endColumn":23},{"ruleId":"1059","severity":1,"message":"1090","line":11,"column":8,"nodeType":"1061","messageId":"1062","endLine":11,"endColumn":12},{"ruleId":"1065","severity":1,"message":"1066","line":26,"column":8,"nodeType":"1067","endLine":26,"endColumn":10,"suggestions":"1143"},{"ruleId":"1059","severity":1,"message":"1092","line":34,"column":15,"nodeType":"1061","messageId":"1062","endLine":34,"endColumn":32},{"ruleId":"1059","severity":1,"message":"1097","line":4,"column":10,"nodeType":"1061","messageId":"1062","endLine":4,"endColumn":28},{"ruleId":"1059","severity":1,"message":"1093","line":2,"column":28,"nodeType":"1061","messageId":"1062","endLine":2,"endColumn":36},{"ruleId":"1059","severity":1,"message":"1060","line":2,"column":38,"nodeType":"1061","messageId":"1062","endLine":2,"endColumn":47},{"ruleId":"1059","severity":1,"message":"1094","line":3,"column":10,"nodeType":"1061","messageId":"1062","endLine":3,"endColumn":21},{"ruleId":"1059","severity":1,"message":"1063","line":3,"column":33,"nodeType":"1061","messageId":"1062","endLine":3,"endColumn":42},{"ruleId":"1059","severity":1,"message":"1095","line":5,"column":9,"nodeType":"1061","messageId":"1062","endLine":5,"endColumn":25},{"ruleId":"1059","severity":1,"message":"1092","line":49,"column":7,"nodeType":"1061","messageId":"1062","endLine":49,"endColumn":24},{"ruleId":"1059","severity":1,"message":"1097","line":4,"column":10,"nodeType":"1061","messageId":"1062","endLine":4,"endColumn":28},{"ruleId":"1059","severity":1,"message":"1093","line":2,"column":28,"nodeType":"1061","messageId":"1062","endLine":2,"endColumn":36},{"ruleId":"1059","severity":1,"message":"1060","line":2,"column":38,"nodeType":"1061","messageId":"1062","endLine":2,"endColumn":47},{"ruleId":"1059","severity":1,"message":"1094","line":3,"column":10,"nodeType":"1061","messageId":"1062","endLine":3,"endColumn":21},{"ruleId":"1059","severity":1,"message":"1063","line":3,"column":33,"nodeType":"1061","messageId":"1062","endLine":3,"endColumn":42},{"ruleId":"1059","severity":1,"message":"1095","line":5,"column":9,"nodeType":"1061","messageId":"1062","endLine":5,"endColumn":25},{"ruleId":"1059","severity":1,"message":"1093","line":2,"column":16,"nodeType":"1061","messageId":"1062","endLine":2,"endColumn":24},{"ruleId":"1059","severity":1,"message":"1060","line":2,"column":26,"nodeType":"1061","messageId":"1062","endLine":2,"endColumn":35},{"ruleId":"1065","severity":1,"message":"1066","line":37,"column":8,"nodeType":"1067","endLine":37,"endColumn":10,"suggestions":"1144"},{"ruleId":"1065","severity":1,"message":"1099","line":50,"column":8,"nodeType":"1067","endLine":50,"endColumn":37,"suggestions":"1145"},{"ruleId":"1077","severity":1,"message":"1078","line":139,"column":43,"nodeType":"1079","endLine":139,"endColumn":107},{"ruleId":"1077","severity":1,"message":"1078","line":139,"column":117,"nodeType":"1079","endLine":139,"endColumn":145},{"ruleId":"1059","severity":1,"message":"1130","line":3,"column":10,"nodeType":"1061","messageId":"1062","endLine":3,"endColumn":25},{"ruleId":"1065","severity":1,"message":"1066","line":14,"column":8,"nodeType":"1067","endLine":14,"endColumn":10,"suggestions":"1146"},{"ruleId":"1065","severity":1,"message":"1132","line":17,"column":8,"nodeType":"1067","endLine":17,"endColumn":37,"suggestions":"1147"},{"ruleId":"1059","severity":1,"message":"1095","line":5,"column":9,"nodeType":"1061","messageId":"1062","endLine":5,"endColumn":25},{"ruleId":"1059","severity":1,"message":"1101","line":6,"column":28,"nodeType":"1061","messageId":"1062","endLine":6,"endColumn":33},{"ruleId":"1059","severity":1,"message":"1102","line":6,"column":35,"nodeType":"1061","messageId":"1062","endLine":6,"endColumn":45},{"ruleId":"1059","severity":1,"message":"1103","line":7,"column":10,"nodeType":"1061","messageId":"1062","endLine":7,"endColumn":20},{"ruleId":"1059","severity":1,"message":"1104","line":48,"column":12,"nodeType":"1061","messageId":"1062","endLine":48,"endColumn":17},{"ruleId":"1059","severity":1,"message":"1105","line":48,"column":19,"nodeType":"1061","messageId":"1062","endLine":48,"endColumn":27},{"ruleId":"1059","severity":1,"message":"1106","line":126,"column":11,"nodeType":"1061","messageId":"1062","endLine":126,"endColumn":24},{"ruleId":"1109","severity":1,"message":"1110","line":124,"column":70,"nodeType":"1111","messageId":"1112","endLine":124,"endColumn":72},{"ruleId":"1059","severity":1,"message":"1113","line":140,"column":7,"nodeType":"1061","messageId":"1062","endLine":140,"endColumn":14},{"ruleId":"1059","severity":1,"message":"1096","line":108,"column":6,"nodeType":"1061","messageId":"1062","endLine":108,"endColumn":18},{"ruleId":"1114","severity":1,"message":"1115","line":81,"column":81,"nodeType":"1116","messageId":"1117","endLine":81,"endColumn":82,"fix":"1148"},{"ruleId":"1114","severity":1,"message":"1115","line":87,"column":81,"nodeType":"1116","messageId":"1117","endLine":87,"endColumn":82,"fix":"1149"},{"ruleId":"1065","severity":1,"message":"1107","line":17,"column":7,"nodeType":"1067","endLine":17,"endColumn":28,"suggestions":"1150"},{"ruleId":"1059","severity":1,"message":"1060","line":3,"column":27,"nodeType":"1061","messageId":"1062","endLine":3,"endColumn":36},{"ruleId":"1059","severity":1,"message":"1063","line":4,"column":33,"nodeType":"1061","messageId":"1062","endLine":4,"endColumn":42},{"ruleId":"1059","severity":1,"message":"1064","line":33,"column":11,"nodeType":"1061","messageId":"1062","endLine":33,"endColumn":29},{"ruleId":"1065","severity":1,"message":"1066","line":18,"column":8,"nodeType":"1067","endLine":18,"endColumn":55,"suggestions":"1151"},{"ruleId":"1059","severity":1,"message":"1069","line":30,"column":12,"nodeType":"1061","messageId":"1062","endLine":30,"endColumn":24},{"ruleId":"1059","severity":1,"message":"1070","line":33,"column":11,"nodeType":"1061","messageId":"1062","endLine":33,"endColumn":29},"no-native-reassign",["1152"],"no-negated-in-lhs",["1153"],"@typescript-eslint/no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'AntSelect' is defined but never used.","'backendTypeOptions' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["1154"],"'isBackendNew' is assigned a value but never used.","'submitBackendIsNew' is assigned a value but never used.","'getUsersList' is defined but never used.","'actions' is defined but never used.","'Typography' is defined but never used.",["1155"],"'projectList' is assigned a value but never used.","'setProjectList' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement",["1156"],"'isMobile' is defined but never used.","'UserType' is defined but never used.",["1157"],"'Empty' is defined but never used.",["1158"],"'isCodeVisible' is assigned a value but never used.","'setIsCodeVisible' is assigned a value but never used.","'ismodelChange' is assigned a value but never used.","'initialValues' is defined but never used.","'Item' is defined but never used.",["1159"],"'modelsListOptions' is assigned a value but never used.","'useState' is defined but never used.","'AntCheckbox' is defined but never used.","'SelectOptionType' is defined but never used.","'FillableType' is defined but never used.","'getControllersList' is defined but never used.",["1160"],"React Hook useEffect has missing dependencies: 'initialValues' and 'props.controllerData.id'. Either include them or remove the dependency array. You can also do a functional update 'setinitialValues(i => ...)' if you only need 'initialValues' in the 'setinitialValues' call.",["1161"],"'Input' is defined but never used.","'TreeSelect' is defined but never used.","'ModelsType' is defined but never used.","'value' is assigned a value but never used.","'setValue' is assigned a value but never used.","'onAddResponse' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'props.item'. Either include it or remove the dependency array. If 'setValue' needs the current value of 'props.item', you can also switch to useReducer instead of useState and read 'props.item' in the reducer.",["1162"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'getBody' is assigned a value but never used.","rest-spread-spacing","Unexpected whitespace after spread operator.","SpreadElement","unexpectedWhitespace",{"range":"1163","text":"1164"},{"range":"1165","text":"1164"},["1152"],["1153"],"'SpeechRecognition' is defined but never used.","'useSpeechRecognition' is defined but never used.","'current' is assigned a value but never used.",["1166"],"React Hook useEffect has a missing dependency: 'props.projectId'. Either include it or remove the dependency array.",["1167"],"'srcTree' is assigned a value but never used.","'setSrcTree' is assigned a value but never used.","'ControllersType' is defined but never used.",["1168"],"React Hook useEffect has a missing dependency: 'props.controllerData.id'. Either include it or remove the dependency array. If 'setMethods' needs the current value of 'props.controllerData.id', you can also switch to useReducer instead of useState and read 'props.controllerData.id' in the reducer.",["1169"],"'getToken' is defined but never used.",["1170"],["1152"],["1153"],["1171"],["1172"],["1173"],["1174"],["1175"],["1176"],["1177"],["1178"],["1179"],["1180"],{"range":"1181","text":"1164"},{"range":"1182","text":"1164"},["1183"],["1184"],"no-global-assign","no-unsafe-negation",{"desc":"1185","fix":"1186"},{"desc":"1187","fix":"1188"},{"desc":"1189","fix":"1190"},{"desc":"1191","fix":"1192"},{"desc":"1191","fix":"1193"},{"desc":"1191","fix":"1194"},{"desc":"1191","fix":"1195"},{"desc":"1196","fix":"1197"},{"desc":"1198","fix":"1199"},[3022,3023],"",[3282,3283],{"desc":"1191","fix":"1200"},{"desc":"1201","fix":"1202"},{"desc":"1191","fix":"1203"},{"desc":"1204","fix":"1205"},{"desc":"1191","fix":"1206"},{"desc":"1189","fix":"1207"},{"desc":"1187","fix":"1208"},{"desc":"1201","fix":"1209"},{"desc":"1191","fix":"1210"},{"desc":"1191","fix":"1211"},{"desc":"1191","fix":"1212"},{"desc":"1191","fix":"1213"},{"desc":"1196","fix":"1214"},{"desc":"1191","fix":"1215"},{"desc":"1204","fix":"1216"},[3022,3023],[3282,3283],{"desc":"1198","fix":"1217"},{"desc":"1185","fix":"1218"},"Update the dependencies array to be: [props, props.isBackendNew, props.isProjectListLoaded]",{"range":"1219","text":"1220"},"Update the dependencies array to be: [props, props.isProjectListLoaded, props.projectList]",{"range":"1221","text":"1222"},"Update the dependencies array to be: [props, props.isProjectsLoaded]",{"range":"1223","text":"1224"},"Update the dependencies array to be: [props]",{"range":"1225","text":"1226"},{"range":"1227","text":"1226"},{"range":"1228","text":"1226"},{"range":"1229","text":"1226"},"Update the dependencies array to be: [initialValues, props.controllerData.id, props.controllerMethodsList]",{"range":"1230","text":"1231"},"Update the dependencies array to be: [props.initialValues, props.item]",{"range":"1232","text":"1233"},{"range":"1234","text":"1226"},"Update the dependencies array to be: [props.projectId]",{"range":"1235","text":"1236"},{"range":"1237","text":"1226"},"Update the dependencies array to be: [props.controllerData.id, props.controllerMethodsList]",{"range":"1238","text":"1239"},{"range":"1240","text":"1226"},{"range":"1241","text":"1224"},{"range":"1242","text":"1222"},{"range":"1243","text":"1236"},{"range":"1244","text":"1226"},{"range":"1245","text":"1226"},{"range":"1246","text":"1226"},{"range":"1247","text":"1226"},{"range":"1248","text":"1231"},{"range":"1249","text":"1226"},{"range":"1250","text":"1239"},{"range":"1251","text":"1233"},{"range":"1252","text":"1220"},[643,690],"[props, props.isBackendNew, props.isProjectListLoaded]",[429,475],"[props, props.isProjectListLoaded, props.projectList]",[737,761],"[props, props.isProjectsLoaded]",[614,616],"[props]",[1020,1022],[1171,1173],[1505,1507],[2137,2166],"[initialValues, props.controllerData.id, props.controllerMethodsList]",[537,558],"[props.initialValues, props.item]",[673,675],[429,431],"[props.projectId]",[757,759],[903,932],"[props.controllerData.id, props.controllerMethodsList]",[682,684],[737,761],[429,475],[429,431],[614,616],[1020,1022],[1157,1159],[1505,1507],[2137,2166],[757,759],[903,932],[537,558],[643,690]]
[{"C:\\OpenServer\\domains\\front1\\src\\index.tsx":"1","C:\\OpenServer\\domains\\front1\\src\\reportWebVitals.ts":"2","C:\\OpenServer\\domains\\front1\\src\\App.tsx":"3","C:\\OpenServer\\domains\\front1\\src\\redux\\store.ts":"4","C:\\OpenServer\\domains\\front1\\src\\redux\\appReducer.ts":"5","C:\\OpenServer\\domains\\front1\\src\\Components\\Header\\HeaderContainer.tsx":"6","C:\\OpenServer\\domains\\front1\\src\\Components\\ToDo\\ToDoListContainer.tsx":"7","C:\\OpenServer\\domains\\front1\\src\\Components\\Login\\Login.tsx":"8","C:\\OpenServer\\domains\\front1\\src\\Components\\Orders\\OrdersContainer.tsx":"9","C:\\OpenServer\\domains\\front1\\src\\redux\\authReducer.ts":"10","C:\\OpenServer\\domains\\front1\\src\\redux\\taskReducer.ts":"11","C:\\OpenServer\\domains\\front1\\src\\Components\\Header\\Header.tsx":"12","C:\\OpenServer\\domains\\front1\\src\\Components\\ToDo\\ToDoList.tsx":"13","C:\\OpenServer\\domains\\front1\\src\\Components\\Login\\LoginForm.tsx":"14","C:\\OpenServer\\domains\\front1\\src\\Components\\Orders\\Orders.tsx":"15","C:\\OpenServer\\domains\\front1\\src\\api\\authAPI.ts":"16","C:\\OpenServer\\domains\\front1\\src\\api\\taskApi.ts":"17","C:\\OpenServer\\domains\\front1\\src\\Components\\Header\\MenuMobileContainer.tsx":"18","C:\\OpenServer\\domains\\front1\\src\\utils\\Formik\\ValidateFields.ts":"19","C:\\OpenServer\\domains\\front1\\src\\Components\\TimeScale\\TimeScaleContainer.tsx":"20","C:\\OpenServer\\domains\\front1\\src\\utils\\Formik\\CreateAntField.tsx":"21","C:\\OpenServer\\domains\\front1\\src\\Components\\ToDo\\Settings\\SettingsModal.tsx":"22","C:\\OpenServer\\domains\\front1\\src\\Components\\ToDo\\ToDoHeader\\ToDoHeaderContainer.tsx":"23","C:\\OpenServer\\domains\\front1\\src\\api\\api.ts":"24","C:\\OpenServer\\domains\\front1\\src\\api\\userAPI.ts":"25","C:\\OpenServer\\domains\\front1\\src\\Components\\Header\\MenuMobile.tsx":"26","C:\\OpenServer\\domains\\front1\\src\\Components\\TimeScale\\TimeScale.tsx":"27","C:\\OpenServer\\domains\\front1\\src\\Components\\ToDo\\ToDoHeader\\ToDoHeader.tsx":"28","C:\\OpenServer\\domains\\front1\\src\\utils\\array-helpers.ts":"29","C:\\OpenServer\\domains\\front1\\src\\Components\\TimeScale\\TaskItem\\TaskItemContainer.tsx":"30","C:\\OpenServer\\domains\\front1\\src\\Components\\TimeScale\\TaskItem\\TaskItem.tsx":"31","C:\\OpenServer\\domains\\front1\\src\\Components\\Header\\MenuBrowser.tsx":"32","C:\\OpenServer\\domains\\front1\\src\\Components\\ToDo\\NewTaskForm\\NewTaskFormContainer.tsx":"33","C:\\OpenServer\\domains\\front1\\src\\Components\\ToDo\\NewTaskForm\\NewTaskForm.tsx":"34","C:\\OpenServer\\domains\\front1\\src\\redux\\TaskListReducer.ts":"35","C:\\OpenServer\\domains\\front1\\src\\Components\\Login\\LoginContainer.tsx":"36","C:\\OpenServer\\domains\\front1\\src\\Components\\TasksTree\\TasksTreeContainer.tsx":"37","C:\\OpenServer\\domains\\front1\\src\\Components\\Register\\Register.tsx":"38","C:\\OpenServer\\domains\\front1\\src\\api\\taskListAPI.ts":"39","C:\\OpenServer\\domains\\front1\\src\\Components\\TasksTree\\TasksTree.tsx":"40","C:\\OpenServer\\domains\\front1\\src\\Components\\Register\\RegisterForm.tsx":"41","C:\\OpenServer\\domains\\front1\\src\\Components\\TasksTree\\TasksTreeMobile.tsx":"42"},{"size":525,"mtime":1612209745096,"results":"43","hashOfConfig":"44"},{"size":440,"mtime":1611941586994,"results":"45","hashOfConfig":"44"},{"size":4478,"mtime":1612209745022,"results":"46","hashOfConfig":"44"},{"size":873,"mtime":1612209745123,"results":"47","hashOfConfig":"44"},{"size":1600,"mtime":1612209745112,"results":"48","hashOfConfig":"44"},{"size":713,"mtime":1612209745029,"results":"49","hashOfConfig":"44"},{"size":727,"mtime":1611941586913,"results":"50","hashOfConfig":"44"},{"size":1526,"mtime":1612210018976,"results":"51","hashOfConfig":"44"},{"size":709,"mtime":1611941586835,"results":"52","hashOfConfig":"44"},{"size":2910,"mtime":1612212074477,"results":"53","hashOfConfig":"44"},{"size":4730,"mtime":1611941586991,"results":"54","hashOfConfig":"44"},{"size":2236,"mtime":1612209745027,"results":"55","hashOfConfig":"44"},{"size":1806,"mtime":1611941586910,"results":"56","hashOfConfig":"44"},{"size":2957,"mtime":1612210192939,"results":"57","hashOfConfig":"44"},{"size":308,"mtime":1611941586833,"results":"58","hashOfConfig":"44"},{"size":2136,"mtime":1612212037252,"results":"59","hashOfConfig":"44"},{"size":1878,"mtime":1612209745088,"results":"60","hashOfConfig":"44"},{"size":805,"mtime":1612209745036,"results":"61","hashOfConfig":"44"},{"size":1096,"mtime":1612210291676,"results":"62","hashOfConfig":"44"},{"size":961,"mtime":1611941586855,"results":"63","hashOfConfig":"44"},{"size":3736,"mtime":1612209745127,"results":"64","hashOfConfig":"44"},{"size":569,"mtime":1611941586841,"results":"65","hashOfConfig":"44"},{"size":998,"mtime":1611941586906,"results":"66","hashOfConfig":"44"},{"size":495,"mtime":1612209745084,"results":"67","hashOfConfig":"44"},{"size":714,"mtime":1612210250761,"results":"68","hashOfConfig":"44"},{"size":5064,"mtime":1612209745034,"results":"69","hashOfConfig":"44"},{"size":3844,"mtime":1612209745076,"results":"70","hashOfConfig":"44"},{"size":4536,"mtime":1611941586902,"results":"71","hashOfConfig":"44"},{"size":318,"mtime":1611941587001,"results":"72","hashOfConfig":"44"},{"size":832,"mtime":1611941586850,"results":"73","hashOfConfig":"44"},{"size":2923,"mtime":1611941586847,"results":"74","hashOfConfig":"44"},{"size":1824,"mtime":1612209745031,"results":"75","hashOfConfig":"44"},{"size":959,"mtime":1612212302015,"results":"76","hashOfConfig":"44"},{"size":5013,"mtime":1611941586811,"results":"77","hashOfConfig":"44"},{"size":2447,"mtime":1612212156109,"results":"78","hashOfConfig":"44"},{"size":708,"mtime":1612209745041,"results":"79","hashOfConfig":"44"},{"size":711,"mtime":1612209745067,"results":"80","hashOfConfig":"44"},{"size":707,"mtime":1612209745052,"results":"81","hashOfConfig":"44"},{"size":653,"mtime":1612212197139,"results":"82","hashOfConfig":"44"},{"size":1520,"mtime":1612209745062,"results":"83","hashOfConfig":"44"},{"size":2564,"mtime":1612209745054,"results":"84","hashOfConfig":"44"},{"size":192,"mtime":1612209745073,"results":"85","hashOfConfig":"44"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},"183mcre",{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"88"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"88"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"88"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"88"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"88"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"88"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"144"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"88"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"88"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"159"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162","usedDeprecatedRules":"88"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"88"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"180","usedDeprecatedRules":"88"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183","usedDeprecatedRules":"88"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},"C:\\OpenServer\\domains\\front1\\src\\index.tsx",[],["186","187"],"C:\\OpenServer\\domains\\front1\\src\\reportWebVitals.ts",[],"C:\\OpenServer\\domains\\front1\\src\\App.tsx",["188","189","190","191","192","193","194","195"],"import React, { useEffect, useState } from 'react'\r\nimport './App.css'\r\nimport ToDoList from './Components/ToDo/ToDoListContainer'\r\nimport { BrowserRouter, Redirect, Route, Switch, withRouter, useLocation } from 'react-router-dom'\r\nimport { connect, Provider } from 'react-redux'\r\nimport 'antd/dist/antd.css'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport 'antd-mobile/dist/antd-mobile.css'\r\nimport store, { AppStateType } from './redux/store'\r\nimport { Layout, Menu, Spin } from 'antd'\r\nimport { compose } from 'redux'\r\nimport { initializeApp, addLocation } from './redux/appReducer'\r\nimport {login} from './redux/authReducer'\r\nimport Header from './Components/Header/HeaderContainer'\r\nimport { isMobile } from \"react-device-detect\"\r\nimport Login from './Components/Login/LoginContainer'\r\nimport Orders from './Components/Orders/OrdersContainer'\r\nimport TasksTree from './Components/TasksTree/TasksTreeContainer'\r\nimport Register from './Components/Register/Register'\r\n\r\nconst { SubMenu } = Menu\r\nconst { Content, Footer, Sider } = Layout\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\ntype DispatchPropsType = {\r\n  initializeApp: () => void,\r\n  addLocation: (location: string) => void,\r\n  login: (data: any)=> void,\r\n}\r\n\r\nconst App = (props: MapPropsType & DispatchPropsType) => {\r\n  const [location, setLocation] = useState(useLocation().pathname)\r\n\r\n  useEffect(() => {\r\n    if (!props.initialized) {\r\n      // http://localhost:3000/?email=7383125@gmail.com&password=gfhjkm4501\r\n      let instanseCreds = parseQueryString()\r\n      if (instanseCreds.email && instanseCreds.password) {\r\n        instanseCreds.remember = true\r\n        props.login(instanseCreds)\r\n      }\r\n\r\n      if (location === '/front1/') {\r\n        props.addLocation(location)\r\n      }\r\n      //console.log('initialized FALSE', props)\r\n      props.initializeApp()\r\n    } else {\r\n      console.log('initialized TRUE', props)\r\n    }\r\n  }, [props.initialized])\r\n\r\n\r\n  if (!props.initialized) {\r\n    return <Spin key=\"spin\" size=\"large\" />\r\n  }\r\n\r\n  \r\n  // console.log(props.)\r\n\r\n  return (\r\n    <Layout>\r\n      {/* <li>авторизироваться</li> */}\r\n      <Header />\r\n      <Switch>\r\n        {!props.isAuth ?\r\n          <Route exact path={props.appLocation}\r\n            render={() => <Redirect to={props.appLocation+'login'} />} />\r\n        :\r\n          <Route exact path={props.appLocation}\r\n            render={() => <Redirect to={props.appLocation+'toDoList'} />} />\r\n        }\r\n        \r\n        {props.isAuth ?\r\n            <Route exact path={props.appLocation+'login'}\r\n              render={ () => <Redirect to={props.appLocation+'toDoList'} /> } \r\n            />  \r\n          :\r\n            null\r\n        }\r\n\r\n        <Route path={props.appLocation+'login'}\r\n          render={() => <Login />} />\r\n\r\n        {/* {isAuth ? \r\n          <Route path={props.appLocation+'toDoList'} \r\n            render={() => <ToDoList />} />\r\n\r\n          <Route path={props.appLocation+'orders'} \r\n            render={() => <Orders />} />\r\n        :\r\n          null\r\n        } */}\r\n        \r\n         <Route path={props.appLocation+'toDoList'}\r\n            render={() => <ToDoList />} />\r\n\r\n          <Route path={props.appLocation+'tasksTree'}\r\n            render={() => <TasksTree />} />\r\n\r\n          <Route path={props.appLocation+'orders'}\r\n            render={() => <Orders />} />\r\n\r\n          <Route path={props.appLocation+'register'}\r\n            render={() => <Register />} />\r\n\r\n          <Route path={props.appLocation+'*'}\r\n            render={() => <div>404 NOT FOUND</div>} />\r\n      </Switch>\r\n      {/* <Footer>Footer for my app</Footer> */}\r\n    </Layout>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n  initialized: state.app.initialized,\r\n  appLocation: state.app.location,\r\n  isAuth: state.auth.isAuth\r\n})\r\n\r\nlet AppContainer = compose<React.ComponentType>(\r\n  withRouter,\r\n  connect(mapStateToProps, { initializeApp, addLocation, login }))(App)\r\n\r\nconst MainApp = () => {\r\n  return (\r\n    <BrowserRouter>\r\n      <Provider store={store}>\r\n        <div className={isMobile ? \"\" : \"container\"}>\r\n          <AppContainer />\r\n        </div>\r\n      </Provider>\r\n    </BrowserRouter>\r\n  )\r\n}\r\n\r\nexport default MainApp\r\n\r\nconst parseQueryString = (): any => {\r\n  const params:  any = {}\r\n  document.location.search.substr(1).split('&').forEach( (pair) => {\r\n      const [key, value] = pair.split('=')\r\n      params[key] = value\r\n  })\r\n  return params;\r\n};\r\n","C:\\OpenServer\\domains\\front1\\src\\redux\\store.ts",[],"C:\\OpenServer\\domains\\front1\\src\\redux\\appReducer.ts",[],"C:\\OpenServer\\domains\\front1\\src\\Components\\Header\\HeaderContainer.tsx",[],"C:\\OpenServer\\domains\\front1\\src\\Components\\ToDo\\ToDoListContainer.tsx",[],"C:\\OpenServer\\domains\\front1\\src\\Components\\Login\\Login.tsx",["196","197","198","199","200"],"import React from 'react'\r\nimport { LoginPropsType } from './LoginContainer'\r\nimport { List, InputItem, Checkbox } from 'antd-mobile'\r\nimport { Formik } from \"formik\"\r\nimport moment from \"moment\"\r\nimport LoginForm from './LoginForm'\r\nimport { propTypes } from 'react-bootstrap/esm/Image'\r\nimport { Button } from 'antd'\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst CheckboxItem = Checkbox.CheckboxItem;\r\n\r\nconst initialValues = {\r\n    // bookingClient: \"\",\r\n    // bookingDate: moment(Date.now()),\r\n    // bookingTime: moment(Date.now()),\r\n    // selectOptions: [\"Mark\", \"Bob\", \"Anthony\"]\r\n}\r\n\r\n// export const dateFormat = \"YYYY--MM-DD\";\r\n// export const timeFormat = \"h:mm A\";\r\n\r\nexport type OwnLoginPropsType = {}\r\n\r\nconst Login: React.FC<LoginPropsType> = (props) => {\r\n    const handleSubmit = (formProps: any) => {\r\n        console.log('formProps: ', formProps)\r\n        if (!formProps.remember) {\r\n            formProps.remember = false\r\n        }\r\n        props.login(formProps)\r\n    }\r\n\r\n    console.log(props)\r\n\r\n    return (\r\n        <>\r\n            <h1 className=\"mb-5 mx-auto\">Login Form</h1>\r\n            <Formik\r\n                initialValues={initialValues}\r\n                onSubmit={handleSubmit}\r\n                render={LoginForm}\r\n                // location= {props.location}\r\n            />\r\n            <div className=\"mt-3\">\r\n                <Link to={props.location +\"register\"}><Button type=\"link\" block>Register</Button></Link>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Login","C:\\OpenServer\\domains\\front1\\src\\Components\\Orders\\OrdersContainer.tsx",[],"C:\\OpenServer\\domains\\front1\\src\\redux\\authReducer.ts",[],"C:\\OpenServer\\domains\\front1\\src\\redux\\taskReducer.ts",[],"C:\\OpenServer\\domains\\front1\\src\\Components\\Header\\Header.tsx",["201","202","203","204"],"import React from 'react'\r\nimport {\r\n    BrowserView,\r\n    MobileView,\r\n    isBrowser,\r\n    isMobile\r\n} from \"react-device-detect\"\r\nimport { HeaderPropsType } from './HeaderContainer'\r\nimport MenuBrowser from './MenuBrowser'\r\nimport MenuMobile from './MenuMobileContainer'\r\n// import {useHistory, useLocation} from 'react-router-dom'\r\n\r\n// type MenuDataType = Array<any>\r\n\r\nexport type OwnHeaderPropsType = {}\r\n\r\nconst Header: React.FC<HeaderPropsType> = (props) => {\r\n    // const location = useLocation()\r\n    // console.log(parseQueryString())\r\n\r\n    if (isMobile) {\r\n        return <MenuMobile menuData={menuData(props.appLocation)} logout={props.logout}/>\r\n    } else {\r\n        return <MenuBrowser menuData={menuData(props.appLocation)} appLocation={props.appLocation}/>\r\n    }\r\n}\r\n\r\nexport default Header\r\n\r\n\r\nexport type MenuDataType = ReturnType<typeof menuData>\r\n\r\nconst menuData = (appLocation: string) => {\r\n    const data = [\r\n    {\r\n        value: 'planning',\r\n        label: 'Planning',\r\n        children: [\r\n            {\r\n                label: 'ToDo list',\r\n                // label: <Link to='/toDoList'>ToDo list</Link>,\r\n                value: appLocation + 'toDoList',\r\n                disabled: false,\r\n            },\r\n            {\r\n                label: 'Tasks tree',\r\n                value: appLocation + 'tasksTree',\r\n            },\r\n            {\r\n                label: 'Analysis',\r\n                value: appLocation + 'analysis',\r\n                disabled: true,\r\n            }\r\n        ],\r\n    }, {\r\n        value: 'catalog',\r\n        label: 'Catalog',\r\n        children: [\r\n            {\r\n                label: 'Products',\r\n                value: appLocation + 'products',\r\n            }\r\n            , {\r\n                label: 'Providers',\r\n                value: appLocation + 'providers',\r\n            }\r\n        ],\r\n    },\r\n    {\r\n        value: '3',\r\n        label: 'Orders',\r\n        // isLeaf: true,\r\n        children: [\r\n            {\r\n                label: 'Orders',\r\n                value: appLocation + 'orders',\r\n            },\r\n            {\r\n                label: 'Leads',\r\n                value: appLocation + 'leads',\r\n            },\r\n        ],\r\n    },\r\n    ]\r\n    return data\r\n}\r\n","C:\\OpenServer\\domains\\front1\\src\\Components\\ToDo\\ToDoList.tsx",[],"C:\\OpenServer\\domains\\front1\\src\\Components\\Login\\LoginForm.tsx",["205","206","207","208","209","210","211","212"],"import React, { ReactNode } from 'react'\r\nimport { Form, Field, FormikProps } from \"formik\"\r\nimport { AntInput, AntCheckbox, AntInputPassword } from '../../utils/Formik/CreateAntField'\r\nimport {useHistory, useLocation} from 'react-router-dom'\r\nimport { List, Checkbox } from 'antd-mobile'\r\nimport { validateAsync, validateEmail, validateRequired } from '../../utils/Formik/ValidateFields'\r\nimport { Button } from 'antd'\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst CheckboxItem = Checkbox.CheckboxItem\r\n\r\nconst layout = {\r\n    labelCol: { span: 8 },\r\n    wrapperCol: { span: 16 },\r\n}\r\n\r\nexport type OwnLoginFormPropsType = {\r\n    handleSubmit: () => void,\r\n    values: any,\r\n    submitCount: any\r\n    location: string\r\n}\r\n\r\nconst LoginForm: ((props: FormikProps<{}> | OwnLoginFormPropsType) => ReactNode) = (props) => {\r\n    console.log(props)\r\n    const location = useLocation()\r\n    return (\r\n        <Form \r\n            // {...layout} \r\n            className=\"form-container\" \r\n            onSubmit={props.handleSubmit}\r\n        >\r\n            {/* <Field\r\n                component={AntInput}\r\n                name=\"name\"\r\n                type=\"text\"\r\n                label=\"Name\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            /> */}\r\n            <Field\r\n                component={AntInput}\r\n                name=\"email\"\r\n                type=\"email\"\r\n                label=\"Email\"\r\n                validate={validateEmail}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n            <Field\r\n                component={AntInputPassword}\r\n                name=\"password\"\r\n                type=\"password\"\r\n                label=\"Password\"\r\n                // label={<label className=\"ant-form-item-required\">Password</label>}\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n            <Field\r\n                component={AntCheckbox}\r\n                name=\"remember\"\r\n                label=\"Remember Me\"\r\n                submitCount={props.submitCount}\r\n            />\r\n            <div className=\"submit-container\">\r\n                <button className=\"ant-btn ant-btn-primary\" type=\"submit\">\r\n                    Login\r\n                </button>\r\n            </div>\r\n            {/* <div>{props.location}</div> */}\r\n            {/* useHistory */}\r\n            {/* <div className=\"mt-3\">\r\n                <Link to={\"register\"}><Button type=\"link\" block>Register</Button></Link>\r\n            </div>\r\n             */}\r\n            \r\n\r\n            {/* <List >\r\n                <CheckboxItem key={\"0\"} onChange={onChange}>\r\n                    test\r\n                </CheckboxItem>\r\n            </List> */}\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default LoginForm\r\n\r\n// const onChange = () => {\r\n//     console.log('123')\r\n// }","C:\\OpenServer\\domains\\front1\\src\\Components\\Orders\\Orders.tsx",["213"],"import { formatCountdown } from 'antd/lib/statistic/utils'\r\nimport React from 'react'\r\nimport { OrdersPropsType } from './OrdersContainer'\r\n\r\nexport type OwnOrdersPropsType = {}\r\nconst Orders: React.FC<OrdersPropsType> = (props) => {\r\n    return(\r\n        <div>Orders</div>\r\n    )\r\n}\r\n\r\nexport default Orders","C:\\OpenServer\\domains\\front1\\src\\api\\authAPI.ts",["214","215"],"import {instance, APIResponseType} from \"./api\";\r\n\r\ntype MeResponseDataType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n    // remember_token?: string,\r\n    // user?: any\r\n    // error?: boolean,\r\n    // message?: string\r\n}\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get(`authMe/`+localStorage.getItem('remember_token')).then( (response) => {\r\n            console.log('login: ', response)\r\n            return response\r\n        })\r\n    },\r\n    login(data: any) {\r\n        return instance.post('login', data)\r\n        .then(response => {\r\n            console.log('login: ', response)\r\n            if (response.data.remember_token !== null) {\r\n                localStorage.setItem('remember_token', response.data.remember_token);\r\n            } else {\r\n                localStorage.removeItem('remember_token');\r\n            }\r\n            return response.status === 200 ? response : null;\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                console.log(err.response)\r\n                return err.response\r\n            } else if (err.request) {\r\n                console.log('request', err.request)\r\n            } else {\r\n                console.log('anything else: ', err)\r\n            }\r\n            return null\r\n        })\r\n    },\r\n    register(creds: any) {\r\n        return instance.post('register', creds)\r\n        .then(response => {\r\n            console.log('login: ', response)\r\n            if (response.data.remember_token !== null) {\r\n                localStorage.setItem('remember_token', response.data.remember_token);\r\n            } else {\r\n                localStorage.removeItem('remember_token');\r\n            }\r\n            return response.status === 200 ? response : null;\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                console.log(err.response)\r\n                return err.response\r\n            } else if (err.request) {\r\n                console.log('request', err.request)\r\n            } else {\r\n                console.log('anything else: ', err)\r\n            }\r\n            return null\r\n        })\r\n    }\r\n}","C:\\OpenServer\\domains\\front1\\src\\api\\taskApi.ts",[],"C:\\OpenServer\\domains\\front1\\src\\Components\\Header\\MenuMobileContainer.tsx",[],"C:\\OpenServer\\domains\\front1\\src\\utils\\Formik\\ValidateFields.ts",[],"C:\\OpenServer\\domains\\front1\\src\\Components\\TimeScale\\TimeScaleContainer.tsx",[],"C:\\OpenServer\\domains\\front1\\src\\utils\\Formik\\CreateAntField.tsx",[],"C:\\OpenServer\\domains\\front1\\src\\Components\\ToDo\\Settings\\SettingsModal.tsx",[],"C:\\OpenServer\\domains\\front1\\src\\Components\\ToDo\\ToDoHeader\\ToDoHeaderContainer.tsx",[],"C:\\OpenServer\\domains\\front1\\src\\api\\api.ts",[],"C:\\OpenServer\\domains\\front1\\src\\api\\userAPI.ts",["216","217"],"import { NewTaskDataType, TaskType } from '../Types/types'\r\nimport {instance} from './api'\r\n\r\nexport const userAPI = {\r\n    checkUserForExistence(userName: string) {\r\n        return instance.get<any>(`users?userName=${userName}`)\r\n        .then(response => {\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                return err.response\r\n            } else if (err.request) {\r\n                //console.log('request', err.request)\r\n            } else {\r\n                //console.log('anything else: ', err)\r\n            }\r\n            return null\r\n        })\r\n    }\r\n}",["218","219"],"C:\\OpenServer\\domains\\front1\\src\\Components\\Header\\MenuMobile.tsx",["220","221"],"import React, { useState } from 'react'\r\nimport { Menu, ActivityIndicator, NavBar, Button } from 'antd-mobile'\r\nimport { ValueType } from 'antd-mobile/lib/menu/PropsType'\r\nimport './MenuMobile.css'\r\nimport {useHistory, useLocation} from 'react-router-dom'\r\nimport {MenuDataType} from './Header'\r\nimport { MenuMobilePropsType } from './MenuMobileContainer'\r\nimport { Link } from 'react-router-dom'\r\nimport {LogoutOutlined} from '@ant-design/icons'\r\n\r\nexport type OwnMenuMobilePropsType = {\r\n    menuData: MenuDataType,\r\n    logout: ()=>void\r\n}\r\n\r\nconst MenuMobile: React.FC<MenuMobilePropsType> = (props) => {\r\n    let history = useHistory();\r\n    const location = useLocation();\r\n    const [show, setShow] = useState(false)\r\n    type DataType = typeof props.menuData\r\n    const data = [...props.menuData] \r\n    const [initData, setInitData] = useState<DataType>(data)\r\n\r\n    const getSelectedMenuItem = ():ValueType => {\r\n        let response: ValueType = [data[0].value, '']\r\n        data.forEach( (dataItem: any) => {\r\n            if (dataItem.children) {\r\n                dataItem.children.forEach( (item: any) => {\r\n                    //console.log('/',item.value,'===',location.pathname)\r\n                    if (item.value === location.pathname) {\r\n                        response = [dataItem.value, item.value]\r\n                    }\r\n                })\r\n            }\r\n        })\r\n        //console.log('getSelectedMenuItem response: ', response)\r\n        return response\r\n    }\r\n\r\n    const [selectedMenuItem, setSelectedMenuItem] = useState<ValueType>( getSelectedMenuItem() )\r\n\r\n    const handleClick = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\r\n        e.preventDefault(); // Fix event propagation on Android\r\n        setShow(!show)\r\n        // if (!initData) {\r\n        //     setInitData(data)\r\n        // }\r\n    }\r\n\r\n    const onChange = (value?: ValueType | undefined) => {        \r\n        let label = '';\r\n        data.forEach((dataItem) => {\r\n            if (value) {\r\n                if (dataItem.value === value[0]) {\r\n                    // Нужно ли сохранять совпадение submenu?????\r\n                    if (dataItem.children && value[1]) {\r\n                        dataItem.children.forEach((cItem: { value: string | string[]; label: any }) => {\r\n                            if (cItem.value === value[1]) {\r\n                                label = `/${cItem.value}`;\r\n                                // console.log('history.push:',`${cItem.value}`)\r\n                                // history.push(`/${cItem.value}`)\r\n                                // history.push(props.appLocation + cItem.value)\r\n                                history.replace(`${cItem.value}`)\r\n                                \r\n                            }\r\n                        })\r\n                    }\r\n                }\r\n                setSelectedMenuItem([selectedMenuItem[0], value[1]])\r\n            }\r\n        })\r\n    }\r\n\r\n    const onMaskClick = () => {\r\n        setShow(false)\r\n    }\r\n\r\n    const menuEl = (\r\n        <Menu\r\n            className=\"foo-menu\"\r\n            data={initData}\r\n            value={selectedMenuItem}\r\n            onChange={onChange}\r\n            height={document.documentElement.clientHeight * 0.6}\r\n        />\r\n    );\r\n\r\n    const loadingEl = (\r\n        <div style={{ width: '100%', height: document.documentElement.clientHeight * 0.6, display: 'flex', justifyContent: 'center' }}>\r\n            <ActivityIndicator size=\"large\" />\r\n        </div>\r\n    );\r\n\r\n    // console.log(props)\r\n\r\n    const onLogout = () => {\r\n        onChange(['', ''])\r\n        history.replace(props.appLocation+'login')\r\n        props.logout()\r\n    }\r\n\r\n    return (\r\n        <div className={show ? 'menu-active' : ''}>\r\n            <div>\r\n                <NavBar\r\n                    leftContent=\"\"\r\n                    mode=\"light\"\r\n                    icon={<img src=\"https://gw.alipayobjects.com/zos/rmsportal/iXVHARNNlmdCGnwWxQPH.svg\" className=\"am-icon am-icon-md\" alt=\"\" />}\r\n                    onLeftClick={handleClick}\r\n                    className=\"top-nav-bar\"\r\n                >\r\n                    {!props.isAuth ? \r\n                        <Link \r\n                            to={props.appLocation+\"login\"} \r\n                            onClick={ ()=>{onChange(['', ''])} }\r\n                        >\r\n                            <span className=\"text-white\">Login</span> \r\n                        </Link>\r\n                    :\r\n                        <div>\r\n                            {props.user?.name}\r\n                            <Button className=\"ml-5\" size=\"small\" icon={<LogoutOutlined/>} onClick={onLogout} inline >\r\n\r\n                            </Button>\r\n                        </div>\r\n                    }\r\n                    \r\n                </NavBar>\r\n            </div>\r\n            {show ? initData ? menuEl : loadingEl : null}\r\n            {show ? <div className=\"menu-mask\" onClick={onMaskClick} /> : null}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default (MenuMobile)\r\n\r\n\r\n","C:\\OpenServer\\domains\\front1\\src\\Components\\TimeScale\\TimeScale.tsx",["222"],"import React, { useEffect, useState } from 'react'\r\nimport { TaskType } from '../../Types/types'\r\nimport moment from 'moment'\r\nimport { TimeScalePropsType } from './TimeScaleContainer'\r\nimport { Divider, Spin, Tooltip, message } from 'antd'\r\nimport TaskItem from './TaskItem/TaskItemContainer'\r\nimport { sortTaskArrayByParams } from '../../utils/array-helpers'\r\n\r\nexport type OwnTaskTimeScaleType = {}\r\nconst TimeScale: React.FC<TimeScalePropsType> = (props) => {\r\n    type SelestedDatesType = typeof props.dateInterval\r\n    const [selestedDates, setSelectedDates] = useState<SelestedDatesType>({ startDate: moment(null), endDate: moment() })\r\n    useEffect(() => {\r\n        if (\r\n            props.dateInterval.startDate.isSame(selestedDates.startDate.format('YYYY-MM-DD'), \"day\" ) &&\r\n            props.dateInterval.endDate.isSame(selestedDates.endDate.format('YYYY-MM-DD'), \"day\" )\r\n        ) { }\r\n        else {\r\n            if (props.dateInterval.startDate !== null) {\r\n                props.getTaskList(\r\n                    props.dateInterval.startDate.format('YYYY-MM-DD'),\r\n                    props.dateInterval.endDate.format('YYYY-MM-DD')\r\n                )\r\n                setSelectedDates(props.dateInterval)\r\n            }\r\n        }\r\n    }, [props.dateInterval])\r\n\r\n    useEffect(() => {\r\n        if (props.errorMessage !== null) {\r\n            message.success(props.errorMessage)\r\n        }\r\n    }, [props.errorMessage])\r\n\r\n    if (props.taskList !== null) {\r\n        return (\r\n            <>\r\n                {getTimeScaleArrey(props.taskList)}\r\n            </>\r\n        )\r\n    } else {\r\n        return (\r\n            <Spin key=\"spin\" size=\"large\" />\r\n        )\r\n    }\r\n}\r\n\r\nexport default TimeScale\r\n\r\n\r\nconst getTimeScaleArrey = (taskList: Array<TaskType>): Array<React.ReactElement<string>> => {\r\n    let timeScaleArrey: Array<React.ReactElement<string>> = []\r\n    let tomorowTasks: Array<TaskType> = []\r\n\r\n    taskList.sort(sortTaskArrayByParams('time')).sort(sortTaskArrayByParams('date'))\r\n\r\n    const getHeadlineLabel = (task: TaskType) => {\r\n        return moment(task.date).format('DD MMMM')\r\n    }\r\n\r\n    let headlineDate: string | null = null\r\n\r\n    if (taskList !== null && taskList.length > 0) {\r\n        headlineDate = getHeadlineLabel(taskList[0])\r\n        timeScaleArrey.push(\r\n            <h3 key={headlineDate + 'title'}>{headlineDate}:</h3>\r\n        )\r\n    }\r\n\r\n    for (let index: number = 0; index < 24; index++) {\r\n        if (taskList.length > 0) {\r\n            timeScaleArrey.push(\r\n                <Divider key={index + 'to' + headlineDate} orientation=\"left\">\r\n                    {index <= 9 ? '0' : null}{index}:00\r\n                </Divider>\r\n            )\r\n        } else {\r\n            timeScaleArrey.push(<h3 key=\"noTasks\">no tasks</h3>)\r\n            break\r\n        }\r\n\r\n        if (taskList !== null) {\r\n            for (let i = 0; i < taskList.length; i++) {\r\n                const element: TaskType = taskList[i]\r\n                const timeVal = Number(element.time.split(':', 1))\r\n                const nextHour = index + 1\r\n                if (timeVal >= index && timeVal < nextHour) {\r\n                    if (getHeadlineLabel(element) === headlineDate) {\r\n                        timeScaleArrey.push(\r\n                            <Tooltip key={index + '-' + element.id} placement=\"topLeft\" title={element.descriptions}>\r\n                                <TaskItem element={element} />\r\n                            </Tooltip>\r\n                        )\r\n                    }\r\n                    else {\r\n                        tomorowTasks.push(element)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (tomorowTasks.length > 0) {\r\n        timeScaleArrey = timeScaleArrey.concat(getTimeScaleArrey(tomorowTasks))\r\n    }\r\n\r\n    return timeScaleArrey\r\n}","C:\\OpenServer\\domains\\front1\\src\\Components\\ToDo\\ToDoHeader\\ToDoHeader.tsx",[],"C:\\OpenServer\\domains\\front1\\src\\utils\\array-helpers.ts",[],"C:\\OpenServer\\domains\\front1\\src\\Components\\TimeScale\\TaskItem\\TaskItemContainer.tsx",[],"C:\\OpenServer\\domains\\front1\\src\\Components\\TimeScale\\TaskItem\\TaskItem.tsx",[],["223","224"],"C:\\OpenServer\\domains\\front1\\src\\Components\\Header\\MenuBrowser.tsx",["225","226","227","228","229"],"import React, {useState} from 'react'\r\nimport { Menu } from 'antd';\r\nimport {Link} from 'react-router-dom'\r\nimport { MailOutlined, AppstoreOutlined, SettingOutlined } from '@ant-design/icons';\r\n\r\nconst { SubMenu } = Menu;\r\n\r\nconst MenuBrowser: React.FC<any> = (props) => {\r\n    const [state, setState] = useState<Array<string>>([])\r\n    const handleClick = (e: any | undefined) => {\r\n        // //console.log('click ', e);\r\n        // setState({ current: e.key });\r\n    }\r\n\r\n    const getMenuItem = (childs: any):any => {\r\n        // return <Menu.Item key=\"setting:1\">Option 1</Menu.Item>\r\n        const menuItems = childs.map( (item: any) => {\r\n            return (\r\n                <Menu.Item key={item.value}>\r\n                    <Link to={item.value}>{item.label}</Link>\r\n                </Menu.Item>\r\n            )\r\n        })\r\n        return menuItems\r\n    }\r\n\r\n    const getSubMenu = () => {\r\n        // //console.log(props.menuData)\r\n        const subMenu = props.menuData.map( (item: any) => {\r\n            // //console.log(item)\r\n            return (\r\n                <SubMenu \r\n                    key={item.value} \r\n                    // icon={<MailOutlined />}\r\n                    title={item.label}\r\n                >\r\n                    {getMenuItem(item.children)}\r\n                </SubMenu >\r\n            )\r\n        })\r\n        subMenu.push(\r\n            <Menu.Item key=\"login\">\r\n                <Link to={props.appLocation +\"login\"} >Login</Link>\r\n            </Menu.Item>\r\n        )\r\n        return subMenu\r\n    }\r\n\r\n    console.log(props)\r\n    return (\r\n        <Menu \r\n            onClick={handleClick} \r\n            // selectedKeys={[current]} \r\n            mode=\"horizontal\"\r\n            theme=\"dark\"\r\n        >\r\n            {getSubMenu()}\r\n        </Menu>\r\n    )\r\n}\r\n\r\nexport default MenuBrowser","C:\\OpenServer\\domains\\front1\\src\\Components\\ToDo\\NewTaskForm\\NewTaskFormContainer.tsx",[],"C:\\OpenServer\\domains\\front1\\src\\Components\\ToDo\\NewTaskForm\\NewTaskForm.tsx",["230"],"import React, { useState, useEffect } from 'react'\r\nimport moment from 'moment'\r\nimport { Form, Input, Button, TimePicker, DatePicker, Drawer, Spin, message } from 'antd'\r\nimport { NewTaskFormPropsType } from './NewTaskFormContainer'\r\nimport './../style.css'\r\n\r\nconst layout = {\r\n    labelCol: { span: 8 },\r\n    wrapperCol: { span: 16 },\r\n}\r\nconst tailLayout = {\r\n    wrapperCol: { offset: 8, span: 16 },\r\n}\r\n\r\nexport type NewTaskFormOwnPropsType = {\r\n    onClose: () => void\r\n    visible: boolean,\r\n    setVisible: (visible: boolean) => void\r\n}\r\n\r\nconst { TextArea } = Input\r\n\r\nconst timeFormat: string = 'HH:mm'\r\n\r\nconst NewTaskForm: React.FC<NewTaskFormPropsType> = (props) => {\r\n    const [form] = Form.useForm()\r\n    const [selectedDate, setSelectedDate] = useState<moment.Moment>(moment())\r\n    const [saveStatus, setSaveStatus] = useState<string>(props.taskSaveStatus)\r\n\r\n    useEffect(() => {\r\n        switch (props.taskSaveStatus) {\r\n            case 'inProgress':\r\n                setSaveStatus(props.taskSaveStatus)\r\n                break\r\n            case 'success':\r\n                message.success('The task was successfully created')\r\n                props.onClose()\r\n                setSaveStatus('')\r\n                onReset()\r\n                break\r\n            case 'error':\r\n                message.error('Error: ' + props.errorMessage)\r\n                setSaveStatus(props.taskSaveStatus)\r\n                break\r\n\r\n            default:\r\n                break\r\n        }\r\n    }, [props.taskSaveStatus])\r\n\r\n    type OnFinishType = {\r\n        taskName: string,\r\n        date: moment.Moment,\r\n        taskTime: moment.Moment,\r\n        description?: string\r\n    }\r\n    const onFinish = (values: OnFinishType) => {\r\n        const data = {\r\n            date: values.date.format('YYYY-MM-DD'),\r\n            taskTime: values.taskTime.format('HH:mm'),\r\n            taskName: values.taskName,\r\n            user_id: 1,\r\n            description: values.description\r\n        }\r\n\r\n        if (!moment(selectedDate.format('YYYY-MM-DD')).isBetween(\r\n            props.dateInterval.startDate.format('YYYY-MM-DD'),\r\n            props.dateInterval.endDate.format('YYYY-MM-DD'),\r\n            undefined, '[]'\r\n        )) {\r\n            props.createNewTask(data, false)\r\n        } else {\r\n\r\n            props.createNewTask(data, true)\r\n        }\r\n    }\r\n\r\n    const onReset = () => {\r\n        form.resetFields()\r\n    }\r\n\r\n    const onDateChange = (value: moment.Moment | null, dateString: string): void => {\r\n        if (value !== null) {\r\n            setSelectedDate(value)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Drawer\r\n            title={\"Create New Task for \" + selectedDate.format('DD MMM YYYY')}\r\n            placement=\"right\"\r\n            closable={true}\r\n            onClose={props.onClose}\r\n            visible={props.visible}\r\n            width=\"90%\"\r\n        >\r\n            <Form\r\n                {...layout}\r\n                form={form}\r\n                name=\"control-hooks\"\r\n                onFinish={onFinish}\r\n            >\r\n                <Form.Item\r\n                    label=\"Task name\"\r\n                    name=\"taskName\"\r\n                    rules={[{ required: true, message: 'Please input task name!' }]}\r\n                >\r\n                    <Input />\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    label=\"Task date\"\r\n                    name=\"date\"\r\n                    initialValue={selectedDate}\r\n                    rules={[{ required: true, message: 'Please input task date!' }]}\r\n                >\r\n                    <DatePicker\r\n                        onChange={onDateChange}\r\n                        format='DD-MM-YYYY'\r\n                        autoComplete=\"off\"\r\n                    />\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    label=\"Task time\"\r\n                    name=\"taskTime\"\r\n                    rules={[{ required: true, message: 'Please input task time!' }]}\r\n                >\r\n                    <TimePicker\r\n                        format={timeFormat}\r\n                    />\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    label=\"Description\"\r\n                    name=\"description\"\r\n                >\r\n                    <TextArea rows={2} />\r\n                </Form.Item>\r\n\r\n                <Form.Item {...tailLayout}>\r\n                    {saveStatus === 'inProgress' ?\r\n                        <Spin></Spin>\r\n                        :\r\n                        <>\r\n                            <Button type=\"primary\" htmlType=\"submit\">\r\n                                Create\r\n                            </Button>\r\n                            <Button className=\"ml-3\" type=\"primary\" onClick={onReset}>\r\n                                Reset\r\n                            </Button>\r\n                        </>\r\n                    }\r\n                </Form.Item>\r\n            </Form>\r\n\r\n        </Drawer>\r\n    )\r\n}\r\n\r\n\r\nexport default NewTaskForm","C:\\OpenServer\\domains\\front1\\src\\redux\\TaskListReducer.ts",[],"C:\\OpenServer\\domains\\front1\\src\\Components\\Login\\LoginContainer.tsx",[],"C:\\OpenServer\\domains\\front1\\src\\Components\\TasksTree\\TasksTreeContainer.tsx",[],"C:\\OpenServer\\domains\\front1\\src\\Components\\Register\\Register.tsx",[],"C:\\OpenServer\\domains\\front1\\src\\api\\taskListAPI.ts",[],"C:\\OpenServer\\domains\\front1\\src\\Components\\TasksTree\\TasksTree.tsx",["231","232","233","234","235","236","237"],"import React, { useEffect, useState } from 'react'\r\nimport { TasksTreePropsType } from './TasksTreeContainer'\r\nimport { isMobile } from 'react-device-detect'\r\nimport { DatePicker, Checkbox, Button } from 'antd'\r\nimport { FileAddOutlined, SettingOutlined } from '@ant-design/icons'\r\nimport TasksTreeMobile from './TasksTreeMobile'\r\n\r\nexport type OwnTasksTreePropsType = {}\r\n\r\nconst TasksTree: React.FC<TasksTreePropsType> = (props) => {\r\n    useEffect(() => {\r\n        if (props.taskList.length === 0) {\r\n            props.getTaskList()\r\n        }\r\n    }, [props.taskList])\r\n\r\n    const showTaskList = () => {\r\n        return props.taskList.map((item) => {\r\n            return (\r\n                <div>{item.name}</div>\r\n            )\r\n        })\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {/* <div className=\"col-12 col-md-12 col-lg-4\">\r\n                <Button className=\"\"\r\n                    type=\"primary\"\r\n                    shape=\"round\"\r\n                    style={{ marginLeft: 10 }}\r\n                    // onClick={props.showDrawer}\r\n                    icon={\r\n                        <div className=\"d-flex flex-wrap align-content-start\">\r\n                            <SettingOutlined style={{ fontSize: '18px' }} />\r\n                            <span className=\"ml-1\" style={{ fontSize: '14px' }}>Add</span>\r\n                        </div>} \r\n                />\r\n            </div> */}\r\n\r\n            {isMobile ? <TasksTreeMobile /> : showTaskList()}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default TasksTree","C:\\OpenServer\\domains\\front1\\src\\Components\\Register\\RegisterForm.tsx",["238","239"],"import React from 'react'\r\nimport { Form, Field } from \"formik\"\r\nimport { AntCheckbox, AntInput, AntInputPassword } from '../../utils/Formik/CreateAntField'\r\nimport { validateEmail, validateRequired } from '../../utils/Formik/ValidateFields'\r\nimport { Link } from 'react-router-dom'\r\nimport { Button } from 'antd'\r\n\r\nconst RegisterForm: React.FC<any> = (props) => {\r\n    console.log('RegisterForm')\r\n    return(\r\n        <Form\r\n            // {...layout} \r\n            className=\"form-container\" \r\n            onSubmit={props.handleSubmit}\r\n        >\r\n            <Field\r\n                component={AntInput}\r\n                name=\"name\"\r\n                type=\"text\"\r\n                label=\"Name\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n            <Field\r\n                component={AntInput}\r\n                name=\"email\"\r\n                type=\"email\"\r\n                label=\"Email\"\r\n                validate={validateEmail}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n            <Field\r\n                component={AntInputPassword}\r\n                name=\"password\"\r\n                type=\"password\"\r\n                label=\"Password\"\r\n                // label={<label className=\"ant-form-item-required\">Password</label>}\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n\r\n            <Field\r\n                component={AntInputPassword}\r\n                name=\"password2\"\r\n                type=\"password\"\r\n                label=\"Confirm\"\r\n                // label={<label className=\"ant-form-item-required\">Password</label>}\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n\r\n            <Field\r\n                component={AntCheckbox}\r\n                name=\"remember\"\r\n                label=\"Remember Me\"\r\n                submitCount={props.submitCount}\r\n            />\r\n            <div className=\"submit-container\">\r\n                <button className=\"ant-btn ant-btn-primary\" type=\"submit\">\r\n                    Register\r\n                </button>\r\n            </div>\r\n            \r\n            \r\n\r\n            {/* <List >\r\n                <CheckboxItem key={\"0\"} onChange={onChange}>\r\n                    test\r\n                </CheckboxItem>\r\n            </List> */}\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default RegisterForm","C:\\OpenServer\\domains\\front1\\src\\Components\\TasksTree\\TasksTreeMobile.tsx",[],{"ruleId":"240","replacedBy":"241"},{"ruleId":"242","replacedBy":"243"},{"ruleId":"244","severity":1,"message":"245","line":4,"column":25,"nodeType":"246","messageId":"247","endLine":4,"endColumn":29},{"ruleId":"244","severity":1,"message":"248","line":10,"column":10,"nodeType":"246","messageId":"247","endLine":10,"endColumn":20},{"ruleId":"244","severity":1,"message":"249","line":18,"column":9,"nodeType":"246","messageId":"247","endLine":18,"endColumn":16},{"ruleId":"244","severity":1,"message":"250","line":19,"column":9,"nodeType":"246","messageId":"247","endLine":19,"endColumn":16},{"ruleId":"244","severity":1,"message":"251","line":19,"column":18,"nodeType":"246","messageId":"247","endLine":19,"endColumn":24},{"ruleId":"244","severity":1,"message":"252","line":19,"column":26,"nodeType":"246","messageId":"247","endLine":19,"endColumn":31},{"ruleId":"244","severity":1,"message":"253","line":28,"column":20,"nodeType":"246","messageId":"247","endLine":28,"endColumn":31},{"ruleId":"254","severity":1,"message":"255","line":40,"column":6,"nodeType":"256","endLine":40,"endColumn":25,"suggestions":"257"},{"ruleId":"244","severity":1,"message":"258","line":3,"column":10,"nodeType":"246","messageId":"247","endLine":3,"endColumn":14},{"ruleId":"244","severity":1,"message":"259","line":3,"column":16,"nodeType":"246","messageId":"247","endLine":3,"endColumn":25},{"ruleId":"244","severity":1,"message":"260","line":5,"column":8,"nodeType":"246","messageId":"247","endLine":5,"endColumn":14},{"ruleId":"244","severity":1,"message":"261","line":7,"column":10,"nodeType":"246","messageId":"247","endLine":7,"endColumn":19},{"ruleId":"244","severity":1,"message":"262","line":11,"column":7,"nodeType":"246","messageId":"247","endLine":11,"endColumn":19},{"ruleId":"244","severity":1,"message":"263","line":3,"column":5,"nodeType":"246","messageId":"247","endLine":3,"endColumn":16},{"ruleId":"244","severity":1,"message":"264","line":4,"column":5,"nodeType":"246","messageId":"247","endLine":4,"endColumn":15},{"ruleId":"244","severity":1,"message":"265","line":5,"column":5,"nodeType":"246","messageId":"247","endLine":5,"endColumn":14},{"ruleId":"244","severity":1,"message":"245","line":8,"column":10,"nodeType":"246","messageId":"247","endLine":8,"endColumn":14},{"ruleId":"244","severity":1,"message":"266","line":4,"column":9,"nodeType":"246","messageId":"247","endLine":4,"endColumn":19},{"ruleId":"244","severity":1,"message":"258","line":5,"column":10,"nodeType":"246","messageId":"247","endLine":5,"endColumn":14},{"ruleId":"244","severity":1,"message":"267","line":6,"column":10,"nodeType":"246","messageId":"247","endLine":6,"endColumn":23},{"ruleId":"244","severity":1,"message":"268","line":7,"column":10,"nodeType":"246","messageId":"247","endLine":7,"endColumn":16},{"ruleId":"244","severity":1,"message":"245","line":8,"column":10,"nodeType":"246","messageId":"247","endLine":8,"endColumn":14},{"ruleId":"244","severity":1,"message":"262","line":10,"column":7,"nodeType":"246","messageId":"247","endLine":10,"endColumn":19},{"ruleId":"244","severity":1,"message":"269","line":12,"column":7,"nodeType":"246","messageId":"247","endLine":12,"endColumn":13},{"ruleId":"244","severity":1,"message":"270","line":26,"column":11,"nodeType":"246","messageId":"247","endLine":26,"endColumn":19},{"ruleId":"244","severity":1,"message":"271","line":1,"column":10,"nodeType":"246","messageId":"247","endLine":1,"endColumn":25},{"ruleId":"244","severity":1,"message":"272","line":1,"column":19,"nodeType":"246","messageId":"247","endLine":1,"endColumn":34},{"ruleId":"244","severity":1,"message":"273","line":3,"column":6,"nodeType":"246","messageId":"247","endLine":3,"endColumn":24},{"ruleId":"244","severity":1,"message":"274","line":1,"column":10,"nodeType":"246","messageId":"247","endLine":1,"endColumn":25},{"ruleId":"244","severity":1,"message":"275","line":1,"column":27,"nodeType":"246","messageId":"247","endLine":1,"endColumn":35},{"ruleId":"240","replacedBy":"276"},{"ruleId":"242","replacedBy":"277"},{"ruleId":"244","severity":1,"message":"278","line":19,"column":22,"nodeType":"246","messageId":"247","endLine":19,"endColumn":33},{"ruleId":"244","severity":1,"message":"279","line":57,"column":33,"nodeType":"246","messageId":"247","endLine":57,"endColumn":38},{"ruleId":"254","severity":1,"message":"280","line":27,"column":8,"nodeType":"256","endLine":27,"endColumn":28,"suggestions":"281"},{"ruleId":"240","replacedBy":"282"},{"ruleId":"242","replacedBy":"283"},{"ruleId":"244","severity":1,"message":"284","line":4,"column":10,"nodeType":"246","messageId":"247","endLine":4,"endColumn":22},{"ruleId":"244","severity":1,"message":"285","line":4,"column":24,"nodeType":"246","messageId":"247","endLine":4,"endColumn":40},{"ruleId":"244","severity":1,"message":"286","line":4,"column":42,"nodeType":"246","messageId":"247","endLine":4,"endColumn":57},{"ruleId":"244","severity":1,"message":"287","line":9,"column":12,"nodeType":"246","messageId":"247","endLine":9,"endColumn":17},{"ruleId":"244","severity":1,"message":"288","line":9,"column":19,"nodeType":"246","messageId":"247","endLine":9,"endColumn":27},{"ruleId":"254","severity":1,"message":"289","line":49,"column":8,"nodeType":"256","endLine":49,"endColumn":30,"suggestions":"290"},{"ruleId":"244","severity":1,"message":"291","line":1,"column":28,"nodeType":"246","messageId":"247","endLine":1,"endColumn":36},{"ruleId":"244","severity":1,"message":"292","line":4,"column":10,"nodeType":"246","messageId":"247","endLine":4,"endColumn":20},{"ruleId":"244","severity":1,"message":"293","line":4,"column":22,"nodeType":"246","messageId":"247","endLine":4,"endColumn":30},{"ruleId":"244","severity":1,"message":"268","line":4,"column":32,"nodeType":"246","messageId":"247","endLine":4,"endColumn":38},{"ruleId":"244","severity":1,"message":"294","line":5,"column":10,"nodeType":"246","messageId":"247","endLine":5,"endColumn":25},{"ruleId":"244","severity":1,"message":"286","line":5,"column":27,"nodeType":"246","messageId":"247","endLine":5,"endColumn":42},{"ruleId":"254","severity":1,"message":"295","line":15,"column":8,"nodeType":"256","endLine":15,"endColumn":24,"suggestions":"296"},{"ruleId":"244","severity":1,"message":"245","line":5,"column":10,"nodeType":"246","messageId":"247","endLine":5,"endColumn":14},{"ruleId":"244","severity":1,"message":"268","line":6,"column":10,"nodeType":"246","messageId":"247","endLine":6,"endColumn":16},"no-native-reassign",["297"],"no-negated-in-lhs",["298"],"@typescript-eslint/no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'Breadcrumb' is defined but never used.","'SubMenu' is assigned a value but never used.","'Content' is assigned a value but never used.","'Footer' is assigned a value but never used.","'Sider' is assigned a value but never used.","'setLocation' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'location' and 'props'. Either include them or remove the dependency array.","ArrayExpression",["299"],"'List' is defined but never used.","'InputItem' is defined but never used.","'moment' is defined but never used.","'propTypes' is defined but never used.","'CheckboxItem' is assigned a value but never used.","'BrowserView' is defined but never used.","'MobileView' is defined but never used.","'isBrowser' is defined but never used.","'useHistory' is defined but never used.","'validateAsync' is defined but never used.","'Button' is defined but never used.","'layout' is assigned a value but never used.","'location' is assigned a value but never used.","'formatCountdown' is defined but never used.","'APIResponseType' is defined but never used.","'MeResponseDataType' is defined but never used.","'NewTaskDataType' is defined but never used.","'TaskType' is defined but never used.",["297"],["298"],"'setInitData' is assigned a value but never used.","'label' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'props', 'selestedDates.endDate', and 'selestedDates.startDate'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["300"],["297"],["298"],"'MailOutlined' is defined but never used.","'AppstoreOutlined' is defined but never used.","'SettingOutlined' is defined but never used.","'state' is assigned a value but never used.","'setState' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'onReset' and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["301"],"'useState' is defined but never used.","'DatePicker' is defined but never used.","'Checkbox' is defined but never used.","'FileAddOutlined' is defined but never used.","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["302"],"no-global-assign","no-unsafe-negation",{"desc":"303","fix":"304"},{"desc":"305","fix":"306"},{"desc":"307","fix":"308"},{"desc":"309","fix":"310"},"Update the dependencies array to be: [location, props, props.initialized]",{"range":"311","text":"312"},"Update the dependencies array to be: [props, props.dateInterval, selestedDates.endDate, selestedDates.startDate]",{"range":"313","text":"314"},"Update the dependencies array to be: [onReset, props, props.taskSaveStatus]",{"range":"315","text":"316"},"Update the dependencies array to be: [props, props.taskList]",{"range":"317","text":"318"},[1510,1529],"[location, props, props.initialized]",[1258,1278],"[props, props.dateInterval, selestedDates.endDate, selestedDates.startDate]",[1499,1521],"[onReset, props, props.taskSaveStatus]",[555,571],"[props, props.taskList]"]
{"version":3,"sources":["api/api.ts","Components/ToDo/NewTaskForm/NewTaskForm.tsx","api/taskApi.ts","redux/taskReducer.ts","Components/ToDo/NewTaskForm/NewTaskFormContainer.tsx","Components/ToDo/ToDoHeader/ToDoHeader.tsx","Components/ToDo/ToDoHeader/ToDoHeaderContainer.tsx","Components/ToDo/Settings/SettingsModal.tsx","Components/TimeScale/TaskItem/TaskItem.tsx","Components/TimeScale/TaskItem/TaskItemContainer.tsx","utils/array-helpers.ts","Components/TimeScale/TimeScale.tsx","Components/TimeScale/TimeScaleContainer.tsx","Components/ToDo/ToDoList.tsx","Components/ToDo/ToDoListContainer.tsx","api/authAPI.ts","redux/authReducer.ts","redux/appReducer.ts","api/taskListAPI.ts","redux/TaskListReducer.ts","redux/store.ts","Components/Header/MenuBrowser.tsx","Components/Header/MenuMobile.tsx","Components/Header/MenuMobileContainer.tsx","Components/Header/Header.tsx","Components/Header/HeaderContainer.tsx","utils/Formik/CreateAntField.tsx","utils/Formik/ValidateFields.ts","Components/Login/LoginForm.tsx","Components/Login/Login.tsx","Components/Orders/Orders.tsx","Components/Orders/OrdersContainer.tsx","Components/TasksTree/TasksTreeMobile.tsx","Components/TasksTree/TasksTree.tsx","Components/TasksTree/TasksTreeContainer.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ResultCodesEnum","layout","labelCol","span","wrapperCol","tailLayout","offset","TextArea","Input","NewTaskForm","props","Form","useForm","form","useState","moment","selectedDate","setSelectedDate","taskSaveStatus","saveStatus","setSaveStatus","useEffect","message","success","onClose","onReset","error","errorMessage","resetFields","title","format","placement","closable","visible","width","name","onFinish","values","data","date","taskTime","taskName","user_id","description","isBetween","dateInterval","startDate","endDate","undefined","createNewTask","Item","label","rules","required","initialValue","onChange","value","dateString","autoComplete","rows","type","htmlType","className","onClick","instance","axios","create","withCredentials","baseURL","taskAPI","post","then","response","status","catch","err","request","console","log","taskId","delete","initialState","taskList","taskListIsFetching","isInterval","actions","setTaskList","setTaskSaveStatus","setErrorMessage","setTaskListIsFetching","isFetchingValue","setIsInterval","getTaskList","dispatch","getState","a","start_date","end_date","taskReducer","state","action","Tasks","connect","task","reload","RangePicker","DatePicker","ToDoHeader","dates","setDates","isSame","formatString","defaultValue","style","marginLeft","e","target","checked","shape","icon","FileAddOutlined","fontSize","showDrawer","showModal","SettingOutlined","SettingsModal","isModalVisible","onOk","handleOk","onCancel","handleCancel","TaskItem","element","setStetus","deleteingInProgess","setDeleteingInProgess","ListGroup","time","split","join","descriptions","textDecoration","id","size","taskid","deleteTask","DeleteOutlined","sortTaskArrayByParams","field","b","TimeScale","selestedDates","setSelectedDates","getTimeScaleArrey","timeScaleArrey","tomorowTasks","sort","getHeadlineLabel","headlineDate","length","push","index","orientation","i","timeVal","Number","concat","ToDoList","setVisible","setIsModalVisible","bordered","authAPI","get","userId","email","login","isAuth","captchaUrl","payload","authReducer","initialized","location","appReducer","taskListAPI","taskListReducer","rootReducer","combineReducers","app","auth","store","createStore","applyMiddleware","thunkMiddleware","SubMenu","Menu","MenuBrowser","mode","theme","menuData","map","item","childs","children","to","MenuMobile","history","useHistory","useLocation","show","setShow","initData","forEach","dataItem","pathname","getSelectedMenuItem","selectedMenuItem","setSelectedMenuItem","cItem","replace","menuEl","height","document","documentElement","clientHeight","loadingEl","display","justifyContent","leftContent","src","alt","onLeftClick","preventDefault","appLocation","Header","isMobile","disabled","FormItem","Option","Select","CheckboxItem","CheckboxMobile","CreateAntField","AntComponent","hasFeedback","selectOptions","submitCount","touched","submitted","hasError","errors","submittedError","touchedError","onInputChange","setFieldValue","onBlur","setFieldTouched","help","validateStatus","AntInput","InputItem","AntInputPassword","Password","AntCheckbox","TimePicker","Checkbox","validateRequired","validateEmail","test","LoginForm","onSubmit","handleSubmit","component","validate","initialValues","Login","formProps","alert","rememberMe","render","Orders","TasksTreeMobile","TasksTree","AppContainer","Layout","Content","Footer","Sider","compose","withRouter","initializeApp","promise","resultCode","messages","Promise","all","addLocation","exact","path","MainApp","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.d6f96cd8.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nexport const instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://crmapiserver.h1n.ru/api/',\r\n    // baseURL: 'https://81.90.181.175/api/',\r\n    // headers:     {\r\n    //     API-KEY: 'b1775b2f-c3a5-4509-8dc9-90b5629de7c3'\r\n    // }\r\n})\r\n\r\nexport enum ResultCodesEnum {\r\n    Success = 0,\r\n    Error = 1\r\n}\r\n\r\nexport type APIResponseType<D = {}, RC = ResultCodesEnum> = {\r\n    data: D\r\n    messages: Array<string>\r\n    resultCode: RC\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport moment from 'moment'\r\nimport { Form, Input, Button, TimePicker, DatePicker, Drawer, Spin, message } from 'antd'\r\nimport { NewTaskFormPropsType } from './NewTaskFormContainer'\r\nimport './../style.css'\r\n\r\nconst layout = {\r\n    labelCol: { span: 8 },\r\n    wrapperCol: { span: 16 },\r\n}\r\nconst tailLayout = {\r\n    wrapperCol: { offset: 8, span: 16 },\r\n}\r\n\r\nexport type NewTaskFormOwnPropsType = {\r\n    onClose: () => void\r\n    visible: boolean,\r\n    setVisible: (visible: boolean) => void\r\n}\r\n\r\nconst { TextArea } = Input\r\n\r\nconst timeFormat: string = 'HH:mm'\r\n\r\nconst NewTaskForm: React.FC<NewTaskFormPropsType> = (props) => {\r\n    const [form] = Form.useForm()\r\n    const [selectedDate, setSelectedDate] = useState<moment.Moment>(moment())\r\n    const [saveStatus, setSaveStatus] = useState<string>(props.taskSaveStatus)\r\n\r\n    useEffect(() => {\r\n        switch (props.taskSaveStatus) {\r\n            case 'inProgress':\r\n                setSaveStatus(props.taskSaveStatus)\r\n                break\r\n            case 'success':\r\n                message.success('The task was successfully created')\r\n                props.onClose()\r\n                setSaveStatus('')\r\n                onReset()\r\n                break\r\n            case 'error':\r\n                message.error('Error: ' + props.errorMessage)\r\n                setSaveStatus(props.taskSaveStatus)\r\n                break\r\n\r\n            default:\r\n                break\r\n        }\r\n    }, [props.taskSaveStatus])\r\n\r\n    type OnFinishType = {\r\n        taskName: string,\r\n        date: moment.Moment,\r\n        taskTime: moment.Moment,\r\n        description?: string\r\n    }\r\n    const onFinish = (values: OnFinishType) => {\r\n        const data = {\r\n            date: values.date.format('YYYY-MM-DD'),\r\n            taskTime: values.taskTime.format('HH:mm'),\r\n            taskName: values.taskName,\r\n            user_id: 1,\r\n            description: values.description\r\n        }\r\n\r\n        if (!moment(selectedDate.format('YYYY-MM-DD')).isBetween(\r\n            props.dateInterval.startDate.format('YYYY-MM-DD'),\r\n            props.dateInterval.endDate.format('YYYY-MM-DD'),\r\n            undefined, '[]'\r\n        )) {\r\n            props.createNewTask(data, false)\r\n        } else {\r\n\r\n            props.createNewTask(data, true)\r\n        }\r\n    }\r\n\r\n    const onReset = () => {\r\n        form.resetFields()\r\n    }\r\n\r\n    const onDateChange = (value: moment.Moment | null, dateString: string): void => {\r\n        if (value !== null) {\r\n            setSelectedDate(value)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Drawer\r\n            title={\"Create New Task for \" + selectedDate.format('DD MMM YYYY')}\r\n            placement=\"right\"\r\n            closable={true}\r\n            onClose={props.onClose}\r\n            visible={props.visible}\r\n            width=\"90%\"\r\n        >\r\n            <Form\r\n                {...layout}\r\n                form={form}\r\n                name=\"control-hooks\"\r\n                onFinish={onFinish}\r\n            >\r\n                <Form.Item\r\n                    label=\"Task name\"\r\n                    name=\"taskName\"\r\n                    rules={[{ required: true, message: 'Please input task name!' }]}\r\n                >\r\n                    <Input />\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    label=\"Task date\"\r\n                    name=\"date\"\r\n                    initialValue={selectedDate}\r\n                    rules={[{ required: true, message: 'Please input task date!' }]}\r\n                >\r\n                    <DatePicker\r\n                        onChange={onDateChange}\r\n                        format='DD-MM-YYYY'\r\n                        autoComplete=\"off\"\r\n                    />\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    label=\"Task time\"\r\n                    name=\"taskTime\"\r\n                    rules={[{ required: true, message: 'Please input task time!' }]}\r\n                >\r\n                    <TimePicker\r\n                        format={timeFormat}\r\n                    />\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    label=\"Description\"\r\n                    name=\"description\"\r\n                >\r\n                    <TextArea rows={2} />\r\n                </Form.Item>\r\n\r\n                <Form.Item {...tailLayout}>\r\n                    {saveStatus === 'inProgress' ?\r\n                        <Spin></Spin>\r\n                        :\r\n                        <>\r\n                            <Button type=\"primary\" htmlType=\"submit\">\r\n                                Create\r\n                            </Button>\r\n                            <Button className=\"ml-3\" type=\"primary\" onClick={onReset}>\r\n                                Reset\r\n                            </Button>\r\n                        </>\r\n                    }\r\n                </Form.Item>\r\n            </Form>\r\n\r\n        </Drawer>\r\n    )\r\n}\r\n\r\n\r\nexport default NewTaskForm","import { NewTaskDataType, TaskType } from '../Types/types'\r\nimport {instance} from './api'\r\n\r\nexport type TaskListType = {\r\n    Tasks: Array<TaskType>\r\n}\r\n\r\nexport const taskAPI = {\r\n    createNewTask(values: NewTaskDataType) {\r\n        return instance.post<TaskListType>(`tasks`, values)\r\n        .then(response => {\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                return err.response\r\n            } else if (err.request) {\r\n                console.log('request', err.request)\r\n            } else {\r\n                console.log('anything else: ', err)\r\n            }\r\n            return null\r\n        })\r\n    },\r\n\r\n    getTaskList(values: getTaskListValuesType) {\r\n        return instance.post<TaskListType>(`tasks/part`, values)\r\n        .then(response => {\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                return err.response\r\n            } else if (err.request) {\r\n                console.log('request', err.request)\r\n            } else {\r\n                console.log('anything else: ', err)\r\n            }\r\n            return null\r\n        })\r\n    },\r\n\r\n    deleteTask(taskId: number) {\r\n        return instance.delete<TaskListType>(`tasks/${taskId}`).then(response => {\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                return err.response\r\n            } else if (err.request) {\r\n                console.log('request', err.request)\r\n            } else {\r\n                console.log('anything else: ', err)\r\n            }\r\n            return null\r\n        })\r\n    }\r\n}\r\n\r\nexport type getTaskListValuesType = {\r\n    start_date: string, \r\n    end_date: string\r\n}","import { Dispatch } from 'redux'\r\nimport { taskAPI, TaskListType } from '../api/taskApi'\r\nimport { NewTaskDataType, TaskType } from '../Types/types'\r\nimport {BaseThunkType, InferActionsTypes} from './store'\r\nimport moment from 'moment'\r\n\r\nexport type InitialStateType = {\r\n    taskList: null | Array<TaskType>,\r\n    taskListIsFetching: boolean,\r\n    taskSaveStatus: 'no' | 'inProgress' | 'success' | 'error'\r\n    errorMessage: null | string,\r\n    isInterval: boolean,\r\n    dateInterval: {\r\n        startDate: moment.Moment,\r\n        endDate: moment.Moment\r\n    }\r\n}\r\n\r\nlet initialState:InitialStateType = {\r\n    taskList: null,\r\n    taskListIsFetching: false,\r\n    taskSaveStatus: 'no',\r\n    errorMessage: null,\r\n    isInterval: false,\r\n    dateInterval: {\r\n        startDate: moment(),\r\n        endDate: moment()\r\n    }\r\n}\r\n\r\nconst taskReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n    \r\n    switch (action.type) {\r\n        case 'SN/TASK/SET_TASK_LIST':\r\n            return {...state, taskList: action.taskList.Tasks}\r\n\r\n        case 'SN/TASK/SET_TASK_SAVE_STATUS':\r\n            return {...state, taskSaveStatus: action.taskSaveStatus}\r\n\r\n        case 'SN/TASK/SET_ERROR_MESSAGE':\r\n            return {...state, errorMessage: action.message}\r\n\r\n        case 'SN/TASK/SET_TASK_LIST_IS_FETCHING':\r\n            return {...state, taskListIsFetching: action.isFetchingValue}\r\n\r\n        case 'SN/TASK/SET_IS_INTERVAL':\r\n            const dateInterval = {\r\n                startDate: action.date.startDate,\r\n                endDate: action.date.endDate\r\n            }\r\n            return {...state, isInterval: action.isInterval, dateInterval }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    setTaskList: (taskList: TaskListType) => ({ type: 'SN/TASK/SET_TASK_LIST', taskList } as const),\r\n    setTaskSaveStatus: (taskSaveStatus: 'no' | 'inProgress' | 'success' | 'error') => ({ type: 'SN/TASK/SET_TASK_SAVE_STATUS', taskSaveStatus } as const),\r\n    setErrorMessage: (message: string | null) => ({type: 'SN/TASK/SET_ERROR_MESSAGE', message} as const),\r\n    setTaskListIsFetching: (isFetchingValue: boolean) => ({type: 'SN/TASK/SET_TASK_LIST_IS_FETCHING', isFetchingValue} as const),\r\n    setIsInterval: (isInterval: boolean, date: {startDate: moment.Moment, endDate: moment.Moment}) => ({type: 'SN/TASK/SET_IS_INTERVAL', isInterval, date} as const)\r\n}\r\n\r\nexport const createNewTask = (values: NewTaskDataType, reload:boolean = true): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        dispatch(actions.setTaskSaveStatus('inProgress'))\r\n\r\n        let response = await taskAPI.createNewTask(values)\r\n\r\n        if (response && response.status && response.status === 200) {\r\n            if (reload) {\r\n                const state = getState()\r\n                const startDate = state.task.dateInterval.startDate.format('YYYY-MM-DD')\r\n                const endDate = state.task.dateInterval.endDate.format('YYYY-MM-DD')\r\n                dispatch(getTaskList(startDate, endDate))\r\n            }\r\n            dispatch(actions.setTaskSaveStatus('success'))\r\n            dispatch(actions.setTaskSaveStatus('no'))\r\n        } else {\r\n            if (response && response.data) {\r\n                dispatch(actions.setErrorMessage(response.data.message))\r\n                dispatch(actions.setTaskSaveStatus('error'))\r\n                dispatch(actions.setTaskSaveStatus('no'))\r\n                dispatch( actions.setErrorMessage(null) )\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport const getTaskList = (startDate: string, endDate:string): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        dispatch(actions.setTaskListIsFetching(true))\r\n\r\n        const values = {start_date: startDate, end_date: endDate}\r\n        let response = await taskAPI.getTaskList(values)\r\n\r\n        if (response !== undefined && response !== null) {\r\n            dispatch(actions.setTaskList(response.data))\r\n        } else {\r\n            // add error message\r\n        }\r\n        dispatch(actions.setTaskListIsFetching(false))\r\n    }\r\n}\r\n\r\nexport const deleteTask = (taskid: number, startDate: string, endDate:string): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        let response = await taskAPI.deleteTask(taskid)\r\n\r\n        if (response !== null) {\r\n            dispatch(actions.setErrorMessage('Task deletion was successful'))\r\n            dispatch(getTaskList(startDate, endDate))\r\n            dispatch( actions.setErrorMessage(null) )\r\n        }\r\n    }\r\n}\r\n\r\nexport default taskReducer\r\n\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsTypes>\r\nexport type DispatchType = Dispatch<ActionsTypes>\r\n","import {connect} from 'react-redux'\r\nimport NewTaskForm, { NewTaskFormOwnPropsType } from './NewTaskForm'\r\nimport {createNewTask} from '../../../redux/taskReducer'\r\nimport { AppStateType } from '../../../redux/store'\r\nimport {NewTaskDataType} from '../../../Types/types'\r\n\r\nexport type MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype DispatchPropsType = {\r\n    createNewTask: (values:NewTaskDataType, reload:boolean)=> void\r\n}\r\n\r\nexport type NewTaskFormPropsType = MapPropsType & DispatchPropsType & NewTaskFormOwnPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        taskList: state.task.taskList,\r\n        taskSaveStatus: state.task.taskSaveStatus,\r\n        errorMessage: state.task.errorMessage,\r\n        dateInterval: state.task.dateInterval\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, DispatchPropsType, NewTaskFormOwnPropsType, AppStateType>(mapStateToProps, \r\n    {createNewTask}) \r\n    (NewTaskForm)\r\n\r\n\r\n","import React, { useState, useEffect } from 'react'\r\nimport { DatePicker, Checkbox, Button } from 'antd'\r\nimport { FileAddOutlined, SettingOutlined } from '@ant-design/icons'\r\nimport { CheckboxChangeEvent } from 'antd/lib/checkbox'\r\nimport {RangeValue} from '../../../Types/types'\r\nimport { ToDoHeaderPropsType } from './ToDoHeaderContainer'\r\nimport moment from 'moment'\r\n\r\nconst { RangePicker } = DatePicker\r\n\r\nexport type OwnToDoHeaderPropsType = {\r\n    showDrawer: () => void,\r\n    showModal: () => void,\r\n}\r\n\r\nconst ToDoHeader: React.FC<ToDoHeaderPropsType> = (props) => {\r\n    const [isInterval, setIsInterval] = useState(false)\r\n    const [dates, setDates] = useState<{startDate: moment.Moment, endDate: moment.Moment}>({startDate: moment(), endDate: moment()})\r\n\r\n    useEffect(() => {\r\n        if ( \r\n            !props.dateInterval.startDate.isSame(dates.startDate.format('YYYY-MM-DD'), \"day\" ) ||\r\n            !props.dateInterval.endDate.isSame(dates.endDate.format('YYYY-MM-DD'), \"day\" )\r\n        ) {\r\n            props.setIsInterval(isInterval, dates)\r\n        }\r\n        \r\n    }, [isInterval, dates, props])\r\n\r\n\r\n    const onDateTypeChange = (e: CheckboxChangeEvent) => {\r\n        if (!e.target.checked) {\r\n            setDates({\r\n                startDate: dates.startDate,\r\n                endDate: dates.startDate\r\n            })\r\n        }\r\n        setIsInterval(e.target.checked)\r\n    }\r\n\r\n    const onDateRangeChange = (values: RangeValue<moment.Moment>, formatString: [string, string]): void => {\r\n        if (values !== null && values[0] !== null && values[1] !== null ) {\r\n            setDates({\r\n                startDate: values[0],\r\n                endDate: values[1],\r\n            })\r\n        }\r\n        \r\n    }\r\n\r\n    const onDateChange = (value: moment.Moment | null, dateString: string):void => {\r\n        if (value !== null) {\r\n            setDates({\r\n                startDate: value,\r\n                endDate: value,\r\n            })\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"row\" >\r\n            <div className=\"col-12 col-md-8 col-lg-6\">\r\n                <div className=\"d-none d-sm-inline\">\r\n                    <label >Select {isInterval ? \"date interval\" : \"date\"}:</label>\r\n                </div>\r\n\r\n                <div className=\"d-inline\">\r\n                    {isInterval ?\r\n                        <RangePicker\r\n                            onChange={onDateRangeChange}\r\n                            defaultValue={[props.dateInterval.startDate, props.dateInterval.endDate]}\r\n                            value = {[props.dateInterval.startDate, props.dateInterval.endDate]}\r\n                            format='DD-MM-YYYY'\r\n                            style={{ marginLeft: 10 }}\r\n                        />\r\n                        :\r\n                        <DatePicker\r\n                            onChange={onDateChange}\r\n                            defaultValue={props.dateInterval.startDate}\r\n                            format='DD-MM-YYYY'\r\n                            style={{ marginLeft: 10 }}\r\n                        />\r\n                    }\r\n                </div>\r\n            </div>\r\n            <div className=\"col-12 col-md-4 col-lg-2 m-2 m-md-0\" >\r\n                <Checkbox className=\"ml-3\" onChange={onDateTypeChange}>Date interval</Checkbox>\r\n            </div>\r\n            <div className=\"col-12 col-md-12 col-lg-4\">\r\n                <Button\r\n                    type=\"primary\"\r\n                    shape=\"round\"\r\n                    icon={\r\n                        <div className=\"d-flex flex-wrap align-content-start\">\r\n                            <FileAddOutlined style={{ fontSize: '18px' }} />\r\n                            <span className=\"ml-1\" style={{ fontSize: '14px' }}>Add</span>\r\n                        </div>}\r\n                    style={{ marginLeft: 10 }}\r\n                    onClick={props.showDrawer}\r\n                />\r\n\r\n                <Button className=\"\"\r\n                    type=\"primary\"\r\n                    shape=\"round\"\r\n                    style={{ marginLeft: 10 }}\r\n                    onClick={props.showModal}\r\n                    icon={\r\n                        <div className=\"d-flex flex-wrap align-content-start\">\r\n                            <SettingOutlined style={{ fontSize: '18px' }} />\r\n                            <span className=\"ml-1\" style={{ fontSize: '14px' }}>Settings</span>\r\n                        </div>} \r\n                    />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ToDoHeader","import {connect} from 'react-redux'\r\nimport ToDoHeader, { OwnToDoHeaderPropsType } from './ToDoHeader'\r\nimport {actions} from '../../../redux/taskReducer'\r\nimport { AppStateType } from '../../../redux/store'\r\n// import { Action } from 'redux'\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    setIsInterval: (isInterval: boolean, date: {startDate: moment.Moment, endDate: moment.Moment}) => {\r\n        type: \"SN/TASK/SET_IS_INTERVAL\",\r\n        isInterval: boolean,\r\n        date: {startDate: moment.Moment, endDate: moment.Moment}\r\n    }\r\n}\r\n\r\nexport type ToDoHeaderPropsType = MapPropsType & MapDispatchPropsType & OwnToDoHeaderPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        dateInterval: state.task.dateInterval\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnToDoHeaderPropsType, AppStateType>(mapStateToProps, \r\n    {setIsInterval: actions.setIsInterval}) \r\n    (ToDoHeader)\r\n    \r\n\r\n","import React from 'react'\r\nimport { Modal } from 'antd'\r\n\r\nexport type OwmSettingsModalPropsType = {\r\n    isModalVisible: boolean,\r\n    handleOk: () => void,\r\n    handleCancel: () => void\r\n}\r\n\r\nconst SettingsModal = (props:OwmSettingsModalPropsType) => {\r\n    return (\r\n        <Modal title=\"Task display settings\" visible={props.isModalVisible} onOk={props.handleOk} onCancel={props.handleCancel}>\r\n            <p>Some contents...</p>\r\n            <p>Some contents...</p>\r\n            <p>Some contents...</p>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default SettingsModal","import React, { useState } from 'react'\r\nimport { Col, Row, Checkbox, Tooltip, Button, Spin } from 'antd'\r\nimport { CheckboxChangeEvent } from 'antd/lib/checkbox'\r\nimport { ListGroup } from 'react-bootstrap'\r\nimport { TaskType } from '../../../Types/types'\r\nimport { DeleteOutlined } from '@ant-design/icons'\r\nimport { TaskItemPropsType } from './TaskItemContainer'\r\n\r\nexport type OwnTaskItemPropsType = {\r\n    element: TaskType\r\n}\r\n\r\nconst TaskItem: React.FC<TaskItemPropsType> = (props) => {\r\n    type PropsElementType = typeof props.element.type\r\n    const [status, setStetus] = useState<PropsElementType>(props.element.type)\r\n    const [deleteingInProgess, setDeleteingInProgess] = useState(false)\r\n\r\n    const onStatusChange = (e: CheckboxChangeEvent) => {\r\n        if (e.target.checked) {\r\n            setStetus('completed')\r\n        } else {\r\n            setStetus('active')\r\n        }\r\n    }\r\n\r\n    const deleteTask: (taskid: number) => void = (taskid) => {\r\n        setDeleteingInProgess(true)\r\n        props.deleteTask(taskid, props.dateInterval.startDate.format('YYYY-MM-DD'), props.dateInterval.endDate.format('YYYY-MM-DD'))\r\n    }\r\n\r\n    return (\r\n        <ListGroup.Item action className=\"py-1\">\r\n            <Row className=\"px-0 ml-0 ml-sm-5\">\r\n                <Col className=\"mx-2\">\r\n                    <Checkbox onChange={onStatusChange} />\r\n                </Col>\r\n                <Col className=\"mx-2\">\r\n                    {props.element.time.split(':', 2).join(':')}\r\n                </Col>\r\n                <Col className=\"mx-2\">\r\n                    <Tooltip key={props.element.id} placement=\"topLeft\" title={props.element.descriptions}>\r\n                        <span\r\n                            style={{ textDecoration: status === 'completed' ? 'line-through' : '' }}\r\n                            className=\"text-break\"\r\n                        >\r\n                            {props.element.name}\r\n                        </span>\r\n                    </Tooltip>\r\n                </Col>\r\n                <Col className=\"mr-auto ml-0 mr-sm-2 ml-sm-auto\">\r\n                    {!deleteingInProgess ? \r\n                    <Button className=\"\"\r\n                        type=\"primary\"\r\n                        shape=\"circle\"\r\n                        size=\"small\"\r\n                        style={{ marginLeft: 10 }}\r\n                        onClick={() => { deleteTask(props.element.id) }}\r\n                        icon={\r\n                            <div className=\"d-flex flex-wrap align-content-start\">\r\n                                <DeleteOutlined className=\"ml-1\" style={{ fontSize: '14px' }} />\r\n                            </div>\r\n                        }\r\n                    />\r\n                    :\r\n                    <Spin key=\"spin\" size=\"small\" />\r\n                    }\r\n                </Col>\r\n            </Row>\r\n\r\n        </ListGroup.Item>\r\n    )\r\n}\r\n\r\nexport default TaskItem\r\n","import {connect} from 'react-redux'\r\nimport TaskItem, { OwnTaskItemPropsType } from './TaskItem'\r\nimport {deleteTask, getTaskList} from './../../../redux/taskReducer'\r\nimport {AppStateType} from '../../../redux/store'\r\n\r\nexport type MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype DispatchPropsType = {\r\n    deleteTask: (taskid: number, startDate: string, endDate: string) => void\r\n    getTaskList: (startDate: string, endDate: string) => void\r\n}\r\n\r\nexport type TaskItemPropsType = MapPropsType & DispatchPropsType & OwnTaskItemPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        dateInterval: state.task.dateInterval,\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, DispatchPropsType, OwnTaskItemPropsType, AppStateType>(mapStateToProps, \r\n    {deleteTask, getTaskList}) \r\n    (TaskItem)","import { TaskType } from \"../Types/types\"\r\n\r\nexport const sortTaskArrayByParams = (field: 'date' | 'time') => {\r\n    if (field === 'date') {\r\n        return (a: TaskType, b: TaskType) => a['date'] > b['date'] ? 1 : -1\r\n    } else {\r\n        return (a: TaskType, b: TaskType) => a['time'] > b['time'] ? -1 : 1\r\n    }\r\n}","import React, { useEffect, useState } from 'react'\r\nimport { TaskType } from '../../Types/types'\r\nimport moment from 'moment'\r\nimport { TimeScalePropsType } from './TimeScaleContainer'\r\nimport { Divider, Spin, Tooltip, message } from 'antd'\r\nimport TaskItem from './TaskItem/TaskItemContainer'\r\nimport { sortTaskArrayByParams } from '../../utils/array-helpers'\r\n\r\nexport type OwnTaskTimeScaleType = {}\r\nconst TimeScale: React.FC<TimeScalePropsType> = (props) => {\r\n    type SelestedDatesType = typeof props.dateInterval\r\n    const [selestedDates, setSelectedDates] = useState<SelestedDatesType>({ startDate: moment(null), endDate: moment() })\r\n    useEffect(() => {\r\n        if (\r\n            props.dateInterval.startDate.isSame(selestedDates.startDate.format('YYYY-MM-DD'), \"day\" ) &&\r\n            props.dateInterval.endDate.isSame(selestedDates.endDate.format('YYYY-MM-DD'), \"day\" )\r\n        ) { }\r\n        else {\r\n            if (props.dateInterval.startDate !== null) {\r\n                props.getTaskList(\r\n                    props.dateInterval.startDate.format('YYYY-MM-DD'),\r\n                    props.dateInterval.endDate.format('YYYY-MM-DD')\r\n                )\r\n                setSelectedDates(props.dateInterval)\r\n            }\r\n        }\r\n    }, [props.dateInterval])\r\n\r\n    useEffect(() => {\r\n        if (props.errorMessage !== null) {\r\n            message.success(props.errorMessage)\r\n        }\r\n    }, [props.errorMessage])\r\n\r\n    if (props.taskList !== null) {\r\n        return (\r\n            <>\r\n                {getTimeScaleArrey(props.taskList)}\r\n            </>\r\n        )\r\n    } else {\r\n        return (\r\n            <Spin key=\"spin\" size=\"large\" />\r\n        )\r\n    }\r\n}\r\n\r\nexport default TimeScale\r\n\r\n\r\nconst getTimeScaleArrey = (taskList: Array<TaskType>): Array<React.ReactElement<string>> => {\r\n    let timeScaleArrey: Array<React.ReactElement<string>> = []\r\n    let tomorowTasks: Array<TaskType> = []\r\n\r\n    taskList.sort(sortTaskArrayByParams('time')).sort(sortTaskArrayByParams('date'))\r\n\r\n    const getHeadlineLabel = (task: TaskType) => {\r\n        return moment(task.date).format('DD MMMM')\r\n    }\r\n\r\n    let headlineDate: string | null = null\r\n\r\n    if (taskList !== null && taskList.length > 0) {\r\n        headlineDate = getHeadlineLabel(taskList[0])\r\n        timeScaleArrey.push(\r\n            <h3 key={headlineDate + 'title'}>{headlineDate}:</h3>\r\n        )\r\n    }\r\n\r\n    for (let index: number = 0; index < 24; index++) {\r\n        if (taskList.length > 0) {\r\n            timeScaleArrey.push(\r\n                <Divider key={index + 'to' + headlineDate} orientation=\"left\">\r\n                    {index <= 9 ? '0' : null}{index}:00\r\n                </Divider>\r\n            )\r\n        } else {\r\n            timeScaleArrey.push(<h3>no tasks</h3>)\r\n            break\r\n        }\r\n\r\n        if (taskList !== null) {\r\n            for (let i = 0; i < taskList.length; i++) {\r\n                const element: TaskType = taskList[i]\r\n                const timeVal = Number(element.time.split(':', 1))\r\n                const nextHour = index + 1\r\n                if (timeVal >= index && timeVal < nextHour) {\r\n                    if (getHeadlineLabel(element) === headlineDate) {\r\n                        timeScaleArrey.push(\r\n                            <Tooltip key={index + '-' + element.id} placement=\"topLeft\" title={element.descriptions}>\r\n                                <TaskItem element={element} />\r\n                            </Tooltip>\r\n                        )\r\n                    }\r\n                    else {\r\n                        tomorowTasks.push(element)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (tomorowTasks.length > 0) {\r\n        timeScaleArrey = timeScaleArrey.concat(getTimeScaleArrey(tomorowTasks))\r\n    }\r\n\r\n    return timeScaleArrey\r\n}","import {connect} from 'react-redux'\r\nimport TimeScale from './TimeScale'\r\nimport {getTaskList} from './../../redux/taskReducer'\r\nimport { AppStateType } from '../../redux/store'\r\nimport { OwnTaskTimeScaleType } from './TimeScale'\r\n\r\nexport type MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype DispatchPropsType = {\r\n    getTaskList: (startDate: string, endDate: string) => void\r\n}\r\n\r\nexport type TimeScalePropsType = MapPropsType & DispatchPropsType & OwnTaskTimeScaleType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        taskList: state.task.taskList,\r\n        taskSaveStatus: state.task.taskSaveStatus,\r\n        taskListIsFetching: state.task.taskListIsFetching,\r\n        dateInterval: state.task.dateInterval,\r\n        errorMessage: state.task.errorMessage\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, DispatchPropsType, OwnTaskTimeScaleType, AppStateType>(mapStateToProps, \r\n    {getTaskList}) \r\n    (TimeScale)\r\n\r\n\r\n","import React, { useState } from 'react'\r\nimport { Card } from 'antd'\r\nimport NewTaskForm from './NewTaskForm/NewTaskFormContainer'\r\nimport ToDoHeader from './ToDoHeader/ToDoHeaderContainer'\r\nimport SettingsModal from './Settings/SettingsModal'\r\nimport { ToDoListPropsType } from './ToDoListContainer'\r\nimport TimeScale from '../TimeScale/TimeScaleContainer'\r\n\r\nexport type OwnToDoListPropsType = {}\r\n\r\nconst ToDoList: React.FC<ToDoListPropsType> = (props) => {\r\n    const [visible, setVisible] = useState(false)\r\n    const [isModalVisible, setIsModalVisible] = useState(false)\r\n\r\n    const showDrawer = (): void => {\r\n        setVisible(true)\r\n    }\r\n\r\n    const onClose = (): void => {\r\n        setVisible(false)\r\n    }\r\n\r\n    const showModal = () => {\r\n        setIsModalVisible(true)\r\n    }\r\n\r\n    const handleOk = () => {\r\n        setIsModalVisible(false)\r\n    }\r\n\r\n    const handleCancel = () => {\r\n        setIsModalVisible(false)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"site-card-border-less-wrapper\">\r\n                <Card\r\n                    title={<ToDoHeader\r\n                        showDrawer={showDrawer}\r\n                        showModal={showModal}\r\n                    />}\r\n                    bordered={false}\r\n                >\r\n\r\n                    <SettingsModal \r\n                        isModalVisible={isModalVisible} \r\n                        handleOk={handleOk} \r\n                        handleCancel={handleCancel}\r\n                    />\r\n\r\n                    <TimeScale />\r\n\r\n                </Card>\r\n\r\n                <NewTaskForm\r\n                    onClose={onClose}\r\n                    visible={visible}\r\n                    setVisible={setVisible}\r\n                />\r\n\r\n            </div>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ToDoList","import {connect} from 'react-redux'\r\nimport ToDoList, { OwnToDoListPropsType } from './ToDoList'\r\nimport {getTaskList} from '../../redux/taskReducer'\r\nimport { AppStateType } from '../../redux/store'\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    getTaskList: (start_date: string, end_date:string)=>void\r\n}\r\n\r\nexport type ToDoListPropsType = MapPropsType & MapDispatchPropsType & OwnToDoListPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        taskList: state.task.taskList,\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnToDoListPropsType, AppStateType>(mapStateToProps, \r\n    {getTaskList}) \r\n    (ToDoList)\r\n    \r\n\r\n","import {instance, APIResponseType} from \"./api\";\r\n\r\ntype MeResponseDataType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n    // remember_token?: string,\r\n    // user?: any\r\n    // error?: boolean,\r\n    // message?: string\r\n}\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        // return instance.post<any>(`tasks`, values)\r\n        // .then(response => {\r\n        //     return response.status === 200 ? response : null\r\n        // })\r\n        // .catch(err => {\r\n        //     if (err.response) {\r\n        //         return err.response\r\n        //     } else if (err.request) {\r\n        //         console.log('request', err.request)\r\n        //     } else {\r\n        //         console.log('anything else: ', err)\r\n        //     }\r\n        //     return null\r\n        // })\r\n        return instance.get<APIResponseType<MeResponseDataType>>(`authMe/me`).then( (response) => {\r\n            console.log(response)\r\n            return response\r\n        });\r\n    },\r\n}","import { authAPI } from \"../api/authAPI\";\r\nimport { BaseThunkType, InferActionsTypes } from \"./store\"\r\n// import {FormAction} from 'redux-form/lib/actions';\r\n\r\n\r\nlet initialState = {\r\n    userId: null as (number | null),\r\n    email: null as string | null,\r\n    login: null as string | null,\r\n    isAuth: false,\r\n    captchaUrl: null as string | null// if null, then captcha is not required\r\n}\r\n\r\nconst authReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/auth/SET_USER_DATA':\r\n        // case 'SN/auth/GET_CAPTCHA_URL_SUCCESS':\r\n        //     return {\r\n        //         ...state,\r\n        //         ...action.payload\r\n        //     }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    setAuthUserData: (userId: number | null, email: string | null, login: string | null, isAuth: boolean) => ({\r\n        type: 'SN/auth/SET_USER_DATA', payload: {userId, email, login, isAuth}\r\n    } as const),\r\n    // getCaptchaUrlSuccess: (captchaUrl: string) => ({\r\n    //     type: 'SN/auth/GET_CAPTCHA_URL_SUCCESS', payload: {captchaUrl}\r\n    // } as const)\r\n}\r\n\r\n// export const getAuthUserData = (): ThunkType => async (dispatch) => {\r\n//     let response = await authAPI.me()\r\n//     console.log('getAuthUserData', response)\r\n// }\r\n\r\nexport const getAuthUserData = (): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        let response = await authAPI.me()\r\n\r\n        if (response !== null) {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(actions.setAuthUserData(null, null, null, false))\r\n            } else {\r\n                console.log(response.data.messages[0])\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport default authReducer;\r\n\r\nexport type InitialStateType = typeof initialState;\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType< ActionsTypes>\r\n\r\n","import {getAuthUserData} from \"./authReducer\"\r\nimport {InferActionsTypes} from './store'\r\n\r\nlet initialState = {\r\n    initialized: false,\r\n    location: '/'\r\n}\r\n\r\n// export type InitialStateType = typeof initialState\r\nexport type InitialStateType ={\r\n    initialized: boolean,\r\n    location: string\r\n}\r\n\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\n\r\nconst appReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/APP/INITIALIZED_SUCCESS':\r\n            console.log('INITIALIZED_SUCCESS: true')\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            }\r\n\r\n        case 'SN/APP/SET_LOCATION':\r\n            console.log('location in appReducer:', action.location)\r\n            return  {\r\n                ...state,\r\n                location: action.location\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    initializedSuccess: () => ({type: 'SN/APP/INITIALIZED_SUCCESS'} as const),\r\n    setLocation: (location: string) => ({type: 'SN/APP/SET_LOCATION', location} as const),\r\n}\r\n\r\nexport const initializeApp = () => (dispatch: any) => {\r\n    let promise = dispatch(getAuthUserData());\r\n    Promise.all([promise])\r\n        .then(() => {\r\n            console.log('dispatch(actions.initializedSuccess());')\r\n            dispatch(actions.initializedSuccess());\r\n        });\r\n}\r\n\r\nexport const addLocation = (location: string) => (dispatch: any) => {\r\n    dispatch(actions.setLocation(location));\r\n}\r\n\r\n\r\nexport default appReducer;","import { NewTaskDataType, TaskType } from '../Types/types'\r\nimport {instance} from './api'\r\n\r\nexport const taskListAPI = {\r\n    getTaskList() {\r\n        return instance.get<any>(`taskList`)\r\n        .then(response => {\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                return err.response\r\n            } else if (err.request) {\r\n                console.log('request', err.request)\r\n            } else {\r\n                console.log('anything else: ', err)\r\n            }\r\n            return null\r\n        })\r\n    },\r\n    createNewTask() {\r\n\r\n    },\r\n    deleteTask() {\r\n\r\n    },\r\n    updateTask() {\r\n        \r\n    }\r\n}","import { Dispatch } from \"react\";\r\nimport { TaskListType } from \"../Types/types\";\r\nimport { BaseThunkType, InferActionsTypes } from \"./store\";\r\nimport { taskListAPI } from './../api/taskListAPI'\r\n\r\n\r\nexport type InitialStateType = {\r\n    taskList: Array<any>,\r\n    // taskListIsFetching: boolean,\r\n    // taskSaveStatus: 'no' | 'inProgress' | 'success' | 'error'\r\n    // errorMessage: null | string,\r\n    // isInterval: boolean,\r\n    // dateInterval: {\r\n    //     startDate: moment.Moment,\r\n    //     endDate: moment.Moment\r\n    // }\r\n}\r\n\r\nlet initialState:InitialStateType = {\r\n    taskList: [],\r\n    // taskListIsFetching: false,\r\n    // taskSaveStatus: 'no',\r\n    // errorMessage: null,\r\n    // isInterval: false,\r\n    // dateInterval: {\r\n    //     startDate: moment(),\r\n    //     endDate: moment()\r\n    // }\r\n}\r\n\r\nconst taskListReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/TASK_LIST/SET_TASK_LIST':\r\n            return {...state, taskList: action.taskList}\r\n            return {...state}\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    setTaskList: (taskList: Array<any>) => ({ type: 'SN/TASK_LIST/SET_TASK_LIST', taskList } as const),\r\n    // setTaskSaveStatus: (taskSaveStatus: 'no' | 'inProgress' | 'success' | 'error') => ({ type: 'SN/TASK/SET_TASK_SAVE_STATUS', taskSaveStatus } as const),\r\n    // setErrorMessage: (message: string | null) => ({type: 'SN/TASK/SET_ERROR_MESSAGE', message} as const),\r\n    // setTaskListIsFetching: (isFetchingValue: boolean) => ({type: 'SN/TASK/SET_TASK_LIST_IS_FETCHING', isFetchingValue} as const),\r\n    // setIsInterval: (isInterval: boolean, date: {startDate: moment.Moment, endDate: moment.Moment}) => ({type: 'SN/TASK/SET_IS_INTERVAL', isInterval, date} as const)\r\n}\r\n\r\nexport const getTaskList = (): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        // dispatch(actions.setTaskListIsFetching(true))\r\n\r\n        let response = await taskListAPI.getTaskList()\r\n        console.log(response)\r\n\r\n        if (response !== undefined && response !== null) {\r\n            dispatch(actions.setTaskList(response.data.Tasks))\r\n        } else {\r\n            // add error message\r\n        }\r\n        // dispatch(actions.setTaskListIsFetching(false))\r\n    }\r\n}\r\n\r\nexport default taskListReducer\r\n\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsTypes>\r\nexport type DispatchType = Dispatch<ActionsTypes>","import {Action, applyMiddleware, combineReducers, createStore} from \"redux\"\r\nimport thunkMiddleware, {ThunkAction} from \"redux-thunk\"\r\nimport appReducer from \"./appReducer\"\r\nimport authReducer from \"./authReducer\"\r\nimport taskListReducer from \"./TaskListReducer\"\r\nimport taskReducer from './taskReducer'\r\n\r\n\r\nlet rootReducer = combineReducers({\r\n    task: taskReducer,\r\n    app: appReducer,\r\n    auth: authReducer,\r\n    taskList: taskListReducer,\r\n})\r\n\r\ntype rootReducerType = typeof rootReducer\r\nexport type AppStateType = ReturnType<rootReducerType>\r\n\r\nexport type InferActionsTypes<T> = T extends { [keys: string]: (...args: any[]) => infer U } ? U : never\r\nexport type BaseThunkType<A extends Action = Action, R = Promise<void>> = ThunkAction<R, AppStateType, unknown, A>\r\n\r\nlet store = createStore(rootReducer, applyMiddleware(thunkMiddleware))\r\n\r\nexport default store","import React, {useState} from 'react'\r\nimport { Menu } from 'antd';\r\nimport {Link} from 'react-router-dom'\r\nimport { MailOutlined, AppstoreOutlined, SettingOutlined } from '@ant-design/icons';\r\n\r\nconst { SubMenu } = Menu;\r\n\r\nconst MenuBrowser = (props: any) => {\r\n    const [state, setState] = useState<Array<string>>([])\r\n    const handleClick = (e: any | undefined) => {\r\n        // console.log('click ', e);\r\n        // setState({ current: e.key });\r\n    }\r\n\r\n    const getMenuItem = (childs: any):any => {\r\n        // return <Menu.Item key=\"setting:1\">Option 1</Menu.Item>\r\n        const menuItems = childs.map( (item: any) => {\r\n            return (\r\n                <Menu.Item key={item.value}>\r\n                    <Link to={item.value}>{item.label}</Link>\r\n                </Menu.Item>\r\n            )\r\n        })\r\n        return menuItems\r\n    }\r\n\r\n    const getSubMenu = () => {\r\n        // console.log(props.menuData)\r\n        const subMenu = props.menuData.map( (item: any) => {\r\n            // console.log(item)\r\n            return (\r\n                <SubMenu \r\n                    key={item.value} \r\n                    // icon={<MailOutlined />}\r\n                    title={item.label}\r\n                >\r\n                    {getMenuItem(item.children)}\r\n                </SubMenu >\r\n            )\r\n        })\r\n        return subMenu\r\n    }\r\n\r\n    return (\r\n        <Menu \r\n            onClick={handleClick} \r\n            // selectedKeys={[current]} \r\n            mode=\"horizontal\"\r\n            theme=\"dark\"\r\n        >\r\n            {getSubMenu()}\r\n        </Menu>\r\n    )\r\n}\r\n\r\nexport default MenuBrowser","import React, { useState } from 'react'\r\nimport { Menu, ActivityIndicator, NavBar, Button } from 'antd-mobile'\r\nimport { ValueType } from 'antd-mobile/lib/menu/PropsType'\r\nimport './MenuMobile.css'\r\nimport {useHistory, useLocation} from 'react-router-dom'\r\nimport {MenuDataType} from './Header'\r\nimport { MenuMobilePropsType } from './MenuMobileContainer'\r\nimport { Link } from 'react-router-dom'\r\n\r\nexport type OwnMenuMobilePropsType = {\r\n    menuData: MenuDataType\r\n}\r\n\r\nconst MenuMobile: React.FC<MenuMobilePropsType> = (props) => {\r\n    let history = useHistory();\r\n    const location = useLocation();\r\n    const [show, setShow] = useState(false)\r\n    type DataType = typeof props.menuData\r\n    const data = [...props.menuData] \r\n    const [initData, setInitData] = useState<DataType>(data)\r\n\r\n    const getSelectedMenuItem = ():ValueType => {\r\n        let response: ValueType = [data[0].value, '']\r\n        data.forEach( (dataItem: any) => {\r\n            if (dataItem.children) {\r\n                dataItem.children.forEach( (item: any) => {\r\n                    console.log('/',item.value,'===',location.pathname)\r\n                    if (item.value === location.pathname) {\r\n                        response = [dataItem.value, item.value]\r\n                    }\r\n                })\r\n            }\r\n        })\r\n        console.log('getSelectedMenuItem response: ', response)\r\n        return response\r\n    }\r\n\r\n    const [selectedMenuItem, setSelectedMenuItem] = useState<ValueType>( getSelectedMenuItem() )\r\n\r\n    const handleClick = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\r\n        e.preventDefault(); // Fix event propagation on Android\r\n        setShow(!show)\r\n        // if (!initData) {\r\n        //     setInitData(data)\r\n        // }\r\n    }\r\n\r\n    const onChange = (value?: ValueType | undefined) => {\r\n        console.log(value)\r\n        let label = '';\r\n        data.forEach((dataItem) => {\r\n            if (value) {\r\n                if (dataItem.value === value[0]) {\r\n                    // label = dataItem.label;\r\n                    if (dataItem.children && value[1]) {\r\n                        dataItem.children.forEach((cItem: { value: string | string[]; label: any }) => {\r\n                            if (cItem.value === value[1]) {\r\n                                label = `/${cItem.value}`;\r\n                                console.log('history.push:',`${cItem.value}`)\r\n                                // history.push(`/${cItem.value}`)\r\n                                // history.push(props.appLocation + cItem.value)\r\n                                history.replace(`${cItem.value}`)\r\n                                setSelectedMenuItem(value)\r\n                            }\r\n                        })\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    const onMaskClick = () => {\r\n        setShow(false)\r\n    }\r\n\r\n    const menuEl = (\r\n        <Menu\r\n            className=\"foo-menu\"\r\n            data={initData}\r\n            value={selectedMenuItem}\r\n            onChange={onChange}\r\n            height={document.documentElement.clientHeight * 0.6}\r\n        />\r\n    );\r\n\r\n    const loadingEl = (\r\n        <div style={{ width: '100%', height: document.documentElement.clientHeight * 0.6, display: 'flex', justifyContent: 'center' }}>\r\n            <ActivityIndicator size=\"large\" />\r\n        </div>\r\n    );\r\n\r\n    console.log(props)\r\n\r\n    return (\r\n        <div className={show ? 'menu-active' : ''}>\r\n            <div>\r\n                <NavBar\r\n                    leftContent=\"\"\r\n                    mode=\"light\"\r\n                    icon={<img src=\"https://gw.alipayobjects.com/zos/rmsportal/iXVHARNNlmdCGnwWxQPH.svg\" className=\"am-icon am-icon-md\" alt=\"\" />}\r\n                    onLeftClick={handleClick}\r\n                    className=\"top-nav-bar\"\r\n                >\r\n                    <Link \r\n                        to=\"/login\" \r\n                        onClick={ ()=>{onChange(['', ''])} }\r\n                    >\r\n                        {/* <Button className=\"am-button-borderfix\" type=\"primary\" size=\"small\"> */}\r\n                        <span className=\"text-white\">Login</span>\r\n                            \r\n                        {/* </Button> */}\r\n                    </Link>\r\n                </NavBar>\r\n            </div>\r\n            {show ? initData ? menuEl : loadingEl : null}\r\n            {show ? <div className=\"menu-mask\" onClick={onMaskClick} /> : null}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default (MenuMobile)\r\n\r\n\r\n","import {connect} from 'react-redux'\r\nimport MenuMobile, { OwnMenuMobilePropsType } from './MenuMobile'\r\n// import {getTaskList} from '../../redux/taskReducer'\r\nimport { AppStateType } from '../../redux/store'\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    // getTaskList: (start_date: string, end_date:string)=>void\r\n}\r\n\r\nexport type MenuMobilePropsType = MapPropsType & MapDispatchPropsType & OwnMenuMobilePropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        appLocation: state.app.location\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnMenuMobilePropsType, AppStateType>(mapStateToProps, \r\n    {}) \r\n    (MenuMobile)\r\n    \r\n\r\n","import React from 'react'\r\nimport {\r\n    BrowserView,\r\n    MobileView,\r\n    isBrowser,\r\n    isMobile\r\n} from \"react-device-detect\"\r\nimport { Link } from 'react-router-dom'\r\nimport { HeaderPropsType } from './HeaderContainer'\r\nimport MenuBrowser from './MenuBrowser'\r\nimport MenuMobile from './MenuMobileContainer'\r\n\r\n// type MenuDataType = Array<any>\r\n\r\nexport type OwnHeaderPropsType = {}\r\n\r\nconst Header: React.FC<HeaderPropsType> = (props) => {\r\n\r\n\r\n    if (isMobile) {\r\n        return <MenuMobile menuData={menuData(props.appLocation)} />\r\n    } else {\r\n        return <MenuBrowser menuData={menuData(props.appLocation)} />\r\n    }\r\n}\r\n\r\nexport default Header\r\n\r\n\r\nexport type MenuDataType = ReturnType<typeof menuData>\r\n\r\nconst menuData = (appLocation: string) => {\r\n    const data = [\r\n    {\r\n        value: 'planning',\r\n        label: 'Planning',\r\n        children: [\r\n            {\r\n                label: 'ToDo list',\r\n                // label: <Link to='/toDoList'>ToDo list</Link>,\r\n                value: appLocation + 'toDoList',\r\n                disabled: false,\r\n            },\r\n            {\r\n                label: 'Tasks tree',\r\n                value: appLocation + 'tasksTree',\r\n            },\r\n            {\r\n                label: 'Analysis',\r\n                value: appLocation + 'analysis',\r\n                disabled: true,\r\n            }\r\n        ],\r\n    }, {\r\n        value: 'catalog',\r\n        label: 'Catalog',\r\n        children: [\r\n            {\r\n                label: 'Products',\r\n                value: appLocation + 'products',\r\n            }\r\n            , {\r\n                label: 'Providers',\r\n                value: appLocation + 'providers',\r\n            }\r\n        ],\r\n    },\r\n    {\r\n        value: '3',\r\n        label: 'Orders',\r\n        // isLeaf: true,\r\n        children: [\r\n            {\r\n                label: 'Orders',\r\n                value: appLocation + 'orders',\r\n            },\r\n            {\r\n                label: 'Leads',\r\n                value: appLocation + 'leads',\r\n            },\r\n        ],\r\n    },\r\n    ]\r\n    return data\r\n}","import {connect} from 'react-redux'\r\nimport Header, { OwnHeaderPropsType } from './Header'\r\n// import {getTaskList} from '../../redux/taskReducer'\r\nimport { AppStateType } from '../../redux/store'\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    // getTaskList: (start_date: string, end_date:string)=>void\r\n}\r\n\r\nexport type HeaderPropsType = MapPropsType & MapDispatchPropsType & OwnHeaderPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        appLocation: state.app.location\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnHeaderPropsType, AppStateType>(mapStateToProps, \r\n    {}) \r\n    (Header)\r\n    \r\n\r\n","import React from 'react'\r\nimport { isMobile } from \"react-device-detect\"\r\nimport { DatePicker, Form, Input, TimePicker, Select, Checkbox } from \"antd\"\r\nimport { List, InputItem, Checkbox as CheckboxMobile } from 'antd-mobile'\r\n\r\nconst FormItem = Form.Item\r\nconst Option: React.FC<any> = Select.Option\r\nconst CheckboxItem = CheckboxMobile.CheckboxItem\r\n\r\n// const layout = {\r\n//     labelCol: { span: 8 },\r\n//     wrapperCol: { span: 16 },\r\n//   };\r\n\r\n\r\nconst CreateAntField = (AntComponent: any) => (\r\n    {\r\n        field,\r\n        form,\r\n        hasFeedback,\r\n        label,\r\n        selectOptions,\r\n        submitCount,\r\n        type,\r\n        ...props\r\n    }: any\r\n) => {\r\n    // console.log('field: ', field)\r\n    // console.log('form: ', form)\r\n\r\n    const touched = form.touched[field.name];\r\n    const submitted = submitCount > 0;\r\n    const hasError = form.errors[field.name];\r\n    const submittedError = hasError && submitted;\r\n    const touchedError = hasError && touched;\r\n\r\n    // const onInputChange = ({ target: { value } }: any) => {\r\n    const onInputChange = (value: any) => {\r\n        // console.log(value.target.value)\r\n        // console.log(field.name)\r\n        if (value.target) {\r\n            form.setFieldValue(field.name, value.target.value)\r\n        } else {\r\n            form.setFieldValue(field.name, value)\r\n        }\r\n        \r\n    }\r\n    const onChange = (value: any) => {\r\n        console.log(value)\r\n        console.log(field.name,'=',value)\r\n        if (value.target.type === 'checkbox') {\r\n            form.setFieldValue(field.name, value.target.checked)\r\n        } else {\r\n            form.setFieldValue(field.name, value)\r\n        }\r\n    }\r\n    const onBlur = () => form.setFieldTouched(field.name, true);\r\n    return (\r\n        <div >\r\n            <FormItem\r\n                label={!isMobile ? label : null}\r\n                hasFeedback={\r\n                    (hasFeedback && submitted) || (hasFeedback && touched) ? true : false\r\n                }\r\n                help={submittedError || touchedError ? hasError : false}\r\n                validateStatus={submittedError || touchedError ? \"error\" : \"success\"}\r\n            >\r\n                {isMobile ? \r\n                <List>\r\n                    <AntComponent\r\n                        onBlur={onBlur}\r\n                        onChange={type ? onInputChange : onChange}\r\n                    >\r\n                        {label}\r\n                    </AntComponent>\r\n                </List>\r\n                : \r\n                <AntComponent\r\n                    {...field}\r\n                    {...props}\r\n                    onBlur={onBlur}\r\n                    onChange={type ? onInputChange : onChange}\r\n                >\r\n                    {selectOptions &&\r\n                        selectOptions.map((name: any) => <Option key={name}>{name}</Option>)}\r\n                    \r\n                    \r\n                </AntComponent>\r\n                }\r\n                \r\n            </FormItem>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const AntSelect = !isMobile ? CreateAntField(Select) : CreateAntField(Select)\r\nexport const AntDatePicker = CreateAntField(DatePicker)\r\n\r\n// export const AntInput = !isMobile ? CreateAntField(Input) : <List>CreateAntField(InputItem)</List>\r\nexport const AntInput = !isMobile ? CreateAntField(Input) : CreateAntField(InputItem)\r\n\r\nexport const AntInputPassword = !isMobile ? CreateAntField(Input.Password) : CreateAntField(InputItem)\r\n\r\nexport const AntTimePicker = CreateAntField(TimePicker)\r\nexport const AntCheckbox = !isMobile ? CreateAntField(Checkbox) : CreateAntField(CheckboxItem)","import moment from \"moment\";\r\nimport { userAPI } from \"../../api/userAPI\";\r\n\r\nexport const validateRequired = (value: string) => {\r\n    let errors;\r\n    if (!value) {\r\n        errors = \"Required!\";\r\n    }\r\n    return errors;\r\n}\r\n\r\nexport const validateEmail = (value: string) => {\r\n    let errors;\r\n\r\n    if (!value) {\r\n        errors = \"Required!\";\r\n    } else if (!/^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/.test(value)) {\r\n        errors = \"Invalid email address!\";\r\n    }\r\n\r\n    return errors;\r\n};\r\n\r\nexport const validateAsync = (value: string) => {\r\n    const sleep = () => new Promise(resolve => setTimeout(resolve, 2000));\r\n    return sleep().then(() => {\r\n        if (['admin', 'null', 'god'].includes(value)) {\r\n            return 'Nice try'\r\n        }\r\n    })\r\n}\r\n\r\nexport const validateUserExistense = (value: string) => {\r\n    console.log(value)\r\n    return userAPI.checkUserForExistence(value).then( (result) => {\r\n        console.log(result.status)\r\n        if (result.status !== 404) {\r\n            return 'Name is bisy'\r\n        } \r\n    })\r\n    console.log(test)\r\n\r\n}","import React from 'react'\r\nimport { Form, Field } from \"formik\"\r\nimport { AntInput, AntCheckbox, AntInputPassword } from '../../utils/Formik/CreateAntField'\r\nimport { List, Checkbox } from 'antd-mobile'\r\nimport { validateAsync, validateEmail, validateRequired, validateUserExistense } from '../../utils/Formik/ValidateFields'\r\n\r\nconst CheckboxItem = Checkbox.CheckboxItem\r\n\r\nconst layout = {\r\n    labelCol: { span: 8 },\r\n    wrapperCol: { span: 16 },\r\n}\r\n\r\ntype OwnLoginFormPropsType = {\r\n    handleSubmit: () => void,\r\n    values: any,\r\n    submitCount: any\r\n}\r\n\r\nconst LoginForm: React.FC<OwnLoginFormPropsType> = (props) => {\r\n    return (\r\n        <Form \r\n            // {...layout} \r\n            className=\"form-container\" \r\n            onSubmit={props.handleSubmit}\r\n        >\r\n            <Field\r\n                component={AntInput}\r\n                name=\"name\"\r\n                type=\"text\"\r\n                label=\"Name\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n            <Field\r\n                component={AntInput}\r\n                name=\"email\"\r\n                type=\"email\"\r\n                label=\"Email\"\r\n                validate={validateEmail}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n            <Field\r\n                component={AntInputPassword}\r\n                name=\"password\"\r\n                type=\"password\"\r\n                label=\"Password\"\r\n                // label={<label className=\"ant-form-item-required\">Password</label>}\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n            <Field\r\n                component={AntCheckbox}\r\n                name=\"rememberMe\"\r\n                // type=\"checkbox\"\r\n                label=\"Remember Me\"\r\n                // validate={validateEmail}\r\n                submitCount={props.submitCount}\r\n            // hasFeedback\r\n            />\r\n            <div className=\"submit-container\">\r\n                <button className=\"ant-btn ant-btn-primary\" type=\"submit\">\r\n                    Submit\r\n                </button>\r\n            </div>\r\n\r\n            {/* <List >\r\n                <CheckboxItem key={\"0\"}>\r\n                    test\r\n                </CheckboxItem>\r\n            </List> */}\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default LoginForm","import React from 'react'\r\nimport { isMobile } from \"react-device-detect\"\r\nimport { List, InputItem, Checkbox } from 'antd-mobile'\r\nimport { Formik } from \"formik\"\r\nimport moment from \"moment\"\r\nimport LoginForm from './LoginForm'\r\n\r\nconst CheckboxItem = Checkbox.CheckboxItem;\r\n\r\nconst initialValues = {\r\n    // bookingClient: \"\",\r\n    // bookingDate: moment(Date.now()),\r\n    // bookingTime: moment(Date.now()),\r\n    // selectOptions: [\"Mark\", \"Bob\", \"Anthony\"]\r\n}\r\n\r\n// export const dateFormat = \"YYYY--MM-DD\";\r\n// export const timeFormat = \"h:mm A\";\r\n\r\nconst Login = () => {\r\n\r\n    const handleSubmit = (formProps:any) => {\r\n        console.log('formProps: ', formProps)\r\n        alert(\r\n            ` Email: ${formProps.email} \\n Name: ${formProps.name} \\n Remember Me: ${formProps.rememberMe}`\r\n          )\r\n      }\r\n\r\n    return (\r\n        <>\r\n            <h1>Login Form</h1>\r\n            <Formik\r\n                initialValues={initialValues}\r\n                onSubmit={handleSubmit}\r\n                render={LoginForm}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Login","import { formatCountdown } from 'antd/lib/statistic/utils'\r\nimport React from 'react'\r\nimport { OrdersPropsType } from './OrdersContainer'\r\n\r\nexport type OwnOrdersPropsType = {}\r\nconst Orders: React.FC<OrdersPropsType> = (props) => {\r\n    return(\r\n        <div>Orders</div>\r\n    )\r\n}\r\n\r\nexport default Orders","import {connect} from 'react-redux'\r\nimport Orders, { OwnOrdersPropsType } from './Orders'\r\n// import {getTaskList} from '../../redux/taskReducer'\r\nimport { AppStateType } from '../../redux/store'\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    // getTaskList: (start_date: string, end_date:string)=>void\r\n}\r\n\r\nexport type OrdersPropsType = MapPropsType & MapDispatchPropsType & OwnOrdersPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        appLocation: state.app.location\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnOrdersPropsType, AppStateType>(mapStateToProps, \r\n    {}) \r\n    (Orders)\r\n    \r\n\r\n","import React from 'react'\r\n\r\nconst TasksTreeMobile: React.FC<any> = (props) => {\r\n    return (\r\n        <>\r\n            TasksTreeMobile\r\n        </>\r\n    )\r\n}\r\n\r\nexport default TasksTreeMobile","import React, { useEffect, useState } from 'react'\r\nimport { TasksTreePropsType } from './TasksTreeContainer'\r\nimport { isMobile } from 'react-device-detect'\r\nimport { DatePicker, Checkbox, Button } from 'antd'\r\nimport { FileAddOutlined, SettingOutlined } from '@ant-design/icons'\r\nimport TasksTreeMobile from './TasksTreeMobile'\r\n\r\nexport type OwnTasksTreePropsType = {}\r\n\r\nconst TasksTree: React.FC<TasksTreePropsType> = (props) => {\r\n    useEffect(() => {\r\n        if (props.taskList.length === 0) {\r\n            props.getTaskList()\r\n        }\r\n    }, [props.taskList])\r\n\r\n    const showTaskList = () => {\r\n        return props.taskList.map((item) => {\r\n            return (\r\n                <div>{item.name}</div>\r\n            )\r\n        })\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {/* <div className=\"col-12 col-md-12 col-lg-4\">\r\n                <Button className=\"\"\r\n                    type=\"primary\"\r\n                    shape=\"round\"\r\n                    style={{ marginLeft: 10 }}\r\n                    // onClick={props.showDrawer}\r\n                    icon={\r\n                        <div className=\"d-flex flex-wrap align-content-start\">\r\n                            <SettingOutlined style={{ fontSize: '18px' }} />\r\n                            <span className=\"ml-1\" style={{ fontSize: '14px' }}>Add</span>\r\n                        </div>} \r\n                />\r\n            </div> */}\r\n\r\n            {isMobile ? <TasksTreeMobile /> : showTaskList()}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default TasksTree","import {connect} from 'react-redux'\r\nimport TasksTree, { OwnTasksTreePropsType } from './TasksTree'\r\nimport { AppStateType } from '../../redux/store'\r\nimport {getTaskList} from './../../redux/TaskListReducer'\r\n\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    getTaskList: ()=>void\r\n}\r\n\r\nexport type TasksTreePropsType = MapPropsType & MapDispatchPropsType & OwnTasksTreePropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        taskList: state.taskList.taskList,\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnTasksTreePropsType, AppStateType>(mapStateToProps, \r\n    {getTaskList}) \r\n    (TasksTree)\r\n    \r\n\r\n","import React, { useEffect, useState } from 'react'\r\nimport './App.css'\r\nimport ToDoList from './Components/ToDo/ToDoListContainer'\r\nimport { BrowserRouter, Link, Redirect, Route, Switch, withRouter, useLocation } from 'react-router-dom'\r\nimport { connect, Provider } from 'react-redux'\r\nimport 'antd/dist/antd.css'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport 'antd-mobile/dist/antd-mobile.css'\r\nimport store, { AppStateType } from './redux/store'\r\nimport { Breadcrumb, Layout, Menu, Spin } from 'antd'\r\nimport { compose } from 'redux'\r\nimport { initializeApp, addLocation } from './redux/appReducer'\r\nimport Header from './Components/Header/HeaderContainer'\r\nimport { isMobile } from \"react-device-detect\"\r\nimport Login from './Components/Login/Login'\r\nimport Orders from './Components/Orders/OrdersContainer'\r\nimport TasksTree from './Components/TasksTree/TasksTreeContainer'\r\n\r\nconst { SubMenu } = Menu\r\nconst { Content, Footer, Sider } = Layout\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\ntype DispatchPropsType = {\r\n  initializeApp: () => void,\r\n  addLocation: (location: string) => void\r\n}\r\n\r\nconst App = (props: MapPropsType & DispatchPropsType) => {\r\n  const [location, setLocation] = useState(useLocation().pathname)\r\n  useEffect(() => {\r\n    if (!props.initialized) {\r\n      console.log('location', location)\r\n      if (location === '/front1/') {\r\n        props.addLocation(location)\r\n      }\r\n      console.log('initialized FALSE', props)\r\n      props.initializeApp()\r\n    } else {\r\n      console.log('initialized TRUE', props)\r\n    }\r\n  }, [props.initialized])\r\n\r\n\r\n  if (!props.initialized) {\r\n    return <Spin key=\"spin\" size=\"large\" />\r\n  }\r\n\r\n  return (\r\n    <Layout>\r\n      {/* <li>авторизироваться</li> */}\r\n      <Header />\r\n      <Switch>\r\n        <Route exact path={props.appLocation}\r\n          render={() => <Redirect to={props.appLocation+'login'} />} />\r\n\r\n        <Route path={props.appLocation+'login'}\r\n          render={() => <Login />} />\r\n\r\n        {/* {isAuth ? \r\n          <Route path={props.appLocation+'toDoList'} \r\n            render={() => <ToDoList />} />\r\n\r\n          <Route path={props.appLocation+'orders'} \r\n            render={() => <Orders />} />\r\n        :\r\n          null\r\n        } */}\r\n        \r\n         <Route path={props.appLocation+'toDoList'}\r\n            render={() => <ToDoList />} />\r\n\r\n          <Route path={props.appLocation+'tasksTree'}\r\n            render={() => <TasksTree />} />\r\n\r\n          <Route path={props.appLocation+'orders'}\r\n            render={() => <Orders />} />\r\n\r\n        <Route path={props.appLocation+'*'}\r\n          render={() => <div>404 NOT FOUND</div>} />\r\n      </Switch>\r\n      {/* <Footer>Footer for my app</Footer> */}\r\n    </Layout>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n  initialized: state.app.initialized,\r\n  appLocation: state.app.location,\r\n  isAuth: state.auth.isAuth\r\n})\r\n\r\nlet AppContainer = compose<React.ComponentType>(\r\n  withRouter,\r\n  connect(mapStateToProps, { initializeApp, addLocation }))(App)\r\n\r\nconst MainApp = () => {\r\n  return (\r\n    <BrowserRouter>\r\n      <Provider store={store}>\r\n        <div className={isMobile ? \"\" : \"container\"}>\r\n          <AppContainer />\r\n        </div>\r\n      </Provider>\r\n    </BrowserRouter>\r\n  )\r\n}\r\n\r\nexport default MainApp\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './App'\r\nimport reportWebVitals from './reportWebVitals'\r\n\r\nReactDOM.render(\r\n  // <React.StrictMode>\r\n    <App />\r\n  // </React.StrictMode>\r\n  ,\r\n  document.getElementById('root')\r\n)\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(// console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals()\r\n"],"sourceRoot":""}
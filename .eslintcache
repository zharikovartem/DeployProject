[{"C:\\OSPanel\\domains\\DeployProject2\\src\\index.tsx":"1","C:\\OSPanel\\domains\\DeployProject2\\src\\reportWebVitals.ts":"2","C:\\OSPanel\\domains\\DeployProject2\\src\\App.tsx":"3","C:\\OSPanel\\domains\\DeployProject2\\src\\redux\\appReducer.ts":"4","C:\\OSPanel\\domains\\DeployProject2\\src\\redux\\authReducer.ts":"5","C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\ToDo\\ToDoContainer.tsx":"6","C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\Header\\HeaderContainer.tsx":"7","C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\Orders\\OrdersContainer.tsx":"8","C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\Login\\LoginContainer.tsx":"9","C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\TasksTree\\TasksTreeContainer.tsx":"10","C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\Users\\UsersContainer.tsx":"11","C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\Register\\RegisterContainer.tsx":"12","C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\Users\\CurrentUser\\CurrentUserContainer.tsx":"13","C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\English\\EnglishContainer.tsx":"14","C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\Providers\\ProvidersContainer.tsx":"15","C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\Development\\Projects\\ProjectsContainer.tsx":"16","C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\Development\\Projects\\CurrentProject\\CurrentProjectContainer.tsx":"17","C:\\OSPanel\\domains\\DeployProject2\\src\\redux\\store.ts":"18","C:\\OSPanel\\domains\\DeployProject2\\src\\api\\authAPI.ts":"19","C:\\OSPanel\\domains\\DeployProject2\\src\\redux\\taskReducer.ts":"20","C:\\OSPanel\\domains\\DeployProject2\\src\\redux\\usersSelector.ts":"21","C:\\OSPanel\\domains\\DeployProject2\\src\\redux\\usersReducer.ts":"22","C:\\OSPanel\\domains\\DeployProject2\\src\\redux\\TaskListReducer.ts":"23","C:\\OSPanel\\domains\\DeployProject2\\src\\redux\\vocabularyReducer.ts":"24","C:\\OSPanel\\domains\\DeployProject2\\src\\redux\\ProviderReducer.ts":"25","C:\\OSPanel\\domains\\DeployProject2\\src\\redux\\projectReducer.ts":"26","C:\\OSPanel\\domains\\DeployProject2\\src\\redux\\codeReducer.ts":"27","C:\\OSPanel\\domains\\DeployProject2\\src\\redux\\ContactsReducer.ts":"28","C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\ToDo\\ToDoMobile.tsx":"29","C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\ToDo\\ToDoBrowser.tsx":"30","C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\Header\\Header.tsx":"31","C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\Orders\\Orders.tsx":"32","C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\Login\\Login.tsx":"33","C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\TasksTree\\TasksTreeMobile.tsx":"34","C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\TasksTree\\TasksTreeBrowser.tsx":"35","C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\Users\\Users.tsx":"36","C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\Users\\UsersMobile.tsx":"37","C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\Users\\CurrentUser\\CurrentUser.tsx":"38","C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\Register\\Register.tsx":"39","C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\Users\\CurrentUser\\CurrentUserMobile.tsx":"40","C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\Development\\Projects\\Projects.tsx":"41","C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\Development\\Projects\\CurrentProject\\CurrentProject.tsx":"42","C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\English\\English.tsx":"43","C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\Providers\\Providers.tsx":"44","C:\\OSPanel\\domains\\DeployProject2\\src\\api\\api.ts":"45","C:\\OSPanel\\domains\\DeployProject2\\src\\api\\ControllerMethodsAPI.ts":"46","C:\\OSPanel\\domains\\DeployProject2\\src\\api\\projectAPI.ts":"47","C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\TasksTree\\TaskListActions\\TaskListActions.ts":"48","C:\\OSPanel\\domains\\DeployProject2\\src\\api\\ProviderAPI.ts":"49","C:\\OSPanel\\domains\\DeployProject2\\src\\utils\\Date\\NewDeteByString.ts":"50","C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\Header\\MenuContainer.tsx":"51","C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\Login\\LoginForm.tsx":"52","C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\Register\\RegisterForm.tsx":"53","C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\ToDo\\Settings\\SettingsModalContainer.tsx":"54","C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\ToDo\\ToDoForm\\ToDoForm.tsx":"55","C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\Development\\Projects\\CurrentProject\\Frontend\\Frontend.tsx":"56","C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\ToDo\\ToDoHeader\\ToDoHeaderMobile.tsx":"57","C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\BackendContainer.tsx":"58","C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\English\\CarTrener\\CarTrenerContainer.tsx":"59","C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\Providers\\ProviderForm\\ProviderForm.tsx":"60","C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\English\\Trening\\TreningContainer.tsx":"61","C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\Users\\CurrentUser\\UserDataForm.tsx":"62","C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\ToDo\\ToDoHeader\\ToDoHeader.tsx":"63","C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\TasksTree\\TaskTreeBrowserItemContainer.tsx":"64","C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\ToDo\\TimeScale\\TimeScale.tsx":"65","C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\TasksTree\\RunTask.tsx\\RunTaskForm.tsx":"66","C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\TasksTree\\TaskTreeForm\\NewTaskTreeForm.tsx":"67","C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\TasksTree\\TaskTreeMobileItem.tsx":"68","C:\\OSPanel\\domains\\DeployProject2\\src\\utils\\Formik\\ValidateFields.ts":"69","C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\ToDo\\TimeScale\\TimeScaleContainer.tsx":"70","C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\ToDo\\ToDoHeader\\ToDoHeaderContainer.tsx":"71","C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\Header\\MenuBrowser.tsx":"72","C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Backend.tsx":"73","C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\Development\\Projects\\CurrentProject\\Frontend\\Instanses\\InstansesFrontendForm.tsx":"74","C:\\OSPanel\\domains\\DeployProject2\\src\\utils\\Formik\\CreateAntField.tsx":"75","C:\\OSPanel\\domains\\DeployProject2\\src\\utils\\components\\Contact\\ContactContainer.tsx":"76","C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\English\\Trening\\Trening.tsx":"77","C:\\OSPanel\\domains\\DeployProject2\\src\\utils\\array-helpers.ts":"78","C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\TasksTree\\TaskTreeBrowserItem.tsx":"79","C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\ToDo\\TimeScale\\TaskItem\\TaskItemContainer.tsx":"80","C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\TasksTree\\TaskTreeForm\\Project\\ProjectForm.tsx":"81","C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Controllers\\ControllersContainer.tsx":"82","C:\\OSPanel\\domains\\DeployProject2\\src\\utils\\components\\Contact\\Contact.tsx":"83","C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\TasksTree\\TaskTreeForm\\Project\\OldProject\\OldProjectFormContainer.tsx":"84","C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\TasksTree\\TaskTreeForm\\Project\\NewProject\\NewProjectForm.tsx":"85","C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\TasksTree\\TaskTreeForm\\Project\\OldProject\\OldProjectForm.tsx":"86","C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\TasksTree\\TaskTreeForm\\Project\\BackendForm\\BackendFormContainer.tsx":"87","C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\TasksTree\\TaskTreeForm\\Project\\BackendForm\\BackendForm.tsx":"88","C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Controllers\\Controllers.tsx":"89","C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\ToDo\\TimeScale\\TaskItem\\TaskItem.tsx":"90","C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Controllers\\ControllerMethodsContainer.tsx":"91","C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Controllers\\ControllerForm.tsx":"92","C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Controllers\\FullControllerMethodCode\\FullControllerMethodCodeContainer.tsx":"93","C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Instanses\\InstansesForm.tsx":"94","C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Models\\ModelsContainer.tsx":"95","C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\ToDo\\ToDoActions\\ToDoActionsRouter.tsx":"96","C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Controllers\\ControllerMethods.tsx":"97","C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Controllers\\FullControllerMethodCode\\FullControllerMethodCode.tsx":"98","C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Models\\Models.tsx":"99","C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Controllers\\ControllerMethodsForm\\ControllerMethodsCode.tsx":"100","C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Controllers\\ControllerMethodsForm\\ControllerMethodsForm.tsx":"101","C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Models\\ModelForm.tsx":"102","C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Models\\FieldListContainer.tsx":"103","C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\Development\\Code\\CodeModalContainer.tsx":"104","C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\Development\\Code\\Model\\ModelCode.tsx":"105","C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Models\\FieldForm.tsx":"106","C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Controllers\\ControllerMethodsForm\\ResponseItem.tsx":"107","C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Controllers\\ControllerMethodsForm\\RequestItem.tsx":"108","C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Models\\FieldList.tsx":"109","C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\Development\\Code\\CodeModal.tsx":"110","C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\Development\\Code\\Model\\ModelCodeContainer.tsx":"111","C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\English\\CarTrener\\CarTrener.tsx":"112","C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\English\\CarTrener\\CarTrenerSettings.tsx":"113","C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\English\\CarTrener\\LerningWords\\LerningWordsContainer.tsx":"114","C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\English\\CarTrener\\LerningWords\\LerningWords.tsx":"115","C:\\OSPanel\\domains\\DeployProject2\\src\\api\\vocabularyAPI.ts":"116","C:\\OSPanel\\domains\\DeployProject2\\src\\api\\taskListAPI.ts":"117","C:\\OSPanel\\domains\\DeployProject2\\src\\api\\usersAPI.ts":"118","C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\ToDo\\Settings\\SettingsModal.tsx":"119","C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\Header\\MenuMobile.tsx":"120","C:\\OSPanel\\domains\\DeployProject2\\src\\api\\taskApi.ts":"121","C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\Header\\MenuPopover.tsx":"122","C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\English\\CarTrener\\SayingWords\\SayingWords2.tsx":"123","C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\ToDo\\Schedule\\Schedule.tsx":"124"},{"size":406,"mtime":1617725458837,"results":"125","hashOfConfig":"126"},{"size":440,"mtime":1617725458846,"results":"127","hashOfConfig":"126"},{"size":6313,"mtime":1618575020639,"results":"128","hashOfConfig":"126"},{"size":1346,"mtime":1617725458840,"results":"129","hashOfConfig":"126"},{"size":5172,"mtime":1617725458840,"results":"130","hashOfConfig":"126"},{"size":1377,"mtime":1617725458821,"results":"131","hashOfConfig":"126"},{"size":713,"mtime":1617725458793,"results":"132","hashOfConfig":"126"},{"size":586,"mtime":1617725458799,"results":"133","hashOfConfig":"126"},{"size":750,"mtime":1617725458797,"results":"134","hashOfConfig":"126"},{"size":3067,"mtime":1617725458814,"results":"135","hashOfConfig":"126"},{"size":920,"mtime":1617725458830,"results":"136","hashOfConfig":"126"},{"size":843,"mtime":1617725458802,"results":"137","hashOfConfig":"126"},{"size":1572,"mtime":1617725458827,"results":"138","hashOfConfig":"126"},{"size":957,"mtime":1618263958000,"results":"139","hashOfConfig":"126"},{"size":923,"mtime":1617881460625,"results":"140","hashOfConfig":"126"},{"size":784,"mtime":1617725458786,"results":"141","hashOfConfig":"126"},{"size":1660,"mtime":1617725458783,"results":"142","hashOfConfig":"126"},{"size":1335,"mtime":1618412066847,"results":"143","hashOfConfig":"126"},{"size":2663,"mtime":1617799672900,"results":"144","hashOfConfig":"126"},{"size":5533,"mtime":1618570905170,"results":"145","hashOfConfig":"126"},{"size":278,"mtime":1617725458845,"results":"146","hashOfConfig":"126"},{"size":2713,"mtime":1617725458844,"results":"147","hashOfConfig":"126"},{"size":2921,"mtime":1617725458839,"results":"148","hashOfConfig":"126"},{"size":4237,"mtime":1618298314110,"results":"149","hashOfConfig":"126"},{"size":1791,"mtime":1617881339148,"results":"150","hashOfConfig":"126"},{"size":7922,"mtime":1617725458842,"results":"151","hashOfConfig":"126"},{"size":1948,"mtime":1617725458841,"results":"152","hashOfConfig":"126"},{"size":1779,"mtime":1618411925989,"results":"153","hashOfConfig":"126"},{"size":16987,"mtime":1618571854801,"results":"154","hashOfConfig":"126"},{"size":4814,"mtime":1618571616770,"results":"155","hashOfConfig":"126"},{"size":3155,"mtime":1617725458792,"results":"156","hashOfConfig":"126"},{"size":248,"mtime":1617725458799,"results":"157","hashOfConfig":"126"},{"size":1345,"mtime":1617725458796,"results":"158","hashOfConfig":"126"},{"size":10793,"mtime":1617725458815,"results":"159","hashOfConfig":"126"},{"size":9493,"mtime":1618571724697,"results":"160","hashOfConfig":"126"},{"size":2518,"mtime":1617725458829,"results":"161","hashOfConfig":"126"},{"size":1112,"mtime":1617725458830,"results":"162","hashOfConfig":"126"},{"size":8954,"mtime":1618571940094,"results":"163","hashOfConfig":"126"},{"size":1303,"mtime":1617725458802,"results":"164","hashOfConfig":"126"},{"size":8787,"mtime":1618571970759,"results":"165","hashOfConfig":"126"},{"size":1253,"mtime":1617885067039,"results":"166","hashOfConfig":"126"},{"size":1834,"mtime":1617725458782,"results":"167","hashOfConfig":"126"},{"size":3130,"mtime":1618472762000,"results":"168","hashOfConfig":"126"},{"size":3961,"mtime":1618590135303,"results":"169","hashOfConfig":"126"},{"size":773,"mtime":1617725458833,"results":"170","hashOfConfig":"126"},{"size":2183,"mtime":1617725458832,"results":"171","hashOfConfig":"126"},{"size":6491,"mtime":1617725458834,"results":"172","hashOfConfig":"126"},{"size":512,"mtime":1617725458805,"results":"173","hashOfConfig":"126"},{"size":3878,"mtime":1618417494777,"results":"174","hashOfConfig":"126"},{"size":939,"mtime":1617725458847,"results":"175","hashOfConfig":"126"},{"size":944,"mtime":1617725458794,"results":"176","hashOfConfig":"126"},{"size":1508,"mtime":1617725458798,"results":"177","hashOfConfig":"126"},{"size":2784,"mtime":1617725458803,"results":"178","hashOfConfig":"126"},{"size":849,"mtime":1617725458816,"results":"179","hashOfConfig":"126"},{"size":2361,"mtime":1618570731668,"results":"180","hashOfConfig":"126"},{"size":2117,"mtime":1617725458784,"results":"181","hashOfConfig":"126"},{"size":3131,"mtime":1617725458824,"results":"182","hashOfConfig":"126"},{"size":1445,"mtime":1617725458769,"results":"183","hashOfConfig":"126"},{"size":1289,"mtime":1617824406000,"results":"184","hashOfConfig":"126"},{"size":1828,"mtime":1618734632843,"results":"185","hashOfConfig":"126"},{"size":934,"mtime":1617824406000,"results":"186","hashOfConfig":"126"},{"size":4260,"mtime":1617725458829,"results":"187","hashOfConfig":"126"},{"size":4632,"mtime":1617725458822,"results":"188","hashOfConfig":"126"},{"size":1241,"mtime":1617725458806,"results":"189","hashOfConfig":"126"},{"size":4854,"mtime":1617725458819,"results":"190","hashOfConfig":"126"},{"size":1451,"mtime":1617725458804,"results":"191","hashOfConfig":"126"},{"size":3927,"mtime":1617725458807,"results":"192","hashOfConfig":"126"},{"size":5447,"mtime":1617725458813,"results":"193","hashOfConfig":"126"},{"size":1954,"mtime":1617725458849,"results":"194","hashOfConfig":"126"},{"size":1056,"mtime":1617725458819,"results":"195","hashOfConfig":"126"},{"size":1068,"mtime":1617725458823,"results":"196","hashOfConfig":"126"},{"size":2380,"mtime":1617725458793,"results":"197","hashOfConfig":"126"},{"size":3427,"mtime":1617725458769,"results":"198","hashOfConfig":"126"},{"size":4571,"mtime":1617725458785,"results":"199","hashOfConfig":"126"},{"size":8908,"mtime":1617725458848,"results":"200","hashOfConfig":"126"},{"size":1161,"mtime":1618414703105,"results":"201","hashOfConfig":"126"},{"size":3650,"mtime":1618263958000,"results":"202","hashOfConfig":"126"},{"size":318,"mtime":1617725458849,"results":"203","hashOfConfig":"126"},{"size":10535,"mtime":1617725458806,"results":"204","hashOfConfig":"126"},{"size":919,"mtime":1617725458818,"results":"205","hashOfConfig":"126"},{"size":1610,"mtime":1617725458812,"results":"206","hashOfConfig":"126"},{"size":1289,"mtime":1617725458776,"results":"207","hashOfConfig":"126"},{"size":6324,"mtime":1618418563729,"results":"208","hashOfConfig":"126"},{"size":1353,"mtime":1617725458812,"results":"209","hashOfConfig":"126"},{"size":5524,"mtime":1617881387428,"results":"210","hashOfConfig":"126"},{"size":1554,"mtime":1617725458811,"results":"211","hashOfConfig":"126"},{"size":1332,"mtime":1617725458809,"results":"212","hashOfConfig":"126"},{"size":2417,"mtime":1617881448642,"results":"213","hashOfConfig":"126"},{"size":8407,"mtime":1617725458775,"results":"214","hashOfConfig":"126"},{"size":4573,"mtime":1618573909360,"results":"215","hashOfConfig":"126"},{"size":1571,"mtime":1617725458771,"results":"216","hashOfConfig":"126"},{"size":1761,"mtime":1617725458770,"results":"217","hashOfConfig":"126"},{"size":1629,"mtime":1617725458777,"results":"218","hashOfConfig":"126"},{"size":2493,"mtime":1617725458778,"results":"219","hashOfConfig":"126"},{"size":1239,"mtime":1617725458782,"results":"220","hashOfConfig":"126"},{"size":3151,"mtime":1617725458820,"results":"221","hashOfConfig":"126"},{"size":6610,"mtime":1617725458771,"results":"222","hashOfConfig":"126"},{"size":2031,"mtime":1617725458777,"results":"223","hashOfConfig":"126"},{"size":15440,"mtime":1617725458781,"results":"224","hashOfConfig":"126"},{"size":5420,"mtime":1617725458772,"results":"225","hashOfConfig":"126"},{"size":9999,"mtime":1617725458773,"results":"226","hashOfConfig":"126"},{"size":1642,"mtime":1617725458781,"results":"227","hashOfConfig":"126"},{"size":1031,"mtime":1617725458780,"results":"228","hashOfConfig":"126"},{"size":1039,"mtime":1617725458765,"results":"229","hashOfConfig":"126"},{"size":6648,"mtime":1617725458766,"results":"230","hashOfConfig":"126"},{"size":4713,"mtime":1617725458779,"results":"231","hashOfConfig":"126"},{"size":8797,"mtime":1617725458774,"results":"232","hashOfConfig":"126"},{"size":2940,"mtime":1617725458773,"results":"233","hashOfConfig":"126"},{"size":2756,"mtime":1617725458780,"results":"234","hashOfConfig":"126"},{"size":869,"mtime":1617725458764,"results":"235","hashOfConfig":"126"},{"size":1085,"mtime":1617725458766,"results":"236","hashOfConfig":"126"},{"size":7034,"mtime":1618472762000,"results":"237","hashOfConfig":"126"},{"size":2821,"mtime":1618263958000,"results":"238","hashOfConfig":"126"},{"size":1607,"mtime":1618265194000,"results":"239","hashOfConfig":"126"},{"size":9623,"mtime":1618472762000,"results":"240","hashOfConfig":"126"},{"size":4023,"mtime":1618298314098,"results":"241","hashOfConfig":"126"},{"size":2054,"mtime":1617725458835,"results":"242","hashOfConfig":"126"},{"size":1113,"mtime":1617725458836,"results":"243","hashOfConfig":"126"},{"size":4879,"mtime":1617725458816,"results":"244","hashOfConfig":"126"},{"size":4428,"mtime":1617725458795,"results":"245","hashOfConfig":"126"},{"size":2069,"mtime":1617725458835,"results":"246","hashOfConfig":"126"},{"size":1438,"mtime":1617725458796,"results":"247","hashOfConfig":"126"},{"size":11243,"mtime":1618737611287,"results":"248","hashOfConfig":"126"},{"size":6997,"mtime":1618589222230,"results":"249","hashOfConfig":"126"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},"vfnfx",{"filePath":"253","messages":"254","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"259","messages":"260","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"261","messages":"262","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"265","messages":"266","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"267","messages":"268","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"269","messages":"270","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"271","messages":"272","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"273","messages":"274","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"275","messages":"276","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"277","messages":"278","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"279","messages":"280","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"281","messages":"282","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"283","messages":"284","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"285","usedDeprecatedRules":"252"},{"filePath":"286","messages":"287","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"288","messages":"289","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"290","messages":"291","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"292","messages":"293","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"294","messages":"295","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"296","messages":"297","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"298","messages":"299","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"300","usedDeprecatedRules":"252"},{"filePath":"301","messages":"302","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"303","messages":"304","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"305","messages":"306","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"307","messages":"308","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"309","usedDeprecatedRules":"252"},{"filePath":"310","messages":"311","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"312","messages":"313","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"314","messages":"315","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"316","messages":"317","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"318","messages":"319","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"320","messages":"321","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"322","messages":"323","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"324","messages":"325","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"326","messages":"327","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"328","messages":"329","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"330","messages":"331","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"332","messages":"333","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"334","messages":"335","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"336","messages":"337","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"338","usedDeprecatedRules":"252"},{"filePath":"339","messages":"340","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"341","usedDeprecatedRules":"252"},{"filePath":"342","messages":"343","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"344","messages":"345","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"346","messages":"347","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"348","messages":"349","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"350","messages":"351","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"352","messages":"353","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"354","messages":"355","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"356","messages":"357","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"358","messages":"359","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"360","messages":"361","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"362","messages":"363","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"364","messages":"365","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"366","messages":"367","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"368","usedDeprecatedRules":"252"},{"filePath":"369","messages":"370","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"371","messages":"372","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"373","usedDeprecatedRules":"252"},{"filePath":"374","messages":"375","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"376","messages":"377","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"378","messages":"379","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"380","messages":"381","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"382","messages":"383","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"384","messages":"385","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"386","messages":"387","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"388","messages":"389","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"390","messages":"391","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"392","messages":"393","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"394","messages":"395","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"396","messages":"397","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"398","messages":"399","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"400","messages":"401","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"402","messages":"403","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"404","usedDeprecatedRules":"252"},{"filePath":"405","messages":"406","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"407","usedDeprecatedRules":"252"},{"filePath":"408","messages":"409","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"410","messages":"411","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"412","messages":"413","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"414","usedDeprecatedRules":"252"},{"filePath":"415","messages":"416","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"417","messages":"418","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"419","messages":"420","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"421","messages":"422","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"423","messages":"424","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"425","messages":"426","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"427","messages":"428","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"429","messages":"430","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"431","messages":"432","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"433","messages":"434","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"435","messages":"436","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"437","messages":"438","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"439","usedDeprecatedRules":"252"},{"filePath":"440","messages":"441","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"442","messages":"443","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"444","usedDeprecatedRules":"252"},{"filePath":"445","messages":"446","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"447","usedDeprecatedRules":"252"},{"filePath":"448","messages":"449","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"450","usedDeprecatedRules":"252"},{"filePath":"451","messages":"452","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"453","messages":"454","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"455","messages":"456","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"457","messages":"458","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"459","usedDeprecatedRules":"252"},{"filePath":"460","messages":"461","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"462","usedDeprecatedRules":"252"},{"filePath":"463","messages":"464","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"465","usedDeprecatedRules":"252"},{"filePath":"466","messages":"467","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"468","usedDeprecatedRules":"252"},{"filePath":"469","messages":"470","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"471","usedDeprecatedRules":"252"},{"filePath":"472","messages":"473","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"474","usedDeprecatedRules":"252"},{"filePath":"475","messages":"476","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"477","messages":"478","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"479","messages":"480","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"481","usedDeprecatedRules":"252"},{"filePath":"482","messages":"483","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"484","messages":"485","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":2,"source":"486","usedDeprecatedRules":"252"},{"filePath":"487","messages":"488","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"489","usedDeprecatedRules":"252"},{"filePath":"490","messages":"491","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"492","messages":"493","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"494","usedDeprecatedRules":"252"},{"filePath":"495","messages":"496","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"497","messages":"498","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"499","usedDeprecatedRules":"252"},{"filePath":"500","messages":"501","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"502","messages":"503","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"504","messages":"505","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"506","usedDeprecatedRules":"252"},{"filePath":"507","messages":"508","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"509","messages":"510","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"511","messages":"512","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"513","messages":"514","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"515","messages":"516","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"517","messages":"518","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"519","messages":"520","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"252"},{"filePath":"521","messages":"522","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"523"},{"filePath":"524","messages":"525","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"526","usedDeprecatedRules":"252"},"C:\\OSPanel\\domains\\DeployProject2\\src\\index.tsx",[],["527","528"],"C:\\OSPanel\\domains\\DeployProject2\\src\\reportWebVitals.ts",[],"C:\\OSPanel\\domains\\DeployProject2\\src\\App.tsx",[],"C:\\OSPanel\\domains\\DeployProject2\\src\\redux\\appReducer.ts",[],"C:\\OSPanel\\domains\\DeployProject2\\src\\redux\\authReducer.ts",[],"C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\ToDo\\ToDoContainer.tsx",[],"C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\Header\\HeaderContainer.tsx",[],"C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\Orders\\OrdersContainer.tsx",[],"C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\Login\\LoginContainer.tsx",[],"C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\TasksTree\\TasksTreeContainer.tsx",[],"C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\Users\\UsersContainer.tsx",[],"C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\Register\\RegisterContainer.tsx",[],"C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\Users\\CurrentUser\\CurrentUserContainer.tsx",[],"C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\English\\EnglishContainer.tsx",[],"C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\Providers\\ProvidersContainer.tsx",[],"C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\Development\\Projects\\ProjectsContainer.tsx",[],"C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\Development\\Projects\\CurrentProject\\CurrentProjectContainer.tsx",["529","530"],"import {connect} from 'react-redux'\r\nimport CurrentProject from './CurrentProject'\r\nimport { AppStateType } from '../../../../redux/store'\r\nimport { isMobile } from 'react-device-detect'\r\nimport { getUsersList, updateUser, actions } from '../../../../redux/usersReducer'\r\nimport { getProjectList } from '../../../../redux/projectReducer'\r\nimport { UserType } from '../../../../redux/authReducer'\r\n// import CurrentUserMobile from './CurrentUserMobile'\r\n\r\ntype OwnCurrentProjectPropsType = {\r\n    match: any\r\n    location: any\r\n    history: any\r\n}\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    getProjectList: ()=>void,\r\n    updateUser: (values: UserType, userId: number)=>void,\r\n    // setUsersDataChanged: (isUsersDataChanged: boolean)=>void\r\n}\r\n\r\nexport type CurrenProjectPropsType = MapPropsType & MapDispatchPropsType & OwnCurrentProjectPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        projectsList: state.projects.projectList,\r\n        isProjectsLoaded: state.projects.isProjectLoaded\r\n        // errorMessage: state.task.errorMessage,\r\n        // isInterval: state.task.isInterval,\r\n        // taskSaveStatus: state.task.taskSaveStatus,\r\n        // settings:state.auth.viewSettings,\r\n        // appLocation: state.app.location,\r\n        // viewSettings: state.auth.viewSettings,\r\n        // isUsersDataChanged: state.users.isUsersDataChanged\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnCurrentProjectPropsType, AppStateType>(mapStateToProps, \r\n    {getProjectList, updateUser}) \r\n    (isMobile ? CurrentProject : CurrentProject)\r\n    \r\n\r\n","C:\\OSPanel\\domains\\DeployProject2\\src\\redux\\store.ts",[],"C:\\OSPanel\\domains\\DeployProject2\\src\\api\\authAPI.ts",[],"C:\\OSPanel\\domains\\DeployProject2\\src\\redux\\taskReducer.ts",[],"C:\\OSPanel\\domains\\DeployProject2\\src\\redux\\usersSelector.ts",[],"C:\\OSPanel\\domains\\DeployProject2\\src\\redux\\usersReducer.ts",[],"C:\\OSPanel\\domains\\DeployProject2\\src\\redux\\TaskListReducer.ts",[],"C:\\OSPanel\\domains\\DeployProject2\\src\\redux\\vocabularyReducer.ts",["531"],"\r\nimport { Dispatch } from 'redux'\r\nimport { isConditionalExpression } from 'typescript'\r\nimport { CheckTestResultDataType, vocabularyAPI, VocabularyType, WordType } from './../api/vocabularyAPI'\r\nimport { BaseThunkType, InferActionsTypes } from './store'\r\n\r\nexport type InitialStateType = {\r\n    vocabularyList: Array<WordType>,\r\n    part: number,\r\n    count: number,\r\n    toLern: Array<WordType>,\r\n    learningTarget?: WordType\r\n}\r\n\r\nlet initialState: InitialStateType = {\r\n    vocabularyList: [],\r\n    part: 1,\r\n    count: 0,\r\n    toLern: [],\r\n}\r\n\r\nconst vocabularyReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'VOCABULARY/SET_RESULT':\r\n            console.log('VOCABULARY/SET_RESULT: ', action.result)\r\n            return{\r\n                ...state\r\n            }\r\n        case 'VOCABULARY/SET_TO_LERN':\r\n            return{\r\n                ...state,\r\n                toLern: action.toLern\r\n            }\r\n        case 'SN/VOCABULARY/SET_VOCABULARY_LIST':\r\n            // console.log(action.vocabularyList[0])\r\n            return { \r\n                ...state, \r\n                vocabularyList: action.vocabularyList, \r\n                part: action.part, \r\n                count: action.count,\r\n                // toLern: action.toLern,\r\n                learningTarget: action.vocabularyList[0]\r\n            }\r\n\r\n        case 'SN/VOCABULARY/SET_LEARNING_TARGET':\r\n            // console.log(action.learningTarget ? action.learningTarget.id : null)\r\n            return{\r\n                ...state,\r\n                learningTarget: action.learningTarget\r\n            }\r\n\r\n        case 'SN/VOCABULARY/SET_VOCABULARY_LIST2':\r\n            return{\r\n                ...state,\r\n                vocabularyList: action.vocabularyList, \r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    setVocabularyList: (vocabularyList: Array<WordType>, part: number, count: number, toLern: Array<VocabularyType>) => \r\n    ({ type: 'SN/VOCABULARY/SET_VOCABULARY_LIST', vocabularyList, part, count, toLern } as const),\r\n    setLerningTarget: (learningTarget: WordType) => ({type: 'SN/VOCABULARY/SET_LEARNING_TARGET', learningTarget} as const),\r\n    setVocabularyList2: (vocabularyList: Array<WordType>) => \r\n    ({ type: 'SN/VOCABULARY/SET_VOCABULARY_LIST2', vocabularyList } as const),\r\n    setToLern: (toLern: Array<WordType>) =>({type: 'VOCABULARY/SET_TO_LERN', toLern} as const),\r\n    setResults: (result: any) => ({type: 'VOCABULARY/SET_RESULT', result} as const),\r\n}\r\n\r\nexport const getVocabularyList = (part: number): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        let response = await vocabularyAPI.getVocabularyPart(part)\r\n        console.log(response)\r\n        if (response.status === 200) {\r\n            dispatch( actions.setVocabularyList(response.data.englishWords, Number(response.data.part), Number(response.data.count), response.data.toLern) )\r\n        } else {\r\n            console.log(response.data.message)\r\n        }\r\n        \r\n    }\r\n}\r\n\r\nexport const updateVocabulary = (values: any, vocabularyId: number): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        let response = await vocabularyAPI.updateVocabulary(values, vocabularyId)\r\n        console.log(response)\r\n    }\r\n}\r\n\r\nexport const checkTestResult = (data: CheckTestResultDataType, wordId: number): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        let response = await vocabularyAPI.checkTestResult(data, wordId)\r\n        dispatch(actions.setResults(response.data))\r\n    }\r\n}\r\n\r\nexport const getWordsToLern = ():ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        let response = await vocabularyAPI.getWordsToLern()\r\n        dispatch(actions.setToLern(response.data.toLearn))\r\n    }\r\n}\r\n\r\nexport const skipWord = (wordId: number):ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        let response = await vocabularyAPI.skipWord(wordId)\r\n        console.log(response)\r\n    }\r\n}\r\n\r\nexport default vocabularyReducer\r\n\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsTypes>\r\nexport type DispatchType = Dispatch<ActionsTypes>","C:\\OSPanel\\domains\\DeployProject2\\src\\redux\\ProviderReducer.ts",[],"C:\\OSPanel\\domains\\DeployProject2\\src\\redux\\projectReducer.ts",[],"C:\\OSPanel\\domains\\DeployProject2\\src\\redux\\codeReducer.ts",[],"C:\\OSPanel\\domains\\DeployProject2\\src\\redux\\ContactsReducer.ts",["532","533"],"import { Dispatch } from 'redux'\r\nimport { ProviderAPI,  ProviderType, ContactAPI, ContactType } from '../api/ProviderAPI'\r\nimport { BaseThunkType, InferActionsTypes } from './store'\r\n\r\nexport type InitialStateType = {\r\n    contactList: Array<ContactType>\r\n}\r\n\r\nlet initialState: InitialStateType = {\r\n    contactList: []\r\n}\r\n\r\nconst contactReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/CONTACTS/SET_CONTACT_LIST':\r\n            return{\r\n                ...state,\r\n                contactList: action.contactList\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    setContactList: (contactList: Array<ContactType>) => ({type: 'SN/CONTACTS/SET_CONTACT_LIST', contactList} as const),\r\n}\r\n\r\nexport const getContactList = (): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        let response = await ContactAPI.getContactList()\r\n        dispatch( actions.setContactList(response.data.providersList) )\r\n    }\r\n}\r\n\r\nexport const createNewContact = (values: any): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        let response = await ContactAPI.createNewContact(values)\r\n        dispatch( actions.setContactList(response.data.providersList) )\r\n    }\r\n}\r\n\r\nexport const updateContact = (values: any, providerId: number): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        let response = await ContactAPI.updateContact(values, providerId)\r\n        dispatch( actions.setContactList(response.data.providersList) )\r\n    }\r\n}\r\n\r\nexport default contactReducer\r\n\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsTypes>\r\nexport type DispatchType = Dispatch<ActionsTypes>","C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\ToDo\\ToDoMobile.tsx",[],"C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\ToDo\\ToDoBrowser.tsx",[],"C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\Header\\Header.tsx",[],"C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\Orders\\Orders.tsx",[],"C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\Login\\Login.tsx",[],"C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\TasksTree\\TasksTreeMobile.tsx",[],"C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\TasksTree\\TasksTreeBrowser.tsx",[],"C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\Users\\Users.tsx",[],"C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\Users\\UsersMobile.tsx",[],"C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\Users\\CurrentUser\\CurrentUser.tsx",[],"C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\Register\\Register.tsx",[],"C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\Users\\CurrentUser\\CurrentUserMobile.tsx",[],"C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\Development\\Projects\\Projects.tsx",[],"C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\Development\\Projects\\CurrentProject\\CurrentProject.tsx",["534"],"import { Collapse, Spin } from 'antd'\r\nimport React, { useEffect } from 'react'\r\nimport { ProjectItemType } from '../../../../redux/projectReducer'\r\nimport Backend from './Backend/BackendContainer'\r\nimport { CurrenProjectPropsType } from './CurrentProjectContainer'\r\nimport Frontend from './Frontend/Frontend'\r\n\r\nconst { Panel } = Collapse\r\n\r\nexport const getTargetProject = (projectList: Array<ProjectItemType>, userId: string): ProjectItemType => {\r\n    return projectList.filter((item: ProjectItemType) => item.id.toString() === userId)[0]\r\n}\r\n\r\nconst CurrentProject: React.FC<CurrenProjectPropsType> = (props) => {\r\n    useEffect(() => {\r\n        if (!props.isProjectsLoaded) {\r\n            props.getProjectList()\r\n        }\r\n    }, [props.isProjectsLoaded])\r\n\r\n    const project = getTargetProject(props.projectsList, props.match.params.userId)\r\n\r\n    if (project) {\r\n        return (\r\n            <>\r\n                <h3>{project.name}</h3>\r\n                <Collapse defaultActiveKey={[]}>\r\n                    {project.backend_id ?\r\n                        <Panel header=\"Backend\" key=\"1\">\r\n                            Backend data to {project.backend_id}\r\n                            <Backend projectId={Number(props.match.params.userId)}/>\r\n                        </Panel>\r\n                        :\r\n                        null\r\n                    }\r\n                    {project.frontend_id ?\r\n                        <Panel header=\"Frontend\" key=\"2\">\r\n                            <Frontend projectId={Number(props.match.params.userId)}/>\r\n                        </Panel>\r\n                        :\r\n                        null\r\n                    }\r\n                </Collapse>\r\n            </>\r\n        )\r\n    } else {\r\n        return <Spin key=\"spin\" size=\"large\" />\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default CurrentProject","C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\English\\English.tsx",["535","536"],"import { Button, List, Pagination, Tabs } from 'antd'\r\nimport React, { useEffect } from 'react'\r\nimport { EnglishPropsType } from './EnglishContainer'\r\nimport { WordType } from './../../api/vocabularyAPI'\r\n\r\nimport Trening from './Trening/TreningContainer'\r\nimport CarTrener from './CarTrener/CarTrenerContainer'\r\n\r\nconst { TabPane } = Tabs\r\n\r\nconst English: React.FC<EnglishPropsType> = (props) => {\r\n    useEffect(() => {\r\n        if (props.vocabularyList.length === 0) {\r\n            props.getVocabularyList(1)\r\n        }\r\n    }, [props])\r\n\r\n    useEffect(() => {\r\n        // props.getVocabularyList(1)\r\n    }, [props.vocabularyList, props.count, props.part])\r\n\r\n    const onPaginationChange = (pageNumber: number) => {\r\n        console.log(pageNumber)\r\n        props.getVocabularyList(pageNumber)\r\n    }\r\n\r\n    const onStatusChange = (id: number, status: string) => {\r\n        props.updateVocabulary({\r\n            status: status//'inProcess'\r\n        }, id)\r\n    }\r\n\r\n    return (\r\n        <Tabs defaultActiveKey=\"0\" >\r\n            <TabPane tab=\"Car Trener\" key=\"0\">\r\n                {props.vocabularyList.length !== 0 ?\r\n                <CarTrener \r\n                    englishWords={props.vocabularyList}\r\n                />\r\n                : null}\r\n                \r\n            </TabPane>\r\n            <TabPane tab=\"Vocabulary List\" key=\"1\">\r\n                <Pagination\r\n                    showQuickJumper\r\n                    // defaultCurrent={1} \r\n                    defaultPageSize={100}\r\n                    current={props.part}\r\n                    total={props.count}\r\n                    onChange={onPaginationChange}\r\n                />\r\n\r\n                <List\r\n                    size=\"small\"\r\n                    header={<div>Header</div>}\r\n                    footer={<div>Footer</div>}\r\n                    bordered\r\n                    dataSource={props.vocabularyList}\r\n                    renderItem={(item: WordType) =>\r\n                        <List.Item\r\n                        // actions={item.eng_sound ? [<a key={item.eng_sound} onClick={()=>{onPlay(item.eng_sound)}}>sound</a>] : []}\r\n                        >\r\n                            <div className=\"row w-100\">\r\n                                <div className=\"col-1 text-right\">{item.id}</div>\r\n                                <div className=\"col-2 text-right\">\r\n                                    {item.languige === 'eng' ? <b>{item.name}</b> : item.name}\r\n                                    \r\n                                </div>\r\n                                <div className=\"col-3 text-right\">\r\n                                    {item.name + ' ' + item.part_of_speech}\r\n                                </div>\r\n                            </div>\r\n                        </List.Item>\r\n                    }\r\n                />\r\n            </TabPane>\r\n\r\n            <TabPane tab=\"to Lern\" key=\"2\"></TabPane>\r\n            <TabPane tab=\"Active Vocabulary\" key=\"3\"></TabPane>\r\n            <TabPane tab=\"Trening\" key=\"4\">\r\n                <Trening />\r\n            </TabPane>\r\n        </Tabs>\r\n    )\r\n}\r\n\r\nexport default English","C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\Providers\\Providers.tsx",[],"C:\\OSPanel\\domains\\DeployProject2\\src\\api\\api.ts",[],"C:\\OSPanel\\domains\\DeployProject2\\src\\api\\ControllerMethodsAPI.ts",[],"C:\\OSPanel\\domains\\DeployProject2\\src\\api\\projectAPI.ts",[],"C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\TasksTree\\TaskListActions\\TaskListActions.ts",[],"C:\\OSPanel\\domains\\DeployProject2\\src\\api\\ProviderAPI.ts",[],"C:\\OSPanel\\domains\\DeployProject2\\src\\utils\\Date\\NewDeteByString.ts",[],"C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\Header\\MenuContainer.tsx",[],"C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\Login\\LoginForm.tsx",[],"C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\Register\\RegisterForm.tsx",[],"C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\ToDo\\Settings\\SettingsModalContainer.tsx",[],"C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\ToDo\\ToDoForm\\ToDoForm.tsx",[],"C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\Development\\Projects\\CurrentProject\\Frontend\\Frontend.tsx",["537"],"import { Collapse } from 'antd'\r\nimport CollapsePanel from 'antd/lib/collapse/CollapsePanel'\r\nimport { Formik } from 'formik'\r\nimport React, {useEffect} from 'react'\r\nimport InstansesFrontendForm from './Instanses/InstansesFrontendForm'\r\n\r\ntype FrontendPropsType = {\r\n    projectId: number\r\n}\r\n\r\nconst Frontend:React.FC<FrontendPropsType> = (props) => {\r\n    useEffect( ()=> {\r\n        getCurrentFrontend(props.projectId)\r\n    },[])\r\n    console.log('Frontend props: ', props)\r\n    type InstansesInitialValuesType = {\r\n\r\n    }\r\n    const instansesInitialValues: InstansesInitialValuesType = {\r\n        \r\n    }\r\n\r\n    const instansesHandleSubmit = (values: InstansesInitialValuesType) => {\r\n        console.log(values)\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            <h5>Frontend</h5>\r\n            <Collapse defaultActiveKey={[]}>\r\n                <CollapsePanel header=\"Instanses\" key=\"1\">\r\n                    <li>1) Create new component \"FrontEnd\"</li>\r\n                    <li>1.1) Create model</li>\r\n                    <li>1.2) Create migrations</li>\r\n                    <li>1.3) Create controller</li>\r\n                    <Formik\r\n                        initialValues={instansesInitialValues}\r\n                        onSubmit={instansesHandleSubmit}\r\n                    >\r\n                        {InstansesFrontendForm}\r\n                    </Formik>\r\n                </CollapsePanel>\r\n                <CollapsePanel header=\"APIs\" key=\"2\"></CollapsePanel>\r\n                <CollapsePanel header=\"Reducers\" key=\"3\"></CollapsePanel>\r\n                <CollapsePanel header=\"Components\" key=\"4\">\r\n                    <li>1) Create new component</li>\r\n                    <li>1.1) Create model</li>\r\n                    <li>1.2) Create migrations</li>\r\n                    <li>1.3) Create controller</li>\r\n                    <li>2) Get componentList</li>\r\n                   \r\n                </CollapsePanel>\r\n            </Collapse>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Frontend\r\n\r\nexport const getCurrentFrontend = (projectId: Number) => {\r\n    console.log('getCurrentFrontend for: '+projectId)\r\n}","C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\ToDo\\ToDoHeader\\ToDoHeaderMobile.tsx",[],"C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\BackendContainer.tsx",["538","539"],"import {connect} from 'react-redux'\r\nimport Backend from './Backend'\r\nimport { AppStateType } from '../../../../../redux/store'\r\nimport { isMobile } from 'react-device-detect'\r\n// import { getUsersList, updateUser, actions } from '../../../../../../redux/usersReducer'\r\nimport { getProjectList, getBackendData, updateBackend } from '../../../../../redux/projectReducer'\r\nimport { UserType } from '../../../../../redux/authReducer'\r\nimport { BackendType } from '../../../../../api/projectAPI'\r\n// import CurrentUserMobile from './CurrentUserMobile'\r\n\r\ntype OwnBackendPropsType = {\r\n    projectId: number\r\n}\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    getProjectList: ()=>void,\r\n    getBackendData: (projectid: number)=>void,\r\n    updateBackend: (values: BackendType, backendId: number) =>void,\r\n    // updateUser: (values: UserType, userId: number)=>void,\r\n    // setUsersDataChanged: (isUsersDataChanged: boolean)=>void\r\n}\r\n\r\nexport type BackendPropsType = MapPropsType & MapDispatchPropsType & OwnBackendPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        projectsList: state.projects.projectList,\r\n        isProjectsLoaded: state.projects.isProjectLoaded\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnBackendPropsType, AppStateType>(mapStateToProps, \r\n    {getProjectList, getBackendData, updateBackend}) \r\n    (Backend)\r\n    \r\n\r\n","C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\English\\CarTrener\\CarTrenerContainer.tsx",[],"C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\Providers\\ProviderForm\\ProviderForm.tsx",[],"C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\English\\Trening\\TreningContainer.tsx",[],"C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\Users\\CurrentUser\\UserDataForm.tsx",[],"C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\ToDo\\ToDoHeader\\ToDoHeader.tsx",[],"C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\TasksTree\\TaskTreeBrowserItemContainer.tsx",[],"C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\ToDo\\TimeScale\\TimeScale.tsx",[],"C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\TasksTree\\RunTask.tsx\\RunTaskForm.tsx",[],"C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\TasksTree\\TaskTreeForm\\NewTaskTreeForm.tsx",[],"C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\TasksTree\\TaskTreeMobileItem.tsx",[],"C:\\OSPanel\\domains\\DeployProject2\\src\\utils\\Formik\\ValidateFields.ts",[],"C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\ToDo\\TimeScale\\TimeScaleContainer.tsx",[],"C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\ToDo\\ToDoHeader\\ToDoHeaderContainer.tsx",[],"C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\Header\\MenuBrowser.tsx",[],"C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Backend.tsx",["540"],"import React, { useEffect, useState } from 'react'\r\nimport {BackendPropsType} from './BackendContainer'\r\nimport {getTargetProject} from './../CurrentProject'\r\nimport { Collapse, Spin } from 'antd'\r\nimport { Formik } from 'formik'\r\nimport InstansesForm from './Instanses/InstansesForm'\r\nimport Models from './Models/ModelsContainer'\r\nimport Controllers from './Controllers/ControllersContainer'\r\n\r\nconst { Panel } = Collapse\r\n\r\nconst Backend: React.FC<BackendPropsType> = (props) => {\r\n    const [activeKey, setActiveKey] = useState<Array<string>>()\r\n\r\n    useEffect( ()=>{\r\n        props.getBackendData(1)\r\n    }, [])\r\n\r\n    const project = getTargetProject(props.projectsList, props.projectId.toString())\r\n\r\n    // console.log('project', project)\r\n\r\n    const instansesInitialValues = {\r\n        name: project.backendData ? project.backendData.name : null,\r\n        url: project.backendData ? project.backendData.url : null,\r\n        ip: project.backendData ? project.backendData.ip : null,\r\n        login: project.backendData ? project.backendData.login : null,\r\n        password: project.backendData ? project.backendData.password : null,\r\n        folder: project.backendData ? project.backendData.folder : null,\r\n    }\r\n\r\n    // console.log(props)\r\n\r\n    const instansesHandleSubmit = (val: any) => {\r\n        // console.log(project.backendData ? project.backendData.id : undefined)\r\n        // console.log(val)\r\n        if (project.backendData) {\r\n            props.updateBackend(val, project.backendData.id)\r\n        }\r\n    }\r\n\r\n    const changePanel = (closeKey: string, openKey: Array<string>) => {\r\n        console.log(openKey)\r\n        if (openKey) {\r\n            setActiveKey(openKey)\r\n        } else {\r\n            setActiveKey([])\r\n        }\r\n        \r\n    }\r\n\r\n    const onCollapseChange = (v:any) => {\r\n        console.log('onCollapseChange', v)\r\n        console.log('activeKey: ', [activeKey])\r\n        changePanel('', v)\r\n    }\r\n\r\n    // console.log(project)\r\n\r\n    if (project.backendData) {\r\n        return(\r\n            <>\r\n                <h5>{project.backendData.name}</h5>\r\n                <Collapse defaultActiveKey={[]} activeKey={activeKey} onChange={onCollapseChange}>\r\n                    <Panel header=\"Instanses\" key=\"1\">\r\n                        <Formik\r\n                            initialValues={instansesInitialValues}\r\n                            onSubmit={instansesHandleSubmit}\r\n                            enableReinitialize={true}\r\n                        >\r\n                            {InstansesForm}\r\n                        </Formik>\r\n                    </Panel>\r\n                    <Panel header=\"Models\" key=\"2\">\r\n                        <Models backendId={project.backend_id} changePanel={changePanel} />\r\n                    </Panel>\r\n                    <Panel header=\"Controllers\" key=\"3\">\r\n                        <Controllers backendId={project.backend_id}/>\r\n                    </Panel>\r\n                    <Panel header=\"Api\" key=\"4\">\r\n\r\n                    </Panel>\r\n                </Collapse>\r\n                <br/><br/><br/>\r\n\r\n                <li>Seeders</li>\r\n                <li>Fasades</li>\r\n                <li>Middleware</li>\r\n                <li>Services</li>\r\n                <li>Events</li>\r\n                <li>Workers</li>\r\n            </>\r\n        )\r\n    } else {\r\n        return <Spin key=\"spin\" size=\"large\" />\r\n    }\r\n    \r\n}\r\n\r\nexport default Backend","C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\Development\\Projects\\CurrentProject\\Frontend\\Instanses\\InstansesFrontendForm.tsx",["541","542"],"import { Button, Tree } from \"antd\"\r\nimport { Field, Form, FormikProps, FormikValues } from \"formik\"\r\nimport React, { ReactNode, useState } from \"react\"\r\nimport { AntInput } from \"../../../../../../utils/Formik/CreateAntField\"\r\nimport { validateRequired } from \"../../../../../../utils/Formik/ValidateFields\"\r\n\r\ntype OtherProps = {\r\n\r\n}\r\n\r\nconst InstansesFrontendForm: ((props: OtherProps & FormikProps<FormikValues>) => ReactNode) = (props) => {\r\n    const [isDataChanged, setIsDataChanged] = useState(false)\r\n\r\n    // const [srcTree, setSrcTree] = useState(props.initialValues.src_tree)\r\n    const [srcTree, setSrcTree] = useState(treeData)\r\n\r\n    const addTreeItem = (trace:Array<string>) => {\r\n        for (let index = 0; index < trace.length; index++) {\r\n            const key = trace[index]\r\n            console.log(key)\r\n        }\r\n    }\r\n\r\n    const onChange = (val: any) => {\r\n        setIsDataChanged(true)\r\n    }\r\n\r\n    return (\r\n        <Form\r\n            className=\"form-container mt-2\"\r\n            onSubmit={props.handleSubmit}\r\n        >\r\n            <Field\r\n                component={AntInput}\r\n                name=\"name\"\r\n                type=\"text\"\r\n                label=\"Name\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n                onChange={onChange}\r\n            />\r\n\r\n            <TreeSRC addTreeItem={addTreeItem}/>\r\n\r\n            {isDataChanged ?\r\n                <div className=\"submit-container\">\r\n                    <button className=\"ant-btn ant-btn-primary\" type=\"submit\">\r\n                        Save\r\n                    </button>\r\n                </div>\r\n                : null}\r\n\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default InstansesFrontendForm\r\n\r\n\r\ntype TreeSRCPropsType = {\r\n    addTreeItem: (trace:Array<string>) => void,\r\n}\r\n\r\nconst TreeSRC: React.FC<TreeSRCPropsType> = (props) => {\r\n    const onSelect = (selectedKeys: React.Key[], info: any) => {\r\n        console.log('selected', selectedKeys, info);\r\n    }\r\n\r\n    const onCheck = (checkedKeys: any, info: any) => {\r\n        console.log('onCheck', checkedKeys, info);\r\n    }\r\n    return (\r\n        <div className=\"ant-row ant-form-item \">\r\n            <div className=\"ant-col ant-form-item-label pr-2\">SRC tree:</div>\r\n            <div className=\"ant-col ant-form-item-control\">\r\n            <Tree\r\n                checkable\r\n                defaultExpandedKeys={[]}\r\n                defaultSelectedKeys={['0-0-0', '0-0-1']}\r\n                defaultCheckedKeys={['0-0-0', '0-0-1']}\r\n                onSelect={onSelect}\r\n                onCheck={onCheck}\r\n                treeData={treeData}\r\n            />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype FolderRowPropsType = {\r\n    name: string,\r\n    trace: Array<string>\r\n    // addTreeItem: (trace:Array<string>) => void,\r\n    \r\n}\r\n\r\nexport const FolderRow:React.FC<FolderRowPropsType> = (props) => {\r\n    const onAdd = (v: Array<string>) => {\r\n        console.log(v)\r\n        // addTreeItem(trace).bind(props.trace)\r\n    }\r\n    return(\r\n        <div>{props.name}\r\n            <Button onClick={()=>{onAdd(props.trace)}} className=\"ml-2\" type=\"primary\" size=\"small\">Add</Button>\r\n            <Button className=\"ml-2\" type=\"primary\" size=\"small\">Dell</Button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport type treeDataItem = {\r\n    title: string | JSX.Element,\r\n    key: string,\r\n    disableCheckbox?: boolean,\r\n    disabled?: boolean,\r\n    children?: Array<treeDataItem>,\r\n    trace?: Array<string>,\r\n}\r\n\r\nconst treeData: Array<treeDataItem> = [\r\n    {\r\n        title: <FolderRow name=\"src\" trace={['src']}/>,\r\n        key: '0',\r\n        trace:['0'],\r\n        children: [\r\n        //     {\r\n        //         title: <FolderRow name=\"parent 1-0\"/>,\r\n        //         key: '0-0-0',\r\n        //         disabled: true,\r\n        //         children: [\r\n        //             {\r\n        //                 title: 'leaf0',\r\n        //                 key: '0-0-0-0',\r\n        //                 // disableCheckbox: true,\r\n        //             },\r\n        //             {\r\n        //                 title: 'leaf1',\r\n        //                 key: '0-0-0-1',\r\n        //             },\r\n        //         ],\r\n        //     },\r\n            {\r\n                title: <FolderRow name=\"Components\" trace={['src', 'Components']}/>,\r\n                key: '0-0-1',\r\n                children: [{ title: <FolderRow name=\"Development\" trace={['src', 'Components', 'Development']}/>,  key: '0-0-1-0' }],\r\n            },\r\n        ],\r\n    },\r\n];\r\n\r\n","C:\\OSPanel\\domains\\DeployProject2\\src\\utils\\Formik\\CreateAntField.tsx",[],"C:\\OSPanel\\domains\\DeployProject2\\src\\utils\\components\\Contact\\ContactContainer.tsx",[],"C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\English\\Trening\\Trening.tsx",["543","544","545","546","547"],"import { Button } from 'antd'\r\nimport React, {useState} from 'react'\r\nimport SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition'\r\nimport { TreningPropsType } from './TreningContainer'\r\n\r\nconst Trening: React.FC<TreningPropsType> = (props) => {\r\n    const speechSynthesis = require('speech-synthesis')\r\n\r\n    const [targetIndex, setTargetIndex] = useState(0)\r\n    const [answer, setAnswer] = useState(false)\r\n    const [isSpeaking, setIsSpeaking] = useState<number| null>(null)\r\n\r\n    const commands = [\r\n        {\r\n            command: 'clear',\r\n            // @ts-ignore\r\n            callback: (  { resetTranscript }  ) => {\r\n                console.log('clear')\r\n                resetTranscript()\r\n            },\r\n            \r\n        },\r\n        {\r\n            command: 'next',\r\n            // @ts-ignore\r\n            callback: (  { resetTranscript }  ) => {\r\n                console.log('next go to props')\r\n                setAnswer(false)\r\n                setTargetIndex(targetIndex+1)\r\n                \r\n                resetTranscript()\r\n            },\r\n            \r\n        },\r\n        {\r\n            command: 'show',\r\n            // @ts-ignore\r\n            callback: (  { resetTranscript }  ) => {\r\n                console.log('next go to props')\r\n                setAnswer(!answer) // скрыл показал answer\r\n                resetTranscript() // очистил кэш\r\n            },\r\n            \r\n        }\r\n    ]\r\n\r\n    // const { transcript, resetTranscript } = useSpeechRecognition({commands})\r\n\r\n    if (!SpeechRecognition.browserSupportsSpeechRecognition()) {\r\n        return null\r\n    }\r\n\r\n    const onStartRus = () => {\r\n        SpeechRecognition.stopListening()\r\n        SpeechRecognition.startListening({ language: 'ru-RU', continuous: true })\r\n    }\r\n    const onStart = () => {\r\n        SpeechRecognition.stopListening()\r\n        SpeechRecognition.startListening({ language: 'en-US', continuous: true })\r\n    }\r\n\r\n    const onStop = () => {\r\n        SpeechRecognition.stopListening()\r\n    }\r\n\r\n    const showAnswer = () => {\r\n        setAnswer(!answer)\r\n    }\r\n\r\n    const onNext = (step:number) => {\r\n        setAnswer(false)\r\n        setTargetIndex(targetIndex+step)\r\n        // resetTranscript()\r\n    }\r\n\r\n    console.log(props)\r\n    console.log(targetIndex)\r\n\r\n    // if (isSpeaking !== targetIndex && props.toLern.length !== 0) {\r\n    //     speechSynthesis(props.toLern[targetIndex].name, 'ru-RU')\r\n    //     setIsSpeaking(targetIndex)\r\n    // }\r\n     \r\n\r\n    if (props.toLern.length !== 0) {\r\n        return (\r\n            <div>\r\n                <div>v1.6</div>\r\n                <Button className=\"m-2\" type=\"primary\" onClick={onStartRus}>StartRus</Button>\r\n                <Button className=\"m-2\" type=\"primary\" onClick={onStart}>StartEng</Button>\r\n                <Button className=\"m-2\" type=\"primary\" onClick={onStop}>Stop</Button>\r\n                {/* <Button className=\"m-2\" type=\"primary\" onClick={resetTranscript}>Reset</Button> */}\r\n                {/* <h1>{transcript}</h1> */}\r\n    \r\n                <h1>{props.toLern.length >= targetIndex-1 ? props.toLern[targetIndex].name : null}</h1>\r\n                <Button className=\"m-2\" type=\"primary\" onClick={()=>{onNext(-1)}}>Prev</Button>\r\n                <Button className=\"m-2\" type=\"primary\" onClick={showAnswer}>Show</Button>\r\n                <Button className=\"m-2\" type=\"primary\" onClick={()=>{onNext(1)}}>Next</Button>\r\n    \r\n                <h1>{answer ? props.toLern[targetIndex].name : null}</h1>\r\n            </div>\r\n        )\r\n    } else {\r\n        return <div>spin</div>\r\n    }\r\n    \r\n}\r\n\r\nexport default Trening","C:\\OSPanel\\domains\\DeployProject2\\src\\utils\\array-helpers.ts",[],"C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\TasksTree\\TaskTreeBrowserItem.tsx",[],"C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\ToDo\\TimeScale\\TaskItem\\TaskItemContainer.tsx",[],"C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\TasksTree\\TaskTreeForm\\Project\\ProjectForm.tsx",[],"C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Controllers\\ControllersContainer.tsx",[],"C:\\OSPanel\\domains\\DeployProject2\\src\\utils\\components\\Contact\\Contact.tsx",[],"C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\TasksTree\\TaskTreeForm\\Project\\OldProject\\OldProjectFormContainer.tsx",[],"C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\TasksTree\\TaskTreeForm\\Project\\NewProject\\NewProjectForm.tsx",[],"C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\TasksTree\\TaskTreeForm\\Project\\OldProject\\OldProjectForm.tsx",[],"C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\TasksTree\\TaskTreeForm\\Project\\BackendForm\\BackendFormContainer.tsx",[],"C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\TasksTree\\TaskTreeForm\\Project\\BackendForm\\BackendForm.tsx",[],"C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Controllers\\Controllers.tsx",["548","549","550","551"],"import { Button, Collapse, Empty } from 'antd'\r\nimport Modal from 'antd/lib/modal/Modal'\r\nimport { Field, Form, Formik, FormikProps } from 'formik'\r\nimport React, { ReactNode, useEffect, useState } from 'react'\r\nimport { ControllersPropsType } from './ControllersContainer'\r\nimport ControllerForm from './ControllerForm'\r\nimport { AntCheckbox, AntSelect } from '../../../../../../utils/Formik/CreateAntField'\r\nimport { ControllersType, ModelsType } from '../../../../../../api/projectAPI'\r\nimport {SelectOptionType} from './../../../../../../Types/types'\r\nimport { initialValues } from '../../../../../ToDo/ToDoMobile'\r\nimport Item from 'antd/lib/list/Item'\r\nimport ControllerMethods from './ControllerMethodsContainer'\r\nimport FullControllerMethodCode from './FullControllerMethodCode/FullControllerMethodCodeContainer'\r\n\r\nconst { Panel } = Collapse\r\n\r\nconst Controllers: React.FC<ControllersPropsType> = (props) => {\r\n    useEffect(() => {\r\n        props.getControllersList(props.backendId)\r\n\r\n        if (props.modelsList.length === 0) {\r\n            // console.log('getModelsList')\r\n            props.getModelsList(props.backendId)\r\n        }\r\n\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n    }, [props.controllersList])\r\n\r\n    const [isModalVisible, setIsModalVisible] = useState(false)\r\n\r\n    if (props.modelsList.length > 0) {\r\n        const modelsListOptions = props.modelsList.map( (item: ModelsType) => {\r\n            return ( {\r\n                name: item.name,\r\n                value: item.id\r\n            } )\r\n        })\r\n    }\r\n    \r\n\r\n    const addController = () => {\r\n        setIsModalVisible(true)\r\n    }\r\n\r\n    const handleOk = () => { setIsModalVisible(!isModalVisible) }\r\n    const handleCancel = () => { setIsModalVisible(!isModalVisible) }\r\n\r\n    const handleSubmit = (vals: any) => {\r\n        // console.log(vals)\r\n        // console.log(props)\r\n\r\n        props.createController({\r\n            ...vals,\r\n            backend_id: props.backendId\r\n        })\r\n    }\r\n\r\n    // console.log(props)\r\n\r\n    // if (props.controllersList.length > 0) {\r\n        return (\r\n            <div>\r\n                <div className=\"w-100 d-flex flex-row-reverse\">\r\n                    <Button className=\"mr-4 ml-auto mb-3\" type=\"primary\" onClick={addController}>Add Controller</Button>\r\n                </div>\r\n\r\n                {\r\n                    props.controllersList.length > 0 ?\r\n                    <Collapse defaultActiveKey={[]}>\r\n                        {props.controllersList.map((item: ControllersType) => {\r\n                            return (\r\n                                <Panel \r\n                                    key={item.name}\r\n                                    header={item.name} \r\n                                    // extra={[<div key={'any_'+item.name}>any</div>]}\r\n                                >\r\n                                    <ControllerItem item={item} modelsList={props.modelsList} updateController={props.updateController}/>\r\n                                </Panel>\r\n                            )\r\n                        })}\r\n                    </Collapse>\r\n                    : <Empty />\r\n                }\r\n\r\n                <Modal title=\"Create new Controller\" visible={isModalVisible} onOk={handleOk} onCancel={handleCancel}>\r\n                    <Formik\r\n                        // initialValues={initialModalValues}\r\n                        initialValues={{}}\r\n                        onSubmit={handleSubmit}\r\n                        enableReinitialize={true}\r\n                    >\r\n                        {ControllerForm}\r\n                    </Formik>\r\n                </Modal>\r\n            </div>\r\n        )\r\n    // } \r\n    // else {\r\n    //     return(\r\n    //         <>\r\n    //             <div className=\"w-100 d-flex flex-row-reverse\">\r\n    //                 <Button className=\"mr-4 ml-auto mb-3\" type=\"primary\" onClick={addController}>Add Controller</Button>\r\n    //             </div>\r\n    //             <div>No Data</div>\r\n    //         </>\r\n    //     ) \r\n    // }\r\n}\r\n\r\nexport default Controllers\r\n\r\ntype ControllerItemType = {\r\n    item: ControllersType,\r\n    modelsList: Array<ModelsType>,\r\n    updateController: (values: ControllersType, controllerId: number) => void\r\n}\r\n\r\nconst ControllerItem:React.FC<ControllerItemType> = (props) => {\r\n    console.log('ControllerItem props', props)\r\n\r\n    type initialFormValuesType = {\r\n        isResurce: boolean,\r\n        modelsOptions: Array<SelectOptionType>,\r\n        models: Array<number>\r\n    }\r\n\r\n    const getOptions = ():Array<SelectOptionType> => {\r\n        let options:Array<SelectOptionType> = []\r\n        for (let index = 0; index < props.modelsList.length; index++) {\r\n            const element = props.modelsList[index];\r\n            options.push({\r\n                name: element.name,\r\n                value: element.id ? Number(element.id) : 0\r\n            })\r\n        }\r\n        return options\r\n    }\r\n\r\n    const initialFormValues: initialFormValuesType = {\r\n        isResurce: props.item.isResource,\r\n        modelsOptions: getOptions(),\r\n        models: props.item.models.length>0 ? props.item.models.map( (i: ModelsType) => i.id ) : []\r\n    }\r\n\r\n    // console.log(props)\r\n\r\n    const onControllerInstanseSubmit = (values: any) => {\r\n        // console.log(values)\r\n\r\n        props.updateController({\r\n            models: values.models,\r\n            backend_id: props.item.backend_id,\r\n            folder: props.item.folder,\r\n            id: props.item.id,\r\n            isResource: values.isResurce,\r\n            model_id: props.item.model_id,\r\n            name: props.item.name,\r\n        }, props.item.id)\r\n    }\r\n\r\n    return(\r\n    <div key={props.item.name}>\r\n        <h4>{props.item.name}</h4>\r\n        <Collapse defaultActiveKey={[]} ghost>\r\n            <Panel header=\"Instanses\" key=\"instanse\">\r\n                <Formik\r\n                    initialValues={initialFormValues}\r\n                    // initialValues={{}}\r\n                    onSubmit={onControllerInstanseSubmit}\r\n                    enableReinitialize={true}\r\n                >\r\n                    {ControllerInstansesForm}\r\n                </Formik>\r\n                \r\n            </Panel>\r\n            <Panel header=\"Methods\" key=\"methods\">\r\n                <ControllerMethods controllerData={props.item}/>\r\n            </Panel>\r\n            <Panel header=\"Full code\" key=\"code\">\r\n                <FullControllerMethodCode controllerData={props.item}/>\r\n            </Panel>\r\n            <Panel header=\"Actions to create\" key=\"actions\">\r\n                {\r\n                    props.item.models[0] ?\r\n                    <h5>php artisan make:model {props.item.models[0].name} -mcr</h5>\r\n                    : <h5>No Model</h5>\r\n                }\r\n                <br/>\r\n                {\r\n                     props.item.models[0] ?\r\n                     <>\r\n                    <h5>php artisan make:controller {props.item.name} --resource</h5>\r\n                    <h5>php artisan make:model {props.item.models[0].name} --migration</h5>\r\n                    </>\r\n                    : <h5>No Model</h5>\r\n                }\r\n            </Panel>\r\n        </Collapse>\r\n    </div>\r\n    )\r\n}\r\n\r\nconst ControllerInstansesForm: ((props: FormikProps<{}>) => ReactNode) = (props) => {\r\n\r\n    // console.log(props.initialValues)\r\n\r\n    return (\r\n        <Form\r\n            className=\"form-container\"\r\n            onSubmit={props.handleSubmit}\r\n        >\r\n            <Field\r\n                component={AntCheckbox}\r\n                name=\"isResurce\"\r\n                type=\"checkbox\"\r\n                label=\"isResurce\"\r\n                submitCount={props.submitCount}\r\n                // onClick={submitBackEnd}\r\n                // onSelect={submitBackEnd}\r\n            />\r\n\r\n            <Field\r\n                component={AntSelect}\r\n                name=\"models\"\r\n                type=\"select\"\r\n                label=\"Including Models\"\r\n                mode=\"multiple\"\r\n                selectOptions={\r\n                    // @ts-ignore\r\n                    props.initialValues.modelsOptions\r\n                }\r\n                // onSelect = {onSelect}\r\n            />\r\n\r\n            <div className=\"submit-container\">\r\n                <button className=\"ant-btn ant-btn-primary\" type=\"submit\">\r\n                    Save\r\n                </button>\r\n            </div>\r\n\r\n        </Form>\r\n    )\r\n}\r\n\r\n\r\n","C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\ToDo\\TimeScale\\TaskItem\\TaskItem.tsx",[],"C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Controllers\\ControllerMethodsContainer.tsx",["552"],"import {connect} from 'react-redux'\r\nimport ControllerMethods from './ControllerMethods'\r\nimport { AppStateType } from '../../../../../../redux/store'\r\nimport { getControllersList, createControllerMethodsList, updateControllerMethodsList, getControllerMethodsList } from '../../../../../../redux/projectReducer'\r\nimport { ControllersType } from '../../../../../../api/projectAPI'\r\n// import { ModelsType } from '../../../.././../api/projectAPI'\r\n\r\ntype OwnControllerMethodsPropsType = {\r\n    controllerData: ControllersType\r\n}\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    getControllerMethodsList: ()=>void,\r\n    updateControllerMethodsList: (values: any, controllerMethodId: number)=>void,\r\n    createControllerMethodsList: (values: any)=> void,\r\n    // getControllersList: (backendId: number) => void\r\n    // createController: (values: any) => void,\r\n    // getModelsList: (backendId: number) => void,\r\n}\r\n\r\nexport type ControllerMethodsPropsType = MapPropsType & MapDispatchPropsType & OwnControllerMethodsPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        controllersList: state.projects.controllersList,\r\n        modelsList: state.projects.modelsList,\r\n        controllerMethodsList: state.projects.controllerMethodsList\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnControllerMethodsPropsType, AppStateType>(mapStateToProps, \r\n    {getControllerMethodsList, updateControllerMethodsList, createControllerMethodsList}) \r\n    (ControllerMethods)\r\n    \r\n\r\n","C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Controllers\\ControllerForm.tsx",["553","554","555","556","557","558"],"import { Form, Field, FormikProps } from 'formik'\r\nimport React, { ReactNode, useState, useEffect } from 'react'\r\nimport { AntCheckbox, AntInput, AntSelect } from '../../../../../../utils/Formik/CreateAntField'\r\nimport { validateRequired } from '../../../../../../utils/Formik/ValidateFields'\r\nimport {SelectOptionType} from '../../../../../../Types/types'\r\n\r\nconst ControllerForm: ((props: FormikProps<{}>) => ReactNode) = (props) => {\r\n    return (\r\n        <Form\r\n            className=\"form-container\"\r\n            onSubmit={props.handleSubmit}\r\n        >\r\n            <Field\r\n                component={AntInput}\r\n                name=\"name\"\r\n                type=\"text\"\r\n                label=\"Controller name\"\r\n                validate={validateRequired}\r\n                hasFeedback\r\n            />\r\n            <Field\r\n                component={AntInput}\r\n                name=\"folder\"\r\n                type=\"text\"\r\n                label=\"Model folder\"\r\n            />\r\n\r\n            {/* <Field\r\n                component={AntSelect}\r\n                name=\"models\"\r\n                type=\"select\"\r\n                label=\"Including Models\"\r\n                mode=\"multiple\"\r\n                selectOptions={modelsListOptions}\r\n                // onSelect = {onSelect}\r\n            /> */}\r\n\r\n            <div className=\"submit-container\">\r\n                <button className=\"ant-btn ant-btn-primary\" type=\"submit\">\r\n                    Save\r\n                </button>\r\n            </div>\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default ControllerForm\r\n\r\nconst modelsListOptions = [\r\n    {\r\n        name: 'Old',\r\n        value: 1\r\n    },\r\n    {\r\n        name: 'New',\r\n        value: 2\r\n    },\r\n    {\r\n        name: 'Load From SRC',\r\n        value: 3\r\n    },\r\n]","C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Controllers\\FullControllerMethodCode\\FullControllerMethodCodeContainer.tsx",["559"],"import {connect} from 'react-redux'\r\nimport FullControllerMethodCode from './FullControllerMethodCode'\r\nimport { AppStateType } from '../../../../../../../redux/store'\r\nimport { getControllersList, createControllerMethodsList, updateControllerMethodsList, getControllerMethodsList } from '../../../../../../../redux/projectReducer'\r\nimport { ControllersType } from '../../../../../../../api/projectAPI'\r\n// import { ModelsType } from '../../../.././../api/projectAPI'\r\n\r\ntype OwnFullControllerMethodCodePropsType = {\r\n    controllerData: ControllersType\r\n}\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    getControllerMethodsList: ()=>void,\r\n    updateControllerMethodsList: (values: any, controllerMethodId: number)=>void,\r\n    createControllerMethodsList: (values: any)=> void,\r\n    // getControllersList: (backendId: number) => void\r\n    // createController: (values: any) => void,\r\n    // getModelsList: (backendId: number) => void,\r\n}\r\n\r\nexport type FullControllerMethodCodePropsType = MapPropsType & MapDispatchPropsType & OwnFullControllerMethodCodePropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        controllersList: state.projects.controllersList,\r\n        modelsList: state.projects.modelsList,\r\n        controllerMethodsList: state.projects.controllerMethodsList\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnFullControllerMethodCodePropsType, AppStateType>(mapStateToProps, \r\n    {getControllerMethodsList, updateControllerMethodsList, createControllerMethodsList}) \r\n    (FullControllerMethodCode)\r\n    \r\n\r\n","C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Instanses\\InstansesForm.tsx",[],"C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Models\\ModelsContainer.tsx",[],"C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\ToDo\\ToDoActions\\ToDoActionsRouter.tsx",[],"C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Controllers\\ControllerMethods.tsx",["560","561","562","563"],"import { Button, List, Modal } from 'antd'\r\nimport { Formik } from 'formik'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { ControllerMethodsType, rest_typeType } from '../../../../../../api/ControllerMethodsAPI'\r\nimport { ModelsType } from '../../../../../../api/projectAPI'\r\nimport { ControllerMethodsPropsType } from './ControllerMethodsContainer'\r\nimport ControllerMethodsCode from './ControllerMethodsForm/ControllerMethodsCode'\r\nimport ControllerMethodsForm, { RequestType } from './ControllerMethodsForm/ControllerMethodsForm'\r\n\r\nexport type initialValuesType = {\r\n    modelsList: Array<ModelsType>,\r\n    controllerMethodsList: Array<ControllerMethodsType>,\r\n    body_actions?: string\r\n    name: string,\r\n    rest_type?: rest_typeType,\r\n    request?: Array<RequestType>,\r\n    response?: any,\r\n    id?: number\r\n}\r\n\r\nconst ControllerMethods: React.FC<ControllerMethodsPropsType> = (props) => {\r\n\r\n    let emptyInitialValues: initialValuesType = {\r\n        modelsList: props.modelsList,\r\n        name: '',\r\n        controllerMethodsList: props.controllerMethodsList\r\n    }\r\n\r\n    const [methodData, setMethodData] = useState<ControllerMethodsType | null>(null)\r\n    const [initialValues, setinitialValues] = useState<initialValuesType>(emptyInitialValues)\r\n    const [modalTitle, setModalTitle] = useState<string>('Controller Method form')\r\n\r\n    useEffect(() => {\r\n        if (props.controllerMethodsList.length === 0) {\r\n            props.getControllerMethodsList()\r\n        }\r\n    }, [])\r\n\r\n    // console.log('props.controllerMethodsList', props.controllerMethodsList)\r\n        \r\n    useEffect(() => {\r\n        console.log('useEffect, setinitialValues for: ', props.controllerData.id)\r\n        const newControllerMethodsList = props.controllerMethodsList.filter(item=> item.controller_id === props.controllerData.id)\r\n        console.log('newControllerMethodsList', newControllerMethodsList)\r\n        setinitialValues({\r\n            ...initialValues,\r\n            controllerMethodsList: newControllerMethodsList\r\n        })\r\n        // emptyInitialValues.controllerMethodsList = props.controllerMethodsList\r\n    }, [props.controllerMethodsList])\r\n\r\n    const [isModalVisible, setIsModalVisible] = useState(false)\r\n\r\n    const showMethod = (id: number) => {\r\n        const target = props.controllerMethodsList.filter( (item) => item.id === id)[0]\r\n        console.log('target of method', target)\r\n        setModalTitle('Edit Controller Method '+ target.name)\r\n        setMethodData({\r\n            body_actions: target.body_actions,\r\n            controller_id: target.controller_id,\r\n            id: id,\r\n            isMiddleware: false,\r\n            name: target.name,\r\n            request: target.request,\r\n            response: target.response,\r\n            rest_type: target.rest_type\r\n        })\r\n        setIsModalVisible(true)\r\n        setinitialValues({\r\n            ...initialValues,\r\n            name: target.name,\r\n            request: target.request ? JSON.parse(target.request) : [],\r\n            response: target.response ? JSON.parse(target.response) : undefined,\r\n            body_actions: target.body_actions,\r\n            rest_type: target.rest_type,\r\n            id: target.id\r\n        })\r\n    }\r\n\r\n    const addMethod = () => {\r\n        setinitialValues(emptyInitialValues)\r\n        setModalTitle('Controller Method form')\r\n        setIsModalVisible(true)\r\n    }\r\n\r\n    const onOk = () => {\r\n        console.log('onOk')\r\n        setIsModalVisible(false)\r\n    }\r\n\r\n    const onHandleSubmit = (values: initialValuesType) => {\r\n        console.log('onHandleSubmit values:',values)\r\n        console.log('props: ', props)\r\n\r\n        const controllerMethods: ControllerMethodsType = {\r\n            body_actions: values.body_actions? values.body_actions : '',\r\n            controller_id: props.controllerData.id,\r\n            id: values.id ? values.id : 0,\r\n            isMiddleware: false,\r\n            name: values.name,\r\n            request: JSON.stringify(values.request),\r\n            response: JSON.stringify(values.response),\r\n            rest_type: values.rest_type ? values.rest_type : null\r\n        }\r\n\r\n        console.log(controllerMethods)\r\n\r\n        setMethodData(controllerMethods)\r\n\r\n        if(values.id) {\r\n            console.log('UPDATE: ', controllerMethods)\r\n            props.updateControllerMethodsList(controllerMethods, values.id)\r\n        } else {\r\n            console.log('CREATE: ', controllerMethods)\r\n            props.createControllerMethodsList(controllerMethods)\r\n        }\r\n    }\r\n\r\n    console.log('ControllerMethods props', props)\r\n    console.log('ControllerMethods initialValues: ', initialValues)\r\n\r\n    return (\r\n        <>\r\n            <div className=\"w-100 d-flex flex-row-reverse\">\r\n                <Button type=\"primary\" onClick={addMethod}>Add Method</Button>\r\n            </div>\r\n\r\n            {\r\n            // props.controllerMethodsList.length !== 0 ?\r\n                <>\r\n                    <List\r\n                        className=\"mt-2\"\r\n                        header={<div>Controller Methods List:</div>}\r\n                        // footer={<div>Footer</div>}\r\n                        bordered\r\n                        dataSource={initialValues.controllerMethodsList}\r\n                        renderItem={item => (\r\n                            <List.Item\r\n                                actions={[<a key=\"list-loadmore-edit\" onClick={()=>{showMethod(item.id)}}>edit</a>, <a key=\"list-loadmore-more\">code</a>]}\r\n                            >\r\n                                {/* {item.name} */}\r\n                                <div className=\"row w-100\">\r\n                                    <div className=\"col-6\">{item.name}</div>\r\n                                    <div className=\"col-3\">{item.rest_type}</div>\r\n                                </div>\r\n                            </List.Item>\r\n                        )}\r\n                    />\r\n                </>\r\n                // :\r\n                // null\r\n            }\r\n\r\n            <Modal title={modalTitle} visible={isModalVisible} onOk={onOk} onCancel={() => { setIsModalVisible(false) }} width={1000}>\r\n                <Formik\r\n                    initialValues={initialValues}\r\n                    onSubmit={onHandleSubmit}\r\n                    enableReinitialize={true}\r\n                >\r\n                    {ControllerMethodsForm}\r\n                </Formik>\r\n\r\n                <ControllerMethodsCode methodData={methodData} controllerData={props.controllerData}/>\r\n\r\n            </Modal>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ControllerMethods","C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Controllers\\FullControllerMethodCode\\FullControllerMethodCode.tsx",["564","565","566"],"import React, { useEffect, useState } from 'react'\r\nimport { ControllerMethodsType } from '../../../../../../../api/ControllerMethodsAPI'\r\nimport { ControllersType } from '../../../../../../../api/projectAPI'\r\nimport { tab } from '../../../../../Code/Model/ModelCode'\r\nimport { FullControllerMethodCodePropsType } from './FullControllerMethodCodeContainer'\r\nimport ControllerMethodsCode from './../ControllerMethodsForm/ControllerMethodsCode'\r\n\r\nconst FullControllerMethodCode:React.FC<FullControllerMethodCodePropsType> = (props) => {\r\n    const [methods, setMethods] = useState<Array<ControllerMethodsType>>()\r\n    useEffect(() => {\r\n        if (props.controllerMethodsList.length === 0) {\r\n            props.getControllerMethodsList()\r\n        }\r\n    }, [])\r\n    useEffect(() => {\r\n        setMethods(props.controllerMethodsList.filter(item=> item.controller_id === props.controllerData.id))\r\n    }, [props.controllerMethodsList])\r\n\r\n    console.log(props)\r\n    console.log(methods)\r\n\r\n    return(\r\n        <div className=\"text-left\">\r\n            <code>{tab(0, '<?php')}</code><br/>\r\n            <br/>\r\n            <code>{tab(0, 'namespace App\\\\Http\\\\Controllers;')}</code><br/>\r\n            <br/>\r\n            <code>{tab(0, 'use App\\\\'+props.controllerData.models[0].name+';')}</code><br/>\r\n            <code>{tab(0, 'use Illuminate\\\\Http\\\\Request;')}</code><br/>\r\n            <br/>\r\n            <code>{tab(0, 'class '+props.controllerData.name+' extends Controller')}</code><br/>\r\n            <code>{tab(0, '{')}</code><br/>\r\n            <code>{tab(1, '//...')}</code><br/>\r\n            {\r\n                methods?.map(method => {\r\n                    return (\r\n                        <ControllerMethodsCode\r\n                            methodData={method}\r\n                            controllerData={props.controllerData}\r\n                        />\r\n                    ) \r\n                })\r\n            }\r\n            <code>{tab(0, '}')}</code><br/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FullControllerMethodCode","C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Models\\Models.tsx",["567","568","569","570","571"],"import { Button, Collapse, Empty  } from 'antd'\r\nimport Modal from 'antd/lib/modal/Modal'\r\nimport { Field, Form, Formik, FormikProps, FormikValues } from 'formik'\r\nimport React, { ReactNode, useEffect, useState } from 'react'\r\nimport { FieldType, ModelsType } from '../../../../../../api/projectAPI'\r\nimport { AntCheckbox, AntInput } from '../../../../../../utils/Formik/CreateAntField'\r\nimport { validateRequired } from '../../../../../../utils/Formik/ValidateFields'\r\nimport FieldList from './FieldListContainer'\r\nimport FieldForm from './FieldForm'\r\nimport { ModelsPropsType } from './ModelsContainer'\r\nimport ModelForm from './ModelForm'\r\nimport CodeModalContainer from '../../../../Code/CodeModalContainer'\r\nimport { useDispatch } from 'react-redux'\r\nimport {createController as createControllerThunk } from './../../../../../../redux/projectReducer'\r\n\r\nconst { Panel } = Collapse\r\n\r\nconst Models: React.FC<ModelsPropsType> = (props) => {\r\n    useEffect( ()=>{\r\n        props.getModelsList(props.backendId)\r\n    }, [])\r\n\r\n    const [isModalVisible, setIsModalVisible] = useState(false)\r\n    const [isCodeVisible, setIsCodeVisible] = useState(false)\r\n\r\n    const addModel = () => {\r\n        console.log('addModel')\r\n        setIsModalVisible(!isModalVisible)\r\n    }\r\n\r\n    const handleOk = () => {setIsModalVisible(!isModalVisible)}\r\n    const handleCancel = () => {setIsModalVisible(!isModalVisible)}\r\n\r\n    const handleSubmit = (vals: any) => {\r\n        console.log(vals)\r\n        console.log(props)\r\n        props.createModel({\r\n            ...vals,\r\n            backend_id: props.backendId\r\n        })\r\n    }\r\n\r\n    const callback = (key:any) => {\r\n        console.log(key)\r\n        console.log(props.modelsList)\r\n        console.log(props.modelsList.filter(item => item.id === Number(key[0]))[0])\r\n        const target = props.modelsList.filter(item => item.id === Number(key[0]))[0]\r\n        if (target) {\r\n            props.setCodeTarget(\r\n                target.name,\r\n                {\r\n                    db: target.db, \r\n                    soft_delete: target.soft_delete\r\n                }\r\n            )\r\n        }\r\n        \r\n    }\r\n\r\n    return(\r\n        <>\r\n            <div className=\"w-100 d-flex flex-row-reverse\">\r\n                <Button className=\"mr-4 ml-auto mb-3\" type=\"primary\" onClick={addModel}>Add Model</Button>\r\n            </div>\r\n\r\n            <Collapse defaultActiveKey={[]} onChange={callback}>\r\n                {\r\n                    props.modelsList ?\r\n                    props.modelsList.map(item => {\r\n                        return(\r\n                            <Panel header={item.name} key={item.id ? item.id.toString() : 'null'}>\r\n                                <ModelFormItem modelItem={item} changePanel={props.changePanel} updateModel={props.updateModel} />\r\n                            </Panel>\r\n                        )\r\n                    })\r\n                    : <div>No DATA</div>\r\n                }\r\n            </Collapse>\r\n            <Modal title=\"Create new Model\" visible={isModalVisible} onOk={handleOk} onCancel={handleCancel}>\r\n                <Formik\r\n                    // initialValues={initialModalValues}\r\n                    initialValues={{}}\r\n                    onSubmit={handleSubmit}\r\n                    enableReinitialize={true}\r\n                >\r\n                    {ModelForm}\r\n                </Formik>\r\n            </Modal>\r\n\r\n            <CodeModalContainer />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Models\r\n\r\ntype ModelFormItemPropsType = {\r\n    modelItem: ModelsType,\r\n    updateModel: (values: ModelsType, modelId: number) => void,\r\n    changePanel: (closeKey: string, openKey: Array<string>) => void,\r\n}\r\n\r\nconst ModelFormItem: React.FC<ModelFormItemPropsType> = (props) => {\r\n    console.log(props)\r\n    let fields: Array<FieldType>\r\n    if (Array.isArray(props.modelItem.fields)) {\r\n        fields = props.modelItem.fields\r\n    } else {\r\n        fields = JSON.parse(props.modelItem.fields)\r\n    }\r\n\r\n    type fieldsDataType = {[name: string]: string}\r\n    let fieldsdata: Array<FieldType> = []\r\n    let fieldInit:fieldsDataType = {}\r\n    if (fields) {\r\n        for (let index = 0; index < fields.length; index++) {\r\n            const field = fields[index];\r\n            fieldsdata.push(field)\r\n            fieldInit['field_'+field.name] = field.type\r\n        }\r\n    }\r\n\r\n    const handleSubmit = (formValues:any) => {\r\n        const oldValue = {...props.modelItem, fields: fieldsdata, ...fieldInit}\r\n        console.log('formValues: ', formValues)\r\n\r\n        // compere model\r\n        let ismodelChange = false\r\n        if ( \r\n            oldValue.name !== formValues.name\r\n            || oldValue.db !== formValues.db\r\n            || oldValue.soft_delete !== formValues.soft_delete\r\n            ) {\r\n            ismodelChange = true\r\n        }\r\n\r\n        console.log(props.modelItem)\r\n\r\n        const newFieldData: ModelsType = {\r\n            // ...props.modelItem,\r\n            fields: JSON.stringify(formValues.fields),\r\n            name: formValues.name,\r\n            backend_id: props.modelItem.backend_id,\r\n            id: props.modelItem.id,\r\n            db: formValues.db,\r\n            soft_delete: formValues.soft_delete\r\n        }\r\n\r\n        console.log(newFieldData)\r\n        props.updateModel(newFieldData, props.modelItem.id ? props.modelItem.id : 0)\r\n    }\r\n\r\n    console.log({...props.modelItem, fields: fieldsdata, ...fieldInit})\r\n    console.log(props.changePanel)\r\n    return(\r\n        <Formik\r\n            enableReinitialize={true}\r\n            initialValues={ {...props.modelItem, fields: fieldsdata, ...fieldInit, changePanel: props.changePanel} }\r\n            onSubmit={handleSubmit}\r\n            own={props.changePanel}\r\n        >\r\n            {ModelView}\r\n        </Formik>\r\n    )\r\n}\r\n\r\ntype OwnModelViewPropsType = {\r\n    own: any\r\n}\r\n\r\nconst ModelView: ((props: OwnModelViewPropsType & FormikProps<FormikValues>) => ReactNode) = (props) => {\r\n    const [initialFieldValues, setInitialFieldValues] = useState(props.initialValues)\r\n\r\n    type InitialModalValuesType = {\r\n        newFieldName: string,\r\n        newFieldType: string,\r\n        isNulleble: boolean,\r\n        isPrimary: boolean,\r\n        isNew: boolean,\r\n        id?: number,\r\n        fieldParam?: string,\r\n    }\r\n    const emptyInitialModalValues: InitialModalValuesType = {\r\n        newFieldName: '',\r\n        newFieldType: '',\r\n        isNulleble: false,\r\n        isPrimary: false,\r\n        isNew: true,\r\n        fieldParam: '',\r\n    }\r\n\r\n    const [initialModalValues, setInitialModalValues] = useState<InitialModalValuesType>(emptyInitialModalValues)\r\n    const [initialValues2 , setInitialValues2] = useState(props.initialValues)\r\n\r\n    useEffect( ()=>{\r\n    }, [initialModalValues])\r\n\r\n    const onChange = (val:any) => {\r\n        console.log('onChange in Models')\r\n        setIsDataChanged(true)\r\n    }\r\n\r\n    const openModalToAddField = (target: any | null) => {\r\n        console.log('openModalToAddField', target)\r\n\r\n        if (!target.isNew) {\r\n            console.log('ОБНУЛЯЕМ ФОРМУ', target)\r\n            setInitialModalValues({\r\n                newFieldName: target.fieldName,\r\n                newFieldType: target.fieldType,\r\n                isNulleble: target.isNulleble,\r\n                isPrimary: target.isPrimary,\r\n                isNew: false,\r\n                id: target.fieldId,\r\n                fieldParam: target.fieldParam\r\n            })\r\n        } else {\r\n            setInitialModalValues({...emptyInitialModalValues})\r\n            console.log('СОЗДАЕМ НОВЫЙ ФИЛД', initialModalValues)\r\n            \r\n        }\r\n        \r\n        setIsModalVisible(true)\r\n    }\r\n\r\n    const [isDataChanged, setIsDataChanged] = useState(false)\r\n\r\n    const [isModalVisible, setIsModalVisible] = useState(false)\r\n\r\n    const handleOk = () => {\r\n        console.log('handleOk')\r\n        setIsModalVisible(false)\r\n    }\r\n\r\n    const handleCancel = () => {\r\n        console.log('handleCancel')\r\n        setInitialModalValues(emptyInitialModalValues)\r\n        console.log(initialModalValues)\r\n        setIsModalVisible(false)\r\n    }\r\n\r\n    const deleteField = (fieldId: number) => {\r\n        console.log('deleteField', fieldId)\r\n        console.log(props)\r\n        \r\n        // @ts-ignore\r\n        const fields = initialFieldValues.fields.filter( field => field.id !== fieldId ) \r\n        console.log(fields)\r\n        setInitialValues2( {...props.initialValues, fields: fields} )\r\n        setInitialFieldValues( {...initialFieldValues, fields: fields} )\r\n        props.setValues({\r\n            ...props.values,\r\n            fields: fields\r\n        })\r\n        props.handleSubmit()\r\n    }\r\n\r\n    const handleSubmit = (modalFieldFormValues:any, actions: any) => {\r\n        console.log('handleSubmit', modalFieldFormValues)\r\n        if (!modalFieldFormValues.isNew) {\r\n            let isUpdate = false\r\n            // @ts-ignore\r\n            const newFields = initialFieldValues.fields.map( (item) => {\r\n                if (modalFieldFormValues.id === item.id) {\r\n                    if (item.name !== modalFieldFormValues.newFieldName || \r\n                        item.type !== modalFieldFormValues.newFieldType ||\r\n                        item.isNulleble !== modalFieldFormValues.isNulleble ||\r\n                        item.isPrimary !== modalFieldFormValues.isPrimary ||\r\n                        item.fieldParam !== modalFieldFormValues.fieldParam\r\n                        ) {\r\n                        isUpdate = true\r\n                        return {\r\n                            description: \"\",\r\n                            id: modalFieldFormValues.id,\r\n                            name: modalFieldFormValues.newFieldName,\r\n                            isPrimary: modalFieldFormValues.isPrimary,\r\n                            type: modalFieldFormValues.newFieldType,\r\n                            isNulleble: modalFieldFormValues.isNulleble,\r\n                            fieldParam: modalFieldFormValues.fieldParam\r\n                        }\r\n                    } else {\r\n                        return item\r\n                    }\r\n                }\r\n                return item\r\n            } )\r\n\r\n            if (isUpdate) {\r\n                setInitialValues2( {...props.initialValues, fields: newFields} )\r\n                setInitialFieldValues( {...initialFieldValues, fields: newFields} )\r\n                console.log('NEED DML!!!!', props)\r\n                props.setValues({\r\n                    ...props.values,\r\n                    fields: newFields\r\n                })\r\n                props.handleSubmit()\r\n            }\r\n        } else {\r\n            console.log('NEW FIELD')\r\n            // @ts-ignore\r\n            let newFields = initialFieldValues.fields\r\n            newFields.push({               \r\n                // @ts-ignore\r\n                id: props.initialValues.fields.length+1,\r\n                name: modalFieldFormValues.newFieldName,\r\n                isPrimary: modalFieldFormValues.isPrimary,\r\n                type: modalFieldFormValues.newFieldType,\r\n                isNulleble: modalFieldFormValues.isNulleble,\r\n                fieldParam: modalFieldFormValues.fieldParam,\r\n                description: \"\",\r\n            })\r\n            setInitialValues2( {...props.initialValues, fields: newFields} )\r\n\r\n            console.log('NEED DML!!!!', props)\r\n            props.setValues({\r\n                ...props.values,\r\n                fields: newFields\r\n            })\r\n            props.handleSubmit()\r\n        }\r\n        actions.resetForm()\r\n        setInitialModalValues(modalFieldFormValues)\r\n    }\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const createController = () => {\r\n\r\n        // console.log('createController: ', props)\r\n        let newController = {\r\n            name: props.initialValues.name+'Controller',\r\n            models: JSON.stringify([props.initialValues.id]) ,\r\n            backend_id: props.initialValues.backend_id,\r\n            isResource: true\r\n        }\r\n        // console.log('newController', newController)\r\n        props.initialValues.changePanel('', ['3'])\r\n        dispatch(createControllerThunk(newController))\r\n    }\r\n\r\n    return(\r\n        <>\r\n        <Form\r\n            className=\"form-container mt-2\"\r\n            onSubmit={props.handleSubmit}\r\n        >\r\n            <Field\r\n                component={AntInput}\r\n                name=\"name\"\r\n                type=\"text\"\r\n                label=\"Name\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n                onChange={onChange}\r\n            />\r\n            <Field\r\n                component={AntInput}\r\n                name=\"folder\"\r\n                type=\"text\"\r\n                label=\"Folder\"\r\n                submitCount={props.submitCount}\r\n                onChange={onChange}\r\n            />\r\n\r\n            <Field\r\n                component={AntCheckbox}\r\n                name=\"soft_delete\"\r\n                type=\"checkbox\"\r\n                label=\"Soft delete\"\r\n                onChange={onChange}\r\n                submitCount={props.submitCount}\r\n            />\r\n\r\n            <Field\r\n                component={AntCheckbox}\r\n                name=\"db\"\r\n                type=\"checkbox\"\r\n                label=\"Use DB\"\r\n                onChange={onChange}\r\n                submitCount={props.submitCount}\r\n            />\r\n\r\n            {isDataChanged ?\r\n                <div className=\"submit-container\">\r\n                    <button className=\"ant-btn ant-btn-primary\" type=\"submit\">\r\n                        Save\r\n                    </button>\r\n                </div>\r\n            : null}\r\n\r\n            <div className=\"w-100 d-flex flex-row mt-2 mb-2\">\r\n                <h5>Field List:</h5>\r\n                {/* <Button type=\"primary\" className=\"mr-1 ml-auto\" onClick={showCode} >Code</Button> */}\r\n                <Button className=\"mr-4 ml-auto\" type=\"primary\" onClick={()=>{openModalToAddField({isNew: true})}}>\r\n                    Add Field\r\n                </Button>\r\n            </div>\r\n            \r\n            <FieldList \r\n                fields={\r\n                // @ts-ignore\r\n                initialValues2.fields\r\n                }\r\n                openModalToAddField={openModalToAddField}\r\n                deleteField={deleteField}\r\n                targetName='user'\r\n                targetData={[]}\r\n            />\r\n\r\n            <div className=\"w-100 d-flex flex-row mt-5 mb-2\">\r\n                <h5>Methods:</h5><Button className=\"mr-4 ml-auto\" type=\"primary\">Add method</Button>\r\n            </div>\r\n\r\n            <div className=\"w-100 d-flex flex-row mt-5 mb-2\">\r\n                \r\n                <h5 className=\"mr-auto ml-auto\">Create : {\r\n                    // @ts-ignore\r\n                    props.initialValues.name\r\n                }Controller\r\n                <Button onClick={createController} className=\"ml-4\" type=\"primary\">Create</Button>\r\n                </h5>\r\n            </div>\r\n        </Form>\r\n\r\n        <Modal title=\"New Field Form\" visible={isModalVisible} onOk={handleOk} onCancel={handleCancel}>\r\n            <Formik\r\n                initialValues={initialModalValues}\r\n                onSubmit={handleSubmit}\r\n                enableReinitialize={true}\r\n            >\r\n                {FieldForm}\r\n            </Formik>\r\n        </Modal>\r\n\r\n        </>\r\n    )\r\n}","C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Controllers\\ControllerMethodsForm\\ControllerMethodsCode.tsx",["572","573"],"import React from 'react'\r\nimport { ControllerMethodsType } from '../../../../../../../api/ControllerMethodsAPI'\r\nimport { ControllersType } from '../../../../../../../api/projectAPI'\r\nimport { tab } from '../../../../../Code/Model/ModelCode'\r\nimport { ResponreItemsType, ResponseType } from './ControllerMethodsForm'\r\n\r\ntype ControllerMethodsCodePropsType = {\r\n    methodData: ControllerMethodsType | null,\r\n    controllerData: ControllersType\r\n}\r\n\r\nconst ControllerMethodsCode: React.FC<ControllerMethodsCodePropsType> = (props) => {\r\n\r\n    let request: Array<any> = []\r\n    if (props.methodData?.request) {\r\n        // console.log(JSON.parse(props.methodData?.request))\r\n        request = JSON.parse(props.methodData?.request)\r\n    }\r\n\r\n    console.log('ControllerMethodsCode props:',props)\r\n\r\n    return (\r\n        <div>\r\n            {/* <h5>ControllerMethodsCode:</h5> */}\r\n            <code>{tab(1, '/**')}</code><br />\r\n            <code>{tab(1, '* Descriptions')}</code><br />\r\n            {request.map(item => {\r\n                return (\r\n                    <div key={item.name}>\r\n                        <code key={item.name}>{tab(1, '* @param  \\\\Illuminate\\\\Http\\\\' + item.type + '  $' + item.name)}</code><br />\r\n                    </div>\r\n                )\r\n            })}\r\n            <code>{tab(1, '* @return \\\\Illuminate\\\\Http\\\\Response')}</code><br />\r\n            <code>{tab(1, '*/')}</code><br />\r\n\r\n            <code>{tab(1, 'public function ' + props.methodData?.name + '(')}</code>\r\n\r\n            {request.length > 0 ?\r\n                request.map( (item, index: number) => {\r\n                    // return (\r\n                    //     <code key={item.name}>{tab(0, '' + item.type + '  $' + item.name)}</code>\r\n                    // )\r\n                    if (index > 0 ) {\r\n                        return (\r\n                            <code key={item.name}>{tab(0, ', ' + item.type + '  $' + item.name)}</code>\r\n                        )\r\n                    } else {\r\n                        return (\r\n                            <code key={item.name}>{tab(0, '' + item.type + '  $' + item.name)}</code>\r\n                        )\r\n                    }\r\n                })\r\n                :\r\n                null\r\n            }\r\n\r\n            <code>{tab(0, ')')}</code><br />\r\n            <code>{tab(1, '{')}</code><br />\r\n\r\n            \r\n            {/* ПОЛУЧАЕМ BODY */}\r\n            {\r\n                props.methodData !== null && props.methodData.body_actions?\r\n                <><br />\r\n                <pre className=\"ml-5\">{props.methodData?.body_actions}</pre>\r\n                </>\r\n                : <><code>{tab(2, '//...')}</code><br /></>\r\n            }\r\n\r\n\r\n            {/* <code>{tab(2, 'return response()->json([')}</code><br /> */}\r\n\r\n            {/* Получаем RESPONSE */}\r\n            {/* <code>{tab(3, getResponse( props.methodData !== null ? JSON.parse(props.methodData.response) : null))}</code><br />  */}\r\n\r\n            {\r\n                 props.methodData !== null && props.methodData.response?\r\n                getResponse(2, props.methodData !== null ? JSON.parse(props.methodData.response) : null )\r\n                : <><code>{tab(2, '//...')}</code><br /></>\r\n            }\r\n\r\n\r\n            {/* <code>{tab(2, '], 200);')}</code><br /> */}\r\n\r\n            {/* { props.methodData !== null ? getResponse( JSON.parse(props.methodData.response)) : null} */}\r\n\r\n            <code>{tab(1, '}')}</code><br />\r\n\r\n            {/* <li>Какой код возвращает метод,</li> */}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ControllerMethodsCode\r\n\r\nconst getResponse = (tab: number, responseData: ResponseType) => {\r\n    switch (responseData.type) {\r\n        case 'method':\r\n            return getMetodResponse(tab, responseData)\r\n    \r\n        case 'Response':\r\n            const responseArray: Array<JSX.Element> = getResponseResponse(tab, responseData)\r\n            return responseArray\r\n        default:\r\n            break;\r\n    }\r\n}\r\n\r\nconst getMetodResponse = (tabIndex: number, response: ResponseType) => {\r\n    const methodName = response.methodName\r\n    console.log('methodName: ', methodName)\r\n    // return <>{'return self::'+methodName+'();'}</>\r\n    return [<><code>{tab(tabIndex, 'return self::'+methodName+'();')}</code><br/></>]\r\n}\r\n\r\nconst getResponseResponse = (tabIndex: number, response: ResponseType) => {\r\n    console.log('response: ', response)\r\n    let responseBlock: Array<JSX.Element> = []\r\n    responseBlock.push(<><code>{tab(tabIndex, 'return response()->json([')}</code><br /></>)\r\n\r\n    if (response.responseItems) {\r\n        console.log(response.responseItems)\r\n        response.responseItems.map( (item: ResponreItemsType, index) => {          \r\n            // if (index > 0) {\r\n            //     responseBlock.push(<><code>{tab(tabIndex, '\"'+item.key+'\"=> $'+item.variable)}</code><br/></>)\r\n            // } else {\r\n                responseBlock.push(<><code>{tab(tabIndex+1, '\"'+item.key+'\"=> $'+item.variable+', ')}</code><br/></>)\r\n            // }\r\n        })\r\n    } else {\r\n        console.log(response.responseItems)\r\n    }\r\n\r\n    responseBlock.push(<><code>{tab(tabIndex, '], 200);')}</code><br /></>)\r\n    console.log('responseBlock: ', responseBlock)\r\n    return responseBlock\r\n}\r\n\r\nconst getBody = (tabIndex: number, body: string) => {\r\n    return <><pre>{ tab( tabIndex, body) }</pre><br /></>\r\n}","C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Controllers\\ControllerMethodsForm\\ControllerMethodsForm.tsx",["574","575","576","577","578","579","580"],"import { Form, Field, FormikProps } from 'formik'\r\nimport React, { ReactNode, useState, useEffect } from 'react'\r\nimport { AntCheckbox, AntInput, AntSelect } from '../../../../../../../utils/Formik/CreateAntField'\r\nimport { validateRequired } from '../../../../../../../utils/Formik/ValidateFields'\r\nimport {SelectOptionType} from '../../../../../../../Types/types'\r\nimport { Button, Checkbox, Input, TreeSelect } from 'antd'\r\nimport { ModelsType } from '../../../../../../../api/projectAPI'\r\nimport RequestItem from './RequestItem'\r\nimport ResponseItem from './ResponseItem'\r\nimport TextArea from 'antd/lib/input/TextArea'\r\n\r\nexport type RequestType = {\r\n    label: string,\r\n    type: string,\r\n    name: string,\r\n    id: number\r\n}\r\n\r\nexport type ResponreItemsType = {\r\n    key: string,\r\n    variable: string,\r\n}\r\n\r\nexport type ResponseType = {\r\n    type: 'Response' | 'method' | '',\r\n    methodId?: number,\r\n    methodName?: string,\r\n    responseItems?: Array<ResponreItemsType>\r\n}\r\n\r\nconst ControllerMethodsForm: ((props: FormikProps<{}>) => ReactNode) = (props) => {\r\n    // @ts-ignore\r\n    const [request, setRequest] = useState<Array<RequestType>>(props.initialValues.request !== undefined ? props.initialValues.request : [])\r\n    // @ts-ignore\r\n    const [isRequest, setIsRequest] = useState(props.initialValues.request && props.initialValues.request.length !== 0 ? true : false)\r\n\r\n    // @ts-ignore\r\n    const [response, setResponse] = useState<ResponseType | undefined>(props.initialValues.response)\r\n    // @ts-ignore\r\n    const [isResponse, setIsResponse] = useState(props.initialValues.response? true : false)\r\n    console.log('isResponse: ', isResponse)\r\n\r\n    // @ts-ignore\r\n    const [body_actions, setBody_actions] = useState<string>(props.initialValues.body_actions)\r\n    // @ts-ignore\r\n    const [isBody_actions, setIsBody_actions] = useState(props.initialValues.body_actions ? true : false)\r\n    \r\n    const [value, setValue] = useState(undefined)\r\n\r\n    useEffect( () => {\r\n        // @ts-ignore\r\n        // console.log('!!!!!!!!!!!!useEffect ControllerMethodsForm', props.initialValues.response.responseItems)\r\n        // @ts-ignore\r\n        setRequest(props.initialValues.request !== undefined ? props.initialValues.request : [])\r\n        // @ts-ignore\r\n        setIsRequest(props.initialValues.request && props.initialValues.request.length !== 0 ? true : false)\r\n        // @ts-ignore\r\n        setResponse(props.initialValues.response ? props.initialValues.response : undefined)\r\n        // @ts-ignore\r\n        setBody_actions(props.initialValues.body_actions ? props.initialValues.body_actions : '')\r\n        // @ts-ignore\r\n        setIsBody_actions(props.initialValues.body_actions ? true : false)\r\n    },[props.initialValues])\r\n\r\n    const onRequest = (val: any) => {\r\n        console.log(val.target.checked)\r\n        console.log(request)\r\n\r\n        if (val.target.checked) {\r\n            if (request!==undefined && request.length === 0) {\r\n\r\n            }\r\n        }\r\n\r\n        if (request!==undefined && request.length === 0) {\r\n            console.log('onAddRequest')\r\n            onAddRequest()\r\n        } else {\r\n            console.log('setRequest')\r\n            setRequest([])\r\n        }\r\n        setIsRequest(!isRequest)\r\n    }\r\n\r\n    const onAddRequest = () => {\r\n        console.log('onAddRequest:', request)\r\n        let newRequest = [...request]\r\n\r\n        newRequest.push({\r\n            label: 'param '+ (request.length+1),\r\n            type: '',\r\n            name: '',\r\n            id: request.length\r\n        })\r\n        setRequest(newRequest)\r\n        props.setValues({...props.values, request: newRequest})\r\n    }\r\n\r\n    const onDeleteRequest = () => {\r\n        let newRequest = [...request]\r\n        newRequest.pop()\r\n        setRequest(newRequest)\r\n        if (newRequest.length === 0) {\r\n            setIsRequest(false)\r\n        }\r\n        props.setValues({...props.values, request: newRequest})\r\n    }\r\n\r\n    const onResponse = () => {\r\n        console.log('onResponse', isResponse)\r\n        setIsResponse(!isResponse)\r\n        console.log('response: ', response)\r\n        if (!response) {\r\n            setResponse({\r\n                type: ''\r\n            })\r\n        } else {\r\n            setResponse(undefined)\r\n        }\r\n    }\r\n\r\n    const onBodyActions = () => {\r\n        setIsBody_actions(!isBody_actions)\r\n    }\r\n\r\n    const onAddResponse = () => {\r\n        \r\n    }\r\n\r\n    const onRowChange = (id: number, type: string, name: string) => {\r\n        let requestCopy = [...request]\r\n\r\n        for (let index = 0; index < request.length; index++) {\r\n            const element = request[index];\r\n            if (element.id === id) {\r\n                requestCopy[index] = {...element, name: name, type: type}\r\n            }\r\n        }\r\n        setRequest(requestCopy)\r\n        props.setValues({...props.values, request: requestCopy})\r\n    }\r\n\r\n    const setResponseValues = (responseValues: ResponseType) => {\r\n        // console.log('setResponseValues:', responseValues)\r\n        props.setValues({...props.values, response: responseValues})\r\n    }\r\n\r\n    console.log('props.initialValues: ',props.initialValues)\r\n    // console.log(response)\r\n\r\n    // if (response !== undefined && response.type !== undefined) {\r\n    //     console.log('show response')\r\n    // }\r\n\r\n    const onKeyDown = (v: any) => {\r\n        if (v.keyCode === 9) {\r\n            v.preventDefault()\r\n\r\n            const before = body_actions.substr(0, v.target.selectionEnd)\r\n            const after = body_actions.substr(v.target.selectionEnd)\r\n\r\n            setBody_actions(before+'    '+after)\r\n            props.setValues({...props.values, body_actions: v.target.value})\r\n\r\n            const newStart = v.target.selectionStart+4\r\n            const newEnd = v.target.selectionEnd+4\r\n\r\n            setTimeout( ()=> {\r\n                v.target.selectionStart = newStart\r\n                v.target.selectionEnd = newEnd\r\n            }, 0)\r\n            \r\n        }\r\n    }\r\n\r\n    const onBodyChange = (v: any) => {\r\n        setBody_actions(v.target.value)\r\n        props.setValues({...props.values, body_actions: v.target.value})\r\n    }\r\n\r\n    console.log('ResponseItem:', response)\r\n\r\n    return (\r\n        <Form\r\n            className=\"form-container\"\r\n            onSubmit={props.handleSubmit}\r\n        >\r\n            <Field\r\n                component={AntInput}\r\n                name=\"name\"\r\n                type=\"text\"\r\n                label=\"Method name\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n            <Field\r\n                component={AntSelect}\r\n                name=\"rest_type\"\r\n                type=\"select\"\r\n                label=\"REST Type\"\r\n                selectOptions={RestTypeOtions}\r\n                validate={validateRequired}\r\n                hasFeedback\r\n            /> \r\n\r\n            <div className=\"ant-row ant-form-item \">\r\n                <div className=\"ant-col ant-form-item-label pr-2\">Request:</div>\r\n                <div className=\"ant-col ant-form-item-control\">\r\n                    <Checkbox onChange={onRequest} checked={isRequest}></Checkbox>\r\n                </div>\r\n            </div>\r\n\r\n            {request && request.length>0 ? \r\n                request.map( (item: RequestType) => {\r\n                    return <RequestItem key={item.id} item={item} initialValues={props.initialValues} onRowChange={onRowChange}/>\r\n                })\r\n            :\r\n                null\r\n            }\r\n            {request && request.length>=1 ? \r\n            <div className=\"my-2\">\r\n                <Button className=\"mr-3\" type=\"primary\" size=\"small\" onClick={onAddRequest}>Add</Button> \r\n                <Button className=\"mr-3\" type=\"primary\" size=\"small\" onClick={onDeleteRequest}>del</Button>\r\n            </div>\r\n            : null}\r\n\r\n            <div className=\"ant-row ant-form-item\">\r\n                <div className=\"ant-col ant-form-item-label pr-2\">body_actions:</div>\r\n                <div className=\"ant-col ant-form-item-control\">\r\n                    <Checkbox onChange={onBodyActions} checked={isBody_actions}></Checkbox>\r\n                </div>\r\n            </div>\r\n\r\n            {isBody_actions ? \r\n                <TextArea \r\n                    onKeyDown={onKeyDown} \r\n                    // onBlur={onBlur} \r\n                    rows={4} \r\n                    value={body_actions}\r\n                    onChange={onBodyChange}\r\n                />\r\n            : null }\r\n\r\n\r\n\r\n\r\n            <div className=\"ant-row ant-form-item \">\r\n                <div className=\"ant-col ant-form-item-label pr-2\">Response:</div>\r\n                <div className=\"ant-col ant-form-item-control\">\r\n                    <Checkbox onChange={onResponse} checked={isResponse}></Checkbox>\r\n                </div>\r\n            </div>\r\n\r\n            {response !== undefined && response.type !== undefined ? \r\n                <ResponseItem \r\n                    responseInit={response} \r\n                    initialValues={props.initialValues}\r\n                    setResponseValues={setResponseValues}\r\n                />\r\n            :\r\n            null\r\n            }\r\n\r\n\r\n\r\n\r\n\r\n            <Field\r\n                component={AntCheckbox}\r\n                name=\"isMiddleware\"\r\n                type=\"checkbox\"\r\n                label=\"isMiddleware\"\r\n                submitCount={props.submitCount}\r\n            />\r\n\r\n            <div className=\"submit-container\">\r\n                <button className=\"ant-btn ant-btn-primary\" type=\"submit\">\r\n                    Save\r\n                </button>\r\n            </div>\r\n\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default ControllerMethodsForm\r\n\r\nconst RestTypeOtions = [\r\n    {\r\n        name: 'GET',\r\n        value: 'get'\r\n    },\r\n    {\r\n        name: 'POST',\r\n        value: 'post'\r\n    },\r\n    {\r\n        name: 'PUT',\r\n        value: 'put'\r\n    },\r\n    {\r\n        name: 'DELETE',\r\n        value: 'delete'\r\n    },\r\n]","C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Models\\ModelForm.tsx",["581","582","583","584","585"],"import { Form, Field, FormikProps } from 'formik'\r\nimport React, { ReactNode, useState, useEffect } from 'react'\r\nimport { AntCheckbox, AntInput, AntSelect } from '../../../../../../utils/Formik/CreateAntField'\r\nimport { validateRequired } from '../../../../../../utils/Formik/ValidateFields'\r\nimport {SelectOptionType} from '../../../../../../Types/types'\r\n// import { AntInput, AntSelect, AntTextArea, AntTimePicker } from '../../../utils/Formik/CreateAntField'\r\n// import { validateRequired } from '../../../utils/Formik/ValidateFields'\r\n// import ProjectForm from './Project/ProjectForm'\r\n\r\n\r\nconst ModelForm: ((props: FormikProps<{}>) => ReactNode) = (props) => {\r\n    return (\r\n        <Form\r\n            className=\"form-container\"\r\n            onSubmit={props.handleSubmit}\r\n        >\r\n            <Field\r\n                component={AntInput}\r\n                name=\"name\"\r\n                type=\"text\"\r\n                label=\"Model name\"\r\n                validate={validateRequired}\r\n                hasFeedback\r\n                // onChange={onChangeNewFieldName}\r\n            />\r\n            <Field\r\n                component={AntInput}\r\n                name=\"folder\"\r\n                type=\"text\"\r\n                label=\"Model folder\"\r\n                // validate={validateRequired}\r\n                // hasFeedback\r\n                // onChange={onChangeNewFieldName}\r\n            />\r\n            <div className=\"submit-container\">\r\n                <button className=\"ant-btn ant-btn-primary\" type=\"submit\">\r\n                    Save1\r\n                </button>\r\n            </div>\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default ModelForm","C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Models\\FieldListContainer.tsx",[],"C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\Development\\Code\\CodeModalContainer.tsx",[],"C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\Development\\Code\\Model\\ModelCode.tsx",["586"],"import React, {useEffect} from 'react'\r\nimport { FieldType } from '../../../../api/projectAPI'\r\nimport {ModelCodePropsType} from './ModelCodeContainer'\r\n\r\nconst ModelCode: React.FC<ModelCodePropsType> = (props) => {\r\n    useEffect( ()=> {\r\n        console.log('props.codeTargetName changed')\r\n    },[props.codeTargetName])\r\n\r\n    console.log(props)\r\n\r\n    // str[0].toUpperCase() + str.slice(1)\r\n    return(\r\n        <div>\r\n            <li>!!!table name</li>\r\n            <li>Field type</li>\r\n            <li>namespace</li>\r\n\r\n            <h5>ModelCode:</h5>\r\n\r\n            <code>{'<?php'}</code>\r\n            <br/><br/>\r\n            <code>{'namespace App;'}</code>\r\n            <br/><br/>\r\n            <code>{'use Illuminate\\\\Database\\\\Eloquent\\\\Model;'}</code><br/>\r\n            {props.codeData.soft_delete ? \r\n                <><code>{'use Illuminate\\\\Database\\\\Eloquent\\\\SoftDeletes;'}</code><br/></>\r\n            :\r\n                null\r\n            }\r\n            {props.codeData.db ? \r\n                <><code>{'use Illuminate\\\\Support\\\\Facades\\\\DB;'}</code><br/></>\r\n            :\r\n                null\r\n            }\r\n            \r\n            \r\n            <br/>\r\n            <code>{'class '+props.codeTargetName[0].toUpperCase()+props.codeTargetName.slice(1)+' extends Model'}</code><br/>\r\n            \r\n            <code>{'{'}</code><br/>\r\n\r\n            {props.codeData.soft_delete ? \r\n                <><code>{tab(1,'use SoftDeletes;')}</code><br/><br/></>\r\n            :\r\n                null\r\n            }\r\n            \r\n            {/* 'protected $table = 'Models_instanses';' */}\r\n            <code>{tab(1,'protected $table = \"'+props.codeTargetName+'\";')}</code><br/>\r\n\r\n            <Fillable codeRowsArray={props.codeRowsArray}/>\r\n\r\n            <Hidden codeRowsArray={props.codeRowsArray}/>\r\n\r\n            <code>{'}'}</code><br/>\r\n\r\n            {/* {props.codeRowsArray.map( (item: any) => {\r\n                return(\r\n                    <div>\r\n                        {item.name}\r\n                    </div>\r\n                )\r\n            })} */}\r\n\r\n            <h5>Migration code:</h5>\r\n\r\n            <code>{'<?php'}</code>\r\n            <br/><br/>\r\n            <code>{'use Illuminate\\\\Database\\\\Migrations\\\\Migration;'}</code><br/>\r\n            <code>{'use Illuminate\\\\Database\\\\Schema\\\\Blueprint;'}</code><br/>\r\n            <code>{'use Illuminate\\\\Support\\\\Facades\\\\Schema;'}</code><br/>\r\n            <br/>\r\n            <code>{'class Create'+props.codeTargetName[0].toUpperCase()+props.codeTargetName.slice(1)+'Table extends Migration'}</code><br/>\r\n            <code>{'{'}</code><br/>\r\n            <code>{tab(1,'public function up()')}</code><br/>\r\n            <code>{tab(1,'{')}</code><br/>\r\n            <code>{tab(2,'Schema::create(\"'+props.codeTargetName+'\", function (Blueprint $table) {')}</code><br/>\r\n\r\n                {props.codeRowsArray.map( (item: any) => {\r\n                    const isNulleble = item.isNulleble ? '->nullable()' : ''\r\n                    return(\r\n                        <><code>{tab(3,'$table->'+getFieldtype(item)+'(\"'+item.name+'\")'+isNulleble+';')}</code><br/></>\r\n                    )\r\n                })}\r\n                {props.codeData.soft_delete ? \r\n                <><code>{tab(3,'$table->softDeletes();')}</code><br/></>\r\n                : null}\r\n                <><code>{tab(3,'$table->timestamps();')}</code><br/></>\r\n\r\n            <code>{tab(2,'});')}</code><br/>\r\n            <code>{tab(1,'}')}</code><br/>\r\n\r\n            <code>{tab(1,'}')}</code><br/>\r\n\r\n            <br/>\r\n            <code>{tab(1,'public function down()')}</code><br/>\r\n            <code>{tab(1,'{')}</code><br/>\r\n            <code>{tab(2,'Schema::dropIfExists(\"'+props.codeTargetName+'\");')}</code><br/>\r\n            <code>{tab(1,'}')}</code><br/>\r\n            <code>{'}'}</code><br/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ModelCode\r\n\r\ntype FillableType = {\r\n    codeRowsArray: Array<any>\r\n}\r\n\r\nconst Fillable: React.FC<any> = (props) => {\r\n    const fields: Array<any> = props.codeRowsArray.filter( (item: any) => item.fieldParam === 'fillable')\r\n    if (fields.length > 0) {\r\n        return(\r\n            <div>\r\n                <br/>\r\n                <code>{tab(1,'protected $fillable = [')}</code><br/>\r\n                \r\n                {fields.map( (item: any) => {\r\n                    return(\r\n                        <div key={item.name}>\r\n                        <>&nbsp;&nbsp;&nbsp;&nbsp;</>\r\n                        <>&nbsp;&nbsp;&nbsp;&nbsp;</>\r\n                        <>&nbsp;&nbsp;&nbsp;&nbsp;</>\r\n                        <>&nbsp;&nbsp;&nbsp;&nbsp;</>\r\n                        <code>{'\"'+item.name+'\", '}</code><br/>\r\n                        </div>\r\n                    )\r\n                })}\r\n                \r\n                <code>{tab(1,'];')}</code><br/>\r\n            </div>\r\n        )\r\n    } else {\r\n        return <></>\r\n    }\r\n}\r\n\r\nconst Hidden: React.FC<any> = (props) => {\r\n    const fields: Array<any> = props.codeRowsArray.filter( (item: any) => item.fieldParam === 'hidden')\r\n    if (fields.length > 0) {\r\n        return(\r\n            <>\r\n            <br/>\r\n            <code>{ tab(1,'protected $hidden = [') }</code><br/>\r\n            \r\n            {fields.map( (item: any) => {\r\n                return(\r\n                    <>\r\n                    <>&nbsp;&nbsp;&nbsp;&nbsp;</>\r\n                    <>&nbsp;&nbsp;&nbsp;&nbsp;</>\r\n                    <>&nbsp;&nbsp;&nbsp;&nbsp;</>\r\n                    <>&nbsp;&nbsp;&nbsp;&nbsp;</>\r\n                    <code>{'\"'+item.name+'\", '}</code><br/></>\r\n                )\r\n            })}\r\n            \r\n            <code>{tab(1,'];')}</code><br/>\r\n            </>\r\n        )\r\n    } else {\r\n        return <></>\r\n    }\r\n}\r\n\r\nexport const tab = (count: number, text?: string) => {\r\n    const getTabs = ():Array<JSX.Element> => {\r\n        let i = 1\r\n        let tabs: Array<JSX.Element> = []\r\n        while (i<=count) {\r\n            i++\r\n            tabs.push(\r\n                <span key={i}>\r\n                    &nbsp;&nbsp;&nbsp;&nbsp;\r\n                </span>\r\n            )\r\n        }\r\n        return tabs\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {getTabs()}\r\n            {text}\r\n        </>\r\n    )\r\n}\r\n\r\nconst getFieldtype = (field: FieldType ) => {\r\n    console.log(field.name, '=',field.type)\r\n    if (field.isPrimary) {\r\n        return 'bigIncrements'\r\n    } else {\r\n        switch (field.type) {\r\n            case 'bigint':\r\n                return 'bigInteger'\r\n    \r\n            case 'varchar':\r\n                return 'string'\r\n    \r\n            default:\r\n                return field.type\r\n        }\r\n    }\r\n}","C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Models\\FieldForm.tsx",[],"C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Controllers\\ControllerMethodsForm\\ResponseItem.tsx",["587","588"],"import { Button, Input, TreeSelect } from 'antd'\r\nimport { TreeNode } from 'rc-tree-select'\r\nimport React, {useState, useEffect} from 'react'\r\nimport { ControllerMethodsType } from '../../../../../../../api/ControllerMethodsAPI'\r\nimport { ResponreItemsType } from './ControllerMethodsForm'\r\n\r\ntype ValueType = {\r\n    type: 'Response' | 'method' | '',\r\n    methodId?: number,\r\n    methodName?: string,\r\n    responseItems?: Array<ResponreItemsType>\r\n}\r\n\r\ntype ResponseItemPropsType = {\r\n    responseInit: ValueType\r\n    initialValues: any,\r\n    setResponseValues: (responseValues: ValueType)=>void\r\n    // methodList !!!!!\r\n}\r\n\r\nconst ResponseItem: React.FC<ResponseItemPropsType> = (props) => {\r\n    const [value, setValue] = useState<ValueType>(props.responseInit)\r\n    // console.log(props)\r\n\r\n    useEffect( () => {\r\n        setValue(props.responseInit)\r\n    },[props.responseInit])\r\n\r\n    const onResponseTypeChange = (typeValue: 'Response'|'method'|'', labelList: React.ReactNode[], extra: any) => {\r\n        let newResponse: Array<ResponreItemsType> = []\r\n        let methodId: number = 0\r\n        let methodName: string = ''\r\n        let type: 'Response'|'method'|'' = ''\r\n\r\n        if(typeValue === 'Response') {\r\n            type = typeValue\r\n            // if(value.responseItems && value.responseItems.length === 0) {\r\n                newResponse.push({\r\n                    key: '',\r\n                    variable: ''\r\n                })\r\n            // }\r\n        } else {\r\n            // console.log('GO TO METHOD!!!',typeValue)\r\n            // console.log(props)\r\n            methodId = props.initialValues.controllerMethodsList.filter( (item: any) => item.name === typeValue )[0].id\r\n            methodName = props.initialValues.controllerMethodsList.filter( (item: any) => item.name === typeValue )[0].name\r\n            // console.log(methodId)\r\n\r\n            type = 'method'\r\n        }\r\n\r\n        setValue({...value, type: type, responseItems: newResponse, methodId: methodId, methodName: methodName})\r\n        props.setResponseValues({...value, type: type, responseItems: newResponse, methodId: methodId, methodName: methodName})\r\n\r\n        // console.log(typeValue)\r\n        // console.log(labelList)\r\n        // console.log(extra.triggerValue)\r\n    }\r\n\r\n    const onRowChange = (rowValue: string, elementNumber: number, param: 'key'|'variable') => {\r\n        // console.log(rowValue)\r\n        // console.log(elementNumber)\r\n        // console.log(param)\r\n\r\n        let responseItems: Array<ResponreItemsType> = value.responseItems ? value.responseItems : []\r\n        if (responseItems[elementNumber]) {\r\n            responseItems[elementNumber][param] = rowValue\r\n        }\r\n        setValue({\r\n            ...value,\r\n            responseItems: responseItems\r\n        })\r\n        props.setResponseValues({\r\n            ...value,\r\n            responseItems: responseItems\r\n        })\r\n    }\r\n\r\n    const addParam = () => {\r\n        let responseItems: Array<ResponreItemsType> = value.responseItems ? [... value.responseItems] : []\r\n        responseItems.push({key:'', variable:''})\r\n        setValue({...value, responseItems: responseItems })\r\n    }\r\n\r\n    const dellParam = () => {\r\n        let responseItems: Array<ResponreItemsType> = value.responseItems ? [... value.responseItems] : []\r\n        responseItems.pop()\r\n        setValue({...value, responseItems: responseItems })\r\n    }\r\n\r\n    console.log('ResponseItem value: ', value)\r\n    console.log('ResponseItem props: ', props)\r\n\r\n    return(\r\n        <>\r\n        <div className=\"row mt-1 mb-3\">\r\n            <div className=\"ant-col ant-form-item-label mt-2\">\r\n                Response:\r\n            </div>\r\n            <div className=\"col-4\">\r\n                <TreeSelect\r\n                    className=\" ml-2 TreeSelect_Request_Type\"\r\n                    style={{ width: '100%' }}\r\n                    showSearch\r\n                    value={value.type === 'method' ?  \r\n                    props.initialValues.controllerMethodsList.filter((controllerMethod: ControllerMethodsType)=>controllerMethod.id === value.methodId)[0].name\r\n                    : value.type\r\n                    }\r\n                    dropdownStyle={{ maxHeight: 400, overflow: 'auto' }}\r\n                    placeholder=\"Reqest type\"\r\n                    allowClear\r\n                    showCheckedStrategy={'SHOW_PARENT'}\r\n                    onChange={onResponseTypeChange}\r\n\r\n                    // treeCheckable={true}\r\n                >\r\n                    <TreeNode\r\n                        // selectable={false} \r\n                        // per_id={props.item.id} \r\n                        value=\"Response\" \r\n                        title=\"Response\"\r\n                    ></TreeNode>\r\n                    <TreeNode\r\n                        selectable={false} \r\n                        // per_id={props.item.id} \r\n                        value=\"method\" \r\n                        title=\"Method\"\r\n                    >\r\n                        {\r\n                            props.initialValues.controllerMethodsList !== undefined ?\r\n                            // @ts-ignore\r\n                            props.initialValues.controllerMethodsList.filter((controllerMethod: ControllerMethodsType)=>controllerMethod.name !== props.initialValues.name)\r\n                                .map(( controllerMethod: ControllerMethodsType ) => {\r\n                                return (\r\n                                    <TreeNode \r\n                                        key={controllerMethod.name}\r\n                                        // per_id={props.item.id} \r\n                                        value={controllerMethod.name} \r\n                                        title={controllerMethod.name}\r\n                                    ></TreeNode>\r\n                                )\r\n                            })\r\n                            : null\r\n                        }\r\n                    </TreeNode>\r\n                </TreeSelect>\r\n            </div>\r\n            <div className=\"col-4\">\r\n                {value.type === 'Response' ? \r\n                    <>\r\n                        <Button className=\"ml-2\" type=\"primary\" onClick={addParam}>Add param</Button>\r\n                        <Button className=\"ml-2\" type=\"primary\" onClick={dellParam}>Del param</Button>\r\n                    </>\r\n                :null}\r\n            </div>\r\n        </div>\r\n        {value.type === 'Response' ?\r\n            <div className=\"row mt-1 mb-3\">\r\n                <ResponseRows \r\n                    responseRows={value.responseItems ? value.responseItems : []}\r\n                    onRowChange={onRowChange}\r\n                />\r\n            </div>\r\n        :\r\n        null}\r\n        {value.type === 'method' ?\r\n            <div className=\"row mt-1 mb-3\">\r\n                methodId: {value.methodId}\r\n            </div>\r\n        :\r\n        null}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ResponseItem\r\n\r\ntype ResponseRowsPropsType = {\r\n    responseRows: Array<ResponreItemsType>\r\n    onRowChange: (value: string, elementNumber: number, param: 'key'|'variable')=>void\r\n}\r\n\r\nconst ResponseRows: React.FC<ResponseRowsPropsType> = (props) => {\r\n    // console.log(props)\r\n\r\n    const onNameChange = (event: any) => {\r\n        props.onRowChange(event.target.value, Number(event.target.name), 'key')\r\n    }\r\n\r\n    const onVariableChange = (event: any) => {\r\n        props.onRowChange(event.target.value, Number(event.target.name), 'variable')\r\n    }\r\n\r\n    return(\r\n        <>\r\n            {props.responseRows.map( (item, index: number)=> {\r\n                return(\r\n                // <>\r\n                <div key={index.toString()} className=\"row w-100\" >\r\n                        <div className=\"ant-col ant-form-item-label pr-2 mt-3\">\r\n                            param {index+1}:\r\n                        </div>\r\n                    <div className=\"col-4 mt-2\">\r\n                        <Input \r\n                            className=\"w-100 ml-2\" \r\n                            value={item.key} \r\n                            name={index.toString()}  \r\n                            onChange={onNameChange} \r\n                            placeholder=\"Param name\" \r\n                        />\r\n                    </div>\r\n                    <div className=\"col-4 mt-2\">\r\n                        <Input \r\n                            className=\"w-100 ml-2\" \r\n                            value={item.variable} \r\n                            name={index.toString()} \r\n                            onChange={onVariableChange} \r\n                            placeholder=\"Param variable\" \r\n                        />\r\n                    </div>\r\n                </div>\r\n                // </>\r\n                )\r\n            })}\r\n        </>\r\n    )\r\n}","C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Controllers\\ControllerMethodsForm\\RequestItem.tsx",["589"],"import { Input, TreeSelect } from 'antd'\r\nimport { TreeNode } from 'rc-tree-select'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { RequestType } from './ControllerMethodsForm'\r\n\r\ntype RequestItemPropsType = {\r\n    item: RequestType,\r\n    initialValues: any,\r\n    onRowChange: (id: number, type: string, name: string)=>void\r\n}\r\n\r\nconst RequestItem: React.FC<RequestItemPropsType> = (props) => {\r\n    const [value, setValue] = useState<RequestType>(props.item)\r\n\r\n    useEffect( () => {\r\n        setValue(props.item)\r\n    },[props.initialValues])\r\n\r\n    const onRequestTypeChange = (typeValue: string, labelList: React.ReactNode[], extra: any) => {\r\n        setValue({...value, type: typeValue})\r\n        if (typeValue) {\r\n            props.onRowChange(props.item.id, typeValue, props.item.name)\r\n        } else {\r\n            props.onRowChange(props.item.id, '', props.item.name)\r\n        }\r\n        \r\n    }\r\n\r\n    const onRequestNameChange = (event: any) => {\r\n        setValue({...value, name: event.target.value})\r\n        props.onRowChange(props.item.id, props.item.type, event.target.value)\r\n    }\r\n\r\n    return (\r\n        <div key={props.item.id} className=\"row mt-1\">\r\n            <div className=\"ant-col ant-form-item-label mt-2\">\r\n                {props.item.label}\r\n            </div>\r\n\r\n            <div className=\"col-4\">\r\n                <TreeSelect\r\n                    className=\" ml-2 TreeSelect_Request_Type\"\r\n                    style={{ width: '100%' }}\r\n                    showSearch\r\n                    value={value.type}\r\n                    dropdownStyle={{ maxHeight: 400, overflow: 'auto' }}\r\n                    placeholder=\"Reqest type\"\r\n                    allowClear\r\n                    showCheckedStrategy={'SHOW_PARENT'}\r\n                    onChange={onRequestTypeChange}\r\n                >\r\n                    <TreeNode selectable={false} per_id={props.item.id} value=\"model\" title=\"Model\">\r\n                        {\r\n                            // @ts-ignore\r\n                            props.initialValues.modelsList.map((model: ModelsType) => {\r\n                                return (\r\n                                    <TreeNode key={model.name} per_id={props.item.id} value={model.name} title={model.name}></TreeNode>\r\n                                )\r\n                            })\r\n\r\n                        }\r\n                    </TreeNode>\r\n                    <TreeNode per_id={props.item.id} value=\"Request\" title=\"Request\"></TreeNode>\r\n                    <TreeNode selectable={false} per_id={props.item.id} value=\"list\" title=\"List\"></TreeNode>\r\n                </TreeSelect>\r\n            </div>\r\n            <div className=\"col-4\">\r\n                <Input className=\"w-100 ml-2\" value={value.name} name={props.item.id.toString()} onChange={onRequestNameChange} placeholder=\"Param name\" />\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RequestItem","C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\Development\\Projects\\CurrentProject\\Backend\\Models\\FieldList.tsx",[],"C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\Development\\Code\\CodeModal.tsx",["590","591"],"import {Modal} from 'antd'\r\nimport React, {useState, useEffect} from 'react'\r\nimport { CodeModalPropsType } from './CodeModalContainer'\r\nimport ModelCodeContainer from './Model/ModelCodeContainer'\r\n\r\nconst CodeModal: React.FC<CodeModalPropsType> = (props) => {\r\n    const onClose = () => {\r\n        props.setShowCodeModal(false, props.codeType, props.codeRowsArray, props.codeTargetName, [])\r\n    }\r\n\r\n    const getTargetComponennt = () => {\r\n        switch (props.codeType) {\r\n            case 'model':\r\n                return <ModelCodeContainer />\r\n        \r\n            default:\r\n                return <div>No data</div>\r\n        }\r\n    }\r\n\r\n    return(\r\n        <Modal title=\"Code modal\" visible={props.isModalVisible} onOk={onClose} onCancel={onClose} width={1000}>\r\n            {getTargetComponennt()}\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default CodeModal\r\n\r\n","C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\Development\\Code\\Model\\ModelCodeContainer.tsx",[],"C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\English\\CarTrener\\CarTrener.tsx",["592"],"import { Button, Collapse, Spin, Switch } from 'antd'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { NotificationOutlined } from '@ant-design/icons'\r\nimport { Formik } from 'formik'\r\nimport CarTrenerSettingsForm from './CarTrenerSettings'\r\nimport LerningWords from './LerningWords/LerningWordsContainer'\r\n// import { WordType } from '../../../api/vocabularyAPI'\r\nimport { CarTrenerPropsType } from './CarTrenerContainer'\r\n\r\nconst { Panel } = Collapse\r\nconst getRandomInt = (max: number) => Math.floor(Math.random() * Math.floor(max))\r\n\r\nconst CarTrener: React.FC<CarTrenerPropsType> = (props) => {\r\n    const [voices] = useState( window.speechSynthesis.getVoices() )\r\n    const [target, settarget] = useState<number>(0)\r\n    const [isShowRelations, setIsShowRelations] = useState(false)\r\n    const [isShowAudio, setIsShowAudio] = useState(false)\r\n    const [isLern, setIsLern] = useState(true)\r\n    const [checkType, setCheckType] = useState<'say'|'check'|'write'>('check')\r\n    \r\n    const rand = getRandomInt(2)\r\n\r\n    useEffect( ()=> {\r\n        if (props.toLern.length === 0) {\r\n            props.getWordsToLern()\r\n        } \r\n    },[props, props.toLern])\r\n\r\n    type InitialSettingsValuesType = {\r\n        compareCount: number,\r\n        learnCount: number,\r\n        checkType?: 'say'|'check'|'write'\r\n    }\r\n\r\n    const initialSettingsValues: InitialSettingsValuesType = {\r\n        compareCount: 5,\r\n        learnCount: 27\r\n    }\r\n\r\n    const onMove = (step: number) => {\r\n        if (target!==undefined) {\r\n            if ( target + step >= 0 && target + step <= props.englishWords.length - 1) {\r\n                if (props.toLern.length > target+1) {\r\n                    settarget(target + step)\r\n                } else {\r\n                    props.getWordsToLern()\r\n                    settarget(0)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    const handleSubmit = (values: InitialSettingsValuesType) => {\r\n        console.log('handleSubmit: ', values)\r\n        if (values.checkType !== undefined) {\r\n            setCheckType(values.checkType)\r\n        }\r\n    }\r\n\r\n    const skipWord = (val:any) => {\r\n        // console.log(val)\r\n        props.skipWord(val)\r\n        onMove(1)\r\n    }\r\n\r\n    if (props.toLern.length === 0) {\r\n        return <Spin size=\"large\" />\r\n    }\r\n    return (\r\n        <div>\r\n            <Collapse className=\"my-0\" defaultActiveKey={[]}>\r\n                <Panel header=\"Settings v 1.9\" key=\"1\" extra={[\r\n                    <Switch key=\"1\" className=\"mx-1\" checkedChildren=\"show\" unCheckedChildren=\"show\" checked={isShowRelations}\r\n                        onClick={(checked: boolean, event: Event) => {\r\n                            setIsShowRelations(!isShowRelations)\r\n                            event.stopPropagation();\r\n                        }}\r\n                    />,\r\n                    <Switch key=\"2\" className=\"mx-1\" checkedChildren=\"audio\" unCheckedChildren=\"audio\"\r\n                        onClick={(checked: boolean, event: Event) => {\r\n                            setIsShowAudio(!isShowAudio)\r\n                            event.stopPropagation();\r\n                        }}\r\n                    />,\r\n                    <Switch key=\"3\" className=\"mx-1\" checkedChildren=\"lern\" unCheckedChildren=\"lern\"\r\n                        checked = {isLern}\r\n                        onClick={(checked: boolean, event: Event) => {\r\n                            if (checked) {\r\n                                setIsShowRelations(false)\r\n                            }\r\n                            setIsLern(checked)\r\n                            event.stopPropagation();\r\n                        }}\r\n                    />,\r\n                ]}  >\r\n                    <Formik\r\n                        initialValues={initialSettingsValues}\r\n                        onSubmit={handleSubmit}\r\n                        enableReinitialize={true}\r\n                    >\r\n                        {CarTrenerSettingsForm}\r\n                    </Formik>\r\n\r\n                    {/* <h5>{utterThis ? utterThis.voice.name : null}</h5>\r\n\r\n                    {voices.map(item=> {\r\n                        return <p key={item.lang}>{item.lang}</p>\r\n                    } )} */}\r\n                </Panel>\r\n            </Collapse>\r\n            <div className=\"d-flex justify-content-center\">\r\n                <Button className=\"mr-5\" type=\"primary\" onClick={() => { onMove(-1) }}>prev</Button>\r\n                <Button className=\"mx-0\" type=\"ghost\" onClick={() => {skipWord(props.toLern[target].id)}}>Know it</Button>\r\n                <Button className=\"ml-5\" type=\"primary\" onClick={() => { onMove(1) }}>next</Button>\r\n            </div>\r\n\r\n\r\n            \r\n                <div className=\"d-flex flex-wrap align-content-start ml-1\">\r\n                    {isShowAudio ?\r\n                        <Button\r\n                            className=\"mt-4 mr-3\"\r\n                            type=\"ghost\"\r\n                            shape=\"round\"\r\n                            size=\"small\"\r\n                            style={{ marginLeft: 10 }}\r\n                            icon={\r\n                                <div className=\"d-flex flex-wrap align-content-start\">\r\n                                    <NotificationOutlined style={{ fontSize: '18px' }} />\r\n                                    <span className=\"my-1\" style={{ fontSize: '14px' }}></span>\r\n                                </div>}\r\n                        />\r\n                        : null}\r\n\r\n                        {props.toLern.length === 0 ? \r\n                            <Spin size=\"large\" />\r\n                        :\r\n                        <>\r\n                        <span className=\"mt-3 mr-3\">{props.toLern[target].id}</span>\r\n                        <h1 className=\"my-0 mt-1\">{rand ? props.toLern[target].name : props.toLern[target].relations[0].name}</h1>\r\n                        <span className=\"mt-3 ml-3\" > - {props.toLern[target].description}</span>\r\n                            \r\n                        </>\r\n                        }\r\n                        \r\n                </div>\r\n\r\n            {/* <div>\r\n                {isShowRelations ?\r\n                    props.toLern[target].relations.map((item: any) => {\r\n                        return <h4 key={item.id}>{props.toLern[target].name}- {item.name}</h4>\r\n                    })\r\n                    : null\r\n                }\r\n            </div> */}\r\n\r\n            {isLern && props.toLern.length !== 0 ?\r\n\r\n            <LerningWords \r\n                rand = {rand}\r\n                next={onMove} \r\n                englishWords={props.toLern} \r\n                wordsCount={initialSettingsValues.compareCount}\r\n                isShowRelations={isShowRelations}\r\n                target={props.toLern[target]}\r\n                checkType = {checkType}\r\n                isShowAudio={isShowAudio}\r\n            />\r\n\r\n            // <SayingWords />\r\n            // <></>\r\n            : null }\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CarTrener","C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\English\\CarTrener\\CarTrenerSettings.tsx",[],"C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\English\\CarTrener\\LerningWords\\LerningWordsContainer.tsx",[],"C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\English\\CarTrener\\LerningWords\\LerningWords.tsx",["593"],"import { Checkbox, List, Spin } from 'antd'\r\nimport { Button } from 'antd'\r\nimport { CheckboxChangeEvent } from 'antd/lib/checkbox'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { WordType } from '../../../../api/vocabularyAPI'\r\nimport SayingWords from '../SayingWords/SayingWords2'\r\nimport { LerningWordsPropsType } from './LerningWordsContainer'\r\n\r\n\r\ntype ParentIdType = {\r\n    parentId: number,\r\n    styles?: string,\r\n    checked: boolean\r\n}\r\ntype RelationsType = WordType & ParentIdType\r\n\r\nconst LerningWords: React.FC<LerningWordsPropsType> = (props) => {\r\n    // console.log('LerningWords props: ', props)\r\n    const [selectedWordsIds, setselectedWordsIds] = useState<Array<number>>([])\r\n    const [wordsToCompare, setWordsToCompare] = useState<Array<RelationsType>>([])\r\n\r\n    const error = 'bg-danger text-white'\r\n    const success = 'bg-success text-white'\r\n\r\n    useEffect( () => {},[wordsToCompare])\r\n\r\n    useEffect( () => {\r\n        // const rand = getRandomInt(2)\r\n        // const rand = 0\r\n        // console.log('!!!!!!!!!!!!', props.rand)\r\n        if (props.rand) {\r\n            setWordsToCompare( getWordsToCompare(props.wordsArray, props.wordsCount, props.target) )\r\n            setselectedWordsIds([])\r\n        } else {\r\n            const rus = reverseWordsArray(props.wordsArray, props.target)\r\n            setWordsToCompare( getWordsToCompare(rus.wordsRus, props.wordsCount, rus.targetRus) )\r\n            setselectedWordsIds([])\r\n        }\r\n        \r\n    },[props, props.target])\r\n\r\n    const choiseValues = (parentId: number, id: number, checked: boolean) => {\r\n        let wordsToCompareCopy = [...wordsToCompare].map( (i, index) => {\r\n            if ( i.id === id) {\r\n                return({ ...i, checked: !wordsToCompare[index].checked, styles: '' })\r\n            } else { return i }\r\n        })\r\n        console.log('wordsToCompareCopy: ', wordsToCompareCopy)\r\n        setWordsToCompare(wordsToCompareCopy)\r\n\r\n        let newNelectedWordsIds: Array<number> = []\r\n\r\n        if (checked) {\r\n            newNelectedWordsIds = [...selectedWordsIds]\r\n            newNelectedWordsIds.push(parentId)\r\n        } else {\r\n            newNelectedWordsIds = selectedWordsIds.filter( i => i !== parentId)\r\n        }\r\n        setselectedWordsIds(newNelectedWordsIds)\r\n    }\r\n\r\n    const onCheckEng = (lang: number) => {\r\n        console.log('selectedWordsIds: ', selectedWordsIds)\r\n        console.log('wordsToCompare: ', wordsToCompare)\r\n        const thisTarget = lang ? props.target : {...props.target.relations[0], relations: [props.target]}\r\n        console.log('thisTarget: ', thisTarget)\r\n\r\n        const check = selectedWordsIds.filter(i =>  i !== thisTarget.id)\r\n            // if (lang) {\r\n            //     console.log(i,'-1')\r\n            //     return i !== thisTarget.id\r\n            // } else {\r\n            //     console.log(i,'-0: ', thisTarget.relations[0].id, '-', thisTarget.id)\r\n            //     return i !== thisTarget.relations[0].id\r\n            // }\r\n        // })\r\n        console.log('check: ', check)\r\n\r\n        if (selectedWordsIds.length !== 0) {\r\n            if (check.length !== 0) {\r\n                // console.log(check)\r\n                const hits = selectedWordsIds.filter(i => i === thisTarget.id)\r\n                onError(check, hits)\r\n                props.checkTestResult({\r\n                    result: 'error',\r\n                    checkMethod: 'en_ru_c'\r\n                }, props.target.id)\r\n            } else {\r\n                // сохраняем результат в БД\r\n                if (props.target) {\r\n                    props.checkTestResult({\r\n                        result: 'success',\r\n                        checkMethod: 'en_ru_c'\r\n                    }, props.target.id)\r\n                }\r\n                \r\n                console.groupCollapsed('Данные для отправки на сервер');\r\n                    console.log('target: ', props.target)\r\n                console.groupEnd();\r\n                // Перешагиваем на другое слово\r\n                props.next(1)\r\n            }\r\n        } else {\r\n            alert('Please choise!')\r\n        }\r\n        \r\n    }\r\n\r\n    const onError = (errors: Array<number>, hits:Array<number>) => {\r\n        let wordsToCompareCopy = [...wordsToCompare]\r\n        for (let index = 0; index < wordsToCompare.length; index++) {\r\n            if (errors.includes(wordsToCompareCopy[index].parentId)) {\r\n                wordsToCompareCopy[index].styles = error\r\n            }\r\n            if (hits.includes(wordsToCompareCopy[index].parentId)) {\r\n                wordsToCompareCopy[index].styles = success\r\n            }\r\n        }\r\n        console.log(wordsToCompareCopy)\r\n        setWordsToCompare(wordsToCompareCopy)\r\n    }\r\n\r\n    console.log('checkType: ', props.checkType)\r\n\r\n    if (wordsToCompare.length === 0) {\r\n        console.log('wordsToCompare: ', wordsToCompare)\r\n        return <Spin size=\"large\" />\r\n    }\r\n    if (props.checkType === 'check') {\r\n        return (\r\n            <div>\r\n                <List\r\n                header={<span>Выберите правельные значения:</span>}\r\n                // footer={<div>Footer</div>}\r\n                size=\"small\"\r\n                bordered\r\n                dataSource={wordsToCompare}\r\n                renderItem={ item => (\r\n\r\n                        <h3 className={'my-1 '+item.styles}>\r\n                            <Checkbox \r\n                                onChange={(e: CheckboxChangeEvent)=>{ choiseValues(item.parentId, item.id, e.target.checked) }}\r\n                                checked={item.checked}\r\n                            >\r\n                                {item.name}\r\n                            </Checkbox>\r\n                        </h3>\r\n\r\n                )}\r\n                />\r\n                <Button className=\"mt-3\" onClick={()=>{onCheckEng(props.rand)}} type=\"primary\">Check</Button>\r\n            </div>\r\n    )\r\n    }\r\n    if (props.checkType === 'say') {\r\n        // alert('say')\r\n        return <SayingWords {...props} />\r\n    }\r\n\r\n    if (props.checkType === 'write') {\r\n        return <div>write</div>\r\n    }\r\n\r\n    return <div>?2??{props.checkType}???</div>\r\n}\r\n\r\nexport default LerningWords\r\n\r\nconst shuffle = (array: Array<any>): Array<any> => {\r\n    var currentIndex = array.length, temporaryValue, randomIndex;\r\n\r\n    while (0 !== currentIndex) {\r\n\r\n        randomIndex = Math.floor(Math.random() * currentIndex);\r\n        currentIndex -= 1;\r\n\r\n        temporaryValue = array[currentIndex];\r\n        array[currentIndex] = array[randomIndex];\r\n        array[randomIndex] = temporaryValue;\r\n    }\r\n\r\n    return array;\r\n}\r\n\r\nconst getWordsToCompare = (words: Array<WordType>, wordsCount: number, target: WordType | undefined): Array<RelationsType> => {\r\n    let wordsToCompare: Array<RelationsType> = []\r\n    let wordsToCompareLength = 0\r\n\r\n    words = [...words]\r\n    \r\n\r\n    // console.group('getWordsToCompare')\r\n    // console.log('words: ', words)\r\n    // console.log('wordsCount: ', wordsCount)\r\n    // console.log('target: ', target)\r\n\r\n    if (target) {\r\n        \r\n\r\n        while (wordsToCompareLength !== wordsCount) {\r\n            // console.log(wordsToCompare.length)\r\n            // console.log(words.length)\r\n            let index = getRandomInt(words.length)\r\n            let relations: Array<RelationsType> = []\r\n            if (words[index].id !== target.id) {\r\n                // console.log(words[index].id,' !== ',target.id)\r\n                if( words[index].relations) {\r\n                    relations = words[index].relations.map((item) => {\r\n                        // console.log(item.id,'=>',item.name, '(',target.id,')|', index,'-',words)\r\n                        return ({\r\n                            ...item,\r\n                            parentId: words[index].id,\r\n                            checked: false\r\n                        })\r\n                   })\r\n                   // Удаляем элемент\r\n                   words.splice(index, 1);\r\n               } \r\n   \r\n               wordsToCompare = wordsToCompare.concat(relations)\r\n               wordsToCompare = wordsToCompare.filter((v, i, arr) => arr.indexOf(v) === i)\r\n               wordsToCompareLength++\r\n            }\r\n        }\r\n        let targetRelations: Array<RelationsType> = []\r\n        if (target.relations) {\r\n            targetRelations = target.relations.map((item) => {\r\n                // console.log('!!!!!!!!!!!',item.id,'=>',item.name)\r\n                return ({\r\n                    ...item,\r\n                    parentId: target.id,\r\n                    checked: false\r\n                })\r\n            })\r\n        }\r\n        // console.log('targetRelations: ', targetRelations)\r\n\r\n        wordsToCompare = wordsToCompare.concat(targetRelations)\r\n        wordsToCompare = shuffle(wordsToCompare)\r\n    } \r\n\r\n    // console.log('wordsToCompare: ', wordsToCompare)\r\n    // console.groupEnd();\r\n\r\n    return wordsToCompare\r\n}\r\n\r\nconst getRandomInt = (max: number) => Math.floor(Math.random() * Math.floor(max))\r\n\r\nconst reverseWordsArray = (words: Array<WordType>, target: WordType) => {\r\n    const targetRus = {\r\n        ...target.relations[0],\r\n        relations: [target]\r\n    }\r\n\r\n    let wordsRus: Array<WordType> = []\r\n    words.map( word => {\r\n        const itemRelations = word.relations.map( item => {\r\n            return {\r\n                ...item,\r\n                relations: [word]\r\n            }\r\n        })\r\n        wordsRus = wordsRus.concat(itemRelations)\r\n    })\r\n\r\n    return {targetRus, wordsRus}\r\n}","C:\\OSPanel\\domains\\DeployProject2\\src\\api\\vocabularyAPI.ts",[],"C:\\OSPanel\\domains\\DeployProject2\\src\\api\\taskListAPI.ts",[],"C:\\OSPanel\\domains\\DeployProject2\\src\\api\\usersAPI.ts",[],"C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\ToDo\\Settings\\SettingsModal.tsx",[],"C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\Header\\MenuMobile.tsx",[],"C:\\OSPanel\\domains\\DeployProject2\\src\\api\\taskApi.ts",[],"C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\Header\\MenuPopover.tsx",[],"C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\English\\CarTrener\\SayingWords\\SayingWords2.tsx",["594","595","596","597","598","599"],"import React, { useState, useEffect } from 'react'\r\nimport { LerningWordsPropsType } from '../LerningWords/LerningWordsContainer'\r\n\r\n// import SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition'\r\nimport { Button } from 'antd'\r\nimport { ConsoleView } from 'react-device-detect';\r\n// import { ConsoleView } from 'react-device-detect'\r\n// import SpeechRecognition from 'react-speech-recognition';\r\n// const SpeechRecognition = window.SpeechRecognition\r\n\r\n// @ts-ignore\r\nconst SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\r\nvar synth = window.speechSynthesis;\r\n\r\n// SpeechRecognition.startListening()\r\n\r\nconst SayingWords: React.FC<LerningWordsPropsType> = (props) => {\r\n    const [record, setRecord] = useState<string>()\r\n    const [status, setStatus] = useState(false)  // запущен ли recognition\r\n    const [recognition, setRecognition] = useState(new SpeechRecognition())\r\n\r\n    const [tergetName, setTergetName] = useState<string>(props.rand ? props.target.name : props.target.relations[0].name)\r\n    const [targetAnswer, setTargetAnswer] = useState<string>(props.rand ? props.target.relations[0].name : props.target.name)\r\n    const [targetLang, setTargetLang] = useState<\"ru-RU\"|\"en-US\">()\r\n    const [ansswerLang, setAnswerLang] = useState<\"ru-RU\"|\"en-US\">()\r\n    \r\n    const [voices] = useState( window.speechSynthesis.getVoices() )\r\n    const [ok, setOk] = useState(false)\r\n\r\n    const [recognizing, setRecognizing] = useState(false)\r\n    // let recognizing = false;\r\n\r\n    const [speachResults, setSpeachResults] = useState<Array<string>>([])\r\n\r\n    useEffect(()=> {\r\n        console.log(recognizing, tergetName)\r\n        \r\n        if (!recognizing) {\r\n            // recognition.start()\r\n            // // console.log('!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!started')\r\n            // setRecognizing(true)\r\n            try {\r\n                recognition.start()\r\n                setRecognizing(true)\r\n            } catch (error) {\r\n                alert('error')\r\n            }\r\n        }\r\n    },[recognizing])\r\n\r\n    useEffect(()=> {\r\n        console.log('!!!!!!!!!!!!!!!!!!!props.target changed')\r\n        setTergetName(props.rand ? props.target.name : props.target.relations[0].name)\r\n        setTargetAnswer(props.rand ? props.target.relations[0].name : props.target.name)\r\n        setTargetLang(!props.rand ? \"ru-RU\":\"en-US\")\r\n        setAnswerLang(props.rand ? \"ru-RU\":\"en-US\")\r\n        // setStatus(true)\r\n\r\n        // if (props.isShowAudio) {\r\n        //     speak(utterThis)\r\n        // }\r\n\r\n        const newSpechInstanse = newSpech(props.rand ? props.target.name : props.target.relations[0].name)\r\n        const lang = !props.rand ? \"ru-RU\":\"en-US\"\r\n        newSpechInstanse.voice = voices.filter(item => item.lang === lang)[0]\r\n        console.log('??????????????????????????????', newSpechInstanse)\r\n        speak(newSpechInstanse, true)\r\n\r\n        recognition.lang = props.rand ? \"ru-RU\":\"en-US\"\r\n\r\n    },[props.target])\r\n\r\n        recognition.interimResults = true\r\n        // recognition.lang = props.rand ? 'ru-RU' : 'en-US'\r\n\r\n        recognition.onaudiostart = function () {\r\n            setStatus(true)\r\n            // setRecognizing(true);\r\n            // console.log('setRecognizing(true)')\r\n            // console.log('onaudiostart')\r\n        }\r\n\r\n        recognition.onaudioend = ()=> {}\r\n\r\n        recognition.onresult = function(event) {\r\n            console.log('onresult: ')\r\n            for(let i=0; i<event.results.length; i++) {\r\n                // setStatus(false)\r\n                // recognition.abort()\r\n                // console.log('stop()')\r\n\r\n                // console.log('--------------------: ',event.results[i][0].transcript)\r\n                // console.log(i,')',event.results[i][0].transcript,': ',{...event.results[i]})\r\n                let speachResultsCopy = [...speachResults]\r\n                speachResultsCopy.push(event.results[i][0].transcript)\r\n                setSpeachResults(speachResultsCopy)\r\n                \r\n                // const newSpechInstanse = newSpech(event.results[i][0].transcript)\r\n                // const lang = !props.rand ? \"en-US\" : \"ru-RU\"\r\n                // newSpechInstanse.voice = voices.filter(item => item.lang === lang)[0]\r\n                // speak(newSpechInstanse, true)\r\n            }\r\n            // console.log(event.results)\r\n        }\r\n\r\n        recognition.onend = ()=> {\r\n            console.log('onend', recognizing)\r\n            // console.log('onend statusToSpeach: ', status)\r\n            // console.log(speachResults)\r\n            if (status) {\r\n                console.log('начинаем сравнивать')\r\n                // checking targetAnswer vs speachResults\r\n                let success = false;\r\n                speachResults.forEach(result => {\r\n                    // console.log(result)\r\n                    if (result.toLocaleLowerCase().includes(targetAnswer.toLocaleLowerCase()) ) {\r\n                        // console.log('!!!!!!!!!!',result)\r\n                        success = true\r\n                    }\r\n                })\r\n\r\n                const lastResult = speachResults[speachResults.length-1]\r\n                console.log('speachResults: ', [...speachResults])\r\n                // console.log('lastResult: ', lastResult)\r\n                setSpeachResults([])\r\n\r\n                if (success) {\r\n                    console.log('success = true')\r\n                    const correctResult = !props.rand ? '. Correct result!':'. Верно!'\r\n                    const newSpechInstanse = newSpech(lastResult + correctResult)\r\n                    const lang = !props.rand ? \"en-US\" : \"ru-RU\"\r\n                    newSpechInstanse.voice = voices.filter(item => item.lang === lang)[0]\r\n                    speak(newSpechInstanse, true)\r\n\r\n                    props.checkTestResult({\r\n                        result: 'success',\r\n                        checkMethod: !props.rand ? 'en_ru_s' : 'ru_en_s'\r\n                    }, props.target.id)\r\n                    console.log('props.next(1)')\r\n                    props.next(1)\r\n                    // setStatus(false)\r\n                } else {\r\n                    console.log('success = false')\r\n                    const isComand = lastResult !== undefined ? checkComands(lastResult) : ''\r\n\r\n                    if (isComand === '') {\r\n                        if (lastResult!== undefined) {\r\n                            console.log(lastResult.toLowerCase())\r\n\r\n                            const newSpechInstanse = newSpech(!props.rand ? 'wrong!':'Не верно!')\r\n                            const lang = !props.rand ? \"en-US\" : \"ru-RU\"\r\n                            newSpechInstanse.voice = voices.filter(item => item.lang === lang)[0]\r\n                            console.log(newSpechInstanse)\r\n                            speak(newSpechInstanse, true)\r\n                            // recognition.start()\r\n                            setRecognizing(true)\r\n                            console.log('!!!setRecognizing(true)', recognizing)\r\n                        } else {\r\n                            \r\n                            console.log('NOT COMAND BUT EMPTY')\r\n\r\n\r\n\r\n\r\n                            console.log('recognition', recognition)\r\n                            console.log('recognizing', recognizing)\r\n                            startLisent()\r\n                        }\r\n                    } else {\r\n                        console.log('isComand: ',isComand)\r\n                        recognition.abort() \r\n                        const newSpechInstanse = newSpech(isComand)\r\n                        const lang = !props.rand ? \"en-US\" : \"ru-RU\"\r\n                        newSpechInstanse.voice = voices.filter(item => item.lang === lang)[0]\r\n                        speak(newSpechInstanse, true)\r\n                    }\r\n                    \r\n                }\r\n\r\n                // setStatus(false)\r\n                // console.log('!!!!!!!!', status)\r\n                // recognition.start()\r\n            } else {\r\n                console.log('НАДО ЗАПУСТИТЬ')\r\n            }\r\n        }\r\n\r\n        recognition.onerror = function(event) {\r\n            console.log('Speech recognition error detected: ' + event.error);\r\n        }\r\n\r\n        recognition.onnomatch = function() {\r\n            console.log('Speech not recognized');\r\n        }\r\n        recognition.onsoundstart = function() {\r\n            // console.log('Some sound is being received');\r\n        }\r\n        recognition.onsoundend = function() {\r\n            console.log('Звук перестал приниматься', recognizing);\r\n        }\r\n\r\n        \r\n        // setStatus(true)\r\n\r\n        // console.log(tergetName)\r\n\r\n        const utterThis = new SpeechSynthesisUtterance(tergetName)\r\n        const lang = props.rand ? \"en-US\" : \"ru-RU\"\r\n        utterThis.voice = voices.filter(item => item.lang === lang)[0]\r\n        // \r\n        \r\n        const startLisent = (check: string|undefined = undefined ) => {\r\n            setRecognizing(false)\r\n        }\r\n\r\n        const newSpech = (text: string): SpeechSynthesisUtterance => {\r\n            return new SpeechSynthesisUtterance(text)\r\n        }\r\n        \r\n        const speak = (utterThisItem: SpeechSynthesisUtterance, need?: boolean) => {\r\n            recognition.abort()\r\n            if (!ok || need) {\r\n                window.speechSynthesis.speak(utterThisItem)\r\n                console.log('speechSynthesis.speak: ', utterThisItem.text)\r\n                setOk(true)\r\n                checkPendidng(window.speechSynthesis, startLisent)\r\n            }\r\n        }\r\n\r\n        // if (props.isShowAudio) {\r\n        //     speak(utterThis)\r\n        // }\r\n\r\n        // console.log('speachResults: ', speachResults)\r\n\r\n    return (\r\n        <div>\r\n            v1.34) SayingWords<br/>\r\n            <h4>tergetName: {tergetName}= targetAnswer:{targetAnswer}</h4>\r\n            <p>{record}</p>\r\n            <p>Язык на котором сказали текст: <b>{targetLang}</b> ({!targetLang})</p>\r\n            <p>Язык восприятия речи: <b>{ansswerLang}</b></p>\r\n            <p>Реальный Язык восприятия речи: <b>{recognition.lang}</b></p>\r\n            <p>Запись звука: {recognizing ? 'Да' : 'Нет'}</p>\r\n        \r\n        <Button className=\"btntooc\" type=\"primary\" onClick={()=>{startLisent()}}>speak</Button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SayingWords\r\n\r\nconst checkPendidng = (speechSynthesis: SpeechSynthesis, startLisent:()=>void) => {\r\n    setTimeout(() => {\r\n        if (speechSynthesis.speaking || speechSynthesis.pending) {\r\n            checkPendidng(speechSynthesis, startLisent)\r\n            console.log('WAIT')\r\n        } \r\n        else {\r\n            console.log('startLisent from checkPendidng')\r\n            startLisent()\r\n        }\r\n    }, 100);\r\n}\r\n\r\nconst checkComands = (lastResult:string): string => {\r\n    if (lastResult.toLocaleLowerCase().includes('next') ) {\r\n        return 'next'\r\n    }\r\n    if (lastResult.toLocaleLowerCase().includes('следующий') ) {\r\n        return 'следующий'\r\n    }\r\n\r\n    return ''\r\n}","C:\\OSPanel\\domains\\DeployProject2\\src\\Components\\ToDo\\Schedule\\Schedule.tsx",["600","601","602","603"],"import React, {Dispatch, SetStateAction, useState, useEffect} from 'react'\r\nimport { Button, Collapse, List, Tabs } from 'antd'\r\nimport { Slider } from 'antd'\r\nimport { reduceEachTrailingCommentRange } from 'typescript'\r\n\r\nconst { TabPane } = Tabs\r\nconst { Panel } = Collapse;\r\n\r\nconst style = {\r\n    // display: 'inline-block',\r\n    height: 1000,\r\n    width: 100,\r\n    backgroundColor: 'white',\r\n}\r\ntype MarksType = {\r\n    [key: string]: string | {\r\n        style?: {\r\n            [key: string]: any,\r\n        },\r\n        label: React.ReactNode\r\n    }\r\n}\r\nlet marks: MarksType = {}\r\nfor (let index = 60 * 6; index <= 1440; index = index + 60) {\r\n    const name = index.toString()\r\n    // marks[name] = index/60+':00'\r\n    marks[name] = {\r\n        style: {\r\n            color: 'black',\r\n            // marginBottom: '10px'\r\n        },\r\n        label: <strong>{index / 60 + ':00'}</strong>,\r\n    }\r\n}\r\n\r\ntype SchedulePropsType = {\r\n\r\n}\r\n\r\nconst changeTab = (key: string) => {\r\n    // console.log(key)\r\n}\r\n\r\n\r\n\r\nconst Schedule: React.FC<SchedulePropsType> = (props) => {\r\n\r\n    return (\r\n        <div>\r\n            <h3>Распорядок дня:</h3>\r\n            <Tabs defaultActiveKey=\"1\" onChange={changeTab}>\r\n                <TabPane tab=\"Понедельник\" key=\"1\">\r\n                    <h4>Понедельник:</h4>\r\n                    <ScheduleDay \r\n                        dayNumber={'Понедельник'} \r\n                        // defaultActiveKey={activeKey}\r\n                        // setActiveKey={setActiveKey}\r\n                    />\r\n                </TabPane>\r\n                <TabPane tab=\"Вторник\" key=\"2\">\r\n                    <h4>Вторник:</h4>\r\n                    <ScheduleDay \r\n                        dayNumber={'Вторник'} \r\n                        // defaultActiveKey={activeKey} \r\n                        // setActiveKey={setActiveKey}\r\n                    />\r\n                </TabPane>\r\n                <TabPane tab=\"Среда\" key=\"3\">\r\n                    Content of Tab Pane 3\r\n                </TabPane>\r\n                <TabPane tab=\"Четверг\" key=\"4\">\r\n                    Content of Tab Pane 3\r\n                </TabPane>\r\n                <TabPane tab=\"Пятница\" key=\"5\">\r\n                    Content of Tab Pane 3\r\n                </TabPane>\r\n                <TabPane tab=\"Суббота\" key=\"6\">\r\n                    Content of Tab Pane 3\r\n                </TabPane>\r\n                <TabPane tab=\"Воскресенье\" key=\"7\">\r\n                    Content of Tab Pane 3\r\n                </TabPane>\r\n                <TabPane tab=\"Статистика\" key=\"8\">\r\n                    Статистика\r\n                </TabPane>\r\n            </Tabs>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Schedule\r\n\r\n\r\ntype ScheduleDayPropsType = {\r\n    dayNumber: string\r\n    // defaultActiveKey: Array<string>,\r\n    // setActiveKey: Dispatch<SetStateAction<string[]>>\r\n}\r\n\r\nconst ScheduleDay: React.FC<ScheduleDayPropsType> = (props) => {\r\n    const [activeKey, setActiveKey] = useState<Array<string>>([])\r\n    // useEffect( ()=>{\r\n    //     console.log(props.dayNumber, props.defaultActiveKey)\r\n    //     setActiveKey(props.defaultActiveKey)\r\n    // },[props])\r\n\r\n    console.log(props.dayNumber,' activeKey:' ,activeKey)\r\n   \r\n    const formatter = (value: number | undefined) => {\r\n        let hour: string\r\n        let min: string\r\n        if (value) {\r\n            const hourNumber = Math.floor(value / 60)\r\n            hour = hourNumber.toString()\r\n            const minNumber = (value - (hourNumber * 60))\r\n            min = minNumber < 10 ? '0' + minNumber.toString() : minNumber.toString()\r\n        } else {\r\n            hour = min = '??'\r\n        }\r\n\r\n        return (\r\n            <>{hour}:{min}</>\r\n        )\r\n    }\r\n\r\n    const changeActiveContext = (keys: string | string[] ) => {\r\n        console.log(keys)\r\n        if (Array.isArray(keys)) {\r\n            setActiveKey(keys)\r\n        } else {\r\n            setActiveKey([keys])\r\n        }\r\n        \r\n    }\r\n\r\n    const contecsts: Array<string> = [\r\n        'Продажи',\r\n        'Разработка'\r\n    ]\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"d-flex flex-row\">\r\n                <div className=\"pb-5 pt-2\" style={style}>\r\n                    <Slider\r\n                        min={6 * 60}\r\n                        max={1440}\r\n                        vertical\r\n                        reverse\r\n                        range\r\n                        marks={marks}\r\n                        defaultValue={[6 * 60, 18 * 60]}\r\n                        tipFormatter={formatter}\r\n                        className=\"\"\r\n                    />\r\n\r\n                </div>\r\n                <div className=\"p-2  bg-warning\">Flex item</div>\r\n                <div className=\"p-2 flex-grow-1\">\r\n\r\n                    \r\n                    <h5>Контексты</h5>\r\n                    <Collapse \r\n                        activeKey={activeKey} \r\n                        defaultActiveKey={activeKey} \r\n                        onChange={changeActiveContext}\r\n                    >\r\n                        <Panel header={<p className=\"text-left p-0 m-0\">Ежедневно</p>} key=\"0\">\r\n                            <Button className=\"mb-1\" type=\"primary\" size=\"small\">Add</Button>\r\n                            <List\r\n                                size=\"small\"\r\n                                bordered\r\n                                dataSource={contecstsDaily}\r\n                                renderItem={item => <List.Item >{item}</List.Item>}\r\n                            />\r\n                        </Panel>\r\n                        <Panel header={<p className=\"text-left p-0 m-0\">Работа</p>} key=\"1\">\r\n                            <List\r\n                                size=\"small\"\r\n                                bordered\r\n                                dataSource={contecsts}\r\n                                renderItem={item => <List.Item >{item}</List.Item>}\r\n                            />\r\n                        </Panel>\r\n                        <Panel header=\"Дом\" key=\"2\">\r\n                            \r\n                        </Panel>\r\n                        <Panel header=\"Хобби\" key=\"3\">\r\n                            \r\n                        </Panel>\r\n                        <Panel header=\"Спорт\" key=\"4\">\r\n                            \r\n                        </Panel>\r\n                        <Panel header=\"Образование\" key=\"5\">\r\n                            \r\n                        </Panel>\r\n                    </Collapse>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst contecstsDaily: Array<string> = [\r\n    'Подьем',\r\n    'Отбой',\r\n    'Завтрак',\r\n    'Обед',\r\n    'Ужин',\r\n    'Душ',\r\n    'Побрится',\r\n    'Почистить зубы (утро)',\r\n    'Почистить зубы (вечер)',\r\n]",{"ruleId":"604","replacedBy":"605"},{"ruleId":"606","replacedBy":"607"},{"ruleId":"608","severity":1,"message":"609","line":5,"column":10,"nodeType":"610","messageId":"611","endLine":5,"endColumn":22},{"ruleId":"608","severity":1,"message":"612","line":5,"column":36,"nodeType":"610","messageId":"611","endLine":5,"endColumn":43},{"ruleId":"608","severity":1,"message":"613","line":3,"column":10,"nodeType":"610","messageId":"611","endLine":3,"endColumn":33},{"ruleId":"608","severity":1,"message":"614","line":2,"column":10,"nodeType":"610","messageId":"611","endLine":2,"endColumn":21},{"ruleId":"608","severity":1,"message":"615","line":2,"column":24,"nodeType":"610","messageId":"611","endLine":2,"endColumn":36},{"ruleId":"616","severity":1,"message":"617","line":19,"column":8,"nodeType":"618","endLine":19,"endColumn":32,"suggestions":"619"},{"ruleId":"608","severity":1,"message":"620","line":1,"column":10,"nodeType":"610","messageId":"611","endLine":1,"endColumn":16},{"ruleId":"608","severity":1,"message":"621","line":27,"column":11,"nodeType":"610","messageId":"611","endLine":27,"endColumn":25},{"ruleId":"616","severity":1,"message":"622","line":14,"column":7,"nodeType":"618","endLine":14,"endColumn":9,"suggestions":"623"},{"ruleId":"608","severity":1,"message":"624","line":4,"column":10,"nodeType":"610","messageId":"611","endLine":4,"endColumn":18},{"ruleId":"608","severity":1,"message":"625","line":7,"column":10,"nodeType":"610","messageId":"611","endLine":7,"endColumn":18},{"ruleId":"616","severity":1,"message":"617","line":17,"column":8,"nodeType":"618","endLine":17,"endColumn":10,"suggestions":"626"},{"ruleId":"608","severity":1,"message":"627","line":15,"column":12,"nodeType":"610","messageId":"611","endLine":15,"endColumn":19},{"ruleId":"608","severity":1,"message":"628","line":15,"column":21,"nodeType":"610","messageId":"611","endLine":15,"endColumn":31},{"ruleId":"608","severity":1,"message":"629","line":3,"column":29,"nodeType":"610","messageId":"611","endLine":3,"endColumn":49},{"ruleId":"608","severity":1,"message":"630","line":7,"column":11,"nodeType":"610","messageId":"611","endLine":7,"endColumn":26},{"ruleId":"608","severity":1,"message":"631","line":11,"column":12,"nodeType":"610","messageId":"611","endLine":11,"endColumn":22},{"ruleId":"608","severity":1,"message":"632","line":11,"column":24,"nodeType":"610","messageId":"611","endLine":11,"endColumn":37},{"ruleId":"608","severity":1,"message":"633","line":13,"column":11,"nodeType":"610","messageId":"611","endLine":13,"endColumn":19},{"ruleId":"608","severity":1,"message":"634","line":10,"column":10,"nodeType":"610","messageId":"611","endLine":10,"endColumn":23},{"ruleId":"608","severity":1,"message":"635","line":11,"column":8,"nodeType":"610","messageId":"611","endLine":11,"endColumn":12},{"ruleId":"616","severity":1,"message":"617","line":26,"column":8,"nodeType":"618","endLine":26,"endColumn":10,"suggestions":"636"},{"ruleId":"608","severity":1,"message":"637","line":34,"column":15,"nodeType":"610","messageId":"611","endLine":34,"endColumn":32},{"ruleId":"608","severity":1,"message":"638","line":4,"column":10,"nodeType":"610","messageId":"611","endLine":4,"endColumn":28},{"ruleId":"608","severity":1,"message":"639","line":2,"column":28,"nodeType":"610","messageId":"611","endLine":2,"endColumn":36},{"ruleId":"608","severity":1,"message":"640","line":2,"column":38,"nodeType":"610","messageId":"611","endLine":2,"endColumn":47},{"ruleId":"608","severity":1,"message":"641","line":3,"column":10,"nodeType":"610","messageId":"611","endLine":3,"endColumn":21},{"ruleId":"608","severity":1,"message":"642","line":3,"column":33,"nodeType":"610","messageId":"611","endLine":3,"endColumn":42},{"ruleId":"608","severity":1,"message":"643","line":5,"column":9,"nodeType":"610","messageId":"611","endLine":5,"endColumn":25},{"ruleId":"608","severity":1,"message":"637","line":49,"column":7,"nodeType":"610","messageId":"611","endLine":49,"endColumn":24},{"ruleId":"608","severity":1,"message":"638","line":4,"column":10,"nodeType":"610","messageId":"611","endLine":4,"endColumn":28},{"ruleId":"616","severity":1,"message":"617","line":37,"column":8,"nodeType":"618","endLine":37,"endColumn":10,"suggestions":"644"},{"ruleId":"616","severity":1,"message":"645","line":50,"column":8,"nodeType":"618","endLine":50,"endColumn":37,"suggestions":"646"},{"ruleId":"647","severity":1,"message":"648","line":139,"column":43,"nodeType":"649","endLine":139,"endColumn":107},{"ruleId":"647","severity":1,"message":"648","line":139,"column":117,"nodeType":"649","endLine":139,"endColumn":145},{"ruleId":"608","severity":1,"message":"650","line":3,"column":10,"nodeType":"610","messageId":"611","endLine":3,"endColumn":25},{"ruleId":"616","severity":1,"message":"617","line":14,"column":8,"nodeType":"618","endLine":14,"endColumn":10,"suggestions":"651"},{"ruleId":"616","severity":1,"message":"652","line":17,"column":8,"nodeType":"618","endLine":17,"endColumn":37,"suggestions":"653"},{"ruleId":"608","severity":1,"message":"654","line":1,"column":28,"nodeType":"610","messageId":"611","endLine":1,"endColumn":33},{"ruleId":"616","severity":1,"message":"617","line":21,"column":8,"nodeType":"618","endLine":21,"endColumn":10,"suggestions":"655"},{"ruleId":"608","severity":1,"message":"656","line":24,"column":12,"nodeType":"610","messageId":"611","endLine":24,"endColumn":25},{"ruleId":"608","severity":1,"message":"657","line":24,"column":27,"nodeType":"610","messageId":"611","endLine":24,"endColumn":43},{"ruleId":"608","severity":1,"message":"658","line":134,"column":13,"nodeType":"610","messageId":"611","endLine":134,"endColumn":26},{"ruleId":"659","severity":1,"message":"660","line":124,"column":70,"nodeType":"661","messageId":"662","endLine":124,"endColumn":72},{"ruleId":"608","severity":1,"message":"663","line":140,"column":7,"nodeType":"610","messageId":"611","endLine":140,"endColumn":14},{"ruleId":"608","severity":1,"message":"643","line":5,"column":9,"nodeType":"610","messageId":"611","endLine":5,"endColumn":25},{"ruleId":"608","severity":1,"message":"664","line":6,"column":28,"nodeType":"610","messageId":"611","endLine":6,"endColumn":33},{"ruleId":"608","severity":1,"message":"665","line":6,"column":35,"nodeType":"610","messageId":"611","endLine":6,"endColumn":45},{"ruleId":"608","severity":1,"message":"666","line":7,"column":10,"nodeType":"610","messageId":"611","endLine":7,"endColumn":20},{"ruleId":"608","severity":1,"message":"667","line":48,"column":12,"nodeType":"610","messageId":"611","endLine":48,"endColumn":17},{"ruleId":"608","severity":1,"message":"668","line":48,"column":19,"nodeType":"610","messageId":"611","endLine":48,"endColumn":27},{"ruleId":"608","severity":1,"message":"669","line":126,"column":11,"nodeType":"610","messageId":"611","endLine":126,"endColumn":24},{"ruleId":"608","severity":1,"message":"639","line":2,"column":28,"nodeType":"610","messageId":"611","endLine":2,"endColumn":36},{"ruleId":"608","severity":1,"message":"640","line":2,"column":38,"nodeType":"610","messageId":"611","endLine":2,"endColumn":47},{"ruleId":"608","severity":1,"message":"641","line":3,"column":10,"nodeType":"610","messageId":"611","endLine":3,"endColumn":21},{"ruleId":"608","severity":1,"message":"642","line":3,"column":33,"nodeType":"610","messageId":"611","endLine":3,"endColumn":42},{"ruleId":"608","severity":1,"message":"643","line":5,"column":9,"nodeType":"610","messageId":"611","endLine":5,"endColumn":25},{"ruleId":"608","severity":1,"message":"670","line":108,"column":6,"nodeType":"610","messageId":"611","endLine":108,"endColumn":18},{"ruleId":"671","severity":1,"message":"672","line":81,"column":81,"nodeType":"673","messageId":"674","endLine":81,"endColumn":82,"fix":"675"},{"ruleId":"671","severity":1,"message":"672","line":87,"column":81,"nodeType":"673","messageId":"674","endLine":87,"endColumn":82,"fix":"676"},{"ruleId":"616","severity":1,"message":"677","line":17,"column":7,"nodeType":"618","endLine":17,"endColumn":28,"suggestions":"678"},{"ruleId":"608","severity":1,"message":"639","line":2,"column":16,"nodeType":"610","messageId":"611","endLine":2,"endColumn":24},{"ruleId":"608","severity":1,"message":"640","line":2,"column":26,"nodeType":"610","messageId":"611","endLine":2,"endColumn":35},{"ruleId":"608","severity":1,"message":"679","line":14,"column":12,"nodeType":"610","messageId":"611","endLine":14,"endColumn":18},{"ruleId":"659","severity":1,"message":"660","line":257,"column":21,"nodeType":"661","messageId":"662","endLine":257,"endColumn":23},{"ruleId":"608","severity":1,"message":"680","line":6,"column":10,"nodeType":"610","messageId":"611","endLine":6,"endColumn":21},{"ruleId":"608","severity":1,"message":"681","line":13,"column":5,"nodeType":"610","messageId":"611","endLine":13,"endColumn":10},{"ruleId":"608","severity":1,"message":"682","line":18,"column":20,"nodeType":"610","messageId":"611","endLine":18,"endColumn":29},{"ruleId":"608","severity":1,"message":"683","line":20,"column":25,"nodeType":"610","messageId":"611","endLine":20,"endColumn":39},{"ruleId":"616","severity":1,"message":"684","line":49,"column":7,"nodeType":"618","endLine":49,"endColumn":20,"suggestions":"685"},{"ruleId":"616","severity":1,"message":"686","line":71,"column":7,"nodeType":"618","endLine":71,"endColumn":21,"suggestions":"687"},{"ruleId":"608","severity":1,"message":"688","line":1,"column":16,"nodeType":"610","messageId":"611","endLine":1,"endColumn":24},{"ruleId":"608","severity":1,"message":"689","line":1,"column":26,"nodeType":"610","messageId":"611","endLine":1,"endColumn":40},{"ruleId":"608","severity":1,"message":"640","line":1,"column":52,"nodeType":"610","messageId":"611","endLine":1,"endColumn":61},{"ruleId":"608","severity":1,"message":"690","line":4,"column":10,"nodeType":"610","messageId":"611","endLine":4,"endColumn":40},"no-native-reassign",["691"],"no-negated-in-lhs",["692"],"@typescript-eslint/no-unused-vars","'getUsersList' is defined but never used.","Identifier","unusedVar","'actions' is defined but never used.","'isConditionalExpression' is defined but never used.","'ProviderAPI' is defined but never used.","'ProviderType' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["693"],"'Button' is defined but never used.","'onStatusChange' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'props.projectId'. Either include it or remove the dependency array.",["694"],"'isMobile' is defined but never used.","'UserType' is defined but never used.",["695"],"'srcTree' is assigned a value but never used.","'setSrcTree' is assigned a value but never used.","'useSpeechRecognition' is defined but never used.","'speechSynthesis' is assigned a value but never used.","'isSpeaking' is assigned a value but never used.","'setIsSpeaking' is assigned a value but never used.","'commands' is assigned a value but never used.","'initialValues' is defined but never used.","'Item' is defined but never used.",["696"],"'modelsListOptions' is assigned a value but never used.","'getControllersList' is defined but never used.","'useState' is defined but never used.","'useEffect' is defined but never used.","'AntCheckbox' is defined but never used.","'AntSelect' is defined but never used.","'SelectOptionType' is defined but never used.",["697"],"React Hook useEffect has missing dependencies: 'initialValues' and 'props.controllerData.id'. Either include them or remove the dependency array. You can also do a functional update 'setinitialValues(i => ...)' if you only need 'initialValues' in the 'setinitialValues' call.",["698"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'ControllersType' is defined but never used.",["699"],"React Hook useEffect has a missing dependency: 'props.controllerData.id'. Either include it or remove the dependency array. If 'setMethods' needs the current value of 'props.controllerData.id', you can also switch to useReducer instead of useState and read 'props.controllerData.id' in the reducer.",["700"],"'Empty' is defined but never used.",["701"],"'isCodeVisible' is assigned a value but never used.","'setIsCodeVisible' is assigned a value but never used.","'ismodelChange' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'getBody' is assigned a value but never used.","'Input' is defined but never used.","'TreeSelect' is defined but never used.","'ModelsType' is defined but never used.","'value' is assigned a value but never used.","'setValue' is assigned a value but never used.","'onAddResponse' is assigned a value but never used.","'FillableType' is defined but never used.","rest-spread-spacing","Unexpected whitespace after spread operator.","SpreadElement","unexpectedWhitespace",{"range":"702","text":"703"},{"range":"704","text":"703"},"React Hook useEffect has a missing dependency: 'props.item'. Either include it or remove the dependency array. If 'setValue' needs the current value of 'props.item', you can also switch to useReducer instead of useState and read 'props.item' in the reducer.",["705"],"'voices' is assigned a value but never used.","'ConsoleView' is defined but never used.","'synth' is assigned a value but never used.","'setRecord' is assigned a value but never used.","'setRecognition' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'recognition' and 'tergetName'. Either include them or remove the dependency array.",["706"],"React Hook useEffect has missing dependencies: 'props.rand', 'recognition', 'speak', and 'voices'. Either include them or remove the dependency array. If 'setTergetName' needs the current value of 'props.rand', you can also switch to useReducer instead of useState and read 'props.rand' in the reducer.",["707"],"'Dispatch' is defined but never used.","'SetStateAction' is defined but never used.","'reduceEachTrailingCommentRange' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"708","fix":"709"},{"desc":"710","fix":"711"},{"desc":"712","fix":"713"},{"desc":"712","fix":"714"},{"desc":"712","fix":"715"},{"desc":"716","fix":"717"},{"desc":"712","fix":"718"},{"desc":"719","fix":"720"},{"desc":"712","fix":"721"},[3022,3023],"",[3282,3283],{"desc":"722","fix":"723"},{"desc":"724","fix":"725"},{"desc":"726","fix":"727"},"Update the dependencies array to be: [props, props.isProjectsLoaded]",{"range":"728","text":"729"},"Update the dependencies array to be: [props.projectId]",{"range":"730","text":"731"},"Update the dependencies array to be: [props]",{"range":"732","text":"733"},{"range":"734","text":"733"},{"range":"735","text":"733"},"Update the dependencies array to be: [initialValues, props.controllerData.id, props.controllerMethodsList]",{"range":"736","text":"737"},{"range":"738","text":"733"},"Update the dependencies array to be: [props.controllerData.id, props.controllerMethodsList]",{"range":"739","text":"740"},{"range":"741","text":"733"},"Update the dependencies array to be: [props.initialValues, props.item]",{"range":"742","text":"743"},"Update the dependencies array to be: [recognition, recognizing, tergetName]",{"range":"744","text":"745"},"Update the dependencies array to be: [props.rand, props.target, recognition, speak, voices]",{"range":"746","text":"747"},[737,761],"[props, props.isProjectsLoaded]",[429,431],"[props.projectId]",[614,616],"[props]",[1157,1159],[1505,1507],[2137,2166],"[initialValues, props.controllerData.id, props.controllerMethodsList]",[757,759],[903,932],"[props.controllerData.id, props.controllerMethodsList]",[1020,1022],[537,558],"[props.initialValues, props.item]",[2087,2100],"[recognition, recognizing, tergetName]",[3010,3024],"[props.rand, props.target, recognition, speak, voices]"]
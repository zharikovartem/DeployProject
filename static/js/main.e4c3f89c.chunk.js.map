{"version":3,"sources":["api/api.ts","utils/Formik/ValidateFields.ts","utils/Formik/CreateAntField.tsx","utils/Date/NewDeteByString.ts","Components/ToDo/Settings/SettingsModal.tsx","api/authAPI.ts","redux/authReducer.ts","Components/ToDo/Settings/SettingsModalContainer.tsx","Components/ToDo/ToDoHeader/ToDoHeader.tsx","api/taskApi.ts","redux/taskReducer.ts","Components/ToDo/ToDoHeader/ToDoHeaderMobile.tsx","Components/ToDo/ToDoHeader/ToDoHeaderContainer.tsx","Components/ToDo/ToDoForm/ToDoForm.tsx","Components/ToDo/ToDoMobile.tsx","Components/ToDo/ToDoActions/ToDoActionsRouter.tsx","Components/ToDo/TimeScale/TaskItem/TaskItem.tsx","Components/ToDo/TimeScale/TaskItem/TaskItemContainer.tsx","utils/array-helpers.ts","Components/ToDo/TimeScale/TimeScale.tsx","Components/ToDo/TimeScale/TimeScaleContainer.tsx","Components/ToDo/ToDoBrowser.tsx","Components/ToDo/ToDoContainer.tsx","redux/appReducer.ts","redux/codeReducer.ts","api/projectAPI.ts","api/ControllerMethodsAPI.ts","redux/projectReducer.ts","api/taskListAPI.ts","redux/TaskListReducer.ts","api/usersAPI.ts","redux/usersReducer.ts","api/vocabularyAPI.ts","redux/vocabularyReducer.ts","redux/store.ts","Components/Header/MenuPopover.tsx","Components/Header/MenuMobile.tsx","Components/Header/MenuBrowser.tsx","Components/Header/MenuContainer.tsx","Components/Header/Header.tsx","Components/Header/HeaderContainer.tsx","Components/Login/LoginForm.tsx","Components/Login/Login.tsx","Components/Login/LoginContainer.tsx","Components/Orders/Orders.tsx","Components/Orders/OrdersContainer.tsx","Components/TasksTree/TaskTreeForm/Project/BackendForm/BackendForm.tsx","Components/TasksTree/TaskTreeForm/Project/BackendForm/BackendFormContainer.tsx","Components/TasksTree/TaskTreeForm/Project/NewProject/NewProjectForm.tsx","Components/TasksTree/TaskTreeForm/Project/OldProject/OldProjectForm.tsx","Components/TasksTree/TaskTreeForm/Project/OldProject/OldProjectFormContainer.tsx","Components/TasksTree/TaskTreeForm/Project/ProjectForm.tsx","Components/TasksTree/TaskTreeForm/NewTaskTreeForm.tsx","Components/TasksTree/TaskTreeBrowserItem.tsx","Components/TasksTree/TaskTreeBrowserItemContainer.tsx","Components/TasksTree/RunTask.tsx/RunTaskForm.tsx","Components/TasksTree/TaskListActions/TaskListActions.ts","Components/TasksTree/TasksTreeBrowser.tsx","Components/TasksTree/TaskTreeMobileItem.tsx","Components/TasksTree/TasksTreeMobile.tsx","Components/TasksTree/TasksTreeContainer.tsx","Components/Register/RegisterForm.tsx","Components/Register/Register.tsx","Components/Register/RegisterContainer.tsx","Components/Users/Users.tsx","Components/Users/UsersMobile.tsx","redux/usersSelector.ts","Components/Users/UsersContainer.tsx","Components/Users/CurrentUser/UserDataForm.tsx","Components/Users/CurrentUser/CurrentUser.tsx","Components/Users/CurrentUser/CurrentUserMobile.tsx","Components/Users/CurrentUser/CurrentUserContainer.tsx","Components/Development/Projects/Projects.tsx","Components/Development/Projects/ProjectsContainer.tsx","Components/Development/Projects/CurrentProject/Backend/Instanses/InstansesForm.tsx","Components/Development/Projects/CurrentProject/Backend/Models/FieldList.tsx","Components/Development/Projects/CurrentProject/Backend/Models/FieldListContainer.tsx","Components/Development/Projects/CurrentProject/Backend/Models/FieldForm.tsx","Components/Development/Projects/CurrentProject/Backend/Models/ModelForm.tsx","Components/Development/Code/Model/ModelCode.tsx","Components/Development/Code/Model/ModelCodeContainer.tsx","Components/Development/Code/CodeModal.tsx","Components/Development/Code/CodeModalContainer.tsx","Components/Development/Projects/CurrentProject/Backend/Models/Models.tsx","Components/Development/Projects/CurrentProject/Backend/Models/ModelsContainer.tsx","Components/Development/Projects/CurrentProject/Backend/Controllers/ControllerForm.tsx","Components/Development/Projects/CurrentProject/Backend/Controllers/ControllerMethodsForm/ControllerMethodsCode.tsx","Components/Development/Projects/CurrentProject/Backend/Controllers/ControllerMethodsForm/RequestItem.tsx","Components/Development/Projects/CurrentProject/Backend/Controllers/ControllerMethodsForm/ResponseItem.tsx","Components/Development/Projects/CurrentProject/Backend/Controllers/ControllerMethodsForm/ControllerMethodsForm.tsx","Components/Development/Projects/CurrentProject/Backend/Controllers/ControllerMethods.tsx","Components/Development/Projects/CurrentProject/Backend/Controllers/ControllerMethodsContainer.tsx","Components/Development/Projects/CurrentProject/Backend/Controllers/FullControllerMethodCode/FullControllerMethodCode.tsx","Components/Development/Projects/CurrentProject/Backend/Controllers/FullControllerMethodCode/FullControllerMethodCodeContainer.tsx","Components/Development/Projects/CurrentProject/Backend/Controllers/Controllers.tsx","Components/Development/Projects/CurrentProject/Backend/Controllers/ControllersContainer.tsx","Components/Development/Projects/CurrentProject/Backend/Backend.tsx","Components/Development/Projects/CurrentProject/Backend/BackendContainer.tsx","Components/Development/Projects/CurrentProject/Frontend/Instanses/InstansesFrontendForm.tsx","Components/Development/Projects/CurrentProject/Frontend/Frontend.tsx","Components/Development/Projects/CurrentProject/CurrentProject.tsx","Components/Development/Projects/CurrentProject/CurrentProjectContainer.tsx","Components/English/English.tsx","Components/English/EnglishContainer.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ResultCodesEnum","validateRequired","value","errors","validateEmail","test","validatePhone","length","Number","FormItem","Form","Item","Option","Select","CheckboxItem","CheckboxMobile","TextArea","Input","CreateAntField","AntComponent","field","form","hasFeedback","label","selectOptions","submitCount","type","props","touched","name","submitted","hasError","submittedError","touchedError","onInputChange","onChange","console","log","undefined","setFieldValue","target","checked","Array","isArray","mode","onBlur","setFieldTouched","isMobile","help","validateStatus","onOk","onSelect","allowClear","map","item","title","MobileComponent","useState","defaultValue","setValue","useEffect","data","key","onOkCheck","autoHeight","onPickerChangeCheck","disabled","defaultChecked","locale","enUs","className","cols","AntSelect","Picker","AntDatePicker","DatePickerMobile","DatePicker","AntInput","InputItem","AntInputPassword","Password","AntTimePicker","TimePicker","AntCheckbox","Checkbox","AntTextArea","TextareaItem","NewTimeByString","dateValue","newDate","Date","dateParts","split","setHours","setMinutes","setSeconds","setMilliseconds","zeroTimeDate","zeroTimeMoment","moment","maxTimeDate","maxTimeMoment","settingasInstanse","timeScaleInrerval","completeInrerval","timeScaleSingle","completeSingle","timeStart","timeEnd","SettingsModal","settings","viewSettings","timeStartParts","timeEndParts","hours","minutes","seconds","milliseconds","getSettingsInstanseFromPros","ToDo","visible","isModalVisible","handleOk","onCancel","handleCancel","initialValues","onSubmit","values","changeSettings","enableReinitialize","SettingsForm","handleSubmit","renderHeader","component","validate","instance","axios","create","withCredentials","baseURL","getToken","localStorage","getItem","defaults","headers","common","sessionStorage","authAPI","remember_token","get","then","response","post","remember","setItem","removeItem","status","catch","err","request","creds","token","initialState","user","isAuth","authError","actions","setAuthUserData","logout","settingType","setAuthError","error","login","dispatch","getState","a","message","authReducer","state","action","isMoment","format","toTimeString","JSON","parse","view_settings","connect","auth","RangePicker","ToDoHeader","isInterval","setIsInterval","startDate","endDate","dates","setDates","dateInterval","isSame","formatString","style","marginLeft","dateString","e","isReadOnly","shape","icon","FileAddOutlined","fontSize","onClick","showDrawer","showModal","SettingOutlined","taskAPI","taskId","delete","put","taskList","taskListIsFetching","taskSaveStatus","errorMessage","setTaskList","setTaskSaveStatus","setErrorMessage","setTaskListIsFetching","isFetchingValue","date","editTaskList","task","createNewTask","reload","getTaskList","start_date","end_date","deleteTask","taskid","updateTask","taskReducer","stateCopy","id","Tasks","ToDoHeaderMobile","toDate","extra","inline","size","isOpen","ToDoForm","initialStatus","initialDrewerData","header","time","descriptions","ToDoMobile","setIsTimeScaleVisible","setVisible","setIsModalVisible","drawerData","setDrawerData","isTimeScaleVisible","initialFormValues","setInitialFormValues","onComplete","updatedTask","isCompleted","Header","minHeight","document","documentElement","clientHeight","contentStyle","color","textAlign","paddingTop","width","sidebar","formPropsCopy","user_id","userId","resetForm","open","TaskItemMobile","wrap","element","textDecoration","toString","backgroundColor","autoClose","right","text","onPress","left","splitDate","setFullYear","parseInt","setMonth","setDate","onEdit","onOpen","onClose","TimeScale","dateArrey","isSameOrBefore","push","add","getTasksForHour","hour","tasksForHour","filter","getHours","headlineDate","index","orientation","TasksOnly","ToDoActionsRouter","CallAction","isCallVisible","setIsCallVisible","action_data","phone","PhoneOutlined","centered","href","formProps","CallResultForm","TaskItem","setChecked","deleteingInProgess","setDeleteingInProgess","ListGroup","as","join","placement","EditOutlined","danger","DeleteOutlined","sortTaskArrayByParams","b","selestedDates","setSelectedDates","success","getTimeScaleArrey","timeScaleArrey","tomorowTasks","sort","getHeadlineLabel","i","timeVal","concat","zeroTime","ToDoBrowser","ToDoHeaderContainer","bordered","SettingsModalContainer","splitTime","closable","initialized","location","appReducer","codeRowsArray","codeType","codeTargetName","setShowCodeModal","isShow","codeData","setCodeTarget","codeReducer","projectAPI","projectId","backendAPI","backendId","modelsAPI","modelId","controllersAPI","controllerId","controllerMethodsAPI","controllerMethodId","projectList","isProjectLoaded","modelsList","controllersList","controllerMethodsList","isLoaded","backendData","getProjectList","projects","getModelsList","models","createController","controllers","getControllerMethodsList","controllerMethods","updateControllerMethodsList","createControllerMethodsList","projectReducer","taskListAPI","isTaskListLoaded","selectedTasks","setSelectedTasks","backSelectedTasks","createNewTaskList","deleteTaskList","updateTaskList","taskListReducer","newSelectedTasks","pop","usersAPI","usersList","isUsersDataChanged","setUsersList","updateUserList","changedUserData","setUsersDataChanged","getUsersList","UsersList","updateUser","authActions","usersReducer","statetCopy","newUserList","vocabularyAPI","part","vocabularyList","vocabularyReducer","rootReducer","combineReducers","app","users","code","vocabulary","store","createStore","applyMiddleware","thunkMiddleware","Popover","MenuPopover","mask","overlay","onVisibleChange","opt","children","onLogout","height","padding","marginRight","display","alignItems","MenuMobile","history","useHistory","useLocation","showMenu","setShowMenu","menuData","forEach","dataItem","pathname","getSelectedMenuItem","selectedMenuItem","setSelectedMenuItem","subMenu","cItem","replace","menuEl","loadingEl","justifyContent","leftContent","src","alt","onLeftClick","preventDefault","rightContent","appLocation","to","SubMenu","Menu","MenuBrowser","theme","childs","userStatus","MenuContainer","LoginForm","Login","email","password","block","Orders","BackendForm","isBackendNew","isProjectListLoaded","setOldProjectsData","oldProjectsData","onSelectBackEndType","NewProjectForm","frontend","setFrontend","backend","setBackend","setIsBackendNew","submitFrontEnd","val","OldProjectForm","ProjectForm","isNewType","setIsNewType","NewTaskTreeForm","taskTypes","taskType","setTaskType","task_type","Panel","Collapse","TaskTreeBrowserItem","parent_id","onAddSubtask","day","zone","time_to_complete","newFormValues","onStatusChange","onRunTask","String","ChildItem","dataSource","childsTasklList","renderItem","CollapseItem","getChildsList","draggable","defaultActiveKey","collapsible","ghost","LastItem","data-toggle","aria-controls","ButtonsBlock","CaretRightOutlined","PlusCircleOutlined","elem","RunTaskFormCall","checkActionsType","formPropsData","lead_name","phone_number","getInitialValues","getSelectOptions","taskTreeTypes","TasksTreeBrowser","runTaskVisible","setRunTaskVisible","runData","setRunData","newTaskList","okText","cancelText","newToDo","description","createNewToDo","List","TaskTreeItemMobile","useDispatch","taskItem","new_time_to_complete","onComplet","initialTimeToComplete","TasksTreeMobile","onAdd","taskName","onOpenChange","parentId","isSubform","childTypes","RegisterForm","statusOptions","Register","register","credsToLogin","Object","prototype","hasOwnProperty","call","Users","url","useRouteMatch","UserStatus","UsersMobile","getUsersListSelector","createSelector","UserDataForm","userData","created_at","updated_at","FormFielsd","isChanged","setIsChanged","submitPosible","getTargetUser","toDoPart","toDoList","currentPage","defaultPageSize","startIndex","endIndex","CurrentUser","setDefaultPageSize","setCurrentPage","toDoFormVisible","setToDoFormVisible","match","params","setDateInterval","total","showTotal","range","defaultCurrent","onShowSizeChange","current","tasklist","toDo","isBetween","TodoItem","timeParts","CurrentUserMobile","getTaskListCallback","useCallback","onTaskOpen","enUS","Math","ceil","Projects","InstansesForm","isDataChanged","setIsDataChanged","FieldList","fields","targetName","fieldName","fieldType","isNulleble","isPrimary","isNew","openModalToAddField","fieldId","deleteField","fieldParam","FieldRow","rowBG","FieldForm","radioValue","setRadioValue","Group","setValues","ModelForm","ModelCode","soft_delete","db","toUpperCase","slice","tab","getFieldtype","Fillable","Hidden","count","tabs","getTabs","CodeModal","ModelCodeContainer","getTargetComponennt","Models","modelItem","changePanel","updateModel","vals","createModel","backend_id","CodeModalContainer","ModelFormItem","fieldsdata","fieldInit","formValues","oldValue","newFieldData","stringify","own","ModelView","initialFieldValues","setInitialFieldValues","emptyInitialModalValues","newFieldName","newFieldType","initialModalValues","setInitialModalValues","initialValues2","setInitialValues2","targetData","newController","isResource","createControllerThunk","modalFieldFormValues","newFields","isUpdate","ControllerForm","ControllerMethodsCode","methodData","body_actions","getResponse","responseData","getMetodResponse","getResponseResponse","tabIndex","methodName","responseBlock","responseItems","variable","RequestItem","showSearch","dropdownStyle","maxHeight","overflow","placeholder","showCheckedStrategy","typeValue","labelList","onRowChange","selectable","per_id","model","event","ResponseItem","responseInit","controllerMethod","methodId","newResponse","setResponseValues","responseRows","rowValue","elementNumber","param","ResponseRows","onNameChange","onVariableChange","ControllerMethodsForm","setRequest","isRequest","setIsRequest","setResponse","isResponse","setIsResponse","setBody_actions","isBody_actions","setIsBody_actions","onAddRequest","newRequest","requestCopy","RestTypeOtions","onKeyDown","v","keyCode","before","substr","selectionEnd","after","newStart","selectionStart","newEnd","setTimeout","rows","responseValues","ControllerMethods","emptyInitialValues","setMethodData","setinitialValues","modalTitle","setModalTitle","controllerData","newControllerMethodsList","controller_id","isMiddleware","rest_type","showMethod","FullControllerMethodCode","methods","setMethods","method","Controllers","getControllersList","updateController","ControllerItem","isResurce","modelsOptions","options","getOptions","folder","model_id","ControllerInstansesForm","needGetMethods","Backend","activeKey","setActiveKey","getBackendData","project","getTargetProject","projectsList","instansesInitialValues","ip","closeKey","openKey","updateBackend","isProjectsLoaded","InstansesFrontendForm","treeData","addTreeItem","trace","TreeSRC","checkable","defaultExpandedKeys","defaultSelectedKeys","defaultCheckedKeys","selectedKeys","info","onCheck","checkedKeys","FolderRow","Frontend","getCurrentFrontend","CurrentProject","frontend_id","English","getVocabularyList","data-url","footer","eng_value","rus_value","eng_sound","Audio","play","AppContainer","compose","withRouter","initializeApp","promise","resultCode","Promise","all","addLocation","setLocation","instanseCreds","parseQueryString","exact","path","render","Page404","MainApp","search","pair","subTitle","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.e4c3f89c.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nexport const instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://crmapiserver.h1n.ru/api/',\r\n})\r\n\r\nexport enum ResultCodesEnum {\r\n    Success = 0,\r\n    Error = 1\r\n}\r\n\r\nexport type APIResponseType<D = {}, RC = ResultCodesEnum> = {\r\n    data: D\r\n    messages: Array<string>\r\n    resultCode: RC\r\n}\r\n\r\nexport const getToken = (): string => {\r\n    if (localStorage.getItem('remember_token')) {\r\n        instance.defaults.headers.common['X-Auth-Token'] = localStorage.getItem('remember_token')\r\n    }\r\n    if (sessionStorage.getItem('remember_token')) {\r\n        instance.defaults.headers.common['X-Auth-Token'] = sessionStorage.getItem('remember_token')\r\n    }\r\n    return instance.defaults.headers.common['X-Auth-Token']\r\n}","export const validateRequired = (value: string) => {\r\n    let errors;\r\n    if (!value) {\r\n        errors = \"Required!\";\r\n    }\r\n    return errors;\r\n}\r\n\r\nexport const validateEmail = (value: string) => {\r\n    let errors;\r\n\r\n    if (!value) {\r\n        errors = \"Required!\";\r\n    } else if (!/^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/.test(value)) {\r\n        errors = \"Invalid email address!\";\r\n    }\r\n\r\n    return errors;\r\n};\r\n\r\nexport const validateAsync = (value: string) => {\r\n    const sleep = () => new Promise(resolve => setTimeout(resolve, 2000));\r\n    return sleep().then(() => {\r\n        if (['admin', 'null', 'god'].includes(value)) {\r\n            return 'Nice try'\r\n        }\r\n    })\r\n}\r\n\r\nexport const validatePhone = (value: string) => {\r\n    let errors;\r\n    if (!value) {\r\n        errors = \"Required!\";\r\n    } else if (value.length === 1) {\r\n        if ( !Number(value) ) {\r\n            if (value !== '+') {\r\n                errors = \"NOT NUMBER!\";\r\n            }\r\n        }\r\n    } else if (value.length < 9) {\r\n        if (!Number(value)) {\r\n            errors = \"NOT NUMBER!\"\r\n        } else {\r\n            errors = \"Phone number is short\"\r\n        }\r\n    } else if (value.length === 9) {\r\n        const prefix = value[0]+value[1]\r\n        if (prefix !== '25' || '29' || '33' || '44') {\r\n            errors = \"Wrong prefix\"\r\n        }\r\n    } else if (value.length < 12) {\r\n        if (value[0] !== '+') {\r\n            if (!Number(value)) {\r\n                errors = \"NOT NUMBER!\"\r\n            } else {\r\n                errors = \"Phone number is short!\"\r\n            }\r\n        } else {\r\n            if (!Number(value)) {\r\n                errors = \"NOT NUMBER!\"\r\n            } \r\n        }\r\n    } else if (value.length === 13) {\r\n        if (value[0] !== '+') {\r\n            errors = \"Phone number is too long!\"\r\n        }\r\n    }else if (value.length > 13) {\r\n        errors = \"Phone number is too long!\"\r\n    }\r\n\r\n    return errors;\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport { isMobile } from \"react-device-detect\"\r\nimport {\r\n    DatePicker,\r\n    Form,\r\n    Input,\r\n    TimePicker,\r\n    Select,\r\n    Checkbox\r\n} from \"antd\"\r\nimport enUs from 'antd-mobile/lib/date-picker/locale/en_US'\r\nimport {\r\n    List,\r\n    InputItem,\r\n    Checkbox as CheckboxMobile,\r\n    TextareaItem,\r\n    Picker,\r\n    DatePicker as DatePickerMobile,\r\n} from 'antd-mobile'\r\n\r\nconst FormItem = Form.Item\r\nconst Option = Select.Option\r\nconst CheckboxItem = CheckboxMobile.CheckboxItem\r\nconst { TextArea } = Input;\r\n\r\nconst CreateAntField = (AntComponent: any) => (\r\n    {\r\n        field,\r\n        form,\r\n        hasFeedback,\r\n        label,\r\n        selectOptions,\r\n        submitCount,\r\n        type,\r\n        ...props\r\n    }: any\r\n) => {\r\n\r\n    const touched = form.touched[field.name];\r\n    const submitted = submitCount > 0;\r\n    const hasError = form.errors[field.name];\r\n    const submittedError = hasError && submitted;\r\n    const touchedError = hasError && touched;\r\n\r\n    const onInputChange = (value: any) => {\r\n        //console.log(value)\r\n        //console.log(props)\r\n\r\n        if (props.onChange) {\r\n            console.log('onChange field in create', value)\r\n            props.onChange(field.name, value)\r\n        }\r\n\r\n        if (value === undefined) {\r\n            if (type === 'select' || type === 'time') {\r\n                //console.log('1')\r\n                form.setFieldValue(field.name, null)\r\n            }\r\n        } else if(value === null) {\r\n            //console.log('2')\r\n            form.setFieldValue(field.name, null)\r\n        } else if (type === 'checkbox') {\r\n            //console.log('3')\r\n            form.setFieldValue(field.name, value.target.checked)\r\n        } else if (value.target) {\r\n            //console.log('4')\r\n            form.setFieldValue(field.name, value.target.value)\r\n        } else {\r\n            if (type === 'time') {\r\n                //console.log('5')\r\n                form.setFieldValue(field.name, value)\r\n            } else if (Array.isArray(value)) {\r\n                //console.log('6')\r\n                if (props.mode && props.mode === 'multiple') {\r\n                    form.setFieldValue(field.name, value) // Для select mode === 'multiple'\r\n                } else {\r\n                    form.setFieldValue(field.name, value[0])\r\n                }\r\n            } else {\r\n                //console.log('7')\r\n                form.setFieldValue(field.name, value)\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    const onChange = (value: string | React.ChangeEvent<HTMLInputElement>) => {\r\n        if (props.onChange) {\r\n            console.log('onChange field in create')\r\n            props.onChange(field.name, value)\r\n        }\r\n        if (typeof value !== \"string\" && value.target.type === 'checkbox') {\r\n            form.setFieldValue(field.name, value.target.checked)\r\n        } else {\r\n            form.setFieldValue(field.name, value)\r\n        }\r\n    }\r\n\r\n    const onBlur = () => form.setFieldTouched(field.name, true);\r\n\r\n    // console.log('props.: ', props)\r\n    \r\n    return (\r\n        <FormItem\r\n            label={!isMobile ? label : null}\r\n            hasFeedback={\r\n                (hasFeedback && submitted) || (hasFeedback && touched) ? true : false\r\n            }\r\n            help={submittedError || touchedError ? hasError : false}\r\n            validateStatus={submittedError || touchedError ? \"error\" : \"success\"}\r\n        >\r\n            {isMobile ?\r\n                <MobileComponent\r\n                    {...props}\r\n                    AntComponent={AntComponent}\r\n                    onBlur={onBlur}\r\n                    type={type}\r\n                    onInputChange={onInputChange}\r\n                    onChange={onChange}\r\n                    label={label}\r\n                    selectOptions={selectOptions}\r\n                    value={field.value}\r\n                    onOk={props.onSelect}\r\n                />\r\n                :\r\n                <AntComponent\r\n                    {...field}\r\n                    {...props}\r\n                    allowClear={selectOptions ? \"true\" : \"false\"}\r\n                    onBlur={onBlur}\r\n                    onChange={type ? onInputChange : onChange}\r\n                    checked={field.value}\r\n                >\r\n                    {selectOptions &&\r\n                        selectOptions.map((item: any) => <Option title={item.name} value={item.value} key={item.name}>{item.name}</Option>)}\r\n\r\n                    {/* {\r\n                        type === 'radio' ? \r\n                        // <label htmlFor={'1'}>\r\n                            // {label} \r\n                            <>label</>\r\n                        // </label>\r\n                        : null\r\n                    } */}\r\n                </AntComponent>\r\n            }\r\n\r\n        </FormItem>\r\n    )\r\n}\r\n\r\n\r\n\r\ntype SelectOptionsType = {\r\n    name: string,\r\n    value: string\r\n}\r\n\r\ntype MobileComponentType = {\r\n    onInputChange: (value: any) => void,\r\n    selectOptions: Array<SelectOptionsType>,\r\n    AntComponent: any,\r\n    onBlur: () => void,\r\n    type: 'select' | 'date' | 'text' | 'number' | 'password' | 'time' | 'checkbox' | 'textarea',\r\n    onChange: (value: any) => void,\r\n    label: string,\r\n    value: any,\r\n    onOk: (val:any)=>void,\r\n    disabled?: boolean,\r\n}\r\n\r\nconst MobileComponent: React.FC<MobileComponentType> = (props) => {\r\n    const [defaultValue, setValue] = useState(props.type === 'select' ? [props.value] : props.value)\r\n\r\n    useEffect(() => {\r\n        if (props.type === 'select' && !Array.isArray(props.value) ) {\r\n            setValue([props.value])\r\n        } else {\r\n            setValue(props.value)\r\n        }\r\n    }, [props.value, props.type])\r\n\r\n    const onInputChange = (value: any) => {\r\n        setValue(value)\r\n        props.onInputChange(value)\r\n        if (props.type === 'checkbox') {\r\n            props.onOk(value)\r\n        }\r\n    }\r\n\r\n    const onPickerChange = (value:any) => {\r\n        setValue(value)\r\n    }\r\n\r\n    const onOk = (value:any) => {\r\n        setValue(value)\r\n        if (props.onOk) {\r\n            props.onOk(value)\r\n        }\r\n        \r\n    }\r\n\r\n    type DataType = Array<\r\n        {\r\n            label: string,\r\n            value: string,\r\n            key: string\r\n        }\r\n    >\r\n\r\n    let data: DataType\r\n    if (props.selectOptions !== null && props.selectOptions !== undefined) {\r\n        data = props.selectOptions.map((item: SelectOptionsType) => {\r\n            return (\r\n                {\r\n                    label: item.name,\r\n                    value: item.value,\r\n                    key: item.name\r\n                }\r\n            )\r\n        })\r\n    } else {\r\n        data = []\r\n    }\r\n\r\n    const mode = props.type\r\n    \r\n    const autoHeight = props.type === 'textarea' ? {autoHeight: true} : null\r\n    const onPickerChangeCheck = props.type === 'date' || 'time' ? onPickerChange : null\r\n    const disabled = props.disabled ? {disabled: true} : null\r\n\r\n    let onOkCheck\r\n    if (props.AntComponent.onOk) {\r\n        onOkCheck = onOk\r\n    }\r\n\r\n    if (props.disabled) {\r\n\r\n    }   \r\n\r\n    return (\r\n        <List>\r\n            <props.AntComponent\r\n                onBlur={props.onBlur}\r\n                type={props.type}\r\n                mode={mode}\r\n\r\n                defaultValue={defaultValue}\r\n                defaultChecked={defaultValue}\r\n                value={defaultValue}\r\n\r\n                key={props.label}\r\n                title={props.label}\r\n                locale={enUs}\r\n                {...autoHeight}\r\n                {...disabled}\r\n\r\n                className={props.type === 'text' ? 'pl-0' : null}\r\n                data={data}\r\n                cols={1}\r\n                \r\n                {...onOkCheck}\r\n                {...onPickerChangeCheck}\r\n                onChange={props.type ? onInputChange : props.onChange}\r\n            >\r\n                <List.Item\r\n                    className=\"pl-0\"\r\n                >\r\n                    {props.label}\r\n                </List.Item>\r\n            </props.AntComponent>\r\n        </List>\r\n    )\r\n}\r\n\r\n\r\nexport const AntSelect = !isMobile ? CreateAntField(Select) : CreateAntField(Picker)\r\nexport const AntDatePicker = !isMobile ? CreateAntField(DatePicker) : CreateAntField(DatePickerMobile)\r\nexport const AntInput = !isMobile ? CreateAntField(Input) : CreateAntField(InputItem)\r\nexport const AntInputPassword = !isMobile ? CreateAntField(Input.Password) : CreateAntField(InputItem)\r\nexport const AntTimePicker = !isMobile ? CreateAntField(TimePicker) : CreateAntField(DatePickerMobile)\r\nexport const AntCheckbox = !isMobile ? CreateAntField(Checkbox) : CreateAntField(CheckboxItem)\r\nexport const AntTextArea = !isMobile ? CreateAntField(TextArea) : CreateAntField(TextareaItem)\r\n","\r\n\r\nexport const NewTimeByString = (dateValue?: string): Date => {\r\n    const newDate = new Date()\r\n    let dateParts: Array<string> = []\r\n    if (dateValue) {\r\n        dateParts = dateValue.split(':')\r\n    }\r\n    \r\n    newDate.setHours(!dateParts[0] ? 0 : Number(dateParts[0]))\r\n    newDate.setMinutes(!dateParts[1] ? 0 : Number(dateParts[1]))\r\n    newDate.setSeconds(!dateParts[2] ? 0 : Number(dateParts[2]))\r\n    newDate.setMilliseconds(!dateParts[3] ? 0 : Number(dateParts[3]))\r\n\r\n    return newDate\r\n}\r\n\r\nexport const NewDateByString = (dateValue?: string): Date => {\r\n    const newDate = new Date()\r\n    let dateParts: Array<string> = []\r\n    if (dateValue) {\r\n        dateParts = dateValue.split('-')\r\n    }\r\n    \r\n    newDate.setFullYear(!dateParts[0] ? 0 : Number(dateParts[0]))\r\n    newDate.setMonth(!dateParts[1] ? 0 : Number(dateParts[1]))\r\n    newDate.setDate(!dateParts[2] ? 0 : Number(dateParts[2]))\r\n\r\n    return newDate\r\n}","import React, { ReactNode } from 'react'\r\nimport { Modal } from 'antd'\r\nimport { SettingsModalPropsType } from './SettingsModalContainer'\r\nimport { Form, Field, FormikProps, Formik } from 'formik'\r\nimport { validateRequired } from '../../../utils/Formik/ValidateFields'\r\nimport { AntTimePicker, AntCheckbox } from '../../../utils/Formik/CreateAntField'\r\nimport { List } from 'antd-mobile'\r\nimport moment from \"moment\"\r\nimport { isMobile } from 'react-device-detect'\r\nimport { NewTimeByString } from '../../../utils/Date/NewDeteByString'\r\n\r\nconst zeroTimeDate = NewTimeByString()\r\nconst zeroTimeMoment = moment(zeroTimeDate)\r\n\r\nconst maxTimeDate = NewTimeByString('23:00')\r\nconst maxTimeMoment = moment(maxTimeDate)\r\n\r\nconst settingasInstanse = {\r\n        timeScaleInrerval: false,\r\n        completeInrerval: true,\r\n        timeScaleSingle: true,\r\n        completeSingle: true,\r\n        timeStart: isMobile ? zeroTimeDate : zeroTimeMoment,\r\n        timeEnd: isMobile ? maxTimeDate : maxTimeMoment,\r\n}\r\n\r\nexport type SettingasInstanseType = typeof settingasInstanse\r\n\r\nexport type OwmSettingsModalPropsType = {\r\n    isModalVisible: boolean,\r\n    handleOk: () => void,\r\n    handleCancel: () => void\r\n}\r\n\r\nconst getSettingsInstanseFromPros = (viewSettings: any) => {\r\n    const timeStartParts = viewSettings.timeStart.split(':')\r\n    const timeEndParts = viewSettings.timeEnd.split(':')\r\n\r\n    return {\r\n        ...viewSettings,\r\n        timeStart: isMobile ? NewTimeByString(viewSettings.timeStart) : moment().hours(timeStartParts[0]).minutes(timeStartParts[1]).seconds(0).milliseconds(0),\r\n        timeEnd: isMobile ? NewTimeByString(viewSettings.timeEnd) : moment().hours(timeEndParts[0]).minutes(timeEndParts[1]).seconds(0).milliseconds(0),\r\n    }\r\n}\r\n\r\nconst SettingsModal: React.FC<SettingsModalPropsType> = (props) => {\r\n    const settings = props.viewSettings !== null ? getSettingsInstanseFromPros(props.viewSettings.ToDo) : settingasInstanse\r\n\r\n    const handleSubmit = (values: SettingasInstanseType) => {\r\n        props.changeSettings('ToDo', values)\r\n        props.handleOk()\r\n    }\r\n\r\n    return (\r\n        <Modal\r\n            title=\"Task display settings\"\r\n            visible={props.isModalVisible}\r\n            onOk={props.handleOk}\r\n            onCancel={props.handleCancel}\r\n        >\r\n            <Formik\r\n                initialValues={settings}\r\n                onSubmit={handleSubmit}\r\n                enableReinitialize={true}\r\n            >\r\n                {SettingsForm}\r\n            </Formik>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default SettingsModal\r\n\r\nconst SettingsForm: ((props: FormikProps<{}>) => ReactNode) = (props) => {\r\n    return (\r\n        <Form\r\n            className=\"form-container\"\r\n            onSubmit={props.handleSubmit}\r\n        >\r\n            <List renderHeader={() => 'Single date settings'}>\r\n                <Field\r\n                    component={AntCheckbox}\r\n                    name=\"timeScaleSingle\"\r\n                    label=\"is time scale visible\"\r\n                    submitCount={props.submitCount}\r\n                />\r\n\r\n                <Field\r\n                    component={AntCheckbox}\r\n                    name=\"completeSingle\"\r\n                    label=\"is complete visible\"\r\n                    submitCount={props.submitCount}\r\n                />\r\n            </List>\r\n            <List renderHeader={() => 'Inrerval date settings'}>\r\n                <Field\r\n                    component={AntCheckbox}\r\n                    name=\"timeScaleInrerval\"\r\n                    label=\"is time scale visible\"\r\n                    submitCount={props.submitCount}\r\n                />\r\n\r\n                <Field\r\n                    component={AntCheckbox}\r\n                    name=\"completeInrerval\"\r\n                    label=\"is complete visible\"\r\n                    submitCount={props.submitCount}\r\n                />\r\n            </List>\r\n            <List renderHeader={() => 'Work day info'}>\r\n                <Field\r\n                    component={AntTimePicker}\r\n                    name=\"timeStart\"\r\n                    type=\"time\"\r\n                    label=\"Start time\"\r\n                    validate={validateRequired}\r\n                    submitCount={props.submitCount}\r\n                    hasFeedback\r\n                />\r\n\r\n                <Field\r\n                    component={AntTimePicker}\r\n                    name=\"timeEnd\"\r\n                    type=\"time\"\r\n                    label=\"End time\"\r\n                    validate={validateRequired}\r\n                    submitCount={props.submitCount}\r\n                    hasFeedback\r\n                />\r\n            </List>\r\n            <div className=\"submit-container\">\r\n                <button className=\"ant-btn ant-btn-primary\" type=\"submit\">\r\n                    Save\r\n                </button>\r\n            </div>\r\n        </Form>\r\n    )\r\n}\r\n\r\n\r\n","import { credsType } from \"../redux/authReducer\";\r\nimport { instance } from \"./api\";\r\n\r\nexport type RegisterFormType = {\r\n    name: string,\r\n    email: string,\r\n    password: string,\r\n    remember?: boolean,\r\n    status?: 'guest' | 'admin'\r\n}\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        let remember_token: string | null = 'error'\r\n        if (localStorage.getItem('remember_token')) {\r\n            remember_token = localStorage.getItem('remember_token')\r\n        }\r\n        if (sessionStorage.getItem('remember_token')) {\r\n            remember_token = sessionStorage.getItem('remember_token')\r\n        }\r\n        return instance.get(`authMe/`+remember_token).then( (response) => {\r\n            return response\r\n        })\r\n    },\r\n\r\n    login(data: credsType) {\r\n        return instance.post('login', data)\r\n        .then(response => {\r\n            if (data.remember) {\r\n                if (response.data.remember_token !== null) {\r\n                    localStorage.setItem('remember_token', response.data.remember_token);\r\n                } else {\r\n                    localStorage.removeItem('remember_token');\r\n                }\r\n            } else {\r\n                if (response.data.remember_token !== null) {\r\n                    sessionStorage.setItem('remember_token', response.data.remember_token);\r\n                } else {\r\n                    sessionStorage.removeItem('remember_token');\r\n                }\r\n            }\r\n            \r\n\r\n            return response.status === 200 ? response : null;\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                return err.response\r\n            } else if (err.request) {\r\n            } else {\r\n            }\r\n            return null\r\n        })\r\n    },\r\n\r\n    register(creds: RegisterFormType) {\r\n        return instance.post('register', creds)\r\n        .then(response => {\r\n            if (response.data.remember_token !== null) {\r\n                localStorage.setItem('remember_token', response.data.token);\r\n            } else {\r\n                localStorage.removeItem('remember_token');\r\n            }\r\n            return response.status === 200 ? response : null;\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                return err.response\r\n            } else if (err.request) {\r\n            } else {\r\n            }\r\n            return null\r\n        })\r\n    }\r\n}","import { authAPI, RegisterFormType } from \"../api/authAPI\";\r\nimport { SettingasInstanseType } from \"../Components/ToDo/Settings/SettingsModal\";\r\nimport { BaseThunkType, InferActionsTypes } from \"./store\"\r\nimport moment from \"moment\"\r\n\r\ntype InitialStateType = {\r\n    user: UserType | null,\r\n    remember_token: string | null,\r\n    isAuth: boolean\r\n    viewSettings: any\r\n    authError: null | string\r\n}\r\nlet initialState: InitialStateType = {\r\n    user: null,\r\n    remember_token: null,\r\n    isAuth: false,\r\n    viewSettings: {\r\n        ToDo: {}\r\n    },\r\n    authError: null\r\n}\r\n\r\nconst authReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/AUTH/SET_AUTH_ERROR':\r\n            return{...state, authError: action.error}\r\n        case 'SN/AUTH/SET_SETTINGS_DATA':\r\n            let viewSettings = {...state.viewSettings}\r\n            \r\n            let timeStart: string = ''\r\n            if (moment.isMoment(action.settings.timeStart)) {\r\n                timeStart = action.settings.timeStart.format('h:mm A')\r\n            } else {\r\n                timeStart = action.settings.timeStart.toTimeString().split(' ')[0]\r\n            }\r\n            let timeEnd: string = ''\r\n            if (moment.isMoment(action.settings.timeEnd)) {\r\n                timeEnd = action.settings.timeEnd.format('h:mm A')\r\n            } else {\r\n                timeEnd = action.settings.timeEnd.toTimeString().split(' ')[0]\r\n            }\r\n\r\n            viewSettings[action.settingType] = {\r\n                ...action.settings,\r\n                timeStart: timeStart,\r\n                timeEnd: timeEnd\r\n            }\r\n            return {...state, viewSettings: viewSettings}\r\n        case 'SN/AUTH/SET_USER_DATA':\r\n            if (action.user !== null) {\r\n                return { ...state, \r\n                            user: action.user, \r\n                            remember_token: action.remember_token, \r\n                            isAuth: true, \r\n                            viewSettings: JSON.parse(action.user.view_settings),\r\n                            authError: null\r\n                        }\r\n            } else {\r\n                return initialState;\r\n            }\r\n            \r\n        case 'SN/AUTH/LOGOUT':\r\n            localStorage.removeItem('remember_token')\r\n            sessionStorage.removeItem('remember_token');\r\n            return initialState;\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport type UserType = {\r\n    created_at: string\r\n    email: string\r\n    email_verified_at: null | string\r\n    id: number\r\n    name: string\r\n    status: string\r\n    updated_at: string,\r\n    view_settings: string\r\n    toDoList?: Array<any> \r\n}\r\nexport const actions = {\r\n    setAuthUserData: (user: UserType | null, remember_token: string | null) => ({ type: 'SN/AUTH/SET_USER_DATA', user, remember_token } as const),\r\n    logout: () => ({type: 'SN/AUTH/LOGOUT'} as const),\r\n    changeSettings: (settingType: string, settings: SettingasInstanseType) => ({ type: 'SN/AUTH/SET_SETTINGS_DATA', settingType, settings } as const),\r\n    setAuthError: (error: string) => ({type: 'SN/AUTH/SET_AUTH_ERROR', error } as const),\r\n}\r\n\r\nexport const getAuthUserData = (): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        let response = await authAPI.me()\r\n\r\n        if (response !== null) {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(actions.setAuthUserData(response.data.user, response.data.remember_token))\r\n            } else {\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport type credsType = {\r\n    email: string,\r\n    password: string,\r\n    remember: boolean\r\n}\r\n\r\nexport const login = (data: credsType): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        let response = await authAPI.login(data)\r\n        if (response) {\r\n            if (response.status === 200) {\r\n                dispatch(actions.setAuthUserData(response.data.user, response.data.remember_token))\r\n            } else {\r\n                dispatch(actions.setAuthError(response.data.message))\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport const register = (creds: RegisterFormType): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        const response = await authAPI.register(creds)\r\n        if (response.status === 200) {\r\n            const credsToLogin: credsType = {\r\n                email: creds.email,\r\n                password: creds.password,\r\n                remember: creds.remember ? creds.remember : false\r\n            }\r\n            dispatch(login(credsToLogin))\r\n        } else {\r\n            let message: string = ''\r\n            for (const key in response.data) {\r\n                if (Object.prototype.hasOwnProperty.call(response.data, key)) {\r\n                    const element = response.data[key];\r\n                    message = message+key+': '+element[0]+';'\r\n                }\r\n            }\r\n            \r\n            dispatch(actions.setAuthError(message))\r\n        }\r\n        \r\n    }\r\n}\r\n\r\nexport default authReducer;\r\n\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType< ActionsTypes>\r\n\r\n","import {connect} from 'react-redux'\r\nimport SettingsModal, { OwmSettingsModalPropsType, SettingasInstanseType } from './SettingsModal'\r\nimport { AppStateType } from '../../../redux/store'\r\nimport { actions } from './../../../redux/authReducer'\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    changeSettings: (settingType: string, settings: SettingasInstanseType)=> void\r\n}\r\n\r\nexport type SettingsModalPropsType = MapPropsType & MapDispatchPropsType & OwmSettingsModalPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        viewSettings: state.auth.viewSettings\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwmSettingsModalPropsType, AppStateType>(mapStateToProps, \r\n    {changeSettings: actions.changeSettings} ) \r\n    ( SettingsModal )\r\n    \r\n\r\n","import React, { useState, useEffect } from 'react'\r\nimport { DatePicker, Checkbox, Button } from 'antd'\r\nimport { FileAddOutlined, SettingOutlined } from '@ant-design/icons'\r\nimport { CheckboxChangeEvent } from 'antd/lib/checkbox'\r\nimport {RangeValue} from '../../../Types/types'\r\nimport { ToDoHeaderPropsType } from './ToDoHeaderContainer'\r\nimport moment from 'moment'\r\n\r\nconst { RangePicker } = DatePicker\r\n\r\nconst ToDoHeader: React.FC<ToDoHeaderPropsType> = (props) => {\r\n    const [isInterval, setIsInterval] = useState(false)\r\n    const [dates, setDates] = useState<{startDate: moment.Moment, endDate: moment.Moment}>({startDate: moment(), endDate: moment()})\r\n\r\n    useEffect(() => {\r\n        if ( \r\n            !props.dateInterval.startDate.isSame(dates.startDate.format('YYYY-MM-DD'), \"day\" ) ||\r\n            !props.dateInterval.endDate.isSame(dates.endDate.format('YYYY-MM-DD'), \"day\" )\r\n        ) {\r\n            props.setIsInterval(isInterval, dates)\r\n        }\r\n        \r\n    }, [isInterval, dates, props])\r\n\r\n\r\n    const onDateTypeChange = (e: CheckboxChangeEvent) => {\r\n        if (!e.target.checked) {\r\n            setDates({\r\n                startDate: dates.startDate,\r\n                endDate: dates.startDate\r\n            })\r\n        }\r\n        setIsInterval(e.target.checked)\r\n        props.setIsInterval(e.target.checked, props.dateInterval)\r\n    }\r\n\r\n    const onDateRangeChange = (values: RangeValue<moment.Moment>, formatString: [string, string]): void => {\r\n        if (values !== null && values[0] !== null && values[1] !== null ) {\r\n            setDates({\r\n                startDate: values[0],\r\n                endDate: values[1],\r\n            })\r\n        }\r\n        \r\n    }\r\n\r\n    const onDateChange = (value: moment.Moment | null, dateString: string):void => {\r\n        if (value !== null) {\r\n            setDates({\r\n                startDate: value,\r\n                endDate: value,\r\n            })\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"row w-100\" >\r\n            <div className=\"col-12 col-md-9 col-lg-9 col-xl-7 w-100\">\r\n                <div className=\"d-none d-sm-inline\">\r\n                    <label >{isInterval ? \"Date interval\" : \"Date\"}:</label>\r\n                </div>\r\n\r\n                <div className=\"d-none d-inline\">\r\n                    {isInterval ?\r\n                        <RangePicker\r\n                            onChange={onDateRangeChange}\r\n                            defaultValue={[props.dateInterval.startDate, props.dateInterval.endDate]}\r\n                            value = {[props.dateInterval.startDate, props.dateInterval.endDate]}\r\n                            format='DD-MM-YYYY'\r\n                            style={{ marginLeft: 10 }}\r\n                        />\r\n                        :\r\n                        <DatePicker\r\n                            onChange={onDateChange}\r\n                            defaultValue={props.dateInterval.startDate}\r\n                            format='DD-MM-YYYY'\r\n                            style={{ marginLeft: 10 }}\r\n                        />\r\n                    }\r\n                </div>\r\n            </div>\r\n            \r\n            <div className=\"col-12 col-md-3 col-lg-3 col-xl-2 m-2 m-md-0\" >\r\n                <Checkbox className=\"ml-3\" onChange={onDateTypeChange}>Date interval</Checkbox>\r\n            </div>\r\n            { !props.isReadOnly ?\r\n            <div className=\"col-12 col-md-12 col-lg-4 col-xl-3 mt-lg-2\">\r\n                <Button\r\n                    type=\"primary\"\r\n                    shape=\"round\"\r\n                    icon={\r\n                        <div className=\"d-flex flex-wrap align-content-start\">\r\n                            <FileAddOutlined style={{ fontSize: '18px' }} />\r\n                            <span className=\"ml-1\" style={{ fontSize: '14px' }}>Add</span>\r\n                        </div>}\r\n                    style={{ marginLeft: 10 }}\r\n                    onClick={props.showDrawer}\r\n                />\r\n\r\n                <Button className=\"\"\r\n                    type=\"primary\"\r\n                    shape=\"round\"\r\n                    style={{ marginLeft: 10 }}\r\n                    onClick={props.showModal}\r\n                    icon={\r\n                        <div className=\"d-flex flex-wrap align-content-start\">\r\n                            <SettingOutlined style={{ fontSize: '18px' }} />\r\n                            <span className=\"ml-1\" style={{ fontSize: '14px' }}>Settings</span>\r\n                        </div>} \r\n                    />\r\n            </div>\r\n            : null\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ToDoHeader","import { NewTaskDataType, TaskType } from '../Types/types'\r\nimport {getToken, instance} from './api'\r\n\r\nexport type TaskListType = {\r\n    Tasks: Array<TaskType>\r\n}\r\n\r\nexport const taskAPI = {\r\n    createNewTask(values: NewTaskDataType) {\r\n        return instance.post<TaskListType>(`tasks`, values)\r\n        .then(response => {\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                return err.response\r\n            } else if (err.request) {\r\n            } else {\r\n            }\r\n            return null\r\n        })\r\n    },\r\n\r\n    getTaskList(values: getTaskListValuesType) {\r\n        getToken()\r\n        return instance.post<TaskListType>(`tasks/part`, values)\r\n        .then(response => {\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                return err.response\r\n            } else if (err.request) {\r\n            } else {\r\n            }\r\n            return null\r\n        })\r\n    },\r\n\r\n    deleteTask(taskId: number) {\r\n        getToken()\r\n        return instance.delete<TaskListType>(`tasks/${taskId}`).then(response => {\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                return err.response\r\n            } else if (err.request) {\r\n            } else {\r\n            }\r\n            return null\r\n        })\r\n    }, \r\n\r\n    updateTask(values: NewTaskDataType, taskId: number) {\r\n        getToken()\r\n        return instance.put<TaskListType>(`tasks/${taskId}`, values)\r\n        .then(response => {\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                return err.response\r\n            } else if (err.request) {\r\n            } else {\r\n            }\r\n            return null\r\n        })\r\n    }\r\n}\r\n\r\nexport type getTaskListValuesType = {\r\n    start_date: string, \r\n    end_date: string\r\n}","import { Dispatch } from 'redux'\r\nimport { taskAPI, TaskListType } from '../api/taskApi'\r\nimport { NewTaskDataType, TaskType } from '../Types/types'\r\nimport {BaseThunkType, InferActionsTypes} from './store'\r\nimport moment from 'moment'\r\n\r\nexport type InitialStateType = {\r\n    taskList: null | Array<TaskType>,\r\n    taskListIsFetching: boolean,\r\n    taskSaveStatus: 'no' | 'inProgress' | 'success' | 'error'\r\n    errorMessage: null | string,\r\n    isInterval: boolean,\r\n    dateInterval: {\r\n        startDate: moment.Moment,\r\n        endDate: moment.Moment\r\n    }\r\n}\r\n\r\nlet initialState:InitialStateType = {\r\n    taskList: null,\r\n    taskListIsFetching: false,\r\n    taskSaveStatus: 'no',\r\n    errorMessage: null,\r\n    isInterval: false,\r\n    dateInterval: {\r\n        startDate: moment(),\r\n        endDate: moment()\r\n    }\r\n}\r\n\r\nconst taskReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n    \r\n    switch (action.type) {\r\n        case 'SN/TASK/EDIT_TASK_LIST':\r\n            if (state.taskList !== null) {\r\n            const stateCopy = state.taskList.map( item => {\r\n                if (action.task.id === item.id) {\r\n                    return action.task\r\n                } else {\r\n                    return item\r\n                }\r\n            })\r\n            return {...state, taskList: stateCopy}\r\n            } else {\r\n                return state\r\n            }\r\n\r\n        case 'SN/TASK/SET_TASK_LIST':\r\n            return {...state, taskList: action.taskList.Tasks}\r\n\r\n        case 'SN/TASK/SET_TASK_SAVE_STATUS':\r\n            return {...state, taskSaveStatus: action.taskSaveStatus}\r\n\r\n        case 'SN/TASK/SET_ERROR_MESSAGE':\r\n            return {...state, errorMessage: action.message}\r\n\r\n        case 'SN/TASK/SET_TASK_LIST_IS_FETCHING':\r\n            return {...state, taskListIsFetching: action.isFetchingValue}\r\n\r\n        case 'SN/TASK/SET_IS_INTERVAL':\r\n            const dateInterval = {\r\n                startDate: action.date.startDate,\r\n                endDate: action.date.endDate\r\n            }\r\n            return {...state, isInterval: action.isInterval, dateInterval }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    setTaskList: (taskList: TaskListType) => ({ type: 'SN/TASK/SET_TASK_LIST', taskList } as const),\r\n    setTaskSaveStatus: (taskSaveStatus: 'no' | 'inProgress' | 'success' | 'error') => ({ type: 'SN/TASK/SET_TASK_SAVE_STATUS', taskSaveStatus } as const),\r\n    setErrorMessage: (message: string | null) => ({type: 'SN/TASK/SET_ERROR_MESSAGE', message} as const),\r\n    setTaskListIsFetching: (isFetchingValue: boolean) => ({type: 'SN/TASK/SET_TASK_LIST_IS_FETCHING', isFetchingValue} as const),\r\n    setIsInterval: (isInterval: boolean, date: {startDate: moment.Moment, endDate: moment.Moment}) => ({type: 'SN/TASK/SET_IS_INTERVAL', isInterval, date} as const),\r\n    editTaskList: (task: TaskType) => ({type: 'SN/TASK/EDIT_TASK_LIST', task} as const),\r\n}\r\n\r\nexport const createNewTask = (values: NewTaskDataType, reload:boolean = true): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        dispatch(actions.setTaskSaveStatus('inProgress'))\r\n\r\n        let response = await taskAPI.createNewTask(values)\r\n\r\n        if (response && response.status && response.status === 200) {\r\n            if (reload) {\r\n                const state = getState()\r\n                const startDate = state.task.dateInterval.startDate.format('YYYY-MM-DD')\r\n                const endDate = state.task.dateInterval.endDate.format('YYYY-MM-DD')\r\n                dispatch(getTaskList(startDate, endDate))\r\n            }\r\n            dispatch(actions.setTaskSaveStatus('success'))\r\n            dispatch(actions.setTaskSaveStatus('no'))\r\n        } else {\r\n            if (response && response.data) {\r\n                dispatch(actions.setErrorMessage(response.data.message))\r\n                dispatch(actions.setTaskSaveStatus('error'))\r\n                dispatch(actions.setTaskSaveStatus('no'))\r\n                dispatch( actions.setErrorMessage(null) )\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport const getTaskList = (startDate: string, endDate:string): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        dispatch(actions.setTaskListIsFetching(true))\r\n\r\n        const values = {start_date: startDate, end_date: endDate}\r\n        let response = await taskAPI.getTaskList(values)\r\n\r\n        if (response !== undefined && response !== null) {\r\n            dispatch(actions.setTaskList(response.data))\r\n        } else {\r\n        }\r\n        dispatch(actions.setTaskListIsFetching(false))\r\n    }\r\n}\r\n\r\nexport const deleteTask = (taskid: number, startDate: string, endDate:string): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        let response = await taskAPI.deleteTask(taskid)\r\n\r\n        if (response !== null) {\r\n            dispatch(actions.setErrorMessage('Task deletion was successful'))\r\n            dispatch(getTaskList(startDate, endDate))\r\n            dispatch( actions.setErrorMessage(null) )\r\n        }\r\n    }\r\n}\r\n\r\nexport const updateTask = (values: NewTaskDataType, taskId: number): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        let response = await taskAPI.updateTask(values, taskId)\r\n        dispatch(actions.editTaskList(response.data[0]))\r\n    }\r\n}\r\n\r\nexport default taskReducer\r\n\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsTypes>\r\nexport type DispatchType = Dispatch<ActionsTypes>\r\n","import React, { useState } from 'react'\r\nimport { ToDoHeaderPropsType } from './ToDoHeaderContainer'\r\nimport { Button, DatePicker, List, Switch } from 'antd-mobile'\r\nimport enUs from 'antd-mobile/lib/date-picker/locale/en_US'\r\nimport moment from \"moment\"\r\n\r\nconst ToDoHeaderMobile: React.FC<ToDoHeaderPropsType> = (props) => {\r\n    const [isInterval, setIsInterval] = useState(false)\r\n\r\n    const onIntervalChange = (e: boolean) => {\r\n        if (e) {\r\n            props.setIsInterval( !isInterval, {startDate: props.dateInterval.startDate, endDate: props.dateInterval.endDate })\r\n        } else {\r\n            props.setIsInterval( !isInterval, {startDate: props.dateInterval.startDate, endDate: props.dateInterval.startDate })\r\n        }\r\n        setIsInterval(!isInterval)\r\n    }\r\n\r\n    const onStartChange = (value: Date) => {\r\n        if (!isInterval) {\r\n            props.setIsInterval(isInterval, {startDate: moment(value), endDate: moment(value) })\r\n        } else {\r\n            props.setIsInterval(isInterval, {startDate: moment(value), endDate: props.dateInterval.endDate })\r\n        }\r\n    }\r\n\r\n    const onEndChange = (value: Date) => {\r\n        props.setIsInterval(isInterval, {startDate: props.dateInterval.startDate, endDate: moment(value) })\r\n    }\r\n\r\n    return (\r\n        <div className=\"w-100\">\r\n            <DatePicker\r\n                locale={enUs}\r\n                mode=\"date\"\r\n                value={props.dateInterval.startDate.toDate()}\r\n                onChange={onStartChange}\r\n            >\r\n                <List.Item className=\"w-100\">\r\n                {isInterval ? 'Start:' : 'Date:'}\r\n                </List.Item>\r\n            </DatePicker>\r\n\r\n            {isInterval ?\r\n                <DatePicker\r\n                    locale={enUs}\r\n                    mode=\"date\"\r\n                    value={props.dateInterval.endDate.toDate()}\r\n                    onChange={onEndChange}\r\n                >\r\n                    <List.Item >End:</List.Item>\r\n                </DatePicker>\r\n                :\r\n                null\r\n            }\r\n\r\n            <List.Item\r\n                extra={\r\n                        <Switch\r\n                            checked={isInterval}\r\n                            onChange={onIntervalChange}\r\n                        />\r\n                }\r\n                >\r\n                Date interval\r\n            </List.Item>\r\n            { !props.isReadOnly ?\r\n            <div className=\"mt-3\">\r\n            <Button\r\n                inline\r\n                size=\"small\"\r\n                className=\"ml-3\"\r\n                onClick={props.showDrawer ? props.showDrawer : ()=>{} }\r\n                type=\"primary\"\r\n            >\r\n                {!props.isOpen ? 'Add' : 'Close'}\r\n            </Button>\r\n            <Button\r\n                inline\r\n                size=\"small\"\r\n                className=\"ml-3\"\r\n                onClick={ props.showModal ? props.showModal : ()=>{} }\r\n                type=\"primary\"\r\n            >\r\n                Settings\r\n            </Button>\r\n            </div>\r\n            : null}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ToDoHeaderMobile","import {connect} from 'react-redux'\r\nimport ToDoHeader from './ToDoHeader'\r\nimport {actions} from '../../../redux/taskReducer'\r\nimport { AppStateType } from '../../../redux/store'\r\nimport { isMobile } from 'react-device-detect'\r\nimport ToDoHeaderMobile from './ToDoHeaderMobile'\r\n\r\ntype OwnToDoHeaderPropsType = {\r\n    showDrawer?: () => void,\r\n    showModal?: () => void,\r\n    isOpen?: boolean,\r\n    isReadOnly?: boolean\r\n}\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    setIsInterval: (isInterval: boolean, date: {startDate: moment.Moment, endDate: moment.Moment}) => void\r\n}\r\n\r\nexport type ToDoHeaderPropsType = MapPropsType & MapDispatchPropsType & OwnToDoHeaderPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        dateInterval: state.task.dateInterval\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnToDoHeaderPropsType, AppStateType>(mapStateToProps, \r\n    {setIsInterval: actions.setIsInterval}) \r\n    (isMobile ? ToDoHeaderMobile : ToDoHeader)\r\n    \r\n\r\n","import { Form, Field, FormikProps } from 'formik'\r\nimport React, { ReactNode } from 'react'\r\nimport { AntInput, AntTextArea, AntTimePicker, AntDatePicker } from '../../../utils/Formik/CreateAntField'\r\nimport { validateRequired } from '../../../utils/Formik/ValidateFields'\r\n\r\n\r\nconst ToDoForm: ((props: FormikProps<{}>) => ReactNode) = (props) => {\r\n    const disabled = props.initialStatus === 'readOnly' ? true : false\r\n    \r\n    return (\r\n        <Form\r\n            className=\"form-container\"\r\n            onSubmit={props.handleSubmit}\r\n        >\r\n            <Field\r\n                component={AntInput}\r\n                name=\"name\"\r\n                type=\"text\"\r\n                label=\"Name\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n                disabled= {disabled}\r\n            />\r\n\r\n            <Field\r\n                component={AntDatePicker}\r\n                name=\"date\"\r\n                type=\"date\"\r\n                label=\"Task date\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                disabled= {disabled}\r\n            />\r\n\r\n            <Field\r\n                component={AntTimePicker}\r\n                name=\"time\"\r\n                type=\"time\"\r\n                label=\"Task time\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                disabled= {disabled}\r\n            />\r\n\r\n            <Field\r\n                component={AntTextArea}\r\n                name=\"descriptions\"\r\n                type=\"textarea\"\r\n                label=\"Descriptions\"\r\n                submitCount={props.submitCount}\r\n                disabled= {disabled}\r\n            />\r\n\r\n            { !disabled ?\r\n                <div className=\"submit-container\">\r\n                    <button className=\"ant-btn ant-btn-primary\" type=\"submit\">\r\n                        Save\r\n                    </button>\r\n                </div>\r\n                : \r\n                null\r\n            }\r\n\r\n\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default ToDoForm","import { List, Card, Drawer, WhiteSpace, WingBlank, SwipeAction } from 'antd-mobile'\r\nimport { Formik } from 'formik'\r\nimport React, { useEffect, useState } from 'react'\r\nimport SettingsModal from './Settings/SettingsModalContainer'\r\nimport ToDoHeader from './ToDoHeader/ToDoHeaderContainer'\r\nimport { ToDoListPropsType } from './ToDoContainer'\r\nimport ToDoForm from './ToDoForm/ToDoForm'\r\nimport moment from 'moment'\r\nimport { TaskType, TimeScaleSettingsType, NewTaskDataType } from '../../Types/types'\r\nimport { Divider, Empty } from 'antd'\r\nimport { NewTimeByString } from '../../utils/Date/NewDeteByString'\r\n\r\ntype InitialDrewerDataType = {\r\n    header: string,\r\n    taskId: false | number\r\n}\r\n\r\nconst initialDrewerData: InitialDrewerDataType = {\r\n    header: 'Create New Task',\r\n    taskId: false\r\n}\r\nconst zeroTime = NewTimeByString()\r\n\r\nexport type InitialValuesType = {\r\n    name: string,\r\n    time: Date,\r\n    date: Date,\r\n    descriptions: string | null\r\n}\r\n\r\nexport const initialValues: InitialValuesType = {\r\n    name: '',\r\n    time: zeroTime,\r\n    date: new Date(),\r\n    descriptions: ''\r\n}\r\n\r\nconst ToDoMobile: React.FC<ToDoListPropsType> = (props) => {\r\n    useEffect(() => {\r\n        if (props.taskList === null) {\r\n            props.getTaskList(props.dateInterval.startDate.format('YYYY-MM-DD'), props.dateInterval.endDate.format('YYYY-MM-DD'))\r\n        }\r\n    }, [props])\r\n\r\n    useEffect(() => {\r\n        const getTaskList = () => props.getTaskList\r\n        getTaskList()(props.dateInterval.startDate.format('YYYY-MM-DD'), props.dateInterval.endDate.format('YYYY-MM-DD'))\r\n    }, [props.dateInterval, props.getTaskList])\r\n\r\n    useEffect(() => {\r\n        if (props.isInterval) {\r\n            setIsTimeScaleVisible(props.viewSettings.ToDo.timeScaleInrerval)\r\n        } else {\r\n            setIsTimeScaleVisible(props.viewSettings.ToDo.timeScaleSingle)\r\n        }\r\n    }, [props.isInterval, props.viewSettings])\r\n\r\n    const [visible, setVisible] = useState(false)\r\n    const [isModalVisible, setIsModalVisible] = useState(false)\r\n    const [drawerData, setDrawerData] = useState<InitialDrewerDataType>(initialDrewerData)\r\n    const [isTimeScaleVisible, setIsTimeScaleVisible] = useState<TimeScaleSettingsType>(props.viewSettings.ToDo.timeScaleSingle)\r\n    const [initialFormValues, setInitialFormValues] = useState<InitialValuesType>(initialValues)\r\n\r\n    const showDrawer = (): void => {\r\n        if (visible) {\r\n            setInitialFormValues(initialValues)\r\n            setDrawerData(initialDrewerData)\r\n        }\r\n        setVisible(!visible)\r\n    }\r\n\r\n    const showModal = () => {\r\n        setIsModalVisible(true)\r\n    }\r\n\r\n    const handleOk = () => {\r\n        setIsModalVisible(false)\r\n    }\r\n\r\n    const handleCancel = () => {\r\n        setIsModalVisible(false)\r\n    }\r\n\r\n    const handleSubmit = (values: InitialValuesType, actions: any) => {\r\n        let formPropsCopy: NewTaskDataType = {\r\n            ...values,\r\n            time: moment(values.time).format('HH:mm:ss'),\r\n            date: moment(values.date).format('YYYY-MM-DD'),\r\n            user_id: props.userId,\r\n        }\r\n\r\n        if (!drawerData.taskId) {\r\n            props.createNewTask(formPropsCopy, true)\r\n        } else {\r\n            props.updateTask(formPropsCopy, drawerData.taskId)\r\n        }\r\n        actions.resetForm()\r\n        showDrawer()\r\n    }\r\n\r\n    const onComplete = (task: TaskType) => {\r\n        const updatedTask: NewTaskDataType = {\r\n            ...task as NewTaskDataType,\r\n            isCompleted: !task.isCompleted\r\n        }\r\n        props.updateTask(updatedTask, task.id)\r\n    }\r\n\r\n\r\n    if (props.taskList !== null) {\r\n        return (\r\n            <WingBlank size=\"lg\">\r\n                <WhiteSpace size=\"lg\" />\r\n                <Card>\r\n                    <Card.Header\r\n                        title={<ToDoHeader\r\n                            showDrawer={showDrawer}\r\n                            showModal={showModal}\r\n                            isOpen={visible}\r\n                        />}\r\n                    >\r\n                    </Card.Header>\r\n                    <SettingsModal\r\n                        isModalVisible={isModalVisible}\r\n                        handleOk={handleOk}\r\n                        handleCancel={handleCancel}\r\n                    />\r\n                    <Drawer\r\n                        className=\"my-drawer\"\r\n                        style={{ minHeight: document.documentElement.clientHeight }}\r\n                        contentStyle={{ color: '#A6A6A6', textAlign: 'center', paddingTop: 0, width: \"100%\" }}\r\n                        sidebar={\r\n                            <div className=\"mt-4\">\r\n                                <Formik\r\n                                    initialValues={initialFormValues}\r\n                                    onSubmit={handleSubmit}\r\n                                    enableReinitialize={true}\r\n                                >\r\n                                    {ToDoForm}\r\n                                </Formik>\r\n                            </div>\r\n                        }\r\n                        open={visible}\r\n                    >\r\n                        <List>\r\n                            {\r\n                                isTimeScaleVisible ?\r\n                                    <TimeScale\r\n                                        taskList={props.taskList}\r\n                                        dateInterval={props.dateInterval}\r\n                                        deleteTask={props.deleteTask}\r\n                                        setDrawerData={setDrawerData}\r\n                                        setInitialFormValues={setInitialFormValues}\r\n                                        showDrawer={showDrawer}\r\n                                        onComplete={onComplete}\r\n                                    />\r\n                                    :\r\n                                    <TasksOnly\r\n                                        taskList={props.taskList}\r\n                                        dateInterval={props.dateInterval}\r\n                                        deleteTask={props.deleteTask}\r\n                                        setDrawerData={setDrawerData}\r\n                                        setInitialFormValues={setInitialFormValues}\r\n                                        showDrawer={showDrawer}\r\n                                        onComplete={onComplete}\r\n                                    />\r\n                            }\r\n                        </List>\r\n                    </Drawer>\r\n                </Card>\r\n            </WingBlank>\r\n        )\r\n    } else {\r\n        return <Empty />\r\n    }\r\n}\r\n\r\nexport default ToDoMobile\r\n\r\ntype TaskItemMobileType = {\r\n    element: TaskType,\r\n    dateInterval: {\r\n        startDate: moment.Moment;\r\n        endDate: moment.Moment;\r\n    },\r\n    deleteTask: (taskid: number, startDate: string, endDate: string) => void,\r\n    setDrawerData: React.Dispatch<React.SetStateAction<InitialDrewerDataType>>,\r\n    setInitialFormValues: React.Dispatch<React.SetStateAction<InitialValuesType>>,\r\n    showDrawer: () => void,\r\n    onComplete: (values: TaskType) => void,\r\n    isReadOnly: boolean\r\n}\r\n\r\nconst TaskItemMobile: React.FC<TaskItemMobileType> = (props) => {\r\n\r\n    const onEdit = (value: TaskType) => {\r\n        props.setDrawerData({\r\n            header: 'Edite \"' + value.name + '\"',\r\n            taskId: value.id\r\n        })\r\n\r\n        let time = NewTimeByString(value.time)\r\n\r\n        const splitDate = value.date.split(/-/)\r\n        let date = new Date()\r\n        date.setFullYear(parseInt(splitDate[0]))\r\n        date.setMonth(parseInt(splitDate[1]) - 1)\r\n        date.setDate(parseInt(splitDate[2]))\r\n\r\n        props.setInitialFormValues({\r\n            name: value.name,\r\n            time: time,\r\n            date: date,\r\n            descriptions: value.descriptions ? value.descriptions : null\r\n        })\r\n\r\n        props.showDrawer()\r\n    }\r\n\r\n    if (!props.isReadOnly) {\r\n        return (\r\n            <SwipeAction\r\n                key={props.element.id}\r\n                style={{ backgroundColor: 'gray' }}\r\n                autoClose\r\n                right={[\r\n                    {\r\n                        text: 'Delete',\r\n                        onPress: () => props.deleteTask(\r\n                            props.element.id,\r\n                            props.dateInterval.startDate.format('YYYY-MM-DD'),\r\n                            props.dateInterval.endDate.format('YYYY-MM-DD')\r\n                        ),\r\n                        style: { backgroundColor: '#F4333C', color: 'white' },\r\n                    },\r\n                ]}\r\n                left={[\r\n                    {\r\n                        text: 'Edit',\r\n                        onPress: () => { onEdit(props.element) },\r\n                        style: { backgroundColor: '#108ee9', color: 'white' },\r\n                    },\r\n                    {\r\n                        text: props.element.isCompleted ? 'Not Done' : 'Done',\r\n                        onPress: () => props.onComplete(props.element),\r\n                        style: { backgroundColor: 'green', color: 'white' },\r\n                    },\r\n                ]}\r\n                onOpen={() => { }}\r\n                onClose={() => { }}\r\n            >\r\n\r\n                <List.Item\r\n                    key={props.element.id.toString()}\r\n                    wrap\r\n                >\r\n                    <div className=\"w-100 row \" key={props.element.id.toString()}>\r\n                        <div className=\"col-2 \">\r\n                            <span className=\"ml-3\">{props.element.time.split(/:/)[0] + ':' + props.element.time.split(/:/)[1]}</span>\r\n                        </div>\r\n                        <div className=\"col-10\">\r\n                            {props.element.isCompleted ?\r\n                                <span\r\n                                    className=\"text-break ml-3\"\r\n                                    style={{ textDecoration: props.element.isCompleted ? 'line-through' : '' }}\r\n                                >\r\n                                    {props.element.name}\r\n                                </span>\r\n                                :\r\n                                <span className=\"text-break ml-3\">{props.element.name}</span>\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                </List.Item>\r\n            </SwipeAction>\r\n        )\r\n    } else {\r\n        return (\r\n            <List.Item\r\n                key={props.element.id.toString()}\r\n                wrap\r\n            >\r\n                <div className=\"w-100 row \" key={props.element.id.toString()}>\r\n                    <div className=\"col-2 \">\r\n                        <span className=\"ml-3\">{props.element.time.split(/:/)[0] + ':' + props.element.time.split(/:/)[1]}</span>\r\n                    </div>\r\n                    <div className=\"col-10\">\r\n                        {props.element.isCompleted ?\r\n                            <span\r\n                                className=\"text-break ml-3\"\r\n                                style={{ textDecoration: props.element.isCompleted ? 'line-through' : '' }}\r\n                            >\r\n                                {props.element.name}\r\n                            </span>\r\n                            :\r\n                            <span className=\"text-break ml-3\">{props.element.name}</span>\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </List.Item>\r\n        )\r\n    }\r\n\r\n}\r\n\r\ntype TimeScaleType = {\r\n    taskList: Array<TaskType> | null\r\n    dateInterval: {\r\n        startDate: moment.Moment,\r\n        endDate: moment.Moment,\r\n    },\r\n    deleteTask?: (taskid: number, startDate: string, endDate: string) => void,\r\n    setDrawerData?: React.Dispatch<React.SetStateAction<InitialDrewerDataType>>,\r\n    setInitialFormValues?: React.Dispatch<React.SetStateAction<InitialValuesType>>,\r\n    showDrawer?: () => void,\r\n    onComplete?: (values: TaskType) => void,\r\n    isReadOnly?: boolean\r\n}\r\nconst TimeScale: React.FC<TimeScaleType> = (props) => {\r\n    let startDate = moment(props.dateInterval.startDate)\r\n\r\n    let dateArrey: Array<moment.Moment> = []\r\n\r\n    while (moment(startDate.format('YYYY-MM-DD')).isSameOrBefore(moment(props.dateInterval.endDate.format('YYYY-MM-DD')))) {\r\n        dateArrey.push(moment(startDate))\r\n        startDate.add(1, 'days')\r\n    }\r\n\r\n    const getTasksForHour = (date: string, hour: number) => {\r\n        let tasksForHour: Array<JSX.Element | undefined> = []\r\n        if (props.taskList !== null) {\r\n            tasksForHour = props.taskList\r\n                .filter((item: TaskType) => {\r\n                    return item.date === date && moment().hours(hour).format('HH') === item.time.split(':')[0]\r\n                })\r\n                .map((item: TaskType) => {\r\n                    return (\r\n                        <TaskItemMobile\r\n                            key={item.id.toString()}\r\n                            element={item}\r\n                            dateInterval={props.dateInterval}\r\n                            deleteTask={props.deleteTask ? props.deleteTask : () => { }}\r\n                            setDrawerData={props.setDrawerData ? props.setDrawerData : () => { }}\r\n                            setInitialFormValues={props.setInitialFormValues ? props.setInitialFormValues : () => { }}\r\n                            showDrawer={props.showDrawer ? props.showDrawer : () => { }}\r\n                            onComplete={props.onComplete ? props.onComplete : () => { }}\r\n                            isReadOnly={props.isReadOnly ? props.isReadOnly : false}\r\n                        />\r\n                    )\r\n                })\r\n        }\r\n        return tasksForHour\r\n\r\n    }\r\n\r\n    const getHours = (headlineDate: string) => {\r\n        let hours: Array<JSX.Element | undefined> = []\r\n        for (let index = 0; index < 24; index++) {\r\n            hours.push(\r\n                <div key={index + 'div'}>\r\n                    <Divider key={index + 'to' + headlineDate} orientation=\"left\">\r\n                        {index <= 9 ? '0' : null}{index}:00\r\n                    </Divider>\r\n                    {getTasksForHour(headlineDate, index)}\r\n                </div>\r\n            )\r\n        }\r\n        return hours\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {\r\n                dateArrey.map((date: moment.Moment) => {\r\n                    return (\r\n                        <div key={date.format('DD MMMM') + 'divBlock'}>\r\n                            <h3 key={date.format('DD MMMM') + 'dateHeader'}>{date.format('DD MMMM')}</h3>\r\n                            {getHours(date.format('YYYY-MM-DD'))}\r\n                        </div>\r\n                    )\r\n                })\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport const TasksOnly: React.FC<TimeScaleType> = (props) => {\r\n    const startDate = moment(props.dateInterval.startDate)\r\n    let dateArrey: Array<moment.Moment> = []\r\n    while (moment(startDate.format('YYYY-MM-DD')).isSameOrBefore(moment(props.dateInterval.endDate.format('YYYY-MM-DD')))) {\r\n        dateArrey.push(moment(startDate))\r\n        startDate.add(1, 'days')\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {dateArrey.map((date: moment.Moment) => {\r\n                return (\r\n                    <div key={date.format('DD MMMM')}>\r\n                        <h3>{date.format('DD MMMM')}</h3>\r\n                        {props.taskList?.map((task: TaskType) => {\r\n                            if (task.date === date.format('YYYY-MM-DD')) {\r\n                                return <TaskItemMobile\r\n                                    key={task.id.toString()}\r\n                                    element={task}\r\n                                    dateInterval={props.dateInterval}\r\n                                    deleteTask={props.deleteTask ? props.deleteTask : () => { }}\r\n                                    setDrawerData={props.setDrawerData ? props.setDrawerData : () => { }}\r\n                                    showDrawer={props.showDrawer ? props.showDrawer : () => { }}\r\n                                    setInitialFormValues={props.setInitialFormValues ? props.setInitialFormValues : () => { }}\r\n                                    onComplete={props.onComplete ? props.onComplete : () => { }}\r\n                                    isReadOnly={props.isReadOnly ? props.isReadOnly : false}\r\n                                />\r\n                            } else return null\r\n                        })}\r\n                    </div>\r\n                )\r\n            })}\r\n        </>\r\n    )\r\n}","import { Button, Modal } from 'antd'\r\nimport React, { ReactNode, useState } from 'react'\r\nimport { PhoneOutlined } from '@ant-design/icons'\r\nimport { Field, Form, Formik, FormikProps } from 'formik'\r\nimport { AntTextArea } from '../../../utils/Formik/CreateAntField'\r\n\r\nconst ToDoActionsRouter: React.FC<any> = (props) => {\r\n\r\n    switch (props.action) {\r\n        case 2:\r\n\r\n            return <CallAction {...props} />\r\n\r\n        default:\r\n            return <></>\r\n    }\r\n}\r\n\r\nexport default ToDoActionsRouter\r\n\r\nconst CallAction: React.FC<any> = (props) => {\r\n    const [isCallVisible, setIsCallVisible] = useState(false)\r\n\r\n    const handleOk = () => {\r\n        setIsCallVisible(false)\r\n    }\r\n\r\n    const handleCancel = () => {\r\n        setIsCallVisible(false)\r\n    }\r\n\r\n    const handleSubmit = (formProps: any) => {\r\n        console.log(formProps)\r\n    }\r\n\r\n    const data = JSON.parse(props.action_data)\r\n    let phone = 'tel:'\r\n\r\n    if (data) {\r\n        phone = phone + data.phone\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Button\r\n                type=\"primary\"\r\n                shape=\"circle\"\r\n                size=\"small\"\r\n                style={{ marginLeft: 10 }}\r\n                onClick={() => { setIsCallVisible(true) }}\r\n                icon={\r\n                    <div className=\"d-flex flex-wrap align-content-start\">\r\n                        <PhoneOutlined className=\"ml-1\" style={{ fontSize: '14px' }} />\r\n                    </div>\r\n                }\r\n            ></Button>\r\n\r\n            <Modal\r\n                title={\"Call to \" + data.name}\r\n                visible={isCallVisible}\r\n                onOk={handleOk}\r\n                onCancel={handleCancel}\r\n                width={1000}\r\n                centered\r\n            >\r\n                {data ?\r\n                    <>\r\n                        <p><a href={phone}>Call to: {data.name}</a></p>\r\n                        <p>number: {data.phone}</p>\r\n                    </>\r\n                    :\r\n                    null\r\n                }\r\n\r\n                <Formik\r\n                    initialValues={{}}\r\n                    onSubmit={handleSubmit}\r\n                    enableReinitialize={true}\r\n                >\r\n                    {CallResultForm}\r\n                </Formik>\r\n\r\n            </Modal>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nconst CallResultForm: ((props: FormikProps<{}>) => ReactNode) = (props) => {\r\n    return (\r\n        <Form\r\n            className=\"form-container mt-4\"\r\n            onSubmit={props.handleSubmit}\r\n        >\r\n            Call result:\r\n            <Field\r\n                component={AntTextArea}\r\n                name=\"call_description\"\r\n                type=\"textarea\"\r\n                label=\"\"\r\n                submitCount={props.submitCount}\r\n            />\r\n            <div className=\"submit-container\">\r\n                <button className=\"ant-btn ant-btn-primary\" type=\"submit\">\r\n                    Save\r\n                </button>\r\n                <button className=\"ant-btn ant-btn-primary ml-4\" type=\"submit\">\r\n                    Save and complete\r\n                </button>\r\n            </div>\r\n        </Form>\r\n    )\r\n}","import React, { useState } from 'react'\r\nimport { Col, Row, Checkbox, Tooltip, Button, Spin } from 'antd'\r\nimport { CheckboxChangeEvent } from 'antd/lib/checkbox'\r\nimport { ListGroup } from 'react-bootstrap'\r\nimport { TaskType } from '../../../../Types/types'\r\nimport { DeleteOutlined, EditOutlined } from '@ant-design/icons'\r\nimport { TaskItemPropsType } from './TaskItemContainer'\r\nimport ToDoActionsRouter from '../../ToDoActions/ToDoActionsRouter'\r\n\r\nexport type OwnTaskItemPropsType = {\r\n    element: TaskType,\r\n    onEdit: (value:any)=>void,\r\n    isReadOnly?: boolean\r\n}\r\n\r\nconst TaskItem: React.FC<TaskItemPropsType> = (props) => {\r\n    const [checked, setChecked] = useState(props.element.isCompleted)\r\n    const [deleteingInProgess, setDeleteingInProgess] = useState(false)\r\n\r\n    const onisCompletedChange = (e: CheckboxChangeEvent) => {\r\n        console.log(props.isReadOnly)\r\n        setChecked(!checked)\r\n        const values = { isCompleted: e.target.checked }\r\n        if (props.element.id) {}\r\n        props.updateTask(values, props.element.id)\r\n    }\r\n\r\n    const onEdit = (e: any) => {\r\n        props.onEdit(e)\r\n    }\r\n\r\n    const deleteTask: (taskid: number) => void = (taskid) => {\r\n        setDeleteingInProgess(true)\r\n        props.deleteTask(taskid, props.dateInterval.startDate.format('YYYY-MM-DD'), props.dateInterval.endDate.format('YYYY-MM-DD'))\r\n    }\r\n\r\n    const disabled = props.isReadOnly ? {disabled: true} : null\r\n    return (\r\n        <ListGroup.Item as=\"li\" action className=\"\" key={props.element.id}>\r\n            <Row className=\"px-0 ml-0 ml-sm-5\">\r\n                <Col className=\"mx-2\">\r\n                    <Checkbox \r\n                        onChange={onisCompletedChange} \r\n                        checked={checked}\r\n                        {...disabled}\r\n                        />\r\n                </Col>\r\n                <Col className=\"mx-2\">\r\n                    {props.element.time.split(':', 2).join(':')}\r\n                </Col>\r\n                <Col className=\"mx-2\">\r\n                    <Tooltip key={props.element.id} placement=\"topLeft\" title={props.element.descriptions}>\r\n                        <span\r\n                            style={{ textDecoration: checked ? 'line-through' : '' }}\r\n                        >\r\n                            {props.element.name}\r\n                        </span>\r\n                    </Tooltip>\r\n                </Col>\r\n                { !props.isReadOnly ? \r\n                <Col className=\"mr-auto ml-0 mr-sm-2 ml-sm-auto\">\r\n                    <ToDoActionsRouter {...props.element}/>\r\n                    <Button\r\n                        type=\"primary\"\r\n                        shape=\"circle\"\r\n                        size=\"small\"\r\n                        style={{ marginLeft: 10 }}\r\n                        onClick={()=>{onEdit(props.element)}}\r\n                        icon={\r\n                            <div className=\"d-flex flex-wrap align-content-start\">\r\n                                <EditOutlined className=\"ml-1\" style={{ fontSize: '14px' }} />\r\n                            </div>\r\n                        }\r\n                    ></Button>\r\n\r\n                    {!deleteingInProgess ? \r\n                    <Button \r\n                        danger\r\n                        type=\"primary\"\r\n                        shape=\"circle\"\r\n                        size=\"small\"\r\n                        style={{ marginLeft: 10 }}\r\n                        onClick={() => { deleteTask(props.element.id) }}\r\n                        icon={\r\n                            <div className=\"d-flex flex-wrap align-content-start\">\r\n                                <DeleteOutlined className=\"ml-1\" style={{ fontSize: '14px' }} />\r\n                            </div>\r\n                        }\r\n                    />\r\n                    :\r\n                    <Spin key=\"spin\" size=\"small\" />\r\n                    }\r\n                </Col>\r\n                : null }\r\n            </Row>\r\n\r\n        </ListGroup.Item>\r\n    )\r\n}\r\n\r\nexport default TaskItem\r\n","import {connect} from 'react-redux'\r\nimport TaskItem, { OwnTaskItemPropsType } from './TaskItem'\r\nimport {deleteTask, getTaskList, updateTask} from './../../../../redux/taskReducer'\r\nimport {AppStateType} from '../../../../redux/store'\r\n\r\nexport type MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype DispatchPropsType = {\r\n    deleteTask: (taskid: number, startDate: string, endDate: string) => void\r\n    getTaskList: (startDate: string, endDate: string) => void,\r\n    updateTask: (values: any, taskId: number) => void,\r\n}\r\n\r\nexport type TaskItemPropsType = MapPropsType & DispatchPropsType & OwnTaskItemPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        dateInterval: state.task.dateInterval,\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, DispatchPropsType, OwnTaskItemPropsType, AppStateType>(mapStateToProps, \r\n    {deleteTask, getTaskList, updateTask}) \r\n    (TaskItem)","import { TaskType } from \"../Types/types\"\r\n\r\nexport const sortTaskArrayByParams = (field: 'date' | 'time') => {\r\n    if (field === 'date') {\r\n        return (a: TaskType, b: TaskType) => a['date'] > b['date'] ? 1 : -1\r\n    } else {\r\n        return (a: TaskType, b: TaskType) => a['time'] > b['time'] ? -1 : 1\r\n    }\r\n}","import React, { useEffect, useState } from 'react'\r\n// import { TaskType } from '../../Types/types'\r\nimport { TaskType } from './../../../Types/types'\r\nimport moment from 'moment'\r\nimport { TimeScalePropsType } from './TimeScaleContainer'\r\nimport { Divider, Spin, Tooltip, message } from 'antd'\r\nimport TaskItem from './TaskItem/TaskItemContainer'\r\nimport { sortTaskArrayByParams } from '../../../utils/array-helpers'\r\nimport { ListGroup } from 'react-bootstrap'\r\n\r\nexport type OwnTaskTimeScaleType = {\r\n    onEdit: (value:any)=>void,\r\n    isReadOnly?: boolean\r\n}\r\nconst TimeScale: React.FC<TimeScalePropsType> = (props) => {\r\n    type SelestedDatesType = typeof props.dateInterval\r\n    const [selestedDates, setSelectedDates] = useState<SelestedDatesType>({ startDate: moment(null), endDate: moment() })\r\n\r\n    useEffect(() => {\r\n        const getTaskList = () => props.getTaskList\r\n        if (\r\n            props.dateInterval.startDate.isSame(selestedDates.startDate.format('YYYY-MM-DD'), \"day\" ) &&\r\n            props.dateInterval.endDate.isSame(selestedDates.endDate.format('YYYY-MM-DD'), \"day\" )\r\n        ) { }\r\n        else {\r\n            if (props.dateInterval.startDate !== null) {\r\n                getTaskList()(\r\n                    props.dateInterval.startDate.format('YYYY-MM-DD'),\r\n                    props.dateInterval.endDate.format('YYYY-MM-DD')\r\n                )\r\n                setSelectedDates(props.dateInterval)\r\n            }\r\n        }\r\n    }, [props.dateInterval, props.getTaskList, selestedDates])\r\n\r\n    useEffect(() => {\r\n        if (props.errorMessage !== null) {\r\n            message.success(props.errorMessage)\r\n        }\r\n    }, [props.errorMessage])\r\n\r\n    if (props.taskList !== undefined) {\r\n        if (props.taskList !== null) {\r\n            return (\r\n                <>\r\n                    {getTimeScaleArrey(props.taskList, props.isInterval, props.onEdit, props.isReadOnly ? props.isReadOnly : false)}\r\n                </>\r\n            )\r\n        } else {\r\n            return (\r\n                <Spin key=\"spin\" size=\"large\" />\r\n            )\r\n        }\r\n    } else {\r\n        return <div>Authorization required to get a list of tasks</div>\r\n    }\r\n    \r\n}\r\n\r\nexport default TimeScale\r\n\r\n\r\nconst getTimeScaleArrey = (\r\n    taskList: Array<TaskType>, \r\n    isInterval:boolean, \r\n    onEdit:(value:any)=>void,\r\n    isReadOnly: boolean\r\n    ):Array<React.ReactElement<string>> => {\r\n    let timeScaleArrey: Array<React.ReactElement<string>> = []\r\n    let tomorowTasks: Array<TaskType> = []\r\n\r\n    taskList.sort(sortTaskArrayByParams('time')).sort(sortTaskArrayByParams('date'))\r\n\r\n    const getHeadlineLabel = (task: TaskType):string => {\r\n        return moment(task.date).format('D MMMM')\r\n    }\r\n\r\n    let headlineDate: string | null = null\r\n\r\n    if (taskList !== null && taskList.length > 0) {\r\n        headlineDate = getHeadlineLabel(taskList[0])\r\n        timeScaleArrey.push(\r\n            <h5 \r\n                key={headlineDate}\r\n                className={isInterval ? \"text-left\" : \"\"}\r\n            >\r\n                {headlineDate}:\r\n            </h5>\r\n        )\r\n    }\r\n\r\n    for (let index: number = 0; index < 24; index++) {\r\n        if (taskList.length > 0) {\r\n            if (!isInterval && index > 7) {\r\n                timeScaleArrey.push(\r\n                    <Divider key={index + 'to' + headlineDate} orientation=\"left\">\r\n                        {index <= 9 ? '0' : null}{index}:00\r\n                    </Divider>\r\n                )\r\n            }\r\n        } else {\r\n            timeScaleArrey.push(<h3 key={'noTasks'+index}>no tasks</h3>)\r\n            break\r\n        }\r\n\r\n        if (taskList !== null) {\r\n            for (let i = 0; i < taskList.length; i++) {\r\n                const element: TaskType = taskList[i]\r\n                const timeVal = Number(element.time.split(':', 1))\r\n                const nextHour = index + 1\r\n                if (timeVal >= index && timeVal < nextHour) {\r\n                    if (getHeadlineLabel(element) === headlineDate) {\r\n                        timeScaleArrey.push(\r\n                            <Tooltip key={index + '-' + element.id} placement=\"topLeft\" title={element.descriptions}>\r\n                                <ListGroup as=\"ul\" key={index}>\r\n                                    <TaskItem key={index} element={element} onEdit={onEdit} isReadOnly={isReadOnly}/>\r\n                                </ListGroup>\r\n                            </Tooltip>\r\n                        )\r\n                    }\r\n                    else {\r\n                        tomorowTasks.push(element)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (tomorowTasks.length > 0) {\r\n        timeScaleArrey = timeScaleArrey.concat(getTimeScaleArrey(tomorowTasks, isInterval, onEdit , isReadOnly))\r\n    }\r\n\r\n    return timeScaleArrey\r\n}","import {connect} from 'react-redux'\r\nimport TimeScale from './TimeScale'\r\nimport {getTaskList} from './../../../redux/taskReducer'\r\nimport { AppStateType } from '../../../redux/store'\r\nimport { OwnTaskTimeScaleType } from './TimeScale'\r\n\r\nexport type MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype DispatchPropsType = {\r\n    getTaskList: (startDate: string, endDate: string) => void,\r\n}\r\n\r\nexport type TimeScalePropsType = MapPropsType & DispatchPropsType & OwnTaskTimeScaleType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        taskList: state.task.taskList,\r\n        taskSaveStatus: state.task.taskSaveStatus,\r\n        taskListIsFetching: state.task.taskListIsFetching,\r\n        dateInterval: state.task.dateInterval,\r\n        errorMessage: state.task.errorMessage,\r\n        isInterval: state.task.isInterval,\r\n        settings: state.auth.viewSettings\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, DispatchPropsType, OwnTaskTimeScaleType, AppStateType>(mapStateToProps, \r\n    {getTaskList}) \r\n    (TimeScale)\r\n\r\n\r\n","import { Card, Drawer } from 'antd'\r\nimport React, { useEffect, useState } from 'react'\r\nimport ToDoHeaderContainer from './ToDoHeader/ToDoHeaderContainer'\r\nimport TimeScale from './TimeScale/TimeScaleContainer'\r\nimport { Formik } from 'formik'\r\nimport ToDoForm from './ToDoForm/ToDoForm'\r\nimport moment from \"moment\"\r\nimport { ToDoListPropsType } from './ToDoContainer'\r\nimport { NewTaskDataType, TaskType } from '../../Types/types'\r\nimport SettingsModalContainer from './Settings/SettingsModalContainer'\r\n\r\ntype InitialDrewerDataType = {\r\n    header: string,\r\n    taskId: false | number\r\n}\r\n\r\nconst initialDrewerData: InitialDrewerDataType = {\r\n    header: 'Create New Task',\r\n    taskId: false\r\n}\r\n\r\nconst zeroTime = moment()\r\nzeroTime.hours(0)\r\nzeroTime.minutes(0)\r\nzeroTime.seconds(0)\r\nzeroTime.milliseconds(0)\r\n\r\nexport type InitialValuesType = {\r\n    name: string,\r\n    time: moment.Moment,\r\n    date: moment.Moment,\r\n    descriptions: string | null\r\n}\r\n\r\nexport const initialValues: InitialValuesType = {\r\n    name: '',\r\n    time: zeroTime,\r\n    date: moment(),\r\n    descriptions: ''\r\n\r\n}\r\n\r\nconst ToDoBrowser: React.FC<ToDoListPropsType> = (props) => {\r\n    useEffect(() => {\r\n        const getTaskList = () => props.getTaskList\r\n        if (props.taskList === null) {\r\n            getTaskList()(props.dateInterval.startDate.format('YYYY-MM-DD'), props.dateInterval.endDate.format('YYYY-MM-DD'))\r\n        }\r\n    }, [props.taskList, props.getTaskList, props.dateInterval])\r\n\r\n    \r\n\r\n    const [visible, setVisible] = useState(false)\r\n    const [isModalVisible, setIsModalVisible] = useState(false)\r\n    const [drawerData, setDrawerData] = useState(initialDrewerData)\r\n    const [initialFormValues, setInitialFormValues] = useState(initialValues)\r\n\r\n    useEffect(() => {\r\n    }, [initialFormValues])\r\n\r\n    const onTaskEdit = (value: TaskType) => {\r\n        setDrawerData({\r\n            header: 'Edite \"' + value.name + '\"',\r\n            taskId: value.id\r\n        })\r\n\r\n        const splitTime = value.time.split(/:/)\r\n\r\n        setInitialFormValues({\r\n            name: value.name,\r\n            time: moment().hours(Number(splitTime[0])).minutes(Number(splitTime[1])).seconds(0),\r\n            date: moment(value.date),\r\n            descriptions: value.descriptions ? value.descriptions : null\r\n        })\r\n\r\n        showDrawer()\r\n    }\r\n\r\n    const showDrawer = (): void => {\r\n        setVisible(true)\r\n    }\r\n\r\n    const onClose = (): void => {\r\n        setInitialFormValues(initialValues)\r\n        setDrawerData({ ...initialDrewerData })\r\n        setVisible(false)\r\n    }\r\n\r\n    const showModal = () => {\r\n        setIsModalVisible(true)\r\n    }\r\n\r\n    const handleCancel = () => {\r\n        setIsModalVisible(false)\r\n    }\r\n\r\n    const handleOk = () => {\r\n        setIsModalVisible(false)\r\n    }\r\n\r\n    const handleSubmit = (values: InitialValuesType, actions: any) => {\r\n        let formProps: NewTaskDataType = {\r\n            ...values,\r\n            time: values.time.format('HH:mm:ss'),\r\n            date: values.date.format('YYYY-MM-DD'),\r\n            user_id: props.userId,\r\n        }\r\n        if (!drawerData.taskId) {\r\n            props.createNewTask(formProps, true)\r\n        } else {\r\n            props.updateTask(formProps, drawerData.taskId)\r\n        }\r\n\r\n        actions.resetForm()\r\n        \r\n        onClose()\r\n    }\r\n\r\n    return (\r\n        <Card\r\n            title={<ToDoHeaderContainer\r\n                showDrawer={showDrawer}\r\n                showModal={showModal}\r\n            />}\r\n            bordered={false}\r\n        >\r\n            <SettingsModalContainer\r\n                isModalVisible={isModalVisible}\r\n                handleOk={handleOk}\r\n                handleCancel={handleCancel}\r\n            />\r\n\r\n            <TimeScale onEdit={onTaskEdit} />\r\n            \r\n            <Drawer\r\n                title={drawerData.header}\r\n                placement=\"right\"\r\n                closable={true}\r\n                onClose={onClose}\r\n                visible={visible}\r\n                width=\"90%\"\r\n            >\r\n                <Formik\r\n                    initialValues={initialFormValues}\r\n                    onSubmit={handleSubmit}\r\n                    enableReinitialize={true}\r\n                >\r\n                    {ToDoForm}\r\n                </Formik>\r\n            </Drawer>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default ToDoBrowser","import {connect} from 'react-redux'\r\nimport ToDoMobile from './ToDoMobile'\r\nimport { isMobile } from 'react-device-detect'\r\nimport {getTaskList, createNewTask, updateTask, deleteTask} from '../../redux/taskReducer'\r\nimport { AppStateType } from '../../redux/store'\r\nimport ToDoBrowser from './ToDoBrowser'\r\nimport { NewTaskDataType } from '../../Types/types'\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    getTaskList: (start_date: string, end_date:string)=>void,\r\n    createNewTask: (values: NewTaskDataType, reload:boolean)=>void,\r\n    updateTask: (values: NewTaskDataType, taskId: number)=>void,\r\n    deleteTask: (taskid: number, startDate: string, endDate:string)=>void,\r\n}\r\n\r\nexport type ToDoListPropsType = MapPropsType & MapDispatchPropsType & OwnToDoListPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        taskList: state.task.taskList,\r\n        viewSettings: state.auth.viewSettings,\r\n        isInterval: state.task.isInterval,\r\n        dateInterval: state.task.dateInterval,\r\n        userId: state.auth.user?.id\r\n    }\r\n}\r\n\r\ntype OwnToDoListPropsType = {}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnToDoListPropsType, AppStateType>(mapStateToProps, \r\n    {getTaskList, createNewTask, updateTask, deleteTask}) \r\n    ( isMobile ? ToDoMobile : ToDoBrowser )\r\n    \r\n\r\n","import {getAuthUserData} from \"./authReducer\"\r\nimport {InferActionsTypes} from './store'\r\n\r\nlet initialState = {\r\n    initialized: false,\r\n    location: '/'\r\n}\r\n\r\nexport type InitialStateType ={\r\n    initialized: boolean,\r\n    location: string\r\n}\r\n\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\n\r\nconst appReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/APP/INITIALIZED_SUCCESS':\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            }\r\n\r\n        case 'SN/APP/SET_LOCATION':\r\n            return  {\r\n                ...state,\r\n                location: action.location\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    initializedSuccess: () => ({type: 'SN/APP/INITIALIZED_SUCCESS'} as const),\r\n    setLocation: (location: string) => ({type: 'SN/APP/SET_LOCATION', location} as const),\r\n}\r\n\r\nexport const initializeApp = () => (dispatch: any) => {\r\n    let promise = dispatch(getAuthUserData());\r\n    Promise.all([promise])\r\n        .then(() => {\r\n            dispatch(actions.initializedSuccess());\r\n        });\r\n}\r\n\r\nexport const addLocation = (location: string) => (dispatch: any) => {\r\n    dispatch(actions.setLocation(location));\r\n}\r\n\r\nexport default appReducer;","import { \r\n    // BaseThunkType, \r\n    InferActionsTypes \r\n} from \"./store\"\r\nimport { Dispatch } from \"react\"\r\n\r\nexport type codeTypeList = 'model'| 'controller'\r\n\r\nexport type InitialStateType = {\r\n    isModalVisible: boolean,\r\n    codeRowsArray: Array<any>,\r\n    codeType: codeTypeList,\r\n    codeTargetName: string,\r\n    codeData?: any // данные для формирования\r\n}\r\n\r\nlet initialState:InitialStateType = {\r\n    isModalVisible: false,\r\n    codeRowsArray: [],\r\n    codeType: 'model',\r\n    codeTargetName: ''\r\n}\r\n\r\nconst codeReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/CODE/SET_SHOW_CODE_MODAL':\r\n            console.log('SN/CODE/SET_SHOW_CODE_MODAL')\r\n            return {...state, isModalVisible: action.isShow, codeRowsArray: action.codeRowsArray, }\r\n            // return {...state, isModalVisible: action.isShow, codeRowsArray: action.codeRowsArray, codeTargetName: action.codeTargetName}\r\n    \r\n        case 'SN/CODE/SET_CODE_TARGET':\r\n            console.log(action.codeTargetName)\r\n            console.log(action.codeData)\r\n            return {...state, codeTargetName: action.codeTargetName, codeData: action.codeData}\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    setShowCodeModal: (\r\n        isShow: boolean, \r\n        codeType: codeTypeList, \r\n        codeRowsArray: Array<any>, \r\n        codeTargetName: string,\r\n        codeData: Array<any>\r\n        ) => ({ type: 'SN/CODE/SET_SHOW_CODE_MODAL', isShow, codeType, codeRowsArray, codeTargetName, codeData} as const),\r\n    setCodeTarget: (codeTargetName: string, codeData: any) => ({ type: 'SN/CODE/SET_CODE_TARGET', codeTargetName, codeData} as const),\r\n}\r\n\r\nexport default codeReducer\r\n\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\n// type ThunkType = BaseThunkType<ActionsTypes>\r\nexport type DispatchType = Dispatch<ActionsTypes>","import {getToken, instance} from './api'\r\n\r\nexport type ProjectResponseType = {\r\n    projects: [\r\n        {\r\n            backend_id: number,\r\n            created_at: string,\r\n            deleted_at: string,\r\n            frontend_id: number,\r\n            id: number,\r\n            name: string,\r\n            updated_at: string,\r\n        }\r\n    ]\r\n}\r\n\r\nexport type BackendType = {\r\n    created_at?: string,\r\n    deleted_at?: string,\r\n    updated_at?: string,\r\n    id?: number,\r\n    name: string,\r\n    url: string,\r\n    ip: string,\r\n    login: string,\r\n    password: string,\r\n    folder: string,\r\n}\r\n\r\nexport type getBackendDataResponseType = {\r\n    Backend: Array<BackendType>\r\n}\r\n\r\nexport const projectAPI = {\r\n    getProjects() {\r\n        getToken()\r\n        return instance.get<ProjectResponseType>(`project`)\r\n        .then(response => {\r\n            console.log('projectAPI.getProjects:', response)\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                return err.response\r\n            } else if (err.request) {\r\n            } else {\r\n            }\r\n            return null\r\n        })\r\n    },\r\n    getBackendData(projectId: number) {\r\n        getToken()\r\n        return instance.get<getBackendDataResponseType>(`project/`+projectId)\r\n        .then(response => {\r\n            console.log('projectAPI.getBackendData:', response)\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                return err.response\r\n            } else if (err.request) {\r\n            } else {\r\n            }\r\n            return null\r\n        })\r\n    }\r\n    \r\n}\r\n\r\nexport const backendAPI = {\r\n    updateBackend(values: BackendType, backendId: number) {\r\n        getToken()\r\n        return instance.put<BackendType>(`backend/${backendId}`, values)\r\n        .then(response => {\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                return err.response\r\n            } else if (err.request) {\r\n            } else {\r\n            }\r\n            return null\r\n        })\r\n    }\r\n}\r\n\r\nexport type FieldType = {\r\n        name: string,\r\n        type: string,\r\n        isPrimary: boolean,\r\n        description: string,\r\n        isNulleble: boolean,\r\n        fieldParam?: string\r\n}\r\n\r\nexport type ModelsType = {\r\n    backend_id?: number,\r\n    created_at?: string,\r\n    deleted_at?: string,\r\n    updated_at?: string,\r\n    fields: string //| Array<FieldType>,\r\n    id: number,\r\n    name: string,\r\n    db: boolean,\r\n    soft_delete: boolean\r\n}\r\n\r\nexport type getModelsListResponseType = {\r\n    data: {\r\n        models: Array<ModelsType>\r\n    }\r\n}\r\n\r\nexport const modelsAPI = {\r\n    getModelsList(backendId: number) {\r\n        getToken()\r\n        return instance.get<getModelsListResponseType>(`models/`+backendId)\r\n        .then(response => {\r\n            console.log('modelsAPI.getModelsList', response)\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                return err.response\r\n            } else if (err.request) {\r\n            } else {\r\n            }\r\n            return null\r\n        })\r\n    },\r\n    updateModel(values: ModelsType, modelId: number) {\r\n        console.log(values)\r\n        console.log('modelId', modelId)\r\n        return instance.put<getModelsListResponseType>(`models/${modelId}`, values)\r\n        .then(response => {\r\n            console.log(response)\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                return err.response\r\n            } else if (err.request) {\r\n            } else {\r\n            }\r\n            return null\r\n        })\r\n    },\r\n    createModel(values: ModelsType) {\r\n        return instance.post<getModelsListResponseType>(`models`, values)\r\n        .then(response => {\r\n            console.log(response)\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                console.log(err.response)\r\n                return err.response\r\n            } else if (err.request) {\r\n            } else {\r\n            }\r\n            return null\r\n        })\r\n    }\r\n}\r\n\r\nexport type ControllersType = {\r\n    id: number,\r\n    name: string,\r\n    folder: string,\r\n    model_id: Array<number>,\r\n    backend_id: number,\r\n    isResource: boolean,\r\n    models: Array<ModelsType>\r\n}\r\n\r\nexport type getControllersListResponseType = {\r\n    // data: {\r\n        controllers: Array<ControllersType>,\r\n        needGetMethods: boolean,\r\n    // }\r\n}\r\n\r\nexport const controllersAPI = {\r\n    getControllersList(backendId: number) {\r\n        getToken()\r\n        return instance.get<getControllersListResponseType>(`currentControllers/`+backendId)\r\n        .then(response => {\r\n            console.log('controllersAPI.getControllersList', response)\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                return err.response\r\n            } else if (err.request) {\r\n            } else {\r\n            }\r\n            return null\r\n        })\r\n    },\r\n    createController(values: any) {\r\n        return instance.post<getControllersListResponseType>(`controllers`, values)\r\n        .then(response => {\r\n            console.log(response)\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                console.log(err.response)\r\n                return err.response\r\n            } else if (err.request) {\r\n            } else {\r\n            }\r\n            return null\r\n        })\r\n    },\r\n    updateController(values: ControllersType, controllerId: number) {\r\n        console.log(values)\r\n        console.log('controllerId', controllerId)\r\n        return instance.put<getControllersListResponseType>(`controllers/${controllerId}`, values)\r\n        .then(response => {\r\n            console.log(response)\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                return err.response\r\n            } else if (err.request) {\r\n            } else {\r\n            }\r\n            return null\r\n        })\r\n    },\r\n}","import {getToken, instance} from './api'\r\n\r\nexport type rest_typeType = 'get'|'post'|'put'|'delete'| null\r\n\r\nexport type ControllerMethodsType = {\r\n    id: number,\r\n    controller_id: number,\r\n    name: string,\r\n    request: string,\r\n    response: string,\r\n    rest_type: rest_typeType,\r\n    isMiddleware: boolean,\r\n    body_actions: string,\r\n}\r\n\r\nexport type GetControllerMethodsResponseType = {\r\n    controllerMethods: Array<ControllerMethodsType>,\r\n}\r\n\r\nexport const controllerMethodsAPI = {\r\n    getControllerMethods() {\r\n        getToken()\r\n        return instance.get<GetControllerMethodsResponseType>(`controllerMethods`)\r\n        .then(response => {\r\n            console.log(response)\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                return err.response\r\n            } else if (err.request) {\r\n            } else {\r\n            }\r\n            return null\r\n        })\r\n    },\r\n    createControllerMethods(values: any) {\r\n        return instance.post<GetControllerMethodsResponseType>(`controllerMethods`, values)\r\n        .then(response => {\r\n            console.log(response)\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                console.log(err.response)\r\n                return err.response\r\n            } else if (err.request) {\r\n            } else {\r\n            }\r\n            return null\r\n        })\r\n    },\r\n    updateControllerMethods(values: any, controllerMethodId: number) {\r\n        console.log(values)\r\n        console.log('modelId', controllerMethodId)\r\n        return instance.put<GetControllerMethodsResponseType>(`controllerMethods/${controllerMethodId}`, values)\r\n        .then(response => {\r\n            console.log(response)\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                console.log(err.response)\r\n                return err.response\r\n            } else if (err.request) {\r\n            } else {\r\n            }\r\n            return null\r\n        })\r\n    },\r\n}","import { BaseThunkType, InferActionsTypes } from \"./store\"\r\nimport { projectAPI, backendAPI, BackendType, modelsAPI, getModelsListResponseType, ModelsType, controllersAPI, getControllersListResponseType, ControllersType } from './../api/projectAPI'\r\nimport { Dispatch } from \"react\"\r\nimport { ControllerMethodsType, controllerMethodsAPI, GetControllerMethodsResponseType} from \"../api/ControllerMethodsAPI\"\r\nimport { AxiosResponse } from \"axios\"\r\n\r\ntype backendDataType = {\r\n    created_at: string,\r\n    deleted_at: string,\r\n    updated_at: string,\r\n    id: number,\r\n    name: string,\r\n\r\n    url?: string,\r\n    ip?: string,\r\n    login?: string,\r\n    password?: string,\r\n    folder?: string,\r\n}\r\n\r\nexport type ProjectItemType = {\r\n    backend_id: number,\r\n    created_at: string,\r\n    deleted_at: string,\r\n    frontend_id: number,\r\n    id: number,\r\n    name: string,\r\n    updated_at: string,\r\n    backendData?: backendDataType\r\n}\r\n\r\nexport type InitialStateType = {\r\n    projectList: Array<ProjectItemType>,\r\n    isProjectLoaded: boolean,\r\n    modelsList: Array<ModelsType>,\r\n    controllersList: Array<ControllersType>,\r\n    controllerMethodsList: Array<ControllerMethodsType>\r\n}\r\n\r\nlet initialState:InitialStateType = {\r\n    projectList: [],\r\n    isProjectLoaded: false,\r\n    modelsList: [],\r\n    controllersList: [],\r\n    controllerMethodsList: []\r\n}\r\n\r\nconst projectReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/PROJECT/SET_CONTROLLER_METHOD_LIST':\r\n            return ({...state, controllerMethodsList: action.controllerMethodsList })\r\n\r\n        case 'SN/PROJECT/SET_CONTROLLERS_LIST':\r\n            return ({...state, controllersList: action.controllersList})\r\n\r\n        case 'SN/PROJECT/SET_MODELS_LIST':\r\n            return ({...state, modelsList: action.modelsList})\r\n\r\n        case 'SN/PROJECT/SET_PROJECT_LIST':\r\n            return { ...state, projectList: action.projectList }\r\n\r\n        case 'SN/PROJECT/SET_IS_LOADED':\r\n            return {...state, isProjectLoaded: action.isLoaded}\r\n\r\n        case 'SN/PROJECT/SET_BACKEND_DATA':\r\n            // selector\r\n            return {...state, projectList: state.projectList.map( item => {\r\n                if (action.projectId === item.id) {\r\n                    item.backendData = action.backendData\r\n                    return item\r\n                } else {\r\n                    return item\r\n                }\r\n            })}\r\n\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    setProjectList: (projectList: Array<ProjectItemType>) => ({ type: 'SN/PROJECT/SET_PROJECT_LIST', projectList } as const),\r\n    setIsLoaded: (isLoaded: boolean) => ({type: 'SN/PROJECT/SET_IS_LOADED', isLoaded} as const),\r\n    setBackendData: (projectId: number ,backendData: backendDataType) => ({type: 'SN/PROJECT/SET_BACKEND_DATA', backendData, projectId} as const),\r\n    setModelsList: (modelsList: Array<ModelsType>) => ({type: 'SN/PROJECT/SET_MODELS_LIST', modelsList} as const),\r\n    setControllersList: (controllersList: Array<ControllersType>) => ({type: 'SN/PROJECT/SET_CONTROLLERS_LIST', controllersList} as const),\r\n    setControllerMethodsList: (controllerMethodsList: Array<ControllerMethodsType>) => ({type: 'SN/PROJECT/SET_CONTROLLER_METHOD_LIST', controllerMethodsList} as const),\r\n}\r\n\r\nexport const getProjectList = (): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        const response = await projectAPI.getProjects()\r\n        if (response !== undefined && response !== null) {\r\n            dispatch(actions.setIsLoaded(true))\r\n            dispatch(actions.setProjectList(response.data.projects))\r\n        } else {\r\n            // add error message\r\n        }\r\n    }\r\n}\r\n\r\nexport const getBackendData = (projectId: number): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        const response = await projectAPI.getBackendData(projectId)\r\n        if (response !== undefined && response !== null) {\r\n            dispatch(actions.setBackendData(projectId, response.data.Backend[0]))\r\n            // dispatch(actions.setProjectList(response.data.projects))\r\n        } else {\r\n            // add error message\r\n        }\r\n    }\r\n}\r\n\r\nexport const updateBackend = (values: BackendType, backendId: number): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        const response = await backendAPI.updateBackend(values, backendId)\r\n        console.log(response)\r\n    }\r\n}\r\n\r\nexport const getModelsList = (backendId: number):ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        const response: getModelsListResponseType = await modelsAPI.getModelsList(backendId)\r\n        // console.log(response.data.models)\r\n        dispatch(actions.setModelsList(response.data.models))\r\n    }\r\n}\r\n\r\nexport const updateModel = (values: ModelsType, modelId: number):ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        const response: getModelsListResponseType = await modelsAPI.updateModel(values, modelId)\r\n        console.log(response)\r\n        dispatch(actions.setModelsList(response.data.models))\r\n    }\r\n}\r\n\r\nexport const createModel = (values: ModelsType):ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        const response: getModelsListResponseType = await modelsAPI.createModel(values)\r\n        console.log(response)\r\n        dispatch(actions.setModelsList(response.data.models))\r\n    }\r\n}\r\n\r\nexport const getControllersList = (backendId: number):ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        const response: AxiosResponse<getControllersListResponseType> = await controllersAPI.getControllersList(backendId)\r\n        // console.log(response.data)\r\n        dispatch(actions.setControllersList(response.data.controllers))\r\n    }\r\n}\r\n\r\nexport const createController = (values: any):ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        const response: AxiosResponse<getControllersListResponseType> = await controllersAPI.createController(values)\r\n        console.log(response)\r\n        dispatch(actions.setControllersList(response.data.controllers))\r\n    }\r\n}\r\n\r\nexport const getControllerMethodsList = ():ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        const response: AxiosResponse<GetControllerMethodsResponseType> = await controllerMethodsAPI.getControllerMethods()\r\n        dispatch(actions.setControllerMethodsList(response.data.controllerMethods))\r\n    }\r\n}\r\n\r\nexport const updateControllerMethodsList = (values: any, controllerMethodId: number):ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        const response: AxiosResponse<GetControllerMethodsResponseType> = await controllerMethodsAPI.updateControllerMethods(values, controllerMethodId)\r\n        dispatch(actions.setControllerMethodsList(response.data.controllerMethods))\r\n        // console.log(response)\r\n    }\r\n}\r\n\r\nexport const createControllerMethodsList = (values: any):ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        const response: AxiosResponse<GetControllerMethodsResponseType> = await controllerMethodsAPI.createControllerMethods(values)\r\n        console.log(response)\r\n        dispatch(actions.setControllerMethodsList(response.data.controllerMethods))\r\n    }\r\n}\r\n\r\nexport const updateController = (values: ControllersType, controllerId: number):ThunkType => {\r\n    return async (dispatch, getState) => {\r\n\r\n        const response: AxiosResponse<getControllersListResponseType> = await controllersAPI.updateController(values, controllerId)\r\n        console.log(response)\r\n        if (response.data.needGetMethods) {\r\n            //getControllerMethodsList\r\n            dispatch(getControllerMethodsList())\r\n        }\r\n    }\r\n}\r\n\r\nexport default projectReducer\r\n\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsTypes>\r\nexport type DispatchType = Dispatch<ActionsTypes>","import { TaskListType } from '../Types/types'\r\nimport {getToken, instance} from './api'\r\nimport {NewTaskListType} from './../Types/types'\r\n\r\nexport const taskListAPI = {\r\n    getTaskList() {\r\n        getToken()\r\n        return instance.get<TaskListType>(`taskList`)\r\n        .then(response => {\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                return err.response\r\n            } else if (err.request) {\r\n            } else {\r\n            }\r\n            return null\r\n        })\r\n    },\r\n    createNewTaskList(values: NewTaskListType) {\r\n        console.log(values)\r\n        return instance.post<TaskListType>(`taskList`, values)\r\n        .then(response => {\r\n            console.log(response)\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                console.log(err.response)\r\n                return err.response\r\n            } else if (err.request) {\r\n            } else {\r\n            }\r\n            return null\r\n        })\r\n    },\r\n    deleteTask(taskId: number) {\r\n        return instance.delete<TaskListType>(`taskList/${taskId}`).then(response => {\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                return err.response\r\n            } else if (err.request) {\r\n            } else {\r\n            }\r\n            return null\r\n        })\r\n    },\r\n    updateTask(values: NewTaskListType, taskId: number) {\r\n        console.log(values)\r\n        return instance.put<TaskListType>(`taskList/${taskId}`, values)\r\n        .then(response => {\r\n            console.log(response)\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                return err.response\r\n            } else if (err.request) {\r\n            } else {\r\n            }\r\n            return null\r\n        })\r\n    }\r\n}\r\n","import { Dispatch } from \"react\";\r\nimport { BaseThunkType, InferActionsTypes } from \"./store\";\r\nimport { taskListAPI } from './../api/taskListAPI'\r\nimport { NewTaskListType, TaskListType } from \"../Types/types\";\r\n\r\n\r\nexport type InitialStateType = {\r\n    taskList: Array<TaskListType>,\r\n    taskListIsFetching: boolean,\r\n    isTaskListLoaded: boolean,\r\n    selectedTasks: Array<number>\r\n}\r\n\r\nlet initialState:InitialStateType = {\r\n    taskList: [],\r\n    taskListIsFetching: false,\r\n    isTaskListLoaded: false,\r\n    selectedTasks:[]\r\n}\r\n\r\nconst taskListReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/TASK_LIST/BACK_SELECTED_TASK':\r\n            let newSelectedTasks: Array<number> = [...state.selectedTasks]\r\n            if (newSelectedTasks.length > 0) {\r\n                newSelectedTasks.pop()\r\n            }              \r\n            return { ...state, selectedTasks: newSelectedTasks }\r\n        case 'SN/TASK_LIST/SET_SELECTED_TASK':\r\n            return { ...state, selectedTasks: [...state.selectedTasks, action.taskId] }\r\n        case 'SN/TASK_LIST/SET_TASK_LIST':\r\n            return { ...state, taskList: action.taskList, isTaskListLoaded: true}\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    setTaskList: (taskList: Array<any>) => ({ type: 'SN/TASK_LIST/SET_TASK_LIST', taskList } as const),\r\n    setSelectedTasks: (taskId: number) => ({ type: 'SN/TASK_LIST/SET_SELECTED_TASK', taskId } as const),\r\n    backSelectedTasks: () => ({type: 'SN/TASK_LIST/BACK_SELECTED_TASK'} as const),\r\n}\r\n\r\nexport const getTaskList = (): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        let response = await taskListAPI.getTaskList()\r\n        if (response !== undefined && response !== null) {\r\n            dispatch(actions.setTaskList(response.data.Tasks))\r\n        } else {\r\n            // add error message\r\n        }\r\n    }\r\n}\r\n\r\nexport const createNewTaskList = (values: NewTaskListType): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        let response = await taskListAPI.createNewTaskList(values)\r\n        dispatch(actions.setTaskList(response.data.Tasks))\r\n    }\r\n}\r\n\r\nexport const deleteTaskList = (taskId: number): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        let response = await taskListAPI.deleteTask(taskId)\r\n        dispatch(actions.setTaskList(response.data.Tasks))\r\n    }\r\n}\r\n\r\nexport const updateTaskList = (values: NewTaskListType, taskId: number): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        let response = await taskListAPI.updateTask(values, taskId)\r\n        dispatch(actions.setTaskList(response.data.Tasks))\r\n    }\r\n}\r\n\r\nexport default taskListReducer\r\n\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsTypes>\r\nexport type DispatchType = Dispatch<ActionsTypes>","import { UserType } from '../redux/authReducer'\r\nimport {instance, getToken} from './api'\r\n\r\ntype UsersListType = Array<UserType>\r\n\r\nexport const usersAPI = {\r\n    getUsersList() {\r\n        getToken()\r\n        return instance.get<UsersListType>(`account`)\r\n        .then(response => {\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                return err.response\r\n            } else if (err.request) {\r\n            } else {\r\n            }\r\n            return null\r\n        })\r\n    },\r\n    updateUser(values: UserType, userId: number) {\r\n        getToken()\r\n        return instance.put<UserType>(`account/${userId}`, values)\r\n        .then(response => {\r\n            console.log(response)\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                console.log(err.response)\r\n                return err.response\r\n            } else if (err.request) {\r\n            } else {\r\n            }\r\n            return null\r\n        })\r\n    }\r\n}","\r\nimport { Dispatch } from 'redux'\r\nimport { usersAPI, } from '../api/usersAPI'\r\nimport { UserType } from './authReducer'\r\nimport { BaseThunkType, InferActionsTypes } from './store'\r\nimport { actions as authActions } from './authReducer'\r\n\r\nexport type InitialStateType = {\r\n    usersList: Array<UserType>,\r\n    isUsersDataChanged: boolean\r\n}\r\n\r\nlet initialState: InitialStateType = {\r\n    usersList: [],\r\n    isUsersDataChanged: false\r\n}\r\n\r\nconst usersReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/USERS/SET_IS_USERS_DATA_CHANGED':\r\n            return { ...state, isUsersDataChanged: action.isUsersDataChanged }\r\n\r\n        case 'SN/USERS/UPDATE_USERS_LIST':\r\n            let statetCopy = { ...state }\r\n            const newUserList = statetCopy.usersList.map((item: UserType) => {\r\n                if (item.id !== action.changedUserData.id) {\r\n                    return item\r\n                } else {\r\n                    return action.changedUserData\r\n                }\r\n            })\r\n            return { ...state, usersList: newUserList }\r\n\r\n        case 'SN/USERS/SET_USERS_LIST':\r\n            return { ...state, usersList: action.usersList }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    setUsersList: (usersList: Array<UserType>) => ({ type: 'SN/USERS/SET_USERS_LIST', usersList } as const),\r\n    updateUserList: (changedUserData: UserType) => ({ type: 'SN/USERS/UPDATE_USERS_LIST', changedUserData } as const),\r\n    setUsersDataChanged: (isUsersDataChanged: boolean) => ({ type: 'SN/USERS/SET_IS_USERS_DATA_CHANGED', isUsersDataChanged } as const),\r\n}\r\n\r\nexport const getUsersList = (): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        let response = await usersAPI.getUsersList()\r\n        dispatch(actions.setUsersList(response.data.UsersList))\r\n    }\r\n}\r\n\r\nexport const updateUser = (values: UserType, userId: number): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n\r\n        let response = await usersAPI.updateUser(values, userId)\r\n        dispatch(actions.updateUserList(response.data.changedUserData))\r\n        dispatch( actions.setUsersDataChanged(true) )\r\n        const state = getState()\r\n        if (state.auth.user && state.auth.user.id === response.data.changedUserData.id) {\r\n            const data: UserType = response.data.changedUserData\r\n            // @ts-ignore\r\n            dispatch(authActions.setAuthUserData(data, null))\r\n        }\r\n    }\r\n}\r\n\r\nexport default usersReducer\r\n\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsTypes>\r\nexport type DispatchType = Dispatch<ActionsTypes>","import { UserType } from '../redux/authReducer'\r\nimport {instance, getToken} from './api'\r\n\r\nexport type VocabularyType = {\r\n    eng_value: string,\r\n    eng_sound: string | null,\r\n    rus_value: string,\r\n\r\n}\r\n\r\ntype GetVocabularyPartType = {\r\n    vocabularyList: Array<VocabularyType>\r\n}\r\n\r\nexport const vocabularyAPI = {\r\n    getVocabularyPart(part: number) {\r\n        return instance.get<GetVocabularyPartType>(`getVocabularyPart/`+part)\r\n        .then(response => {\r\n            console.log('getVocabularyPart: ', response)\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                return err.response\r\n            } else if (err.request) {\r\n            } else {\r\n            }\r\n            return null\r\n        })\r\n    }\r\n}","\r\nimport { Dispatch } from 'redux'\r\nimport { vocabularyAPI, VocabularyType } from './../api/vocabularyAPI'\r\nimport { UserType } from './authReducer'\r\nimport { BaseThunkType, InferActionsTypes } from './store'\r\n\r\nexport type InitialStateType = {\r\n    vocabularyList: Array<VocabularyType>,\r\n    isUsersDataChanged: boolean\r\n}\r\n\r\nlet initialState: InitialStateType = {\r\n    vocabularyList: [],\r\n    isUsersDataChanged: false\r\n}\r\n\r\nconst vocabularyReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/USERS/SET_VOCABULARY_LIST':\r\n            return { ...state, vocabularyList: action.vocabularyList }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    setVocabularyList: (vocabularyList: Array<VocabularyType>) => ({ type: 'SN/USERS/SET_VOCABULARY_LIST', vocabularyList } as const),\r\n}\r\n\r\nexport const getVocabularyList = (part: number): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        let response = await vocabularyAPI.getVocabularyPart(part)\r\n        console.log(response)\r\n        dispatch(actions.setVocabularyList(response.data.vocabularyList))\r\n    }\r\n}\r\n\r\nexport default vocabularyReducer\r\n\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsTypes>\r\nexport type DispatchType = Dispatch<ActionsTypes>","import {Action, applyMiddleware, combineReducers, createStore} from \"redux\"\r\nimport thunkMiddleware, {ThunkAction} from \"redux-thunk\"\r\nimport appReducer from \"./appReducer\"\r\nimport authReducer from \"./authReducer\"\r\nimport codeReducer from \"./codeReducer\"\r\nimport projectReducer from \"./projectReducer\"\r\nimport taskListReducer from \"./TaskListReducer\"\r\nimport taskReducer from './taskReducer'\r\nimport usersReducer from \"./usersReducer\"\r\nimport vocabularyReducer from \"./vocabularyReducer\"\r\n\r\n\r\nlet rootReducer = combineReducers({\r\n    task: taskReducer,\r\n    app: appReducer,\r\n    auth: authReducer,\r\n    taskList: taskListReducer,\r\n    users: usersReducer,\r\n    projects: projectReducer,\r\n    code: codeReducer,\r\n    vocabulary: vocabularyReducer,\r\n})\r\n\r\ntype rootReducerType = typeof rootReducer\r\nexport type AppStateType = ReturnType<rootReducerType>\r\n\r\nexport type InferActionsTypes<T> = T extends { [keys: string]: (...args: any[]) => infer U } ? U : never\r\nexport type BaseThunkType<A extends Action = Action, R = Promise<void>> = ThunkAction<R, AppStateType, unknown, A>\r\n\r\nlet store = createStore(rootReducer, applyMiddleware(thunkMiddleware))\r\n\r\nexport default store","import { Popover, Icon } from 'antd-mobile'\r\nimport React, { useState } from 'react'\r\n\r\nconst Item = Popover.Item\r\n\r\ntype MenuPopoverType = {\r\n    onLogout: ()=>void\r\n}\r\n\r\nconst MenuPopover: React.FC<MenuPopoverType> = (props) => {\r\n    const [visible, setVisible] = useState(false)\r\n\r\n    const onSelect = (opt: JSX.Element, index?: number) => {\r\n        setVisible(false)\r\n\r\n        switch (opt.props.children) {\r\n            case 'Logout':\r\n                props.onLogout()\r\n                break\r\n        \r\n            default:\r\n                break\r\n        }\r\n    }\r\n\r\n    const handleVisibleChange = (visible: boolean) => {\r\n        setVisible(visible)\r\n    }\r\n\r\n    return (\r\n        <div className=\"mr-3\">\r\n        <Popover \r\n            mask\r\n            visible={visible}\r\n            overlay={[\r\n                (<Item key=\"1\" >Logout</Item>),\r\n                (<Item key=\"2\" >Info</Item>),\r\n                (<Item key=\"3\" >Help</Item>),\r\n            ]}\r\n            onVisibleChange={handleVisibleChange}\r\n            onSelect={onSelect}\r\n        >\r\n            <div style={{\r\n                height: '100%',\r\n                padding: '0 15px',\r\n                marginRight: '-20px',\r\n                display: 'flex',\r\n                alignItems: 'center',\r\n            }}\r\n            >\r\n                <Icon type=\"ellipsis\" />\r\n            </div>\r\n        </Popover>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MenuPopover","import React, { useState } from 'react'\r\nimport { Menu, ActivityIndicator, NavBar } from 'antd-mobile'\r\nimport { ValueType } from 'antd-mobile/lib/menu/PropsType'\r\nimport './MenuMobile.css'\r\nimport { useHistory, useLocation } from 'react-router-dom'\r\nimport { MenuPropsType } from './MenuContainer'\r\nimport { Link } from 'react-router-dom'\r\nimport MenuPopover from './MenuPopover'\r\nimport { MenuDataItemType } from './Header'\r\n\r\nconst MenuMobile: React.FC<MenuPropsType> = (props) => {\r\n    let history = useHistory()\r\n    const location = useLocation()\r\n    const [showMenu, setShowMenu] = useState(false)\r\n\r\n    const getSelectedMenuItem = (): ValueType => {\r\n        let response: ValueType = [props.menuData[0].value, '']\r\n        props.menuData.forEach((dataItem: MenuDataItemType) => {\r\n            if (dataItem.children) {\r\n                dataItem.children.forEach((item: MenuDataItemType) => {\r\n                    if (item.value === location.pathname) {\r\n                        response = [dataItem.value, item.value]\r\n                    }\r\n                })\r\n            }\r\n        })\r\n        return response\r\n    }\r\n\r\n    const [selectedMenuItem, setSelectedMenuItem] = useState<ValueType>(getSelectedMenuItem())\r\n\r\n    const handleClick = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\r\n        e.preventDefault(); // Fix event propagation on Android\r\n        setShowMenu(!showMenu)\r\n    }\r\n\r\n    const onChange = (value?: ValueType | undefined) => {\r\n        if (value) {\r\n            let subMenu = value[0]\r\n\r\n            props.menuData.forEach((dataItem) => {\r\n                if (dataItem.value === value[0]) {\r\n                    subMenu = value[0]\r\n                    if (dataItem.children && value[1]) {\r\n                        dataItem.children.forEach((cItem: { value: string | string[]; label: string }) => {\r\n                            if (cItem.value === value[1]) {\r\n                                history.replace(`${cItem.value}`)\r\n                                setShowMenu(false)\r\n                            }\r\n                        })\r\n                    }\r\n                }\r\n            })\r\n        \r\n            if (subMenu === '') {\r\n                subMenu = props.menuData[0].value\r\n            }\r\n            setSelectedMenuItem([subMenu, value[1]])\r\n        }\r\n        \r\n    }\r\n\r\n    const onMaskClick = () => {\r\n        setShowMenu(false)\r\n    }\r\n\r\n    const menuEl = (\r\n        <Menu\r\n            className=\"foo-menu\"\r\n            data={props.menuData}\r\n            value={selectedMenuItem}\r\n            onChange={onChange}\r\n            height={document.documentElement.clientHeight * 0.6}\r\n        />\r\n    );\r\n\r\n    const loadingEl = (\r\n        <div style={{ width: '100%', height: document.documentElement.clientHeight * 0.6, display: 'flex', justifyContent: 'center' }}>\r\n            <ActivityIndicator size=\"large\" />\r\n        </div>\r\n    );\r\n\r\n    const onLogout = () => {\r\n        onChange(['', ''])\r\n        history.replace(props.appLocation + 'login')\r\n        props.logout()\r\n    }\r\n\r\n    return (\r\n        <div className={showMenu ? 'menu-active' : ''}>\r\n            <div>\r\n                <NavBar\r\n                    leftContent=\"\"\r\n                    mode=\"light\"\r\n                    icon={<img src=\"https://gw.alipayobjects.com/zos/rmsportal/iXVHARNNlmdCGnwWxQPH.svg\" className=\"am-icon am-icon-md\" alt=\"\" />}\r\n                    onLeftClick={handleClick}\r\n                    className=\"top-nav-bar\"\r\n                    rightContent={props.isAuth ? <MenuPopover onLogout={onLogout} /> : null}\r\n                >\r\n                    {!props.isAuth ?\r\n                        <Link\r\n                            to={props.appLocation + \"login\"}\r\n                            onClick={() => { onChange(['', '']) }}\r\n                        >\r\n                            <span className=\"text-white\">Login</span>\r\n                        </Link>\r\n                        :\r\n                        <>\r\n                        <div>\r\n                            {props.user?.name}\r\n                        </div>\r\n                        </>\r\n                    }\r\n                    \r\n\r\n                </NavBar>\r\n            </div>\r\n            {showMenu ? props.menuData ? menuEl : loadingEl : null}\r\n            {showMenu ? <div className=\"menu-mask\" onClick={onMaskClick} /> : null}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default (MenuMobile)\r\n\r\n\r\n","import React from 'react'\r\nimport { Menu } from 'antd'\r\nimport {Link, useHistory} from 'react-router-dom'\r\nimport { MenuPropsType } from './MenuContainer'\r\nimport { MenuDataItemType } from './Header';\r\n\r\nconst { SubMenu } = Menu;\r\n\r\nconst MenuBrowser: React.FC<MenuPropsType> = (props) => {\r\n    let history = useHistory();\r\n\r\n    const handleClick = () => {}\r\n\r\n    const getMenuItem = (childs: Array<MenuDataItemType>):Array<JSX.Element | undefined> => {\r\n        const menuItems = childs.map( (item: MenuDataItemType) => {\r\n            const disabled = item.disabled ? {disabled: true} : null\r\n            return (\r\n                <Menu.Item key={item.value} {...disabled}>\r\n                    <Link to={item.value}>{item.label}</Link>\r\n                </Menu.Item>\r\n            )\r\n        })\r\n        return menuItems\r\n    }\r\n\r\n    const getSubMenu = ():Array<JSX.Element | undefined> => {\r\n        const subMenu = props.menuData.map( (item: MenuDataItemType) => {\r\n            return (\r\n                <SubMenu \r\n                    key={item.value} \r\n                    title={item.label}\r\n                >\r\n                    {item.children ? getMenuItem(item.children) : null}\r\n                </SubMenu >\r\n            )\r\n        })\r\n        return subMenu\r\n    }\r\n\r\n    const onLogout = () => {\r\n        history.replace(props.appLocation+'login')\r\n        props.logout()\r\n    }\r\n\r\n    return (\r\n        <Menu \r\n            onClick={handleClick} \r\n            mode=\"horizontal\"\r\n            theme=\"dark\"\r\n        >\r\n            { getSubMenu() }\r\n\r\n            {!props.isAuth ? \r\n                <Menu.Item key=\"login\">\r\n                    <Link to={props.appLocation +\"login\"} >Login</Link>\r\n                </Menu.Item>\r\n            :\r\n                <SubMenu \r\n                    key={props.user?.name} \r\n                    title={props.user?.name}\r\n                >\r\n                    <Menu.Item key=\"login\" onClick={onLogout}>\r\n                            Logout\r\n                    </Menu.Item>\r\n                    <Menu.Item key=\"info\" onClick={()=>{}}>\r\n                            Info\r\n                    </Menu.Item>\r\n                    <Menu.Item key=\"help\" onClick={()=>{}}>\r\n                            Help\r\n                    </Menu.Item>\r\n                </SubMenu >\r\n            }\r\n        </Menu>\r\n    )\r\n}\r\n\r\nexport default MenuBrowser","import {connect} from 'react-redux'\r\nimport MenuMobile from './MenuMobile'\r\nimport MenuBrowser from './MenuBrowser'\r\nimport {actions} from '../../redux/authReducer'\r\nimport { AppStateType } from '../../redux/store'\r\nimport { MenuDataType } from './Header'\r\nimport { isMobile } from \"react-device-detect\"\r\n\r\ntype OwnMenuPropsType = {\r\n    menuData: MenuDataType\r\n}\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    logout: ()=>void\r\n}\r\n\r\nexport type MenuPropsType = MapPropsType & MapDispatchPropsType & OwnMenuPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        appLocation: state.app.location,\r\n        isAuth: state.auth.isAuth,\r\n        user: state.auth.user\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnMenuPropsType, AppStateType>(mapStateToProps, \r\n    {logout: actions.logout}) \r\n    (isMobile ? MenuMobile : MenuBrowser)\r\n    \r\n\r\n","import React from 'react'\r\nimport { HeaderPropsType } from './HeaderContainer'\r\nimport MenuContainer from './MenuContainer'\r\n\r\nexport type OwnHeaderPropsType = {}\r\n\r\nconst Header: React.FC<HeaderPropsType> = (props) => {\r\n    const userStatus = props.user ? props.user.status : null\r\n    return <MenuContainer menuData={menuData(props.appLocation, userStatus)}/>\r\n}\r\n\r\nexport default Header\r\n\r\nexport type MenuDataType = Array<MenuDataItemType>\r\nexport type MenuDataItemType = {\r\n    value: string,\r\n    label: string,\r\n    disabled?: boolean\r\n    children?: Array<MenuDataItemType>,\r\n}\r\n\r\nconst menuData = (appLocation: string, userStatus: string | null): MenuDataType => {\r\n    const data: MenuDataType = [\r\n    {\r\n        value: 'planning',\r\n        label: 'Planning',\r\n        children: [\r\n            {\r\n                label: 'ToDo list',\r\n                value: appLocation + 'toDoList',\r\n                disabled: false,\r\n            },\r\n            {\r\n                label: 'Tasks tree',\r\n                value: appLocation + 'tasksTree',\r\n            },\r\n            {\r\n                label: 'Analysis',\r\n                value: appLocation + 'analysis',\r\n                disabled: true,\r\n            },\r\n            {\r\n                label: 'Daily schedule',\r\n                value: appLocation + 'schedule',\r\n                disabled: false,\r\n            },\r\n        ],\r\n    }, {\r\n        value: 'catalog',\r\n        label: 'Catalog',\r\n        children: [\r\n            {\r\n                label: 'Products',\r\n                value: appLocation + 'products',\r\n            }\r\n            , {\r\n                label: 'Providers',\r\n                value: appLocation + 'providers',\r\n            }\r\n        ],\r\n    },\r\n    {\r\n        value: 'orders',\r\n        label: 'Orders',\r\n        children: [\r\n            {\r\n                label: 'Orders',\r\n                value: appLocation + 'orders',\r\n            },\r\n            {\r\n                label: 'Leads',\r\n                value: appLocation + 'leads',\r\n            },\r\n        ],\r\n    },\r\n    {\r\n        value: 'english',\r\n        label: 'English',\r\n        children: [\r\n            {\r\n                label: 'Vocabulary',\r\n                value: appLocation + 'vocabulary',\r\n            }\r\n            , {\r\n                label: 'Grammer',\r\n                value: appLocation + 'grammer',\r\n            }\r\n        ],\r\n    },\r\n    ]\r\n\r\n    if (userStatus === 'admin' || userStatus ==='superAdmin') {\r\n        data.push(\r\n            {\r\n                value: 'admin',\r\n                label: 'Admin',\r\n                children: [\r\n                    {\r\n                        label: 'Users',\r\n                        value: appLocation + 'users',\r\n                    }\r\n                ],\r\n            }\r\n        )\r\n        //\r\n        data.push(\r\n            {\r\n                value: 'development',\r\n                label: 'Development',\r\n                children: [\r\n                    {\r\n                        label: 'Projects',\r\n                        value: appLocation + 'projects',\r\n                    }\r\n                ],\r\n            }\r\n        )\r\n    }\r\n    return data\r\n}\r\n","import {connect} from 'react-redux'\r\nimport Header, { OwnHeaderPropsType } from './Header'\r\nimport {actions} from '../../redux/authReducer'\r\nimport { AppStateType } from '../../redux/store'\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    logout: ()=>void\r\n}\r\n\r\nexport type HeaderPropsType = MapPropsType & MapDispatchPropsType & OwnHeaderPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        appLocation: state.app.location,\r\n        user: state.auth.user\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnHeaderPropsType, AppStateType>(mapStateToProps, \r\n    {logout: actions.logout}) \r\n    (Header)\r\n    \r\n\r\n","import React, { ReactNode } from 'react'\r\nimport { Form, Field, FormikProps } from \"formik\"\r\nimport { AntInput, AntCheckbox, AntInputPassword } from '../../utils/Formik/CreateAntField'\r\nimport { validateEmail, validateRequired } from '../../utils/Formik/ValidateFields'\r\n\r\nconst LoginForm: ((props: FormikProps<{}>) => ReactNode) = (props) => {\r\n    return (\r\n        <Form \r\n            className=\"form-container\" \r\n            onSubmit={props.handleSubmit}\r\n        >\r\n            <Field\r\n                component={AntInput}\r\n                name=\"email\"\r\n                type=\"email\"\r\n                label=\"Email\"\r\n                validate={validateEmail}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n            <Field\r\n                component={AntInputPassword}\r\n                name=\"password\"\r\n                type=\"password\"\r\n                label=\"Password\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n            <Field\r\n                component={AntCheckbox}\r\n                name=\"remember\"\r\n                label=\"Remember Me\"\r\n                submitCount={props.submitCount}\r\n            />\r\n            <div className=\"submit-container\">\r\n                <button className=\"ant-btn ant-btn-primary\" type=\"submit\">\r\n                    Login\r\n                </button>\r\n            </div>\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default LoginForm","import React, {useEffect} from 'react'\r\nimport { LoginPropsType } from './LoginContainer'\r\nimport { Formik } from \"formik\"\r\nimport LoginForm from './LoginForm'\r\nimport { Button, message } from 'antd'\r\nimport { Link } from 'react-router-dom'\r\nimport { credsType } from '../../redux/authReducer'\r\n\r\n\r\nexport type OwnLoginPropsType = {}\r\n\r\nconst Login: React.FC<LoginPropsType> = (props) => {\r\n    useEffect(() => {\r\n        if (props.authError) {\r\n            message.error(props.authError)\r\n        }\r\n    }, [props.authError])\r\n\r\n    type FormPropsType = {\r\n        email: string,\r\n        password: string,\r\n        remember: boolean\r\n    }\r\n\r\n    const initialValues: FormPropsType = {\r\n        email: '',\r\n        password: '',\r\n        remember: false\r\n    }\r\n\r\n    const handleSubmit = (formProps: FormPropsType) => {\r\n        props.login(formProps as credsType)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h1 className=\"mb-5 mx-auto\">Login Form</h1>\r\n            <Formik\r\n                initialValues={initialValues}\r\n                onSubmit={handleSubmit}\r\n            >\r\n                {LoginForm}\r\n            </Formik>\r\n            <div className=\"mt-3\">\r\n                <Link to={props.location +\"register\"}><Button type=\"link\" block>Register</Button></Link>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Login","import {connect} from 'react-redux'\r\nimport Login, { OwnLoginPropsType } from './Login'\r\nimport { AppStateType } from '../../redux/store'\r\nimport {credsType, login} from './../../redux/authReducer'\r\n\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    login: (data: credsType)=>void\r\n}\r\n\r\nexport type LoginPropsType = MapPropsType & MapDispatchPropsType & OwnLoginPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        auth: state.auth,\r\n        location: state.app.location,\r\n        authError: state.auth.authError\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnLoginPropsType, AppStateType>(mapStateToProps, \r\n    {login}) \r\n    (Login)\r\n    \r\n\r\n","import React from 'react'\r\nimport { OrdersPropsType } from './OrdersContainer'\r\n\r\nexport type OwnOrdersPropsType = {}\r\nconst Orders: React.FC<OrdersPropsType> = (props) => {\r\n    return(\r\n        <div>Orders</div>\r\n    )\r\n}\r\n\r\nexport default Orders","import {connect} from 'react-redux'\r\nimport Orders, { OwnOrdersPropsType } from './Orders'\r\nimport { AppStateType } from '../../redux/store'\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {}\r\n\r\nexport type OrdersPropsType = MapPropsType & MapDispatchPropsType & OwnOrdersPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        appLocation: state.app.location\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnOrdersPropsType, AppStateType>(mapStateToProps, \r\n    {}) \r\n    (Orders)\r\n    \r\n\r\n","import { Field } from 'formik'\r\nimport React, {useState, useEffect} from 'react'\r\nimport { AntdOptionsType } from '../../../../../Types/types'\r\nimport { AntSelect } from '../../../../../utils/Formik/CreateAntField'\r\nimport {BackendFormPropsType} from './BackendFormContainer'\r\n\r\nexport type OwnBackendFormPropsType = {\r\n    isBackendNew: boolean,\r\n    onSelectBackEndType: (val: any) => void,\r\n    submitCount: (val: any)=>void\r\n}\r\n\r\nconst BackendForm: React.FC<BackendFormPropsType> = (props) => {\r\n    useEffect( ()=> {\r\n        if (!props.isBackendNew && !props.isProjectListLoaded) {\r\n            props.getProjectList()\r\n        }\r\n    }, [props.isBackendNew, props.isProjectListLoaded])\r\n\r\n    useEffect( ()=> {\r\n        if(props.projectList && props.projectList.length>0) {\r\n            setOldProjectsData(props.projectList.map(item => {\r\n                return(\r\n                    {name: item.name, value: item.name}\r\n                )\r\n            }))\r\n        }\r\n    }, [props.projectList])\r\n\r\n    const [isBackendNew, setIsBackendNew] = useState(props.isBackendNew)\r\n    const [oldProjectsData, setOldProjectsData] = useState<Array<AntdOptionsType>>([])\r\n\r\n    const submitBackendIsNew = (val: any) => {\r\n        setIsBackendNew(val.target.checked)\r\n    }\r\n\r\n    const backendTypeOptions = [\r\n        {\r\n            name: 'Laravel',\r\n            value: 'laravel'\r\n        },\r\n        {\r\n            name: 'Other',\r\n            value: 'other'\r\n        },\r\n    ]\r\n\r\n    // console.log(props)\r\n\r\n    if (props.isBackendNew) {\r\n        return(\r\n            <Field\r\n                component={AntSelect}\r\n                selectOptions={backendTypeOptions}\r\n                name=\"backendType\"\r\n                type=\"select\"\r\n                label=\"Backend type\"\r\n                onSelect = {props.onSelectBackEndType}\r\n                submitCount={props.submitCount}\r\n            />\r\n        )\r\n    } else {\r\n        return(\r\n            <>\r\n            get old projects\r\n            <Field\r\n                component={AntSelect}\r\n                selectOptions={oldProjectsData}\r\n                name=\"backend_project\"\r\n                type=\"select\"\r\n                label=\"Choise backend project\"\r\n                onSelect = {props.onSelectBackEndType}\r\n                submitCount={props.submitCount}\r\n            />\r\n            </>\r\n        )\r\n    }\r\n    \r\n}\r\n\r\nexport default BackendForm","import {connect} from 'react-redux'\r\nimport BackendForm, { OwnBackendFormPropsType } from './BackendForm'\r\nimport { AppStateType } from './../../../../../redux/store'\r\nimport {getProjectList} from './../../../../../redux/projectReducer'\r\n// import {getTaskList, createNewTaskList, deleteTaskList, updateTaskList} from './../../redux/TaskListReducer'\r\n// import { NewTaskListType } from '../../Types/types'\r\n\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    getProjectList: ()=>void,\r\n    // createNewTaskList: (values: NewTaskListType)=>void,\r\n    // deleteTaskList: (taskId: number)=>void,\r\n    // updateTaskList: (values: NewTaskListType, taskId: number)=> void,\r\n}\r\n\r\nexport type BackendFormPropsType = MapPropsType & MapDispatchPropsType & OwnBackendFormPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        projectList: state.projects.projectList,\r\n        isProjectListLoaded: state.projects.isProjectLoaded\r\n        // userId: state.auth.user?.id,\r\n        // isTaskListLoaded: state.taskList.isTaskListLoaded,\r\n        // selectedTasks: state.taskList.selectedTasks\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnBackendFormPropsType, AppStateType>(mapStateToProps, \r\n    {getProjectList}) \r\n    (BackendForm)\r\n    \r\n\r\n","import { Tooltip } from 'antd'\r\nimport { Field } from 'formik'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { AntCheckbox, AntInput, AntSelect } from '../../../../../utils/Formik/CreateAntField'\r\nimport { validateRequired } from '../../../../../utils/Formik/ValidateFields'\r\nimport BackendForm from '../BackendForm/BackendFormContainer'\r\n\r\ntype NewProjectFormPropsType = {\r\n    submitCount: (val: any)=>void\r\n}\r\n\r\nconst NewProjectForm: React.FC<NewProjectFormPropsType> = (props) => {\r\n    const [frontend, setFrontend] = useState(false)\r\n    const [backend, setBackend] = useState(false)\r\n    const [isBackendNew, setIsBackendNew] = useState(false)\r\n\r\n    const submitFrontEnd = (val: any) => {\r\n        setFrontend(val.target.checked)\r\n    }\r\n\r\n    const submitBackEnd = (val: any) => {\r\n        setBackend(val.target.checked)\r\n    }\r\n\r\n    const onSelectBackEndType = (val:any) => {\r\n\r\n    }\r\n\r\n    const submitBackendIsNew = (val: any) => {\r\n        setIsBackendNew(val.target.checked)\r\n    }\r\n\r\n    const backendTypeOptions = [\r\n        {\r\n            name: 'Laravel',\r\n            value: 'laravel'\r\n        },\r\n        {\r\n            name: 'Other',\r\n            value: 'other'\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <>\r\n            <Field\r\n                component={AntInput}\r\n                name=\"name\"\r\n                type=\"text\"\r\n                label=\"Project Name\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n            <Field\r\n                component={AntCheckbox}\r\n                name=\"isHasBackEnd\"\r\n                type=\"checkbox\"\r\n                label=\"BackEnd\"\r\n                submitCount={props.submitCount}\r\n                onClick={submitBackEnd}\r\n                // onSelect={submitBackEnd}\r\n            />\r\n\r\n\r\n\r\n\r\n            {backend ? \r\n            <>\r\n                <h5>backend initial options:</h5><br />\r\n\r\n                <Field\r\n                    component={AntCheckbox}\r\n                    type=\"checkbox\"\r\n                    name=\"isBackendNew\"\r\n                    label=\"New Backend\"\r\n                    submitCount={props.submitCount}\r\n                    onClick={submitBackendIsNew}\r\n                />\r\n\r\n                <BackendForm \r\n                    isBackendNew={isBackendNew} \r\n                    onSelectBackEndType={onSelectBackEndType} \r\n                    submitCount={props.submitCount}\r\n                    />\r\n\r\n                {/* {isBackendNew ?\r\n                    <Field\r\n                        component={AntSelect}\r\n                        selectOptions={backendTypeOptions}\r\n                        name=\"backendType\"\r\n                        type=\"select\"\r\n                        label=\"Backend type\"\r\n                        onSelect = {onSelectBackEndType}\r\n                        submitCount={props.submitCount}\r\n                    />\r\n                :\r\n                    <Field\r\n                        component={AntSelect}\r\n                        selectOptions={backendTypeOptions}\r\n                        name=\"backend_project\"\r\n                        type=\"select\"\r\n                        label=\"Choise backend project\"\r\n                        onSelect = {onSelectBackEndType}\r\n                        submitCount={props.submitCount}\r\n                    />\r\n                } */}\r\n\r\n                \r\n                </>\r\n            :null}\r\n\r\n\r\n\r\n\r\n\r\n            <Field\r\n                component={AntCheckbox}\r\n                name=\"isHasFrontEnd\"\r\n                type=\"checkbox\"\r\n                label=\"FrontEnd\"\r\n                submitCount={props.submitCount}\r\n                onClick={submitFrontEnd}\r\n                onSelect={submitFrontEnd}\r\n            />\r\n            {frontend ? <>\r\n                <h5>Frontend initial options:</h5><br />\r\n                <Field\r\n                    component={AntCheckbox}\r\n                    name=\"isCRA\"\r\n                    label=\"Create React App\"\r\n                    submitCount={props.submitCount}\r\n                />\r\n                <Field\r\n                    component={AntCheckbox}\r\n                    name=\"isTS\"\r\n                    label=\"Type Script\"\r\n                    submitCount={props.submitCount}\r\n                />\r\n                <Field\r\n                    component={AntCheckbox}\r\n                    name=\"isMenu\"\r\n                    label=\"Menu\"\r\n                    submitCount={props.submitCount}\r\n                />\r\n                <Field\r\n                    component={AntCheckbox}\r\n                    name=\"isRouter\"\r\n                    label=\"Router\"\r\n                    submitCount={props.submitCount}\r\n                />\r\n                <Field\r\n                    component={AntCheckbox}\r\n                    name=\"isLogin\"\r\n                    label=\"Login/ Register\"\r\n                    submitCount={props.submitCount}\r\n                />\r\n                <Field\r\n                    component={AntCheckbox}\r\n                    name=\"isBAM\"\r\n                    label={\r\n                        <Tooltip title={<><p>Использование методологии БЭМ дваомтвщкмтущмшсвкумзкумз куцмзкцмозущкмзщк\r\n                            зщсоуцшр сщрумщкуцмрщкму цршуцщмшрцщкушмщмкшцщш шомзущцкомзкумо зщумозщ3уом</p><p>Второй абзац</p></>}>\r\n                            <span>БЭМ</span>\r\n                        </Tooltip>\r\n                }\r\n                    submitCount={props.submitCount}\r\n                />\r\n\r\n            </> : null}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default NewProjectForm","import { Field } from 'formik'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { AntdOptionsType } from '../../../../../Types/types'\r\nimport { AntSelect } from '../../../../../utils/Formik/CreateAntField'\r\nimport {OldProjectFormPropsType} from './OldProjectFormContainer'\r\n\r\nexport type OwnOldProjectFormPropsType = {\r\n    submitCount: (val:any)=>void\r\n}\r\nconst OldProjectForm: React.FC<OldProjectFormPropsType> = (props) => {\r\n    useEffect( ()=> {\r\n        if (!props.isProjectListLoaded) {\r\n            props.getProjectList()\r\n        }\r\n    }, [props.isProjectListLoaded, props])\r\n\r\n    useEffect( ()=> {\r\n        if(props.projectList && props.projectList.length>0) {\r\n            setOldProjectsData(props.projectList.map( (item: any)=> {\r\n                return(\r\n                    {name: item.name, value: item.id.toString()}\r\n                )\r\n            }))\r\n        }\r\n    }, [props.projectList])\r\n\r\n    const [oldProjectsData, setOldProjectsData] = useState<Array<AntdOptionsType>>([])\r\n\r\n    const onProjectSelect = (val: number) => {\r\n        console.log('project id: ',val)\r\n        console.log( props.projectList.filter(item=> item.id === Number(val))[0] )\r\n    }\r\n    \r\n    return(\r\n        <Field\r\n            component={AntSelect}\r\n            selectOptions={oldProjectsData}\r\n            name=\"project_name\"\r\n            type=\"select\"\r\n            label=\"Choise backend project\"\r\n            onSelect = {onProjectSelect}\r\n            submitCount={props.submitCount}\r\n        />\r\n    )\r\n}\r\n\r\nexport default OldProjectForm","import {connect} from 'react-redux'\r\nimport OldProjectForm, { OwnOldProjectFormPropsType } from './OldProjectForm'\r\nimport { AppStateType } from './../../../../../redux/store'\r\nimport {getProjectList} from './../../../../../redux/projectReducer'\r\n// import {getTaskList, createNewTaskList, deleteTaskList, updateTaskList} from './../../redux/TaskListReducer'\r\n// import { NewTaskListType } from '../../Types/types'\r\n\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    getProjectList: ()=>void,\r\n    // createNewTaskList: (values: NewTaskListType)=>void,\r\n    // deleteTaskList: (taskId: number)=>void,\r\n    // updateTaskList: (values: NewTaskListType, taskId: number)=> void,\r\n}\r\n\r\nexport type OldProjectFormPropsType = MapPropsType & MapDispatchPropsType & OwnOldProjectFormPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        projectList: state.projects.projectList,\r\n        isProjectListLoaded: state.projects.isProjectLoaded\r\n        // userId: state.auth.user?.id,\r\n        // isTaskListLoaded: state.taskList.isTaskListLoaded,\r\n        // selectedTasks: state.taskList.selectedTasks\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnOldProjectFormPropsType, AppStateType>(mapStateToProps, \r\n    {getProjectList}) \r\n    (OldProjectForm)\r\n    \r\n\r\n","import React, {useState} from 'react'\r\nimport { Field } from 'formik'\r\nimport { AntSelect } from '../../../../utils/Formik/CreateAntField'\r\nimport { validateRequired } from '../../../../utils/Formik/ValidateFields'\r\nimport NewProjectForm from './NewProject/NewProjectForm'\r\nimport OldProjectForm from './OldProject/OldProjectFormContainer'\r\n\r\nconst ProjectForm: React.FC<any> = (props) => {\r\n    const [isNewType, setIsNewType] = useState<number>(0)\r\n    const isNewTypeOptions = [\r\n        {\r\n            name: 'Old',\r\n            value: 1\r\n        },\r\n        {\r\n            name: 'New',\r\n            value: 2\r\n        },\r\n        {\r\n            name: 'Load From SRC',\r\n            value: 3\r\n        },\r\n    ]\r\n\r\n    const onSelect = (val: string) => {\r\n        console.log('onSelect')\r\n        setIsNewType( Number(val) )\r\n    }\r\n\r\n    return(\r\n        <>\r\n            <Field\r\n                component={AntSelect}\r\n                selectOptions={isNewTypeOptions}\r\n                name=\"isNewType\"\r\n                type=\"select\"\r\n                label=\"Вид проекта\"\r\n                submitCount={props.submitCount}\r\n                validate={validateRequired}\r\n                onSelect = {onSelect}\r\n                // onOk={ (val:any)=>{\r\n                //     // console.log('111', val)\r\n                // }}\r\n            />\r\n            {isNewType === 1 ? <OldProjectForm submitCount={props.submitCount}/> : null}\r\n            {isNewType === 2 ? <NewProjectForm {...props}/> : null}\r\n            {isNewType === 3 ? <div>load</div> : null}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ProjectForm","import { Form, Field, FormikProps } from 'formik'\r\nimport React, { ReactNode, useState, useEffect } from 'react'\r\nimport { AntInput, AntSelect, AntTextArea, AntTimePicker } from '../../../utils/Formik/CreateAntField'\r\nimport { validateRequired } from '../../../utils/Formik/ValidateFields'\r\nimport ProjectForm from './Project/ProjectForm'\r\n\r\n\r\nconst NewTaskTreeForm: ((props: FormikProps<{}>) => ReactNode) = (props) => {\r\n    const values: any = props.values\r\n    const selectOptions = values.selectOptions\r\n    const taskTypes = values.taskTypes \r\n\r\n    const [taskType, setTaskType] = useState(values.taskType)\r\n\r\n    useEffect(() => {\r\n        const values: any = props.values\r\n        const taskTypes = values.task_type\r\n        if (Array.isArray(taskTypes)) {\r\n            setTaskType(taskTypes[0])\r\n        } else {\r\n            setTaskType(taskTypes)\r\n        }\r\n        \r\n    }, [props.values])\r\n\r\n    const onSelectTaskType = (val: string) => {}\r\n    \r\n    return (\r\n        <Form\r\n            className=\"form-container\"\r\n            onSubmit={props.handleSubmit}\r\n        >\r\n            {taskType !== 3 ?\r\n            <Field\r\n                component={AntInput}\r\n                name=\"name\"\r\n                type=\"text\"\r\n                label=\"Name\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n            :\r\n            null}\r\n\r\n            <Field\r\n                component={AntSelect}\r\n                selectOptions={selectOptions}\r\n                name=\"parent_id\"\r\n                type=\"select\"\r\n                label=\"Parent\"\r\n                submitCount={props.submitCount}\r\n            />\r\n\r\n            <Field\r\n                component={AntTextArea}\r\n                name=\"descriptions\"\r\n                type=\"textarea\"\r\n                label=\"Descriptions\"\r\n                submitCount={props.submitCount}\r\n            />\r\n\r\n            {taskType !== 3 ?\r\n                <Field\r\n                    component={AntTimePicker}\r\n                    name=\"time_to_complete\"\r\n                    type=\"time\"\r\n                    label=\"Time to complete\"\r\n                    submitCount={props.submitCount}\r\n                />\r\n                :\r\n                null\r\n            }\r\n\r\n\r\n            <Field\r\n                component={AntSelect}\r\n                selectOptions={taskTypes}\r\n                name=\"task_type\"\r\n                type=\"select\"\r\n                label=\"task Types\"\r\n                onSelect = {onSelectTaskType}\r\n                submitCount={props.submitCount}\r\n            />\r\n\r\n\r\n            {taskType === 2 ?\r\n                <>\r\n                    <Field\r\n                        component={AntInput}\r\n                        name=\"phone_number\"\r\n                        type=\"text\"\r\n                        label=\"Номер телефона\"\r\n                        validate={validateRequired}\r\n                        submitCount={props.submitCount}\r\n                        hasFeedback\r\n                    />\r\n                    <Field\r\n                        component={AntInput}\r\n                        name=\"lead_name\"\r\n                        type=\"text\"\r\n                        label=\"Имя абонента\"\r\n                        validate={validateRequired}\r\n                        submitCount={props.submitCount}\r\n                        hasFeedback\r\n                    />\r\n                </>\r\n                :\r\n                null\r\n            }\r\n            {\r\n                taskType === 3 ?\r\n                    <ProjectForm />\r\n                    :\r\n                    null\r\n            }\r\n\r\n            <div className=\"submit-container\">\r\n                <button className=\"ant-btn ant-btn-primary\" type=\"submit\">\r\n                    Save\r\n                </button>\r\n            </div>\r\n\r\n        </Form>\r\n    )\r\n}\r\nexport default NewTaskTreeForm","import React from 'react'\r\nimport { Button, Checkbox, Collapse, List } from 'antd'\r\nimport { PlusCircleOutlined, DeleteOutlined, EditOutlined, CaretRightOutlined } from '@ant-design/icons'\r\nimport { TaskListType } from '../../Types/types'\r\nimport { TaskTreeBrowserItemType } from './TaskTreeBrowserItemContainer'\r\nimport moment from \"moment\"\r\nimport { InitialDrewerDataType, InitialValuesType } from './TasksTreeBrowser'\r\n\r\nconst { Panel } = Collapse\r\n\r\nexport type OwnTaskTreeBrowserItemType = {\r\n    item: TaskListType,\r\n    showDrawer: () => void,\r\n    setDrawerData: React.Dispatch<React.SetStateAction<InitialDrewerDataType>>,\r\n    initialFormValues: InitialValuesType,\r\n    setInitialFormValues: React.Dispatch<React.SetStateAction<InitialValuesType>>,\r\n    initialValues: InitialValuesType,\r\n    onRunTask: (values: number) => void\r\n}\r\n\r\nconst TaskTreeBrowserItem: React.FC<TaskTreeBrowserItemType> = (props) => {\r\n\r\n    const onAddSubtask = (taskId: number) => {\r\n        console.log(taskId)\r\n        props.setInitialFormValues({ ...props.initialValues, parent_id: taskId })\r\n        props.setDrawerData({header: 'add subtask', taskId: false})\r\n        props.showDrawer()\r\n    }\r\n\r\n    const onEdit = (values: TaskListType) => {\r\n        console.log(values)\r\n        props.setDrawerData({\r\n            header: 'Edit: \"' + values.name + '\"',\r\n            taskId: values.id\r\n        })\r\n        let day = moment().zone('GMT')\r\n        if (values.time_to_complete !== null) {\r\n            const splitTime = values.time_to_complete.split(/:/)\r\n            day.hours(parseInt(splitTime[0])).minutes(parseInt(splitTime[1])).seconds(0).milliseconds(0);\r\n        } else {\r\n            day.hours(0).minutes(0).seconds(0).milliseconds(0);\r\n        }\r\n        \r\n        let newFormValues: InitialValuesType = {\r\n            ...props.initialFormValues,\r\n            name: values.name,\r\n            time_to_complete: day,\r\n            descriptions: values.descriptions ? values.descriptions : undefined,\r\n            parent_id: values.parent_id ? values.parent_id : undefined,\r\n            task_type: Number(values.task_type)\r\n        }\r\n        if (values.data) {\r\n            newFormValues = {\r\n                ...newFormValues,\r\n                ...JSON.parse(values.data)\r\n            }\r\n        }\r\n        console.log(newFormValues)\r\n        props.setInitialFormValues(newFormValues)\r\n        props.showDrawer()\r\n    }\r\n\r\n    const onStatusChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        const values = { isCompleted: e.target.checked }\r\n        props.updateTaskList(values, Number.parseInt(e.target.id))\r\n    }\r\n\r\n    const deleteTask = (taskId: number) => {\r\n        props.deleteTaskList(taskId)\r\n    }\r\n\r\n    if (props.item.parent_id === null) {\r\n        return <CollapseItem\r\n            item={props.item}\r\n            taskList={props.taskList}\r\n            key={String(props.item.id)}\r\n            onAddSubtask={onAddSubtask}\r\n            onEdit={onEdit}\r\n            deleteTask={deleteTask}\r\n            onStatusChange={onStatusChange}\r\n            onRunTask={props.onRunTask}\r\n        />\r\n    } else {\r\n        return null\r\n    }\r\n}\r\n\r\nexport default TaskTreeBrowserItem\r\n\r\ntype ChildItemType = {\r\n    childsTasklList: Array<TaskListType>,\r\n    taskList: Array<TaskListType>,\r\n    onEdit: (task: TaskListType) => void,\r\n    deleteTask: (task: number) => void,\r\n    onAddSubtask: (taskId: number) => void,\r\n    onStatusChange: (e: React.ChangeEvent<HTMLInputElement>) => void,\r\n    onRunTask: (values: number) => void\r\n}\r\n\r\nconst ChildItem: React.FC<ChildItemType> = (props) => {\r\n    return (\r\n        <List\r\n            size=\"small\"\r\n            bordered\r\n            dataSource={props.childsTasklList}\r\n            renderItem={item => {\r\n                return (<CollapseItem\r\n                    item={item}\r\n                    taskList={props.taskList}\r\n                    key={item.id.toString()}\r\n                    onAddSubtask={props.onAddSubtask}\r\n                    onEdit={props.onEdit}\r\n                    deleteTask={props.deleteTask}\r\n                    onStatusChange={props.onStatusChange}\r\n                    onRunTask={props.onRunTask}\r\n                />\r\n                )\r\n            }}\r\n        />\r\n    )\r\n}\r\n\r\ntype CollapseItemType = {\r\n    key: string\r\n    item: TaskListType,\r\n    taskList: Array<TaskListType>,\r\n    onEdit: (task: TaskListType) => void,\r\n    deleteTask: (task: number) => void,\r\n    onAddSubtask: (taskId: number) => void,\r\n    onStatusChange: (e: React.ChangeEvent<HTMLInputElement>) => void,\r\n    onRunTask: (values: number) => void\r\n}\r\nconst CollapseItem: React.FC<CollapseItemType> = (props) => {\r\n    const isLast = getChildsList(props.taskList, props.item).length === 0 ? true : false\r\n\r\n    if (!isLast) {\r\n        return (\r\n            <List.Item className=\"p-0\" draggable key={props.item.id}>\r\n                <Collapse key={String(props.item.id)} className=\"w-100\" defaultActiveKey={[]} collapsible=\"header\" ghost>\r\n                    <Panel\r\n                        header={<span key={String(props.item.id)} className=\"float-left pl-2\" >{props.item.name}</span>}\r\n                        key={props.item.id + 'Panel'}\r\n                        extra={<ButtonsBlock {...props} />}\r\n                    >\r\n                        <ChildItem\r\n                            childsTasklList={getChildsList(props.taskList, props.item)}\r\n                            taskList={props.taskList}\r\n                            onEdit={props.onEdit}\r\n                            deleteTask={props.deleteTask}\r\n                            onAddSubtask={props.onAddSubtask}\r\n                            onStatusChange={props.onStatusChange}\r\n                            onRunTask={props.onRunTask}\r\n                        />\r\n                    </Panel>\r\n                </Collapse>\r\n            </List.Item>\r\n        )\r\n    } else {\r\n        return (<LastItem\r\n            item={props.item}\r\n            onEdit={props.onEdit}\r\n            deleteTask={props.deleteTask}\r\n            onAddSubtask={props.onAddSubtask}\r\n            onStatusChange={props.onStatusChange}\r\n            onRunTask={props.onRunTask}\r\n        />)\r\n    }\r\n\r\n}\r\n\r\ntype LastItemType = {\r\n    item: TaskListType,\r\n    onEdit: (task: TaskListType) => void,\r\n    deleteTask: (task: number) => void,\r\n    onAddSubtask: (taskId: number) => void,\r\n    onStatusChange: (e: React.ChangeEvent<any>) => void,\r\n    onRunTask: (values: number) => void\r\n}\r\n\r\nconst LastItem: React.FC<LastItemType> = (props) => {\r\n\r\n    return (\r\n        <List.Item className=\"py-0\" draggable key={String(props.item.id)}>\r\n            <>\r\n                <div className=\"py-2 pl-3\"><Checkbox checked={props.item.isCompleted} id={props.item.id.toString()} onClick={props.onStatusChange} /></div>\r\n                <div className=\"w-100 float-left\" key={String(props.item.id)}>\r\n                    <div className=\"ml-3 float-left\">\r\n\r\n                        {\r\n                            props.item.isCompleted ?\r\n                                <span className=\"text-black-50\">{props.item.name}</span>\r\n                                :\r\n                                <span data-toggle=\"collapse\" aria-controls={props.item.id + 'collapseExample'} >{props.item.name}</span >\r\n                        }\r\n\r\n                    </div>\r\n                    <div className=\"ml-3 float-right\">\r\n                        {props.item.time_to_complete}\r\n                    </div>\r\n                </div>\r\n                <div className=\"pr-3\">\r\n                    <ButtonsBlock {...props} />\r\n                </div>\r\n            </>\r\n        </List.Item>\r\n    )\r\n}\r\n\r\ntype ButtonsBlockType = {\r\n    item: TaskListType,\r\n    onEdit: (task: TaskListType) => void,\r\n    deleteTask: (task: number) => void,\r\n    onAddSubtask: (parentId: number) => void,\r\n    onRunTask: (values: number) => void\r\n}\r\n\r\nconst ButtonsBlock: React.FC<ButtonsBlockType> = (props) => {\r\n    return (\r\n        <div className=\"d-flex flex-row\">\r\n            {Number(props.item.task_type) > 1 ?\r\n                <Button className=\"\"\r\n                    type=\"primary\"\r\n                    shape=\"circle\"\r\n                    size=\"small\"\r\n                    style={{ marginLeft: 10 }}\r\n                    onClick={() => { props.onRunTask(props.item.id) }}\r\n                    icon={\r\n                        <div className=\"d-flex flex-wrap align-content-start\">\r\n                            <CaretRightOutlined className=\"ml-1\" style={{ fontSize: '14px' }} />\r\n                        </div>\r\n                    }\r\n                />\r\n                :\r\n                null\r\n            }\r\n            <Button className=\"\"\r\n                type=\"primary\"\r\n                shape=\"circle\"\r\n                size=\"small\"\r\n                style={{ marginLeft: 10 }}\r\n                onClick={() => { props.onAddSubtask(props.item.id) }}\r\n                icon={\r\n                    <div className=\"d-flex flex-wrap align-content-start\">\r\n                        <PlusCircleOutlined className=\"ml-1\" style={{ fontSize: '14px' }} />\r\n                    </div>\r\n                }\r\n            />\r\n            <Button className=\"\"\r\n                type=\"primary\"\r\n                shape=\"circle\"\r\n                size=\"small\"\r\n                style={{ marginLeft: 10 }}\r\n                onClick={() => { props.onEdit(props.item) }}\r\n                icon={\r\n                    <div className=\"d-flex flex-wrap align-content-start\">\r\n                        <EditOutlined className=\"ml-1\" style={{ fontSize: '14px' }} />\r\n                    </div>\r\n                }\r\n            />\r\n            <Button className=\"\"\r\n                type=\"primary\"\r\n                danger\r\n                shape=\"circle\"\r\n                size=\"small\"\r\n                style={{ marginLeft: 10 }}\r\n                onClick={() => { props.deleteTask(props.item.id) }}\r\n                icon={\r\n                    <div className=\"d-flex flex-wrap align-content-start\">\r\n                        <DeleteOutlined className=\"ml-1\" style={{ fontSize: '14px' }} />\r\n                    </div>\r\n                }\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nconst getChildsList = (taskList: Array<TaskListType>, item: TaskListType) => {\r\n    let childs: Array<TaskListType> = []\r\n    for (let index = 0; index < taskList.length; index++) {\r\n        const elem = taskList[index]\r\n        if (elem.parent_id === item.id) {\r\n            childs.push(elem)\r\n        }\r\n    }\r\n    return childs\r\n}","import {connect} from 'react-redux'\r\nimport TaskTreeBrowserItem, { OwnTaskTreeBrowserItemType } from './TaskTreeBrowserItem'\r\nimport { AppStateType } from '../../redux/store'\r\nimport {getTaskList, createNewTaskList, deleteTaskList, updateTaskList} from './../../redux/TaskListReducer'\r\nimport { NewTaskListType } from '../../Types/types'\r\n\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    getTaskList: ()=>void,\r\n    createNewTaskList: (values: NewTaskListType)=>void,\r\n    deleteTaskList: (taskId: number)=>void,\r\n    updateTaskList: (values: NewTaskListType, taskId: number)=> void,\r\n}\r\n\r\nexport type TaskTreeBrowserItemType = MapPropsType & MapDispatchPropsType & OwnTaskTreeBrowserItemType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        taskList: state.taskList.taskList,\r\n        userId: state.auth.user?.id,\r\n        isTaskListLoaded: state.taskList.isTaskListLoaded,\r\n        selectedTasks: state.taskList.selectedTasks\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnTaskTreeBrowserItemType, AppStateType>(mapStateToProps, \r\n    {getTaskList, createNewTaskList, deleteTaskList, updateTaskList}) \r\n    (TaskTreeBrowserItem)\r\n    \r\n\r\n","import { Form, Field, FormikProps } from 'formik'\r\nimport React, { ReactNode } from 'react'\r\nimport { AntDatePicker, AntTimePicker } from '../../../utils/Formik/CreateAntField'\r\nimport { validateRequired } from '../../../utils/Formik/ValidateFields'\r\n\r\nconst RunTaskFormCall: ((props: FormikProps<{}>) => ReactNode) = (props) => {\r\n    return (\r\n        <Form\r\n            className=\"form-container\"\r\n            onSubmit={props.handleSubmit}\r\n        >\r\n            <Field\r\n                component={AntDatePicker}\r\n                name=\"date\"\r\n                type=\"date\"\r\n                label=\"Select Date\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n            />\r\n\r\n            <Field\r\n                component={AntTimePicker}\r\n                name=\"time\"\r\n                type=\"time\"\r\n                label=\"Select time\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n            />\r\n            <button type=\"button\" className=\"ant-btn ant-btn-primary ml-2\">Add now</button>\r\n            <button type=\"button\" className=\"ant-btn ant-btn-primary ml-2\">Auto add by context</button>\r\n\r\n            <div className=\"submit-container\">\r\n                <button className=\"ant-btn ant-btn-primary\" type=\"submit\">\r\n                    Save\r\n                </button>\r\n            </div>\r\n\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default RunTaskFormCall","export type FormPropsDataType = {\r\n    task_type: number\r\n    lead_name?: string,\r\n    phone_number?: string\r\n}\r\nexport const checkActionsType = (formPropsData: FormPropsDataType):any => {\r\n    console.log(Number(formPropsData.task_type))\r\n    switch ( Number(formPropsData.task_type) ) {\r\n        case 2:\r\n            return {\r\n                lead_name: formPropsData.lead_name,\r\n                phone_number: formPropsData.phone_number\r\n            }\r\n    \r\n        default:\r\n            return null\r\n    }\r\n}","import { Button, Card, Drawer, List, Modal } from 'antd'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { TasksTreePropsType, taskTreeTypes } from './TasksTreeContainer'\r\nimport { FileAddOutlined, SettingOutlined } from '@ant-design/icons'\r\nimport NewTaskTreeForm from './TaskTreeForm/NewTaskTreeForm'\r\nimport { Formik  } from 'formik'\r\nimport moment from \"moment\"\r\nimport TaskTreeBrowserItem from './TaskTreeBrowserItemContainer'\r\nimport RunTaskFormCall from './RunTask.tsx/RunTaskForm'\r\nimport { NewTaskListType, TaskListType, NewTaskDataType } from '../../Types/types'\r\nimport { checkActionsType } from './TaskListActions/TaskListActions'\r\n\r\nexport type InitialDrewerDataType = {\r\n    header: string,\r\n    taskId: false | number\r\n}\r\n\r\nconst initialDrewerData: InitialDrewerDataType = {\r\n    header: 'Create New Task',\r\n    taskId: false\r\n} \r\n\r\ntype SelectOptionType = {\r\n    name: string,\r\n    value: number\r\n}\r\n\r\nexport type InitialValuesType = {\r\n    selectOptions: Array<SelectOptionType> | null,\r\n    taskTypes: typeof taskTreeTypes,\r\n    task_type: number,\r\n    name: string\r\n    time_to_complete?: moment.Moment,\r\n    descriptions?: string,\r\n    parent_id?: number,\r\n    data?: string\r\n}\r\n\r\nconst getInitialValues = ( taskList: Array<TaskListType> ):InitialValuesType => {\r\n    return (\r\n        {\r\n            selectOptions: getSelectOptions(taskList),\r\n            taskTypes: taskTreeTypes,\r\n            task_type: 1,\r\n            name: '',\r\n        }\r\n    )\r\n}\r\n\r\nconst getSelectOptions = (taskList: Array<TaskListType>):Array<SelectOptionType>  => {\r\n    if (taskList !== undefined && taskList.length > 0) {\r\n        return taskList.map((item: TaskListType) => {\r\n            return ({\r\n                name: item.name,\r\n                value: item.id\r\n            })\r\n        })\r\n    } else {\r\n        return []\r\n    }\r\n}\r\n\r\nconst TasksTreeBrowser: React.FC<TasksTreePropsType> = (props) => {\r\n\r\n    useEffect(() => {\r\n        const getTaskList = () => props.getTaskList\r\n        if (props.taskList !== undefined && props.taskList.length === 0 && !props.isTaskListLoaded) {\r\n            getTaskList()()\r\n        }\r\n        else if (props.taskList === undefined) {\r\n            getTaskList()()\r\n        }\r\n        setVisible(false)\r\n        setInitialFormValues(getInitialValues(props.taskList))\r\n    }, [props.taskList, props.getTaskList, props.isTaskListLoaded])\r\n\r\n    const [visible, setVisible] = useState(false)\r\n    const [drawerData, setDrawerData] = useState(initialDrewerData)\r\n    const [initialFormValues, setInitialFormValues] = useState(getInitialValues(props.taskList))\r\n    const [runTaskVisible, setRunTaskVisible] = useState(false)\r\n    const [runData, setRunData] = useState<TaskListType | null>(null)\r\n\r\n    type RunTaskSubmitType = {\r\n        date: moment.Moment,\r\n        time: moment.Moment,\r\n    }\r\n    const runTaskSubmit = (values: RunTaskSubmitType) => {\r\n        if (runData !== null && runData.data !== null && props.userId) {\r\n            const data = JSON.parse(runData.data)\r\n            const newToDo: NewTaskDataType = {\r\n                name: 'Call to '+data.lead_name,\r\n                description: data.phone_number,\r\n                date: values.date.format('YYYY-MM-DD'),\r\n                time: values.time.format('HH:mm:00'), \r\n                user_id: props.userId,\r\n                action: Number(runData.task_type),\r\n                action_data: {\r\n                    phone: data.phone_number,\r\n                    name: data.lead_name\r\n                }\r\n            }\r\n            console.log(newToDo)\r\n            props.createNewToDo(newToDo, true)\r\n        }\r\n    }\r\n    const runTaskOk = () => {\r\n        setRunTaskVisible(false)\r\n    }\r\n\r\n    const runTaskCancel = () => {\r\n        setRunTaskVisible(false)\r\n    }\r\n\r\n    const onRunTask = (values: number) => {\r\n        setRunTaskVisible(true)\r\n        setRunData(\r\n            props.taskList.filter( (item: TaskListType)=> {\r\n                    return (item.id === values)\r\n            })[0]\r\n        )\r\n    }\r\n    \r\n    const onClose = () => {\r\n        setInitialFormValues(getInitialValues(props.taskList))\r\n        setVisible(false)\r\n    }\r\n\r\n    const showDrawer = () => {\r\n        setVisible(true)\r\n    }\r\n\r\n    const onAdd = () => {\r\n        setDrawerData(initialDrewerData)\r\n        showDrawer()\r\n    }\r\n\r\n    const handleSubmit = (formProps: InitialValuesType) => {\r\n        const data = checkActionsType(formProps)\r\n        console.log(formProps)\r\n        let newTaskList: NewTaskListType = {\r\n            name: formProps.name,\r\n            task_type: formProps.task_type.toString(),\r\n            user_id: props.userId,\r\n            time_to_complete: formProps.time_to_complete ? formProps.time_to_complete.format('HH:mm:ss') : undefined,\r\n\r\n            descriptions: formProps.descriptions, \r\n            parent_id: formProps.parent_id ? formProps.parent_id : undefined,\r\n        }\r\n\r\n        if (data) {\r\n            newTaskList = {...newTaskList, data: data}\r\n        }\r\n\r\n        if (!drawerData.taskId) {\r\n            props.createNewTaskList(newTaskList)\r\n        } else {\r\n            props.updateTaskList(newTaskList, drawerData.taskId)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"site-card-border-less-wrapper\">\r\n                <Card\r\n                    title={\r\n                        <div className=\"inline\" >\r\n                            <div ><h2>Tasks Tree</h2></div>\r\n                        </div>\r\n                    }\r\n                    extra={\r\n                        <>\r\n                            <Button\r\n                                type=\"primary\"\r\n                                shape=\"round\"\r\n                                icon={\r\n                                    <div className=\"d-flex flex-wrap align-content-start\">\r\n                                        <FileAddOutlined style={{ fontSize: '18px' }} />\r\n                                        <span className=\"ml-1\" style={{ fontSize: '14px' }}>Add</span>\r\n                                    </div>}\r\n                                style={{ marginLeft: 10 }}\r\n                                onClick={onAdd}\r\n                            />\r\n\r\n                            <Button className=\"\"\r\n                                type=\"primary\"\r\n                                shape=\"round\"\r\n                                style={{ marginLeft: 10 }}\r\n                                icon={\r\n                                    <div className=\"d-flex flex-wrap align-content-start\">\r\n                                        <SettingOutlined style={{ fontSize: '18px' }} />\r\n                                        <span className=\"ml-1\" style={{ fontSize: '14px' }}>Settings</span>\r\n                                    </div>}\r\n                            />\r\n                        </>\r\n                    }\r\n                    bordered={false}\r\n                >\r\n                    <List\r\n                        size=\"small\"\r\n                        bordered\r\n                        dataSource={props.taskList}\r\n                        renderItem={item => {\r\n                            return (<TaskTreeBrowserItem\r\n                                item={item}\r\n                                showDrawer={showDrawer}\r\n                                setDrawerData={setDrawerData}\r\n                                initialFormValues={initialFormValues}\r\n                                setInitialFormValues={setInitialFormValues}\r\n                                initialValues={getInitialValues(props.taskList)}\r\n                                onRunTask={onRunTask}\r\n                            />)\r\n                        }}\r\n                    />\r\n\r\n                    <Drawer\r\n                        title={drawerData.header}\r\n                        placement=\"right\"\r\n                        closable={true}\r\n                        onClose={onClose}\r\n                        visible={visible}\r\n                        width=\"90%\"\r\n                    >\r\n\r\n                        <Formik\r\n                            initialValues={initialFormValues}\r\n                            onSubmit={handleSubmit}\r\n                            enableReinitialize={true}\r\n                        >\r\n                            {NewTaskTreeForm}\r\n                        </Formik>\r\n\r\n                    </Drawer>\r\n\r\n                    <Modal\r\n                        title=\"Run Task\"\r\n                        visible={runTaskVisible}\r\n                        onOk={runTaskOk}\r\n                        onCancel={runTaskCancel}\r\n                        okText=\"Ok\"\r\n                        cancelText=\"Cancel\"\r\n                    >\r\n                        <Formik\r\n                            initialValues={{\r\n                                date: moment(),\r\n                                time: moment(),\r\n                                action: 2\r\n                            }}\r\n                            onSubmit={runTaskSubmit}\r\n                            enableReinitialize={true}\r\n                        >\r\n                            {RunTaskFormCall}\r\n                        </Formik>\r\n                    </Modal>\r\n\r\n                </Card>\r\n            </div>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default TasksTreeBrowser","import { SwipeAction, List } from 'antd-mobile'\r\nimport React from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { NewTaskListType, TaskListType } from '../../Types/types'\r\nimport { NewTimeByString } from '../../utils/Date/NewDeteByString'\r\nimport { actions } from '../../redux/TaskListReducer'\r\nimport { InitialDrewerDataType, InitialValuesType } from './TasksTreeMobile'\r\n\r\nconst Item = List.Item\r\n\r\n\r\nconst time_to_complete = NewTimeByString()\r\n\r\nexport type OwnTaskTreeItemsType = {\r\n    taskItem: TaskListType,\r\n    deleteTaskList: (taskId: number) => void,\r\n    showDrawer: () => void,\r\n    setDrawerData: (drawerData: InitialDrewerDataType) => void,\r\n    initialFormValues: InitialValuesType,\r\n    setInitialFormValues: (initialFormValues: InitialValuesType) => void\r\n    updateTaskList: (values: NewTaskListType, taskId: number) => void,\r\n    onRunTask: (values: number) => void\r\n}\r\nexport const TaskTreeItemMobile: React.FC<OwnTaskTreeItemsType> = (props) => {\r\n    const dispatch = useDispatch()\r\n\r\n    const onSubTask = () => {\r\n        props.setDrawerData({\r\n            header: 'SubTask for: \"' + props.taskItem.name + '\"',\r\n            taskId: false\r\n        })\r\n\r\n        props.setInitialFormValues({\r\n            ...props.initialFormValues,\r\n            name: '',\r\n            time_to_complete: time_to_complete,\r\n            descriptions: '',\r\n            parent_id: Number(props.taskItem.id),\r\n            // task_type: 0\r\n            task_type: [0]\r\n        })\r\n        props.showDrawer()\r\n    }\r\n\r\n    const onEdit = (task: TaskListType) => {\r\n        props.setDrawerData({\r\n            header: 'Edit: \"' + task.name + '\"',\r\n            taskId: task.id\r\n        })\r\n\r\n        const new_time_to_complete = NewTimeByString( task.time_to_complete )\r\n\r\n        let newFormValues = {\r\n            ...props.initialFormValues,\r\n            name: task.name,\r\n            time_to_complete: new_time_to_complete,\r\n            descriptions: task.descriptions ? task.descriptions : undefined,\r\n            parent_id: task.parent_id ? task.parent_id : undefined,\r\n            task_type:  [Number(task.task_type)]\r\n        }\r\n\r\n        if (task.data) {\r\n            newFormValues = {\r\n                ...newFormValues,\r\n                ...JSON.parse(task.data)\r\n            }\r\n        }\r\n\r\n        console.log(newFormValues)\r\n\r\n        props.setInitialFormValues(newFormValues)\r\n\r\n        // props.setInitialFormValues({\r\n        //     ...props.initialFormValues,\r\n        //     name: task.name,\r\n        //     time_to_complete: new_time_to_complete,\r\n        //     descriptions: task.descriptions ? task.descriptions : undefined,\r\n        //     parent_id: task.parent_id ? task.parent_id : undefined,\r\n        //     // task_type:  Number(task.task_type) \r\n        //     task_type:  [Number(task.task_type)]\r\n        // })\r\n\r\n        props.showDrawer()\r\n    }\r\n\r\n    const onItemOpen = () => {\r\n        dispatch(actions.setSelectedTasks(props.taskItem.id));\r\n        props.setDrawerData({\r\n            header: props.taskItem.name,\r\n            taskId: props.taskItem.id\r\n        })\r\n    }\r\n\r\n    const onComplet = () => {\r\n        const values = { isCompleted: !props.taskItem.isCompleted }\r\n        props.updateTaskList(values, props.taskItem.id)\r\n    }\r\n\r\n    return (\r\n        <SwipeAction\r\n            style={{ backgroundColor: 'gray' }}\r\n            autoClose\r\n            right={[\r\n                {\r\n                    text: 'SubTask',\r\n                    onPress: () => { onSubTask() },\r\n                    style: { backgroundColor: 'green', color: 'white' },\r\n                },\r\n                {\r\n                    text: 'Delete',\r\n                    onPress: () => props.deleteTaskList(props.taskItem.id),\r\n                    style: { backgroundColor: '#F4333C', color: 'white' },\r\n                },\r\n            ]}\r\n            left={[\r\n                {\r\n                    text: 'Edit',\r\n                    onPress: () => { onEdit(props.taskItem) },\r\n                    style: { backgroundColor: '#108ee9', color: 'white' },\r\n                },\r\n                {\r\n                    text: props.taskItem.isCompleted ? 'Not Done' : 'Done',\r\n                    onPress: () => onComplet(),\r\n                    style: { backgroundColor: 'green', color: 'white' },\r\n                },\r\n                {\r\n                    text: 'Run',\r\n                    onPress: () => props.onRunTask(props.taskItem.id),\r\n                    style: { backgroundColor: '#F4333C', color: 'white' },\r\n                }\r\n            ]}\r\n        >\r\n            <Item\r\n                onClick={onItemOpen}\r\n                key={props.taskItem.id}\r\n                wrap\r\n            >\r\n                <div className=\"w-100 row \" key={props.taskItem.id}>\r\n                    <div className=\"col-10\">\r\n                        {props.taskItem.isCompleted ? \r\n                        <span className=\"text-black-50 text-break\">{props.taskItem.name}</span> \r\n                        : \r\n                        <span className=\"text-break\">{props.taskItem.name}</span>}\r\n                    </div>\r\n                    <div className=\"col-2\">\r\n                        {props.taskItem.time_to_complete ? props.taskItem.time_to_complete.split(/:/)[0]+':'+props.taskItem.time_to_complete.split(/:/)[1] : null}\r\n                    </div>\r\n                </div>\r\n\r\n            </Item>\r\n\r\n        </SwipeAction>\r\n    )\r\n}","import React, { useState, useEffect } from 'react'\r\nimport { TasksTreePropsType, taskTreeTypes } from './TasksTreeContainer'\r\nimport { Drawer, List, Button, Card, WingBlank, WhiteSpace } from 'antd-mobile'\r\nimport NewTaskTreeForm from './TaskTreeForm/NewTaskTreeForm'\r\nimport './TasksTreeMobile.css'\r\nimport { Formik } from 'formik'\r\nimport { TaskTreeItemMobile } from './TaskTreeMobileItem'\r\nimport { NewTimeByString } from '../../utils/Date/NewDeteByString'\r\nimport { NewTaskListType, TaskListType } from '../../Types/types'\r\nimport { checkActionsType } from './TaskListActions/TaskListActions'\r\n\r\nexport type InitialDrewerDataType = {\r\n    header: string,\r\n    taskId: false | number\r\n}\r\n\r\nconst initialDrewerData: InitialDrewerDataType = {\r\n    header: 'Tasks Tree',\r\n    taskId: false\r\n}\r\n\r\ntype SelectOptionType = {\r\n    name: string,\r\n    value: number\r\n}\r\n\r\nexport type InitialValuesType = {\r\n    selectOptions: Array<SelectOptionType> | null,\r\n    taskTypes: typeof taskTreeTypes,\r\n    task_type: Array<number>,\r\n    name?: string,\r\n    descriptions?: string\r\n    parent_id?: number\r\n    time_to_complete?: Date\r\n}\r\n\r\nconst getInitialValues = ( taskList: Array<TaskListType> ):InitialValuesType => {\r\n    return (\r\n        {\r\n            selectOptions: getSelectOptions(taskList),\r\n            taskTypes: taskTreeTypes,\r\n            task_type: [1],\r\n            time_to_complete: initialTimeToComplete,\r\n        }\r\n    )\r\n}\r\n\r\nlet initialTimeToComplete = NewTimeByString()\r\n\r\nconst getSelectOptions = (taskList: Array<TaskListType>):Array<SelectOptionType>  => {\r\n    if (taskList !== undefined && taskList.length > 0) {\r\n        return taskList.map((item: TaskListType) => {\r\n            return ({\r\n                name: item.name,\r\n                value: item.id\r\n            })\r\n        })\r\n    } else {\r\n        return []\r\n    }\r\n}\r\n\r\nconst TasksTreeMobile: React.FC<TasksTreePropsType> = (props) => {\r\n    useEffect(() => {\r\n        const getTaskList = () => props.getTaskList\r\n        if (props.taskList && props.taskList.length === 0 && !props.isTaskListLoaded) {\r\n            getTaskList()()\r\n        } else if (props.taskList === undefined) {\r\n            getTaskList()()\r\n        }\r\n        setVisible(false)\r\n        setInitialFormValues( getInitialValues(props.taskList) )\r\n    }, [ props.taskList, props.getTaskList, props.isTaskListLoaded ])\r\n\r\n    const [visible, setVisible] = useState(false)\r\n    const [initialFormValues, setInitialFormValues] = useState(getInitialValues(props.taskList))\r\n    const [drawerData, setDrawerData] = useState(initialDrewerData)\r\n\r\n    const handleSubmit = (formProps: InitialValuesType) => {\r\n        console.log(formProps)\r\n        const data = checkActionsType({...formProps, task_type: Number(formProps.task_type)})\r\n        console.log(data)\r\n        let newTaskList: NewTaskListType = {\r\n            name: formProps.name,\r\n            // task_type: formProps.taskTypes[0].value?.toString(),\r\n            task_type: formProps.task_type.toString(),\r\n            descriptions: formProps.descriptions, \r\n            user_id: props.userId,\r\n            parent_id: formProps.parent_id ? formProps.parent_id : undefined,\r\n            time_to_complete: formProps.time_to_complete ? formProps.time_to_complete.toTimeString().split(' ')[0] : undefined,\r\n        }\r\n\r\n        if (data) {\r\n            newTaskList = {...newTaskList, data: data}\r\n        }\r\n\r\n        if (!drawerData.taskId) {\r\n            props.createNewTaskList(newTaskList)\r\n        } else {\r\n            props.updateTaskList(newTaskList, drawerData.taskId)\r\n        }\r\n    }\r\n\r\n    const onAdd = () => {\r\n        if (props.selectedTasks.length !== 0) {\r\n            console.log(\r\n                props.taskList.filter( item=> item.id === Number(props.selectedTasks[props.selectedTasks.length - 1]))[0].name\r\n            )\r\n            setDrawerData({ \r\n                header: props.taskList.filter( item=> item.id === Number(props.selectedTasks[props.selectedTasks.length - 1]))[0].name,\r\n                taskId: false \r\n            })\r\n            setInitialFormValues({ ...getInitialValues(props.taskList), parent_id: Number(props.selectedTasks[props.selectedTasks.length - 1]) })\r\n        } else {\r\n            \r\n            setDrawerData({ \r\n                header: 'Task Tree',\r\n                taskId: false \r\n            })\r\n            setInitialFormValues({...getInitialValues(props.taskList), parent_id: initialFormValues.parent_id })\r\n        }\r\n\r\n        setVisible(!visible)\r\n    }\r\n\r\n    const showDrawer = () => {\r\n        setVisible(true)\r\n    }\r\n\r\n    const onBack = () => {\r\n        if (props.selectedTasks.length > 1) {\r\n            const taskId = props.selectedTasks[props.selectedTasks.length-2]\r\n            const taskName = props.taskList.filter( item => item.id === taskId)[0].name\r\n            setDrawerData({ header: taskName, taskId: taskId })\r\n        } else {\r\n            setDrawerData({ header: 'Task Tree', taskId: false })\r\n        }\r\n        props.backSelectedTasks()\r\n    }\r\n\r\n    const onRunTask = (values: number) => {\r\n        console.log(values)\r\n        // setRunTaskVisible(true)\r\n        // setRunData(\r\n        //     props.taskList.filter( (item: TaskListType)=> {\r\n        //             return (item.id === values)\r\n        //     })[0]\r\n        // )\r\n    }\r\n\r\n    return (\r\n        <WingBlank size=\"lg\">\r\n            <WhiteSpace size=\"lg\" />\r\n            <Card>\r\n                <Card.Header\r\n                    title={\r\n                        drawerData.header === 'Tasks Tree' ?\r\n                        <h5 className=\"w-100 text-center\">{drawerData.header}</h5>\r\n                        :\r\n                        <h5>{drawerData.header}</h5>\r\n                    }\r\n                    extra={\r\n                        <div className=\"d-flex flex-row\">\r\n                            {props.selectedTasks.length > 0 && !visible ?\r\n                                <Button\r\n                                    inline\r\n                                    size=\"small\"\r\n                                    className=\"mx-3 my-2\"\r\n                                    onClick={onBack}\r\n                                    type=\"primary\"\r\n                                >\r\n                                    Back\r\n                                    </Button>\r\n                                :\r\n                                null\r\n                            }\r\n                            <Button\r\n                                inline\r\n                                size=\"small\"\r\n                                className=\"mx-3 my-2\"\r\n                                onClick={onAdd}\r\n                                type=\"primary\"\r\n                            >\r\n                                {visible ? 'Close' : 'Add'}\r\n                            </Button>\r\n                        </div>\r\n                    }\r\n                >\r\n                </Card.Header>\r\n                <Drawer\r\n                    className=\"my-drawer\"\r\n                    style={{ minHeight: document.documentElement.clientHeight }}\r\n                    contentStyle={{ color: '#A6A6A6', textAlign: 'center', paddingTop: 0, width: \"100%\" }}\r\n                    sidebar={\r\n                        <div className=\"mt-4\">\r\n                            <Formik\r\n                                initialValues={initialFormValues}\r\n                                onSubmit={handleSubmit}\r\n                                enableReinitialize={true}\r\n                            >\r\n                                {NewTaskTreeForm}\r\n                            </Formik>\r\n                        </div>\r\n                    }\r\n                    open={visible}\r\n                    onOpenChange={onAdd}\r\n                >\r\n                    <List>\r\n                        {props.taskList !== undefined ?\r\n                            props.taskList\r\n                            .map((item: TaskListType) => {\r\n                                let parentId: number\r\n                                if (props.selectedTasks.length !== 0) {\r\n                                    parentId = props.selectedTasks[props.selectedTasks.length - 1]\r\n                                    if (item.parent_id === parentId) {\r\n                                        return (\r\n                                            <TaskTreeItemMobile\r\n                                                key={item.id.toString()}\r\n                                                taskItem={item}\r\n                                                deleteTaskList={props.deleteTaskList}\r\n                                                showDrawer={showDrawer}\r\n                                                setDrawerData={setDrawerData}\r\n                                                initialFormValues={initialFormValues}\r\n                                                setInitialFormValues={setInitialFormValues}\r\n                                                updateTaskList={props.updateTaskList}\r\n                                                onRunTask={onRunTask}\r\n                                            />\r\n                                        )\r\n                                    } else {\r\n                                        return null\r\n                                    }\r\n                                } else {\r\n                                    if (item.parent_id === null) {\r\n                                        return (\r\n                                            <TaskTreeItemMobile\r\n                                                key={item.id.toString()}\r\n                                                taskItem={item}\r\n                                                deleteTaskList={props.deleteTaskList}\r\n                                                showDrawer={showDrawer}\r\n                                                setDrawerData={setDrawerData}\r\n                                                initialFormValues={initialFormValues}\r\n                                                setInitialFormValues={setInitialFormValues}\r\n                                                updateTaskList={props.updateTaskList}\r\n                                                onRunTask={onRunTask}\r\n                                            />\r\n                                        )\r\n                                    } else {\r\n                                        return null\r\n                                    }\r\n                                }\r\n\r\n                            })\r\n                            :\r\n                            null\r\n                        }\r\n                    </List>\r\n                </Drawer>\r\n            </Card>\r\n        </WingBlank>\r\n    )\r\n}\r\n\r\nexport default TasksTreeMobile","import {connect} from 'react-redux'\r\nimport { AppStateType } from '../../redux/store'\r\nimport {getTaskList, createNewTaskList, deleteTaskList, updateTaskList, actions} from './../../redux/TaskListReducer'\r\nimport {createNewTask as createNewToDo} from './../../redux/taskReducer'\r\nimport { isMobile } from 'react-device-detect'\r\nimport TasksTreeBrowser from './TasksTreeBrowser'\r\nimport TasksTreeMobile from './TasksTreeMobile'\r\nimport { NewTaskDataType, NewTaskListType } from '../../Types/types'\r\n\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    getTaskList: ()=>void,\r\n    createNewTaskList: (values: NewTaskListType)=>void,\r\n    deleteTaskList: (taskId: number)=>void,\r\n    updateTaskList: (values: NewTaskListType, taskId: number)=> void,\r\n    backSelectedTasks: ()=>void,\r\n    createNewToDo: (values: NewTaskDataType, reload?:boolean)=> void,\r\n}\r\n\r\ntype OwnTasksTreePropsType = {\r\n\r\n}\r\n\r\nexport type TasksTreePropsType = MapPropsType & MapDispatchPropsType & OwnTasksTreePropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        taskList: state.taskList.taskList,\r\n        userId: state.auth.user?.id,\r\n        isTaskListLoaded: state.taskList.isTaskListLoaded,\r\n        selectedTasks: state.taskList.selectedTasks\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnTasksTreePropsType, AppStateType>(mapStateToProps, \r\n    {getTaskList, createNewTaskList, deleteTaskList, updateTaskList, backSelectedTasks: actions.backSelectedTasks, createNewToDo}) \r\n    (isMobile ? TasksTreeMobile : TasksTreeBrowser)\r\n    \r\ntype TaskTreeTypesItemType = {\r\n    name: string,\r\n    label?: string,\r\n    value: string | number | null,\r\n    isSubform: boolean,\r\n    childTypes?: Array<TaskTreeTypesItemType> \r\n    component?: string,\r\n    type?: string,\r\n    validate?: string,\r\n    hasFeedback?: true,\r\n\r\n}\r\ntype TaskTreeTypesType = Array<TaskTreeTypesItemType>\r\n\r\nexport const taskTreeTypes: TaskTreeTypesType = [\r\n    {\r\n        name: 'Простая задача',\r\n        value: 1,\r\n        isSubform: false,\r\n        childTypes: []\r\n    },\r\n    {\r\n        name: 'Звонок',\r\n        value: 2,\r\n        isSubform: true,\r\n        childTypes: [\r\n            {\r\n                label: 'телефонный номер',\r\n                value: null,\r\n                name: 'phone_number',\r\n                component: 'AntInput',\r\n                type: \"text\",\r\n                validate: 'validateRequired',\r\n                hasFeedback: true,\r\n                isSubform: false,\r\n            },\r\n            {\r\n                label: 'Имя абонента',\r\n                value: null,\r\n                name: 'lead_name',\r\n                component: 'AntInput',\r\n                type: \"text\",\r\n                validate: 'validateRequired',\r\n                hasFeedback: true,\r\n                isSubform: false,\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        name: 'Разработка',\r\n        value: 3,\r\n        isSubform: true,\r\n        childTypes: []\r\n    }\r\n]\r\n","import React, { ReactNode } from 'react'\r\nimport { Form, Field, FormikProps } from \"formik\"\r\nimport { AntCheckbox, AntInput, AntInputPassword, AntSelect } from '../../utils/Formik/CreateAntField'\r\nimport { validateEmail, validateRequired } from '../../utils/Formik/ValidateFields'\r\n\r\nconst RegisterForm: ((props: FormikProps<{}>) => ReactNode) = (props) => {\r\n    return (\r\n        <Form\r\n            className=\"form-container\"\r\n            onSubmit={props.handleSubmit}\r\n        >\r\n            <Field\r\n                component={AntInput}\r\n                name=\"name\"\r\n                type=\"text\"\r\n                label=\"Name\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n            <Field\r\n                component={AntInput}\r\n                name=\"email\"\r\n                type=\"email\"\r\n                label=\"Email\"\r\n                validate={validateEmail}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n            <Field\r\n                component={AntInputPassword}\r\n                name=\"password\"\r\n                type=\"password\"\r\n                label=\"Password\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n\r\n            <Field\r\n                component={AntInputPassword}\r\n                name=\"c_password\"\r\n                type=\"password\"\r\n                label=\"Confirm\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n\r\n            <Field\r\n                component={AntCheckbox}\r\n                name=\"remember\"\r\n                label=\"Remember Me\"\r\n                submitCount={props.submitCount}\r\n            />\r\n\r\n            <Field\r\n                component={AntSelect}\r\n                selectOptions={statusOptions}\r\n                name=\"status\"\r\n                type=\"select\"\r\n                label=\"User Status\"\r\n                submitCount={props.submitCount}\r\n            />\r\n\r\n            <div className=\"submit-container\">\r\n                <button className=\"ant-btn ant-btn-primary\" type=\"submit\">\r\n                    Register\r\n                </button>\r\n            </div>\r\n\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default RegisterForm\r\n\r\ntype StatusOptionItemType = {\r\n    name: string,\r\n    value: string,\r\n    isSubform: boolean,\r\n}\r\n\r\ntype StatusOptionsType = Array<StatusOptionItemType>\r\n\r\nconst statusOptions: StatusOptionsType = [\r\n    {\r\n        name: 'Guest',\r\n        value: 'guest',\r\n        isSubform: false,\r\n    },\r\n    {\r\n        name: 'Admin',\r\n        value: 'admin',\r\n        isSubform: false,\r\n    },\r\n]","import { Formik } from 'formik'\r\nimport React, { useEffect } from 'react'\r\nimport RegisterForm from './RegisterForm'\r\nimport { RegisterPropsType } from './RegisterContainer'\r\nimport { useHistory } from 'react-router-dom'\r\nimport { message } from 'antd'\r\nimport { RegisterFormType } from '../../api/authAPI'\r\n\r\n\r\nexport type OwnRegisterPropsType = {}\r\n\r\nconst initialValues: RegisterFormType = {\r\n    email: '',\r\n    password: '',\r\n    name: '',\r\n    remember: false\r\n}\r\n\r\nconst Register: React.FC<RegisterPropsType> = (props) => {\r\n    let history = useHistory();\r\n    useEffect( () => {\r\n        if(props.isAuth) {\r\n            history.replace(props.appLocation+'toDoList')\r\n        }\r\n    }, [props.isAuth, history, props.appLocation])\r\n\r\n    useEffect(() => {\r\n        if (props.authError) {\r\n            message.error(props.authError)\r\n        }\r\n    }, [props.authError])\r\n    \r\n    const handleSubmit = (formProps: RegisterFormType) => {\r\n        props.register(formProps)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h1 className=\"mb-5 mx-auto\">Register Form</h1>\r\n            <Formik\r\n                initialValues={initialValues}\r\n                onSubmit={handleSubmit}\r\n            >\r\n                {RegisterForm}\r\n            </Formik>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Register","import {connect} from 'react-redux'\r\nimport Register, { OwnRegisterPropsType } from './Register'\r\nimport { AppStateType } from '../../redux/store'\r\nimport {register} from './../../redux/authReducer'\r\nimport { RegisterFormType } from '../../api/authAPI'\r\n\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    register: (creds: RegisterFormType)=>void\r\n}\r\n\r\nexport type RegisterPropsType = MapPropsType & MapDispatchPropsType & OwnRegisterPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n        appLocation: state.app.location,\r\n        authError: state.auth.authError\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnRegisterPropsType, AppStateType>(mapStateToProps, \r\n    {register}) \r\n    (Register)\r\n    \r\n\r\n","import { Col, Row } from 'antd'\r\nimport { Button } from 'antd'\r\nimport React, {useEffect} from 'react'\r\nimport { ListGroup } from 'react-bootstrap'\r\nimport {UsersPropsType} from './UsersContainer'\r\nimport { CaretRightOutlined } from '@ant-design/icons'\r\nimport { Link, useRouteMatch }from \"react-router-dom\";\r\n\r\nconst Users: React.FC<UsersPropsType> = (props) => {\r\n    useEffect( ()=> {\r\n        if (props.usersList.length === 0) {\r\n            props.getUsersList()\r\n        }\r\n    }, [props.usersList, props] )\r\n\r\n    let { url } = useRouteMatch();\r\n    \r\n    return (\r\n        <div>\r\n            <h5>Users</h5>\r\n            <ListGroup as=\"ul\">\r\n            {   props.usersList.map( (item: any) => {\r\n                    return(\r\n                        <ListGroup.Item as=\"li\" action className=\"\" key={item.id}>\r\n                            <Row className=\"px-0 ml-0 ml-sm-5\">\r\n                                <Col className=\"mx-2\">\r\n                                    {item.id}\r\n                                </Col>\r\n                                <Col className=\"mx-2\">\r\n                                    <Link to={url+'/'+item.id}>{item.name}</Link>\r\n                                </Col>\r\n                                {props.UserStatus === 'superAdmin' ?\r\n                                <Col className=\"mr-auto ml-0 mr-sm-2 ml-sm-auto\">\r\n                                <Button\r\n                                    type=\"primary\"\r\n                                    shape=\"circle\"\r\n                                    size=\"small\"\r\n                                    style={{ marginLeft: 10 }}\r\n                                    onClick={()=>{\r\n                                        // console.log('onClick')\r\n                                    }}\r\n                                    icon={\r\n                                        <div className=\"d-flex flex-wrap align-content-start\">\r\n                                            <CaretRightOutlined className=\"ml-1\" style={{ fontSize: '14px' }} />\r\n                                        </div>\r\n                                    }\r\n                                />\r\n                                </Col>\r\n                                    :\r\n                                    null\r\n                                }\r\n                            </Row>\r\n                        </ListGroup.Item>\r\n                    )\r\n                })\r\n            }\r\n            </ListGroup>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Users","import React, { useEffect } from 'react'\r\nimport {UsersPropsType} from './UsersContainer'\r\nimport { List } from 'antd-mobile'\r\nimport { Link, useRouteMatch } from 'react-router-dom'\r\n\r\nconst Item = List.Item\r\n\r\nconst UsersMobile: React.FC<UsersPropsType> = (props) => {\r\n    useEffect( ()=> {\r\n        if (props.usersList.length === 0) {\r\n            props.getUsersList()\r\n        }\r\n    }, [props.usersList, props] )\r\n    \r\n    let { url } = useRouteMatch();\r\n    return (\r\n        <div>\r\n            <List renderHeader={() => 'Users:'} className=\"my-list\">\r\n                {   props.usersList.map( (item: any) => {\r\n                        return(\r\n                            <Item \r\n                                key={item.id.toString()}\r\n                                onClick={() => {console.log('onClick')}}\r\n                            >\r\n                                <Link to={url+'/'+item.id}>{item.name}</Link>\r\n                            </Item>\r\n                        )\r\n                    })\r\n                }\r\n            </List>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UsersMobile","import {createSelector} from 'reselect'\r\nimport {AppStateType} from './store'\r\n\r\nconst UsersItemsSelector = (state: AppStateType) => state.users.usersList\r\n\r\nexport const getUsersListSelector = createSelector(UsersItemsSelector,\r\n    (users) => {\r\n        return users\r\n    }\r\n)","import {connect} from 'react-redux'\r\nimport Users from './Users'\r\nimport UsersMobile from './UsersMobile'\r\nimport { AppStateType } from '../../redux/store'\r\nimport { isMobile } from 'react-device-detect'\r\nimport {getUsersList} from '../../redux/usersReducer'\r\nimport {getUsersListSelector} from './../../redux/usersSelector'\r\n\r\n\r\ntype OwnUsersPropsType = {}\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    getUsersList: ()=>void,\r\n}\r\n\r\nexport type UsersPropsType = MapPropsType & MapDispatchPropsType & OwnUsersPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        usersList: getUsersListSelector(state),\r\n        UserStatus: state.auth.user?.status\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnUsersPropsType, AppStateType>(mapStateToProps, \r\n    {getUsersList}) \r\n    (isMobile ? UsersMobile : Users)\r\n    \r\n\r\n","import { Formik, FormikProps, Form, Field } from 'formik'\r\nimport React, { ReactNode, useState } from 'react'\r\nimport { AntInput, AntSelect } from '../../../utils/Formik/CreateAntField'\r\nimport { validateRequired, validatePhone } from '../../../utils/Formik/ValidateFields'\r\n\r\ntype userData = {\r\n    userData: any,\r\n    updateUser: (values: any, userId: number)=>void\r\n}\r\n\r\nconst UserDataForm: React.FC<userData> = (props) => {\r\n\r\n    type InitialFormValuesType = {\r\n        id: number,\r\n        created_at: string,\r\n        updated_at: string,\r\n        name: string,\r\n        email: string,\r\n        phone: string,\r\n        status: string\r\n    }\r\n    const initialFormValues: InitialFormValuesType = {\r\n        id: props.userData.id,\r\n        created_at: props.userData.created_at,\r\n        updated_at: props.userData.updated_at,\r\n        name: props.userData.name,\r\n        email: props.userData.email,\r\n        phone: props.userData.phone,\r\n        status: props.userData.status\r\n    }\r\n\r\n    const handleSubmit = (values: any, actions: any) => {\r\n        delete values['created_at']\r\n        delete values['updated_at']\r\n        props.updateUser(values, props.userData.id)\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Formik\r\n                initialValues={initialFormValues}\r\n                onSubmit={handleSubmit}\r\n                enableReinitialize={true}\r\n            >\r\n                {FormFielsd}\r\n            </Formik>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UserDataForm\r\n\r\nconst FormFielsd: ((props: FormikProps<{}>) => ReactNode) = (props) => {\r\n\r\n    const [isChanged, setIsChanged] = useState(false)\r\n\r\n    const submitPosible = () => {\r\n        setIsChanged(true)\r\n    }\r\n\r\n    const statusOptions = [\r\n        {\r\n            name: 'Guest',\r\n            value: 'guest'\r\n        },\r\n        {\r\n            name: 'Admin',\r\n            value: 'admin'\r\n        },\r\n        {\r\n            name: 'Super Admin',\r\n            value: 'superAdmin'\r\n        },\r\n\r\n    ]\r\n\r\n    return (\r\n        <Form\r\n            className=\"form-container mt-2\"\r\n            onSubmit={props.handleSubmit}\r\n        >\r\n            <Field\r\n                component={AntInput}\r\n                name=\"id\"\r\n                type=\"text\"\r\n                label=\"ID\"\r\n                disabled\r\n            />\r\n\r\n            <Field\r\n                component={AntInput}\r\n                name=\"created_at\"\r\n                type=\"text\"\r\n                label=\"Created at\"\r\n                disabled\r\n            />\r\n\r\n            <Field\r\n                component={AntInput}\r\n                name=\"updated_at\"\r\n                type=\"text\"\r\n                label=\"Updated at\"\r\n                disabled\r\n            />\r\n\r\n            <Field\r\n                component={AntInput}\r\n                name=\"email\"\r\n                type=\"text\"\r\n                label=\"Email\"\r\n                disabled\r\n            />\r\n\r\n            <Field\r\n                component={AntInput}\r\n                name=\"name\"\r\n                type=\"text\"\r\n                label=\"Name\"\r\n                validate={validateRequired}\r\n                onChange={submitPosible}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n            \r\n            <Field\r\n                component={AntInput}\r\n                name=\"phone\"\r\n                type=\"text\"\r\n                label=\"Phone number\"\r\n                validate={validatePhone}\r\n                onChange={submitPosible}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n            <Field\r\n                component={AntSelect}\r\n                selectOptions={statusOptions}\r\n                name=\"status\"\r\n                type=\"select\"\r\n                label=\"Status\"\r\n                validate={validateRequired}\r\n                onChange={submitPosible}\r\n                submitCount={props.submitCount}\r\n            />\r\n            { isChanged ?\r\n                <div className=\"submit-container\">\r\n                    <button className=\"ant-btn ant-btn-primary mb-4\" type=\"submit\">\r\n                        Save\r\n                    </button>\r\n                </div>\r\n                :\r\n                null\r\n            }\r\n        </Form>\r\n    )\r\n}","import { Collapse, Spin, List, Pagination, Button, Drawer } from 'antd'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { TaskType } from '../../../Types/types'\r\nimport TimeScale from './../../ToDo/TimeScale/TimeScale'\r\nimport ToDoHeader from '../../ToDo/ToDoHeader/ToDoHeader'\r\nimport { CurrentUserPropsType } from './CurrentUserContainer'\r\nimport UserDataForm from './UserDataForm'\r\nimport moment from 'moment'\r\nimport { Formik } from 'formik'\r\nimport { initialValues, InitialValuesType } from './../../ToDo/ToDoBrowser'\r\nimport ToDoForm from '../../ToDo/ToDoForm/ToDoForm'\r\nimport { UserType } from '../../../redux/authReducer'\r\n\r\nconst { Panel } = Collapse\r\n\r\nexport const getTargetUser = (usersList: Array<UserType> ,userId: string):UserType  => {\r\n    return usersList.filter((item: UserType) => item.id.toString() === userId )[0]\r\n}\r\n\r\nexport const toDoPart = (\r\n    toDoList: Array<TaskType>,\r\n    currentPage: number,\r\n    defaultPageSize: number\r\n    ): Array<TaskType> => {\r\n    let toDoPart: Array<TaskType> = []\r\n    if (toDoList) {\r\n        const startIndex = (currentPage - 1) * defaultPageSize\r\n        const endIndex = startIndex + defaultPageSize\r\n        for (let index = 0; index < toDoList.length; index++) {\r\n            const element = toDoList[index];\r\n            if (index >= startIndex && index < endIndex) {\r\n                toDoPart.push(element)\r\n            }\r\n\r\n        }\r\n    }\r\n    return toDoPart\r\n}\r\n\r\nconst CurrentUser: React.FC<CurrentUserPropsType> = (props) => {\r\n    useEffect(() => {\r\n        const getUsersList = () => props.getUsersList\r\n        const setUsersDataChanged = () => props.setUsersDataChanged\r\n\r\n        if (props.usersList.length === 0) {\r\n            getUsersList()()\r\n        }\r\n        if (props.isUsersDataChanged) {\r\n            getUsersList()()\r\n            setUsersDataChanged()(false)\r\n        }\r\n    }, [props.usersList, props.getUsersList, props.isUsersDataChanged, props.setUsersDataChanged])\r\n\r\n    const [defaultPageSize, setDefaultPageSize] = useState(10)\r\n    const [currentPage, setCurrentPage] = useState(1)\r\n    const [toDoFormVisible, setToDoFormVisible]= useState(false)\r\n    const [initialFormValues, setInitialFormValues] = useState(initialValues)\r\n    const [taskList, setTaskList] = useState<Array<TaskType> | null>(null)\r\n    const [isInterval, setIsInterval] = useState(false)\r\n    \r\n\r\n    const user = getTargetUser(props.usersList, props.match.params.userId)\r\n\r\n    const callback = () => { }\r\n\r\n    const onTaskEdit = () => { }\r\n\r\n    const onPagination = (currentPage: number) => {\r\n        setCurrentPage(currentPage)\r\n    }\r\n\r\n    const onShowSizeChange = (current: number, size: number) => {\r\n        setDefaultPageSize(size)\r\n    }\r\n\r\n    type DateIntervalType = {\r\n        startDate: moment.Moment,\r\n        endDate: moment.Moment\r\n    }\r\n    const [dateInterval, setDateInterval] = useState<DateIntervalType>({\r\n        startDate: moment(),\r\n        endDate: moment()\r\n    })\r\n\r\n    \r\n\r\n    const getTaskList = (startDate: string, endDate: string) => {\r\n        let tasklist: Array<TaskType> = []\r\n        if (user.toDoList) {\r\n\r\n            for (let index = 0; index < user.toDoList.length; index++) {\r\n                const toDo = user.toDoList[index];\r\n                if (moment(toDo.date).isBetween(\r\n                    moment(dateInterval.startDate.format('YYYY-MM-DD')).add(-1, 'day'),\r\n                    moment(dateInterval.endDate.format('YYYY-MM-DD')).add(1, 'day'),\r\n                    'day')) {\r\n                    tasklist.push(toDo)\r\n                }\r\n            }\r\n        }\r\n        setTaskList(tasklist)\r\n    }\r\n\r\n    const setIsIntervalValues = (isInterval: boolean, date: { startDate: moment.Moment, endDate: moment.Moment }) => {\r\n        console.log('setIsIntervalValues', isInterval)\r\n        setIsInterval(isInterval)\r\n        setDateInterval(date)\r\n    }\r\n\r\n    const onToDoFormClose = () => {\r\n        setInitialFormValues(initialValues)\r\n        setToDoFormVisible(false)\r\n    }\r\n\r\n    const handleSubmitToDoForm = () => {\r\n    }\r\n\r\n\r\n    if (user) {\r\n        return (\r\n            <div className=\"mt-2\">\r\n                <h5>Name: {user.name}</h5>\r\n                <p>User id: {props.match.params.userId}</p>\r\n\r\n                <Collapse defaultActiveKey={[]} onChange={callback}>\r\n                    <Panel header=\"User data\" key=\"1\">\r\n                        <UserDataForm userData={user} updateUser={props.updateUser} />\r\n                    </Panel>\r\n                    <Panel header=\"ToDo List\" key=\"2\">\r\n                        <List>\r\n                            {user.toDoList ? toDoPart(user.toDoList, currentPage, defaultPageSize).map((item: TaskType) => {\r\n                                return <TodoItem \r\n                                    key={item.id.toString()} \r\n                                    item={item} \r\n                                    setToDoFormVisible={setToDoFormVisible}\r\n                                    setInitialFormValues={setInitialFormValues}\r\n                                    />\r\n                            })\r\n                                :\r\n                                null\r\n                            }\r\n                        </List>\r\n                        <Pagination\r\n                            total={user.toDoList?.length}\r\n                            showTotal={(total, range) => `${range[0]}-${range[1]} of ${total} items`}\r\n                            defaultPageSize={10}\r\n                            defaultCurrent={1}\r\n                            onChange={onPagination}\r\n                            onShowSizeChange={onShowSizeChange}\r\n                        />\r\n                    </Panel>\r\n                    <Panel header=\"Schedule\" key=\"3\">\r\n                        <h3>Schedule for {user.name}:</h3>\r\n                        <ToDoHeader\r\n                            dateInterval={dateInterval}\r\n                            setIsInterval={setIsIntervalValues}\r\n                            isReadOnly={true}\r\n                        />\r\n                            <TimeScale\r\n                                onEdit={onTaskEdit}\r\n                                dateInterval={dateInterval}\r\n                                errorMessage={props.errorMessage}\r\n                                getTaskList={getTaskList}\r\n                                isInterval={isInterval}\r\n                                settings={props.settings}\r\n                                taskList={taskList}\r\n                                taskListIsFetching={false}\r\n                                taskSaveStatus={props.taskSaveStatus}\r\n                                isReadOnly={true}\r\n                            />            \r\n                    </Panel>\r\n                    <Panel header=\"Related users\" key=\"4\"></Panel>\r\n                    <Panel header=\"Permissions\" key=\"5\"></Panel>\r\n                </Collapse>\r\n\r\n                <Drawer\r\n                    title={initialFormValues.name}\r\n                    placement=\"right\"\r\n                    closable={true}\r\n                    onClose={onToDoFormClose}\r\n                    visible={toDoFormVisible}\r\n                    width=\"90%\"\r\n                >\r\n                    <Formik\r\n                        initialValues={initialFormValues}\r\n                        onSubmit={handleSubmitToDoForm}\r\n                        enableReinitialize={true}\r\n                        initialStatus={'readOnly'}\r\n                    >\r\n                        {ToDoForm}\r\n                    </Formik>\r\n                </Drawer>\r\n\r\n            </div >\r\n        )\r\n    } else {\r\n        return <Spin key=\"spin\" size=\"large\" />\r\n    }\r\n}\r\n\r\nexport default CurrentUser\r\n\r\ntype TodoItemPropsType = {\r\n    item: TaskType,\r\n    key: string,\r\n    setToDoFormVisible:  React.Dispatch<React.SetStateAction<boolean>>,\r\n    setInitialFormValues: React.Dispatch<React.SetStateAction<InitialValuesType>>\r\n}\r\nconst TodoItem: React.FC<TodoItemPropsType> = (props) => {\r\n    const showDrawer = (item: TaskType) => {\r\n        props.setToDoFormVisible(true)\r\n        const timeParts = item.time.split(':')\r\n        props.setInitialFormValues({\r\n            name: item.name,\r\n            time: moment().hours(Number(timeParts[0])).minutes(Number(timeParts[1])).seconds(Number(timeParts[2])),\r\n            date: moment(item.date),\r\n            descriptions: item.descriptions ? item.descriptions : null\r\n        })\r\n    }\r\n    return (\r\n        <List.Item\r\n            key={props.item.id}\r\n            actions={[<Button onClick={() => { showDrawer(props.item) }} type=\"link\" block>Show</Button>]}\r\n        >\r\n            {props.item.name}\r\n        </List.Item>\r\n    )\r\n}","import { Spin } from 'antd'\r\nimport React, { useCallback, useEffect, useState } from 'react'\r\nimport { getTargetUser, toDoPart } from './CurrentUser'\r\nimport { CurrentUserPropsType } from './CurrentUserContainer'\r\nimport { Accordion, LocaleProvider, Pagination, List, NavBar, Icon, Drawer, Button } from 'antd-mobile'\r\nimport UserDataForm from './UserDataForm'\r\nimport enUS from 'antd-mobile/lib/locale-provider/en_US'\r\nimport './Pagination.css'\r\nimport { useHistory } from 'react-router-dom'\r\nimport ToDoHeaderMobile from '../../ToDo/ToDoHeader/ToDoHeaderMobile'\r\nimport moment from 'moment'\r\nimport { Formik } from 'formik'\r\nimport { initialValues } from '../../ToDo/ToDoMobile'\r\nimport ToDoForm from '../../ToDo/ToDoForm/ToDoForm'\r\nimport { NewTimeByString } from '../../../utils/Date/NewDeteByString'\r\nimport {TasksOnly} from './../../ToDo/ToDoMobile'\r\nimport { TaskType } from '../../../Types/types'\r\n\r\nconst Item = List.Item\r\n\r\nconst CurrentUserMobile: React.FC<CurrentUserPropsType> = (props) => {\r\n    const [currentPage, setCurrentPage] = useState(1)\r\n    const [toDoFormVisible, setToDoFormVisible]= useState(false)\r\n    const [initialFormValues, setInitialFormValues] = useState(initialValues)\r\n    const [taskList, setTaskList] = useState<Array<TaskType> | null>(null)\r\n    const [dateInterval, setDateInterval] = useState<DateIntervalType>({\r\n        startDate: moment(),\r\n        endDate: moment()\r\n    })\r\n    \r\n    const user = getTargetUser(props.usersList, props.match.params.userId)\r\n\r\n    const getTaskListCallback = useCallback(\r\n        (startDate: string, endDate: string) => {\r\n            if (user) {\r\n                let taskList: Array<TaskType> = []\r\n                if (user.toDoList) {\r\n                    for (let index = 0; index < user.toDoList.length; index++) {\r\n                        const toDo = user.toDoList[index];\r\n                        if (moment(toDo.date).isBetween(\r\n                            moment(startDate).add(-1, 'day'),\r\n                            moment(endDate).add(1, 'day'),\r\n                            'day')) {\r\n                                taskList.push(toDo)\r\n                        }\r\n                    }\r\n                }\r\n                setTaskList(taskList)\r\n            } else {\r\n                setTaskList(null)\r\n            }\r\n        },\r\n        [setTaskList, user],\r\n    )\r\n\r\n    useEffect(() => {\r\n        const getUsersList = () => props.getUsersList\r\n        const setUsersDataChanged = () => props.setUsersDataChanged\r\n\r\n        console.log(props.isUsersDataChanged)\r\n        if (props.usersList.length === 0) {\r\n            getUsersList()()\r\n        }\r\n        if (props.isUsersDataChanged) {\r\n            getUsersList()()\r\n            setUsersDataChanged()(false)\r\n        }\r\n        if (user && taskList === null) {\r\n            getTaskListCallback(dateInterval.startDate.format('YYYY-MM-DD'), dateInterval.endDate.format('YYYY-MM-DD'))\r\n        }\r\n        \r\n    }, [props.usersList, props.getUsersList, dateInterval, user, taskList, getTaskListCallback, props.isUsersDataChanged, props.setUsersDataChanged])\r\n    \r\n    let history = useHistory()\r\n\r\n    type DateIntervalType = {\r\n        startDate: moment.Moment,\r\n        endDate: moment.Moment\r\n    }\r\n\r\n    const setIsInterval = (isInterval: boolean, date: { startDate: moment.Moment, endDate: moment.Moment }) => {\r\n        setDateInterval(date)\r\n        getTaskListCallback(date.startDate.format('YYYY-MM-DD'), date.endDate.format('YYYY-MM-DD'))\r\n    }\r\n\r\n    const onChange = () => {\r\n\r\n    }\r\n\r\n    const onPagination = (currentPage: number) => {\r\n        setCurrentPage(currentPage)\r\n    }\r\n\r\n    const onTaskOpen = (task: TaskType) => {\r\n        setToDoFormVisible(!toDoFormVisible)\r\n        let time = NewTimeByString(task.time)\r\n\r\n        const splitDate = task.date.split(/-/)\r\n        let date = new Date()\r\n        date.setFullYear(parseInt(splitDate[0]))\r\n        date.setMonth(parseInt(splitDate[1])-1)\r\n        date.setDate(parseInt(splitDate[2]))\r\n\r\n        setInitialFormValues({\r\n            name: task.name,\r\n            time: time,\r\n            date: date,\r\n            descriptions: task.descriptions ? task.descriptions : null\r\n        })\r\n    }\r\n\r\n    const onTaskClose = () => {\r\n        setToDoFormVisible(!toDoFormVisible)\r\n    }\r\n\r\n    const handleSubmit = () => {\r\n        \r\n    }\r\n\r\n    if (user) {\r\n        return (\r\n            <div>\r\n                <NavBar\r\n                    mode=\"light\"\r\n                    icon={<Icon type=\"left\" />}\r\n                    onLeftClick={() => history.replace(props.appLocation+'users')}\r\n                    rightContent={[\r\n                       <span key=\"UserId\" >User id: {props.match.params.userId}</span>\r\n                    ]}\r\n                >\r\n                    <span className=\"text-dark\">{user.name}</span>\r\n                </NavBar>\r\n\r\n                <Accordion defaultActiveKey=\"\" className=\"my-accordion\" onChange={onChange} >\r\n                    <Accordion.Panel header=\"User data\">\r\n                        <UserDataForm userData={user} updateUser={props.updateUser} />\r\n                    </Accordion.Panel>\r\n                    <Accordion.Panel header=\"ToDo List\">\r\n                    <Drawer\r\n                    className=\"my-drawer\"\r\n                    style={{ minHeight: document.documentElement.clientHeight }}\r\n                    contentStyle={{ color: '#A6A6A6', textAlign: 'center', paddingTop: 0, width: \"100%\" }}\r\n                    sidebar={\r\n                        <>\r\n                        <Button\r\n                                inline\r\n                                size=\"small\"\r\n                                className=\"ml-3 mt-3 mb-5\"\r\n                                onClick={onTaskClose}\r\n                                type=\"primary\"\r\n                            >\r\n                                Close\r\n                            </Button>\r\n\r\n                        <div className=\"mt-1\">\r\n                            <Formik\r\n                                initialValues={initialFormValues}\r\n                                onSubmit={handleSubmit}\r\n                                enableReinitialize={true}\r\n                                initialStatus={'readOnly'}\r\n                            >\r\n                                {ToDoForm}\r\n                            </Formik>\r\n                        </div>\r\n                        </>\r\n                    }\r\n                    open={toDoFormVisible}\r\n                >\r\n                        <List>\r\n                            {user.toDoList ? toDoPart(user.toDoList, currentPage, 10).map((item: TaskType) => {\r\n                                return (\r\n                                <Item \r\n                                    key={item.id.toString()} \r\n                                    onClick={()=>{onTaskOpen(item)}}\r\n                                >\r\n                                    {item.name}\r\n                                </Item>\r\n                                )\r\n                            })\r\n                                :\r\n                                null\r\n                            }\r\n                        </List>\r\n\r\n                        <LocaleProvider locale={enUS}>\r\n                            <div className=\"pagination-container\" >\r\n                                <Pagination\r\n                                    className=\"m-2\"\r\n                                    total={user.toDoList ? Math.ceil(user.toDoList?.length / 10) : 0}\r\n                                    current={currentPage}\r\n                                    onChange={onPagination}\r\n                                />\r\n                            </div>\r\n                        </LocaleProvider>\r\n                        </Drawer>\r\n                    </Accordion.Panel>\r\n                    <Accordion.Panel header=\"Schedule\">\r\n                        <ToDoHeaderMobile\r\n                            dateInterval={dateInterval}\r\n                            setIsInterval={setIsInterval}\r\n                            isReadOnly={true}\r\n                        />\r\n                        <TasksOnly \r\n                            dateInterval={dateInterval}\r\n                            taskList={taskList}\r\n                            isReadOnly={true}\r\n                        />\r\n                    </Accordion.Panel>\r\n                    <Accordion.Panel header=\"Related users\"></Accordion.Panel>\r\n                    <Accordion.Panel header=\"Permissions\"></Accordion.Panel>\r\n                </Accordion>\r\n            </div>\r\n        )\r\n    } else {\r\n        return <Spin key=\"spin\" size=\"small\" />\r\n    }\r\n\r\n}\r\n\r\nexport default CurrentUserMobile","import {connect} from 'react-redux'\r\nimport CurrentUser from './CurrentUser'\r\nimport { AppStateType } from './../../../redux/store'\r\nimport { isMobile } from 'react-device-detect'\r\nimport { getUsersList, updateUser, actions } from './../../../redux/usersReducer'\r\nimport { UserType } from '../../../redux/authReducer'\r\nimport CurrentUserMobile from './CurrentUserMobile'\r\n\r\ntype OwnCurrentUserPropsType = {\r\n    match: any\r\n    location: any\r\n    history: any\r\n}\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    getUsersList: ()=>void,\r\n    updateUser: (values: UserType, userId: number)=>void,\r\n    setUsersDataChanged: (isUsersDataChanged: boolean)=>void\r\n}\r\n\r\nexport type CurrentUserPropsType = MapPropsType & MapDispatchPropsType & OwnCurrentUserPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        usersList: state.users.usersList,\r\n        dateInterval: state.task.dateInterval,\r\n        errorMessage: state.task.errorMessage,\r\n        isInterval: state.task.isInterval,\r\n        taskSaveStatus: state.task.taskSaveStatus,\r\n        settings:state.auth.viewSettings,\r\n        appLocation: state.app.location,\r\n        viewSettings: state.auth.viewSettings,\r\n        isUsersDataChanged: state.users.isUsersDataChanged\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnCurrentUserPropsType, AppStateType>(mapStateToProps, \r\n    {getUsersList, updateUser, setUsersDataChanged: actions.setUsersDataChanged}) \r\n    (isMobile ? CurrentUserMobile : CurrentUser)\r\n    \r\n\r\n","import { List, Typography } from 'antd'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Link, useRouteMatch } from 'react-router-dom'\r\nimport { ProjectsPropsType } from './ProjectsContainer'\r\n\r\nexport type OwnProjectsPropsType = {}\r\n\r\nconst Projects: React.FC<ProjectsPropsType> = (props) => {\r\n    useEffect(() => {\r\n        if (!props.isProjectListLoaded) {\r\n            props.getProjectList()\r\n        }\r\n    }, [props.isProjectListLoaded, props.projectList])\r\n\r\n    const [projectList, setProjectList] = useState<Array<any>>()\r\n\r\n    let { url } = useRouteMatch();\r\n    \r\n    console.log(props)\r\n\r\n    return (\r\n        <>\r\n            <h4>Projects</h4>\r\n            <li>Add project</li>\r\n            <List\r\n                // header={<div>Header</div>}\r\n                // footer={<div>Footer</div>}\r\n                bordered\r\n                dataSource={props.projectList}\r\n                renderItem={item => (\r\n                    <List.Item\r\n                        actions={[<a key=\"list-loadmore-edit\">show</a>,]}\r\n                    >\r\n                         <Link to={url+'/'+item.id}>{item.name}</Link>\r\n                    </List.Item>\r\n                )}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Projects","import {connect} from 'react-redux'\r\nimport Projects, { OwnProjectsPropsType } from './Projects'\r\nimport { AppStateType } from '../../../redux/store'\r\nimport {getProjectList} from './../../../redux/projectReducer'\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    getProjectList: ()=>void,\r\n}\r\n\r\nexport type ProjectsPropsType = MapPropsType & MapDispatchPropsType & OwnProjectsPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        projectList: state.projects.projectList,\r\n        isProjectListLoaded: state.projects.isProjectLoaded\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnProjectsPropsType, AppStateType>(mapStateToProps, \r\n    {getProjectList}) \r\n    (Projects)\r\n    \r\n\r\n","import { Field, Form, FormikProps } from \"formik\"\r\nimport React, { ReactNode, useState } from \"react\"\r\nimport { AntInput } from \"../../../../../../utils/Formik/CreateAntField\"\r\nimport { validateRequired } from \"../../../../../../utils/Formik/ValidateFields\"\r\n\r\n\r\nconst InstansesForm: ((props: FormikProps<{}>) => ReactNode) = (props) => {\r\n    const [isDataChanged, setIsDataChanged] = useState(false)\r\n\r\n    const onChange = (val:any) => {\r\n        setIsDataChanged(true)\r\n    }\r\n    return(\r\n        <Form\r\n            className=\"form-container mt-2\"\r\n            onSubmit={props.handleSubmit}\r\n        >\r\n            <Field\r\n                component={AntInput}\r\n                name=\"name\"\r\n                type=\"text\"\r\n                label=\"Name\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n                onChange={onChange}\r\n            />\r\n            <Field\r\n                component={AntInput}\r\n                name=\"url\"\r\n                type=\"text\"\r\n                label=\"URL\"\r\n                submitCount={props.submitCount}\r\n                onChange={onChange}\r\n            />\r\n            <Field\r\n                component={AntInput}\r\n                name=\"ip\"\r\n                type=\"text\"\r\n                label=\"IP\"\r\n                submitCount={props.submitCount}\r\n                onChange={onChange}\r\n            />\r\n            <Field\r\n                component={AntInput}\r\n                name=\"login\"\r\n                type=\"text\"\r\n                label=\"Login\"\r\n                submitCount={props.submitCount}\r\n                onChange={onChange}\r\n            />\r\n            <Field\r\n                component={AntInput}\r\n                name=\"password\"\r\n                type=\"text\"\r\n                label=\"Password\"\r\n                submitCount={props.submitCount}\r\n                onChange={onChange}\r\n            />\r\n            <Field\r\n                component={AntInput}\r\n                name=\"folder\"\r\n                type=\"text\"\r\n                label=\"folder on server\"\r\n                submitCount={props.submitCount}\r\n                onChange={onChange}\r\n            />\r\n            {isDataChanged ?\r\n            <div className=\"submit-container\">\r\n                <button className=\"ant-btn ant-btn-primary\" type=\"submit\">\r\n                    Save\r\n                </button>\r\n            </div>\r\n            : null}\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default InstansesForm","import { Button } from 'antd'\r\nimport React from 'react'\r\nimport { FieldListPropsType } from './FieldListContainer'\r\n\r\n// type FieldListPropsType = {\r\n//     fields: Array<any>\r\n//     openModalToAddField: (target: any | null)=>void,\r\n//     deleteField:(fieldId: number)=>void\r\n// }\r\n\r\nconst FieldList: React.FC<FieldListPropsType> = (props) => {\r\n\r\n    const showCode = () => {\r\n        console.log(props)\r\n        props.setShowCodeModal(true, 'model', props.fields, props.targetName, [])\r\n    }\r\n\r\n    return(\r\n        <div key=\"fieldList\">\r\n            <div className=\"w-100 d-flex flex-row mt-2 mb-2\">\r\n                <Button type=\"primary\" className=\"mr-1 ml-auto\" onClick={()=>{console.log('check')}} >Check</Button>\r\n                <Button type=\"primary\" className=\"mr-4 ml-1\" onClick={showCode} >Code</Button>\r\n            </div>\r\n        {\r\n            props.fields.map( (item: any) => {\r\n                return(\r\n                    <div key={item.name}>\r\n                    <FieldRow \r\n                        fieldName={item.name}\r\n                        fieldType={item.type}\r\n                        isNulleble={item.isNulleble}\r\n                        isPrimary={item.isPrimary}\r\n                        isNew={false}\r\n                        openModalToAddField={props.openModalToAddField}\r\n                        fieldId={item.id}\r\n                        deleteField={props.deleteField}\r\n                        fieldParam={item.fieldParam}\r\n                    />\r\n                    </div>\r\n                ) \r\n            })\r\n        }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FieldList\r\n\r\ntype FieldRowPropsType = {\r\n    fieldName: string | undefined,\r\n    fieldType: string | undefined,\r\n    isNulleble?: boolean,\r\n    isPrimary?: boolean,\r\n    isNew: boolean,\r\n    fieldId: number,\r\n    fieldParam: string\r\n\r\n    openModalToAddField: (target: any | null)=>void,\r\n    deleteField:(fieldId: number)=>void\r\n}\r\n\r\nconst FieldRow: React.FC<FieldRowPropsType> = (props) => {\r\n\r\n    const deleteField = (fieldId: number) => {\r\n        props.deleteField(fieldId)\r\n    }\r\n    const rowBG = props.isPrimary ? 'bg-light' : null\r\n\r\n    return(\r\n        <div className={'row py-2 border '+rowBG}>\r\n            <div className=\"col\">{props.fieldName}</div>\r\n            <div className=\"col\">{props.fieldType}</div>\r\n            <div className=\"col\">{props.isNulleble ? 'null' : null}</div>\r\n            <div className=\"col\">\r\n                <Button type=\"ghost\" className=\"ml-2\" size=\"small\" onClick={()=>{props.openModalToAddField({...props})}}>Edit</Button>\r\n                <Button type=\"primary\" size=\"small\" className=\"ml-2\" onClick={()=>{ deleteField(props.fieldId) }}>Delete</Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import {connect} from 'react-redux'\r\nimport { AppStateType } from '../../../../../../redux/store'\r\nimport FieldList from './FieldList'\r\nimport {actions, codeTypeList} from './../../../../../../redux/codeReducer'\r\n\r\ntype OwnFieldListPropsType = {\r\n    fields: Array<any>\r\n    openModalToAddField: (target: any | null)=>void,\r\n    deleteField:(fieldId: number)=>void,\r\n    targetName: string,\r\n    targetData: Array<any>\r\n}\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    setShowCodeModal: (isShow: boolean, codeType: codeTypeList, codeRowsArray: Array<any>, codeTargetName: string, codeData: Array<any>) => void,\r\n}\r\n\r\nexport type FieldListPropsType = MapPropsType & MapDispatchPropsType & OwnFieldListPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnFieldListPropsType, AppStateType>(mapStateToProps, \r\n    {setShowCodeModal: actions.setShowCodeModal}) \r\n    (FieldList)\r\n    \r\n\r\n","import { Form, Field, FormikProps } from 'formik'\r\nimport React, { ReactNode, useState, useEffect } from 'react'\r\nimport { AntCheckbox, AntInput, AntSelect } from '../../../../../../utils/Formik/CreateAntField'\r\nimport { validateRequired } from '../../../../../../utils/Formik/ValidateFields'\r\nimport { SelectOptionType } from '../../../../../../Types/types'\r\nimport { Radio } from 'antd'\r\n// import { AntInput, AntSelect, AntTextArea, AntTimePicker } from '../../../utils/Formik/CreateAntField'\r\n// import { validateRequired } from '../../../utils/Formik/ValidateFields'\r\n// import ProjectForm from './Project/ProjectForm'\r\n\r\n\r\nconst FieldForm: ((props: FormikProps<{}>) => ReactNode) = (props) => {\r\n    // @ts-ignore\r\n    const [radioValue, setRadioValue] = useState(props.initialValues.fieldParam)\r\n\r\n    useEffect( ()=> {\r\n        // @ts-ignore\r\n        setRadioValue(props.initialValues.fieldParam)\r\n    },[props.initialValues])\r\n\r\n    const onRadioChange = (e: any) => {\r\n        setRadioValue(e.target.value)\r\n        props.setValues({ ...props.values, fieldParam: e.target.value })\r\n        console.log('Добавили значение fieldParam: ',e.target.value)\r\n    }\r\n    const newFieldTypepOtions: Array<SelectOptionType> = [\r\n        {\r\n            name: 'BOOLEAN',\r\n            value: 'boolean'\r\n        },\r\n        {\r\n            name: 'BIGINT',\r\n            value: 'bigint'\r\n        },\r\n        {\r\n            name: 'VARCHAR',\r\n            value: 'varchar'\r\n        },\r\n        {\r\n            name: 'JSON',\r\n            value: 'json'\r\n        },\r\n        {\r\n            name: 'TIMESTAMP',\r\n            value: 'timestamp'\r\n        },\r\n        {\r\n            name: 'TEXT',\r\n            value: 'text'\r\n        }\r\n\r\n    ]\r\n\r\n    console.log(props.initialValues)\r\n    console.log(radioValue)\r\n\r\n    return (\r\n        <Form\r\n            className=\"form-container\"\r\n            onSubmit={props.handleSubmit}\r\n        >\r\n            <Field\r\n                component={AntInput}\r\n                name=\"newFieldName\"\r\n                type=\"text\"\r\n                label=\"New fieldName\"\r\n                validate={validateRequired}\r\n                hasFeedback\r\n            // onChange={onChangeNewFieldName}\r\n            />\r\n            <Field\r\n                component={AntSelect}\r\n                selectOptions={newFieldTypepOtions}\r\n                name=\"newFieldType\"\r\n                type=\"select\"\r\n                label=\"Field type\"\r\n                submitCount={props.submitCount}\r\n            />\r\n            <Field\r\n                component={AntCheckbox}\r\n                name=\"isNulleble\"\r\n                type=\"checkbox\"\r\n                label=\"isNulleble\"\r\n                submitCount={props.submitCount}\r\n            // onClick={submitBackEnd}\r\n            // onSelect={submitBackEnd}\r\n            />\r\n            <Field\r\n                component={AntCheckbox}\r\n                name=\"isPrimary\"\r\n                type=\"checkbox\"\r\n                label=\"isPrimary\"\r\n                submitCount={props.submitCount}\r\n            />\r\n\r\n            {/* <Radio.Group onChange={onRadioChange} value={radioValue} name=\"fieldParam\">\r\n                <Radio value={'fillable'}>Fillable</Radio>\r\n                <Radio value={'hidden'}>Hidden</Radio>\r\n                <Radio value={'readOnly'}>ReadOnly</Radio>\r\n            </Radio.Group> */}\r\n\r\n            <div className=\"ant-row ant-form-item\">\r\n                <div className=\"ant-col ant-form-item-label\">\r\n                    <label>\r\n                        Picked\r\n                    </label>\r\n                </div>\r\n                <div className=\"mt-1\">\r\n                    <Radio.Group onChange={onRadioChange} value={radioValue} name=\"fieldParam\">\r\n                        <Radio value={'fillable'}>Fillable</Radio>\r\n                        <Radio value={'hidden'}>Hidden</Radio>\r\n                        <Radio value={'readOnly'}>ReadOnly</Radio>\r\n                    </Radio.Group>\r\n                </div>\r\n                \r\n            {/* <div role=\"group\" aria-labelledby=\"my-radio-group\">\r\n                    <label>\r\n                        <Field type=\"radio\" name=\"picked\" value=\"One\" label=\"one\" />\r\n                        One\r\n                    </label>\r\n                    <label>\r\n                        <Field type=\"radio\" name=\"picked\" value=\"Two\" />\r\n                        Two\r\n                    </label>\r\n                </div>*/}\r\n            </div> \r\n\r\n            <div className=\"submit-container\" >\r\n                <button className=\"ant-btn ant-btn-primary\" type=\"submit\">\r\n                    Save\r\n                </button>\r\n            </div>\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default FieldForm","import { Form, Field, FormikProps } from 'formik'\r\nimport React, { ReactNode, useState, useEffect } from 'react'\r\nimport { AntCheckbox, AntInput, AntSelect } from '../../../../../../utils/Formik/CreateAntField'\r\nimport { validateRequired } from '../../../../../../utils/Formik/ValidateFields'\r\nimport {SelectOptionType} from '../../../../../../Types/types'\r\n// import { AntInput, AntSelect, AntTextArea, AntTimePicker } from '../../../utils/Formik/CreateAntField'\r\n// import { validateRequired } from '../../../utils/Formik/ValidateFields'\r\n// import ProjectForm from './Project/ProjectForm'\r\n\r\n\r\nconst ModelForm: ((props: FormikProps<{}>) => ReactNode) = (props) => {\r\n    return (\r\n        <Form\r\n            className=\"form-container\"\r\n            onSubmit={props.handleSubmit}\r\n        >\r\n            <Field\r\n                component={AntInput}\r\n                name=\"name\"\r\n                type=\"text\"\r\n                label=\"Model name\"\r\n                validate={validateRequired}\r\n                hasFeedback\r\n                // onChange={onChangeNewFieldName}\r\n            />\r\n            <Field\r\n                component={AntInput}\r\n                name=\"folder\"\r\n                type=\"text\"\r\n                label=\"Model folder\"\r\n                // validate={validateRequired}\r\n                // hasFeedback\r\n                // onChange={onChangeNewFieldName}\r\n            />\r\n            <div className=\"submit-container\">\r\n                <button className=\"ant-btn ant-btn-primary\" type=\"submit\">\r\n                    Save1\r\n                </button>\r\n            </div>\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default ModelForm","import React, {useEffect} from 'react'\r\nimport { FieldType } from '../../../../api/projectAPI'\r\nimport {ModelCodePropsType} from './ModelCodeContainer'\r\n\r\nconst ModelCode: React.FC<ModelCodePropsType> = (props) => {\r\n    useEffect( ()=> {\r\n        console.log('props.codeTargetName changed')\r\n    },[props.codeTargetName])\r\n\r\n    console.log(props)\r\n\r\n    // str[0].toUpperCase() + str.slice(1)\r\n    return(\r\n        <div>\r\n            <li>!!!table name</li>\r\n            <li>Field type</li>\r\n            <li>namespace</li>\r\n\r\n            <h5>ModelCode:</h5>\r\n\r\n            <code>{'<?php'}</code>\r\n            <br/><br/>\r\n            <code>{'namespace App;'}</code>\r\n            <br/><br/>\r\n            <code>{'use Illuminate\\\\Database\\\\Eloquent\\\\Model;'}</code><br/>\r\n            {props.codeData.soft_delete ? \r\n                <><code>{'use Illuminate\\\\Database\\\\Eloquent\\\\SoftDeletes;'}</code><br/></>\r\n            :\r\n                null\r\n            }\r\n            {props.codeData.db ? \r\n                <><code>{'use Illuminate\\\\Support\\\\Facades\\\\DB;'}</code><br/></>\r\n            :\r\n                null\r\n            }\r\n            \r\n            \r\n            <br/>\r\n            <code>{'class '+props.codeTargetName[0].toUpperCase()+props.codeTargetName.slice(1)+' extends Model'}</code><br/>\r\n            \r\n            <code>{'{'}</code><br/>\r\n\r\n            {props.codeData.soft_delete ? \r\n                <><code>{tab(1,'use SoftDeletes;')}</code><br/><br/></>\r\n            :\r\n                null\r\n            }\r\n            \r\n            {/* 'protected $table = 'Models_instanses';' */}\r\n            <code>{tab(1,'protected $table = \"'+props.codeTargetName+'\";')}</code><br/>\r\n\r\n            <Fillable codeRowsArray={props.codeRowsArray}/>\r\n\r\n            <Hidden codeRowsArray={props.codeRowsArray}/>\r\n\r\n            <code>{'}'}</code><br/>\r\n\r\n            {/* {props.codeRowsArray.map( (item: any) => {\r\n                return(\r\n                    <div>\r\n                        {item.name}\r\n                    </div>\r\n                )\r\n            })} */}\r\n\r\n            <h5>Migration code:</h5>\r\n\r\n            <code>{'<?php'}</code>\r\n            <br/><br/>\r\n            <code>{'use Illuminate\\\\Database\\\\Migrations\\\\Migration;'}</code><br/>\r\n            <code>{'use Illuminate\\\\Database\\\\Schema\\\\Blueprint;'}</code><br/>\r\n            <code>{'use Illuminate\\\\Support\\\\Facades\\\\Schema;'}</code><br/>\r\n            <br/>\r\n            <code>{'class Create'+props.codeTargetName[0].toUpperCase()+props.codeTargetName.slice(1)+'Table extends Migration'}</code><br/>\r\n            <code>{'{'}</code><br/>\r\n            <code>{tab(1,'public function up()')}</code><br/>\r\n            <code>{tab(1,'{')}</code><br/>\r\n            <code>{tab(2,'Schema::create(\"'+props.codeTargetName+'\", function (Blueprint $table) {')}</code><br/>\r\n\r\n                {props.codeRowsArray.map( (item: any) => {\r\n                    const isNulleble = item.isNulleble ? '->nullable()' : ''\r\n                    return(\r\n                        <><code>{tab(3,'$table->'+getFieldtype(item)+'(\"'+item.name+'\")'+isNulleble+';')}</code><br/></>\r\n                    )\r\n                })}\r\n                {props.codeData.soft_delete ? \r\n                <><code>{tab(3,'$table->softDeletes();')}</code><br/></>\r\n                : null}\r\n                <><code>{tab(3,'$table->timestamps();')}</code><br/></>\r\n\r\n            <code>{tab(2,'});')}</code><br/>\r\n            <code>{tab(1,'}')}</code><br/>\r\n\r\n            <code>{tab(1,'}')}</code><br/>\r\n\r\n            <br/>\r\n            <code>{tab(1,'public function down()')}</code><br/>\r\n            <code>{tab(1,'{')}</code><br/>\r\n            <code>{tab(2,'Schema::dropIfExists(\"'+props.codeTargetName+'\");')}</code><br/>\r\n            <code>{tab(1,'}')}</code><br/>\r\n            <code>{'}'}</code><br/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ModelCode\r\n\r\ntype FillableType = {\r\n    codeRowsArray: Array<any>\r\n}\r\n\r\nconst Fillable: React.FC<any> = (props) => {\r\n    const fields: Array<any> = props.codeRowsArray.filter( (item: any) => item.fieldParam === 'fillable')\r\n    if (fields.length > 0) {\r\n        return(\r\n            <div>\r\n                <br/>\r\n                <code>{tab(1,'protected $fillable = [')}</code><br/>\r\n                \r\n                {fields.map( (item: any) => {\r\n                    return(\r\n                        <div key={item.name}>\r\n                        <>&nbsp;&nbsp;&nbsp;&nbsp;</>\r\n                        <>&nbsp;&nbsp;&nbsp;&nbsp;</>\r\n                        <>&nbsp;&nbsp;&nbsp;&nbsp;</>\r\n                        <>&nbsp;&nbsp;&nbsp;&nbsp;</>\r\n                        <code>{'\"'+item.name+'\", '}</code><br/>\r\n                        </div>\r\n                    )\r\n                })}\r\n                \r\n                <code>{tab(1,'];')}</code><br/>\r\n            </div>\r\n        )\r\n    } else {\r\n        return <></>\r\n    }\r\n}\r\n\r\nconst Hidden: React.FC<any> = (props) => {\r\n    const fields: Array<any> = props.codeRowsArray.filter( (item: any) => item.fieldParam === 'hidden')\r\n    if (fields.length > 0) {\r\n        return(\r\n            <>\r\n            <br/>\r\n            <code>{ tab(1,'protected $hidden = [') }</code><br/>\r\n            \r\n            {fields.map( (item: any) => {\r\n                return(\r\n                    <>\r\n                    <>&nbsp;&nbsp;&nbsp;&nbsp;</>\r\n                    <>&nbsp;&nbsp;&nbsp;&nbsp;</>\r\n                    <>&nbsp;&nbsp;&nbsp;&nbsp;</>\r\n                    <>&nbsp;&nbsp;&nbsp;&nbsp;</>\r\n                    <code>{'\"'+item.name+'\", '}</code><br/></>\r\n                )\r\n            })}\r\n            \r\n            <code>{tab(1,'];')}</code><br/>\r\n            </>\r\n        )\r\n    } else {\r\n        return <></>\r\n    }\r\n}\r\n\r\nexport const tab = (count: number, text?: string) => {\r\n    const getTabs = ():Array<JSX.Element> => {\r\n        let i = 1\r\n        let tabs: Array<JSX.Element> = []\r\n        while (i<=count) {\r\n            i++\r\n            tabs.push(\r\n                <span key={i}>\r\n                    &nbsp;&nbsp;&nbsp;&nbsp;\r\n                </span>\r\n            )\r\n        }\r\n        return tabs\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {getTabs()}\r\n            {text}\r\n        </>\r\n    )\r\n}\r\n\r\nconst getFieldtype = (field: FieldType ) => {\r\n    console.log(field.name, '=',field.type)\r\n    if (field.isPrimary) {\r\n        return 'bigIncrements'\r\n    } else {\r\n        switch (field.type) {\r\n            case 'bigint':\r\n                return 'bigInteger'\r\n    \r\n            case 'varchar':\r\n                return 'string'\r\n    \r\n            default:\r\n                return field.type\r\n        }\r\n    }\r\n}","import {connect} from 'react-redux'\r\nimport { AppStateType } from './../../../../redux/store'\r\nimport ModelCode from './ModelCode'\r\nimport {actions, codeTypeList} from './../../../../redux/codeReducer'\r\n\r\ntype OwnModelCodePropsType = {\r\n    \r\n}\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    setShowCodeModal: (isShow: boolean, codeType: codeTypeList, codeRowsArray: Array<any>, codeTargetName: string, codeData: Array<any>) => void,\r\n}\r\n\r\nexport type ModelCodePropsType = MapPropsType & MapDispatchPropsType & OwnModelCodePropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        isModalVisible: state.code.isModalVisible,\r\n        codeRowsArray: state.code.codeRowsArray,\r\n        codeType: state.code.codeType,\r\n        codeTargetName: state.code.codeTargetName,\r\n        codeData: state.code.codeData\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnModelCodePropsType, AppStateType>(mapStateToProps, \r\n    {setShowCodeModal: actions.setShowCodeModal}) \r\n    (ModelCode)\r\n    \r\n\r\n","import {Modal} from 'antd'\r\nimport React, {useState, useEffect} from 'react'\r\nimport { CodeModalPropsType } from './CodeModalContainer'\r\nimport ModelCodeContainer from './Model/ModelCodeContainer'\r\n\r\nconst CodeModal: React.FC<CodeModalPropsType> = (props) => {\r\n    const onClose = () => {\r\n        props.setShowCodeModal(false, props.codeType, props.codeRowsArray, props.codeTargetName, [])\r\n    }\r\n\r\n    const getTargetComponennt = () => {\r\n        switch (props.codeType) {\r\n            case 'model':\r\n                return <ModelCodeContainer />\r\n        \r\n            default:\r\n                return <div>No data</div>\r\n        }\r\n    }\r\n\r\n    return(\r\n        <Modal title=\"Code modal\" visible={props.isModalVisible} onOk={onClose} onCancel={onClose} width={1000}>\r\n            {getTargetComponennt()}\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default CodeModal\r\n\r\n","import {connect} from 'react-redux'\r\nimport { AppStateType } from './../../../redux/store'\r\nimport CodeModal from './CodeModal'\r\nimport {actions, codeTypeList} from './../../../redux/codeReducer'\r\n\r\ntype OwnCodeModalPropsType = {\r\n    \r\n}\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    setShowCodeModal: (isShow: boolean, codeType: codeTypeList, codeRowsArray: Array<any>, codeTargetName: string, codeData: Array<any>) => void,\r\n}\r\n\r\nexport type CodeModalPropsType = MapPropsType & MapDispatchPropsType & OwnCodeModalPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        isModalVisible: state.code.isModalVisible,\r\n        codeRowsArray: state.code.codeRowsArray,\r\n        codeType: state.code.codeType,\r\n        codeTargetName: state.code.codeTargetName\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnCodeModalPropsType, AppStateType>(mapStateToProps, \r\n    {setShowCodeModal: actions.setShowCodeModal}) \r\n    (CodeModal)\r\n    \r\n\r\n","import { Button, Collapse, Empty  } from 'antd'\r\nimport Modal from 'antd/lib/modal/Modal'\r\nimport { Field, Form, Formik, FormikProps, FormikValues } from 'formik'\r\nimport React, { ReactNode, useEffect, useState } from 'react'\r\nimport { FieldType, ModelsType } from '../../../../../../api/projectAPI'\r\nimport { AntCheckbox, AntInput } from '../../../../../../utils/Formik/CreateAntField'\r\nimport { validateRequired } from '../../../../../../utils/Formik/ValidateFields'\r\nimport FieldList from './FieldListContainer'\r\nimport FieldForm from './FieldForm'\r\nimport { ModelsPropsType } from './ModelsContainer'\r\nimport ModelForm from './ModelForm'\r\nimport CodeModalContainer from '../../../../Code/CodeModalContainer'\r\nimport { useDispatch } from 'react-redux'\r\nimport {createController as createControllerThunk } from './../../../../../../redux/projectReducer'\r\n\r\nconst { Panel } = Collapse\r\n\r\nconst Models: React.FC<ModelsPropsType> = (props) => {\r\n    useEffect( ()=>{\r\n        props.getModelsList(props.backendId)\r\n    }, [])\r\n\r\n    const [isModalVisible, setIsModalVisible] = useState(false)\r\n    const [isCodeVisible, setIsCodeVisible] = useState(false)\r\n\r\n    const addModel = () => {\r\n        console.log('addModel')\r\n        setIsModalVisible(!isModalVisible)\r\n    }\r\n\r\n    const handleOk = () => {setIsModalVisible(!isModalVisible)}\r\n    const handleCancel = () => {setIsModalVisible(!isModalVisible)}\r\n\r\n    const handleSubmit = (vals: any) => {\r\n        console.log(vals)\r\n        console.log(props)\r\n        props.createModel({\r\n            ...vals,\r\n            backend_id: props.backendId\r\n        })\r\n    }\r\n\r\n    const callback = (key:any) => {\r\n        console.log(key)\r\n        console.log(props.modelsList)\r\n        console.log(props.modelsList.filter(item => item.id === Number(key[0]))[0])\r\n        const target = props.modelsList.filter(item => item.id === Number(key[0]))[0]\r\n        if (target) {\r\n            props.setCodeTarget(\r\n                target.name,\r\n                {\r\n                    db: target.db, \r\n                    soft_delete: target.soft_delete\r\n                }\r\n            )\r\n        }\r\n        \r\n    }\r\n\r\n    return(\r\n        <>\r\n            <div className=\"w-100 d-flex flex-row-reverse\">\r\n                <Button className=\"mr-4 ml-auto mb-3\" type=\"primary\" onClick={addModel}>Add Model</Button>\r\n            </div>\r\n\r\n            <Collapse defaultActiveKey={[]} onChange={callback}>\r\n                {\r\n                    props.modelsList ?\r\n                    props.modelsList.map(item => {\r\n                        return(\r\n                            <Panel header={item.name} key={item.id ? item.id.toString() : 'null'}>\r\n                                <ModelFormItem modelItem={item} changePanel={props.changePanel} updateModel={props.updateModel} />\r\n                            </Panel>\r\n                        )\r\n                    })\r\n                    : <div>No DATA</div>\r\n                }\r\n            </Collapse>\r\n            <Modal title=\"Create new Model\" visible={isModalVisible} onOk={handleOk} onCancel={handleCancel}>\r\n                <Formik\r\n                    // initialValues={initialModalValues}\r\n                    initialValues={{}}\r\n                    onSubmit={handleSubmit}\r\n                    enableReinitialize={true}\r\n                >\r\n                    {ModelForm}\r\n                </Formik>\r\n            </Modal>\r\n\r\n            <CodeModalContainer />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Models\r\n\r\ntype ModelFormItemPropsType = {\r\n    modelItem: ModelsType,\r\n    updateModel: (values: ModelsType, modelId: number) => void,\r\n    changePanel: (closeKey: string, openKey: Array<string>) => void,\r\n}\r\n\r\nconst ModelFormItem: React.FC<ModelFormItemPropsType> = (props) => {\r\n    console.log(props)\r\n    let fields: Array<FieldType>\r\n    if (Array.isArray(props.modelItem.fields)) {\r\n        fields = props.modelItem.fields\r\n    } else {\r\n        fields = JSON.parse(props.modelItem.fields)\r\n    }\r\n\r\n    type fieldsDataType = {[name: string]: string}\r\n    let fieldsdata: Array<FieldType> = []\r\n    let fieldInit:fieldsDataType = {}\r\n    if (fields) {\r\n        for (let index = 0; index < fields.length; index++) {\r\n            const field = fields[index];\r\n            fieldsdata.push(field)\r\n            fieldInit['field_'+field.name] = field.type\r\n        }\r\n    }\r\n\r\n    const handleSubmit = (formValues:any) => {\r\n        const oldValue = {...props.modelItem, fields: fieldsdata, ...fieldInit}\r\n        console.log('formValues: ', formValues)\r\n\r\n        // compere model\r\n        let ismodelChange = false\r\n        if ( \r\n            oldValue.name !== formValues.name\r\n            || oldValue.db !== formValues.db\r\n            || oldValue.soft_delete !== formValues.soft_delete\r\n            ) {\r\n            ismodelChange = true\r\n        }\r\n\r\n        console.log(props.modelItem)\r\n\r\n        const newFieldData: ModelsType = {\r\n            // ...props.modelItem,\r\n            fields: JSON.stringify(formValues.fields),\r\n            name: formValues.name,\r\n            backend_id: props.modelItem.backend_id,\r\n            id: props.modelItem.id,\r\n            db: formValues.db,\r\n            soft_delete: formValues.soft_delete\r\n        }\r\n\r\n        console.log(newFieldData)\r\n        props.updateModel(newFieldData, props.modelItem.id ? props.modelItem.id : 0)\r\n    }\r\n\r\n    console.log({...props.modelItem, fields: fieldsdata, ...fieldInit})\r\n    console.log(props.changePanel)\r\n    return(\r\n        <Formik\r\n            enableReinitialize={true}\r\n            initialValues={ {...props.modelItem, fields: fieldsdata, ...fieldInit, changePanel: props.changePanel} }\r\n            onSubmit={handleSubmit}\r\n            own={props.changePanel}\r\n        >\r\n            {ModelView}\r\n        </Formik>\r\n    )\r\n}\r\n\r\ntype OwnModelViewPropsType = {\r\n    own: any\r\n}\r\n\r\nconst ModelView: ((props: OwnModelViewPropsType & FormikProps<FormikValues>) => ReactNode) = (props) => {\r\n    const [initialFieldValues, setInitialFieldValues] = useState(props.initialValues)\r\n\r\n    type InitialModalValuesType = {\r\n        newFieldName: string,\r\n        newFieldType: string,\r\n        isNulleble: boolean,\r\n        isPrimary: boolean,\r\n        isNew: boolean,\r\n        id?: number,\r\n        fieldParam?: string,\r\n    }\r\n    const emptyInitialModalValues: InitialModalValuesType = {\r\n        newFieldName: '',\r\n        newFieldType: '',\r\n        isNulleble: false,\r\n        isPrimary: false,\r\n        isNew: true,\r\n        fieldParam: '',\r\n    }\r\n\r\n    const [initialModalValues, setInitialModalValues] = useState<InitialModalValuesType>(emptyInitialModalValues)\r\n    const [initialValues2 , setInitialValues2] = useState(props.initialValues)\r\n\r\n    useEffect( ()=>{\r\n    }, [initialModalValues])\r\n\r\n    const onChange = (val:any) => {\r\n        console.log('onChange in Models')\r\n        setIsDataChanged(true)\r\n    }\r\n\r\n    const openModalToAddField = (target: any | null) => {\r\n        console.log('openModalToAddField', target)\r\n\r\n        if (!target.isNew) {\r\n            console.log('ОБНУЛЯЕМ ФОРМУ', target)\r\n            setInitialModalValues({\r\n                newFieldName: target.fieldName,\r\n                newFieldType: target.fieldType,\r\n                isNulleble: target.isNulleble,\r\n                isPrimary: target.isPrimary,\r\n                isNew: false,\r\n                id: target.fieldId,\r\n                fieldParam: target.fieldParam\r\n            })\r\n        } else {\r\n            setInitialModalValues({...emptyInitialModalValues})\r\n            console.log('СОЗДАЕМ НОВЫЙ ФИЛД', initialModalValues)\r\n            \r\n        }\r\n        \r\n        setIsModalVisible(true)\r\n    }\r\n\r\n    const [isDataChanged, setIsDataChanged] = useState(false)\r\n\r\n    const [isModalVisible, setIsModalVisible] = useState(false)\r\n\r\n    const handleOk = () => {\r\n        console.log('handleOk')\r\n        setIsModalVisible(false)\r\n    }\r\n\r\n    const handleCancel = () => {\r\n        console.log('handleCancel')\r\n        setInitialModalValues(emptyInitialModalValues)\r\n        console.log(initialModalValues)\r\n        setIsModalVisible(false)\r\n    }\r\n\r\n    const deleteField = (fieldId: number) => {\r\n        console.log('deleteField', fieldId)\r\n        console.log(props)\r\n        \r\n        // @ts-ignore\r\n        const fields = initialFieldValues.fields.filter( field => field.id !== fieldId ) \r\n        console.log(fields)\r\n        setInitialValues2( {...props.initialValues, fields: fields} )\r\n        setInitialFieldValues( {...initialFieldValues, fields: fields} )\r\n        props.setValues({\r\n            ...props.values,\r\n            fields: fields\r\n        })\r\n        props.handleSubmit()\r\n    }\r\n\r\n    const handleSubmit = (modalFieldFormValues:any, actions: any) => {\r\n        console.log('handleSubmit', modalFieldFormValues)\r\n        if (!modalFieldFormValues.isNew) {\r\n            let isUpdate = false\r\n            // @ts-ignore\r\n            const newFields = initialFieldValues.fields.map( (item) => {\r\n                if (modalFieldFormValues.id === item.id) {\r\n                    if (item.name !== modalFieldFormValues.newFieldName || \r\n                        item.type !== modalFieldFormValues.newFieldType ||\r\n                        item.isNulleble !== modalFieldFormValues.isNulleble ||\r\n                        item.isPrimary !== modalFieldFormValues.isPrimary ||\r\n                        item.fieldParam !== modalFieldFormValues.fieldParam\r\n                        ) {\r\n                        isUpdate = true\r\n                        return {\r\n                            description: \"\",\r\n                            id: modalFieldFormValues.id,\r\n                            name: modalFieldFormValues.newFieldName,\r\n                            isPrimary: modalFieldFormValues.isPrimary,\r\n                            type: modalFieldFormValues.newFieldType,\r\n                            isNulleble: modalFieldFormValues.isNulleble,\r\n                            fieldParam: modalFieldFormValues.fieldParam\r\n                        }\r\n                    } else {\r\n                        return item\r\n                    }\r\n                }\r\n                return item\r\n            } )\r\n\r\n            if (isUpdate) {\r\n                setInitialValues2( {...props.initialValues, fields: newFields} )\r\n                setInitialFieldValues( {...initialFieldValues, fields: newFields} )\r\n                console.log('NEED DML!!!!', props)\r\n                props.setValues({\r\n                    ...props.values,\r\n                    fields: newFields\r\n                })\r\n                props.handleSubmit()\r\n            }\r\n        } else {\r\n            console.log('NEW FIELD')\r\n            // @ts-ignore\r\n            let newFields = initialFieldValues.fields\r\n            newFields.push({               \r\n                // @ts-ignore\r\n                id: props.initialValues.fields.length+1,\r\n                name: modalFieldFormValues.newFieldName,\r\n                isPrimary: modalFieldFormValues.isPrimary,\r\n                type: modalFieldFormValues.newFieldType,\r\n                isNulleble: modalFieldFormValues.isNulleble,\r\n                fieldParam: modalFieldFormValues.fieldParam,\r\n                description: \"\",\r\n            })\r\n            setInitialValues2( {...props.initialValues, fields: newFields} )\r\n\r\n            console.log('NEED DML!!!!', props)\r\n            props.setValues({\r\n                ...props.values,\r\n                fields: newFields\r\n            })\r\n            props.handleSubmit()\r\n        }\r\n        actions.resetForm()\r\n        setInitialModalValues(modalFieldFormValues)\r\n    }\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const createController = () => {\r\n\r\n        // console.log('createController: ', props)\r\n        let newController = {\r\n            name: props.initialValues.name+'Controller',\r\n            models: JSON.stringify([props.initialValues.id]) ,\r\n            backend_id: props.initialValues.backend_id,\r\n            isResource: true\r\n        }\r\n        // console.log('newController', newController)\r\n        props.initialValues.changePanel('', ['3'])\r\n        dispatch(createControllerThunk(newController))\r\n    }\r\n\r\n    return(\r\n        <>\r\n        <Form\r\n            className=\"form-container mt-2\"\r\n            onSubmit={props.handleSubmit}\r\n        >\r\n            <Field\r\n                component={AntInput}\r\n                name=\"name\"\r\n                type=\"text\"\r\n                label=\"Name\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n                onChange={onChange}\r\n            />\r\n            <Field\r\n                component={AntInput}\r\n                name=\"folder\"\r\n                type=\"text\"\r\n                label=\"Folder\"\r\n                submitCount={props.submitCount}\r\n                onChange={onChange}\r\n            />\r\n\r\n            <Field\r\n                component={AntCheckbox}\r\n                name=\"soft_delete\"\r\n                type=\"checkbox\"\r\n                label=\"Soft delete\"\r\n                onChange={onChange}\r\n                submitCount={props.submitCount}\r\n            />\r\n\r\n            <Field\r\n                component={AntCheckbox}\r\n                name=\"db\"\r\n                type=\"checkbox\"\r\n                label=\"Use DB\"\r\n                onChange={onChange}\r\n                submitCount={props.submitCount}\r\n            />\r\n\r\n            {isDataChanged ?\r\n                <div className=\"submit-container\">\r\n                    <button className=\"ant-btn ant-btn-primary\" type=\"submit\">\r\n                        Save\r\n                    </button>\r\n                </div>\r\n            : null}\r\n\r\n            <div className=\"w-100 d-flex flex-row mt-2 mb-2\">\r\n                <h5>Field List:</h5>\r\n                {/* <Button type=\"primary\" className=\"mr-1 ml-auto\" onClick={showCode} >Code</Button> */}\r\n                <Button className=\"mr-4 ml-auto\" type=\"primary\" onClick={()=>{openModalToAddField({isNew: true})}}>\r\n                    Add Field\r\n                </Button>\r\n            </div>\r\n            \r\n            <FieldList \r\n                fields={\r\n                // @ts-ignore\r\n                initialValues2.fields\r\n                }\r\n                openModalToAddField={openModalToAddField}\r\n                deleteField={deleteField}\r\n                targetName='user'\r\n                targetData={[]}\r\n            />\r\n\r\n            <div className=\"w-100 d-flex flex-row mt-5 mb-2\">\r\n                <h5>Methods:</h5><Button className=\"mr-4 ml-auto\" type=\"primary\">Add method</Button>\r\n            </div>\r\n\r\n            <div className=\"w-100 d-flex flex-row mt-5 mb-2\">\r\n                \r\n                <h5 className=\"mr-auto ml-auto\">Create : {\r\n                    // @ts-ignore\r\n                    props.initialValues.name\r\n                }Controller\r\n                <Button onClick={createController} className=\"ml-4\" type=\"primary\">Create</Button>\r\n                </h5>\r\n            </div>\r\n        </Form>\r\n\r\n        <Modal title=\"New Field Form\" visible={isModalVisible} onOk={handleOk} onCancel={handleCancel}>\r\n            <Formik\r\n                initialValues={initialModalValues}\r\n                onSubmit={handleSubmit}\r\n                enableReinitialize={true}\r\n            >\r\n                {FieldForm}\r\n            </Formik>\r\n        </Modal>\r\n\r\n        </>\r\n    )\r\n}","import {connect} from 'react-redux'\r\nimport Models from './Models'\r\nimport { AppStateType } from '../../../../../../redux/store'\r\nimport { getModelsList, updateModel, createModel } from '../../../../../../redux/projectReducer'\r\nimport { ModelsType } from '../../../../../../api/projectAPI'\r\nimport {actions} from './../../../../../../redux/codeReducer'\r\n\r\ntype OwnModelsPropsType = {\r\n    backendId: number,\r\n    changePanel: (closeKey: string, openKey: Array<string>) => void,\r\n}\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    getModelsList: (backendId: number) => void\r\n    updateModel: (values: ModelsType, modelId: number) => void,\r\n    createModel: (values: ModelsType) => void\r\n    setCodeTarget: (codeTargetName: string, codeData: any) => void\r\n}\r\n\r\nexport type ModelsPropsType = MapPropsType & MapDispatchPropsType & OwnModelsPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        modelsList: state.projects.modelsList\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnModelsPropsType, AppStateType>(mapStateToProps, \r\n    {getModelsList, updateModel, createModel, setCodeTarget: actions.setCodeTarget}) \r\n    (Models)\r\n    \r\n\r\n","import { Form, Field, FormikProps } from 'formik'\r\nimport React, { ReactNode, useState, useEffect } from 'react'\r\nimport { AntCheckbox, AntInput, AntSelect } from '../../../../../../utils/Formik/CreateAntField'\r\nimport { validateRequired } from '../../../../../../utils/Formik/ValidateFields'\r\nimport {SelectOptionType} from '../../../../../../Types/types'\r\n\r\nconst ControllerForm: ((props: FormikProps<{}>) => ReactNode) = (props) => {\r\n    return (\r\n        <Form\r\n            className=\"form-container\"\r\n            onSubmit={props.handleSubmit}\r\n        >\r\n            <Field\r\n                component={AntInput}\r\n                name=\"name\"\r\n                type=\"text\"\r\n                label=\"Controller name\"\r\n                validate={validateRequired}\r\n                hasFeedback\r\n            />\r\n            <Field\r\n                component={AntInput}\r\n                name=\"folder\"\r\n                type=\"text\"\r\n                label=\"Model folder\"\r\n            />\r\n\r\n            {/* <Field\r\n                component={AntSelect}\r\n                name=\"models\"\r\n                type=\"select\"\r\n                label=\"Including Models\"\r\n                mode=\"multiple\"\r\n                selectOptions={modelsListOptions}\r\n                // onSelect = {onSelect}\r\n            /> */}\r\n\r\n            <div className=\"submit-container\">\r\n                <button className=\"ant-btn ant-btn-primary\" type=\"submit\">\r\n                    Save\r\n                </button>\r\n            </div>\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default ControllerForm\r\n\r\nconst modelsListOptions = [\r\n    {\r\n        name: 'Old',\r\n        value: 1\r\n    },\r\n    {\r\n        name: 'New',\r\n        value: 2\r\n    },\r\n    {\r\n        name: 'Load From SRC',\r\n        value: 3\r\n    },\r\n]","import React from 'react'\r\nimport { ControllerMethodsType } from '../../../../../../../api/ControllerMethodsAPI'\r\nimport { ControllersType } from '../../../../../../../api/projectAPI'\r\nimport { tab } from '../../../../../Code/Model/ModelCode'\r\nimport { ResponreItemsType, ResponseType } from './ControllerMethodsForm'\r\n\r\ntype ControllerMethodsCodePropsType = {\r\n    methodData: ControllerMethodsType | null,\r\n    controllerData: ControllersType\r\n}\r\n\r\nconst ControllerMethodsCode: React.FC<ControllerMethodsCodePropsType> = (props) => {\r\n\r\n    let request: Array<any> = []\r\n    if (props.methodData?.request) {\r\n        // console.log(JSON.parse(props.methodData?.request))\r\n        request = JSON.parse(props.methodData?.request)\r\n    }\r\n\r\n    console.log('ControllerMethodsCode props:',props)\r\n\r\n    return (\r\n        <div>\r\n            {/* <h5>ControllerMethodsCode:</h5> */}\r\n            <code>{tab(1, '/**')}</code><br />\r\n            <code>{tab(1, '* Descriptions')}</code><br />\r\n            {request.map(item => {\r\n                return (\r\n                    <div key={item.name}>\r\n                        <code key={item.name}>{tab(1, '* @param  \\\\Illuminate\\\\Http\\\\' + item.type + '  $' + item.name)}</code><br />\r\n                    </div>\r\n                )\r\n            })}\r\n            <code>{tab(1, '* @return \\\\Illuminate\\\\Http\\\\Response')}</code><br />\r\n            <code>{tab(1, '*/')}</code><br />\r\n\r\n            <code>{tab(1, 'public function ' + props.methodData?.name + '(')}</code>\r\n\r\n            {request.length > 0 ?\r\n                request.map( (item, index: number) => {\r\n                    // return (\r\n                    //     <code key={item.name}>{tab(0, '' + item.type + '  $' + item.name)}</code>\r\n                    // )\r\n                    if (index > 0 ) {\r\n                        return (\r\n                            <code key={item.name}>{tab(0, ', ' + item.type + '  $' + item.name)}</code>\r\n                        )\r\n                    } else {\r\n                        return (\r\n                            <code key={item.name}>{tab(0, '' + item.type + '  $' + item.name)}</code>\r\n                        )\r\n                    }\r\n                })\r\n                :\r\n                null\r\n            }\r\n\r\n            <code>{tab(0, ')')}</code><br />\r\n            <code>{tab(1, '{')}</code><br />\r\n\r\n            \r\n            {/* ПОЛУЧАЕМ BODY */}\r\n            {\r\n                props.methodData !== null && props.methodData.body_actions?\r\n                <><br />\r\n                <pre className=\"ml-5\">{props.methodData?.body_actions}</pre>\r\n                </>\r\n                : <><code>{tab(2, '//...')}</code><br /></>\r\n            }\r\n\r\n\r\n            {/* <code>{tab(2, 'return response()->json([')}</code><br /> */}\r\n\r\n            {/* Получаем RESPONSE */}\r\n            {/* <code>{tab(3, getResponse( props.methodData !== null ? JSON.parse(props.methodData.response) : null))}</code><br />  */}\r\n\r\n            {\r\n                 props.methodData !== null && props.methodData.response?\r\n                getResponse(2, props.methodData !== null ? JSON.parse(props.methodData.response) : null )\r\n                : <><code>{tab(2, '//...')}</code><br /></>\r\n            }\r\n\r\n\r\n            {/* <code>{tab(2, '], 200);')}</code><br /> */}\r\n\r\n            {/* { props.methodData !== null ? getResponse( JSON.parse(props.methodData.response)) : null} */}\r\n\r\n            <code>{tab(1, '}')}</code><br />\r\n\r\n            {/* <li>Какой код возвращает метод,</li> */}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ControllerMethodsCode\r\n\r\nconst getResponse = (tab: number, responseData: ResponseType) => {\r\n    switch (responseData.type) {\r\n        case 'method':\r\n            return getMetodResponse(tab, responseData)\r\n    \r\n        case 'Response':\r\n            const responseArray: Array<JSX.Element> = getResponseResponse(tab, responseData)\r\n            return responseArray\r\n        default:\r\n            break;\r\n    }\r\n}\r\n\r\nconst getMetodResponse = (tabIndex: number, response: ResponseType) => {\r\n    const methodName = response.methodName\r\n    console.log('methodName: ', methodName)\r\n    // return <>{'return self::'+methodName+'();'}</>\r\n    return [<><code>{tab(tabIndex, 'return self::'+methodName+'();')}</code><br/></>]\r\n}\r\n\r\nconst getResponseResponse = (tabIndex: number, response: ResponseType) => {\r\n    console.log('response: ', response)\r\n    let responseBlock: Array<JSX.Element> = []\r\n    responseBlock.push(<><code>{tab(tabIndex, 'return response()->json([')}</code><br /></>)\r\n\r\n    if (response.responseItems) {\r\n        console.log(response.responseItems)\r\n        response.responseItems.map( (item: ResponreItemsType, index) => {          \r\n            // if (index > 0) {\r\n            //     responseBlock.push(<><code>{tab(tabIndex, '\"'+item.key+'\"=> $'+item.variable)}</code><br/></>)\r\n            // } else {\r\n                responseBlock.push(<><code>{tab(tabIndex+1, '\"'+item.key+'\"=> $'+item.variable+', ')}</code><br/></>)\r\n            // }\r\n        })\r\n    } else {\r\n        console.log(response.responseItems)\r\n    }\r\n\r\n    responseBlock.push(<><code>{tab(tabIndex, '], 200);')}</code><br /></>)\r\n    console.log('responseBlock: ', responseBlock)\r\n    return responseBlock\r\n}\r\n\r\nconst getBody = (tabIndex: number, body: string) => {\r\n    return <><pre>{ tab( tabIndex, body) }</pre><br /></>\r\n}","import { Input, TreeSelect } from 'antd'\r\nimport { TreeNode } from 'rc-tree-select'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { RequestType } from './ControllerMethodsForm'\r\n\r\ntype RequestItemPropsType = {\r\n    item: RequestType,\r\n    initialValues: any,\r\n    onRowChange: (id: number, type: string, name: string)=>void\r\n}\r\n\r\nconst RequestItem: React.FC<RequestItemPropsType> = (props) => {\r\n    const [value, setValue] = useState<RequestType>(props.item)\r\n\r\n    useEffect( () => {\r\n        setValue(props.item)\r\n    },[props.initialValues])\r\n\r\n    const onRequestTypeChange = (typeValue: string, labelList: React.ReactNode[], extra: any) => {\r\n        setValue({...value, type: typeValue})\r\n        if (typeValue) {\r\n            props.onRowChange(props.item.id, typeValue, props.item.name)\r\n        } else {\r\n            props.onRowChange(props.item.id, '', props.item.name)\r\n        }\r\n        \r\n    }\r\n\r\n    const onRequestNameChange = (event: any) => {\r\n        setValue({...value, name: event.target.value})\r\n        props.onRowChange(props.item.id, props.item.type, event.target.value)\r\n    }\r\n\r\n    return (\r\n        <div key={props.item.id} className=\"row mt-1\">\r\n            <div className=\"ant-col ant-form-item-label mt-2\">\r\n                {props.item.label}\r\n            </div>\r\n\r\n            <div className=\"col-4\">\r\n                <TreeSelect\r\n                    className=\" ml-2 TreeSelect_Request_Type\"\r\n                    style={{ width: '100%' }}\r\n                    showSearch\r\n                    value={value.type}\r\n                    dropdownStyle={{ maxHeight: 400, overflow: 'auto' }}\r\n                    placeholder=\"Reqest type\"\r\n                    allowClear\r\n                    showCheckedStrategy={'SHOW_PARENT'}\r\n                    onChange={onRequestTypeChange}\r\n                >\r\n                    <TreeNode selectable={false} per_id={props.item.id} value=\"model\" title=\"Model\">\r\n                        {\r\n                            // @ts-ignore\r\n                            props.initialValues.modelsList.map((model: ModelsType) => {\r\n                                return (\r\n                                    <TreeNode key={model.name} per_id={props.item.id} value={model.name} title={model.name}></TreeNode>\r\n                                )\r\n                            })\r\n\r\n                        }\r\n                    </TreeNode>\r\n                    <TreeNode per_id={props.item.id} value=\"Request\" title=\"Request\"></TreeNode>\r\n                    <TreeNode selectable={false} per_id={props.item.id} value=\"list\" title=\"List\"></TreeNode>\r\n                </TreeSelect>\r\n            </div>\r\n            <div className=\"col-4\">\r\n                <Input className=\"w-100 ml-2\" value={value.name} name={props.item.id.toString()} onChange={onRequestNameChange} placeholder=\"Param name\" />\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RequestItem","import { Button, Input, TreeSelect } from 'antd'\r\nimport { TreeNode } from 'rc-tree-select'\r\nimport React, {useState, useEffect} from 'react'\r\nimport { ControllerMethodsType } from '../../../../../../../api/ControllerMethodsAPI'\r\nimport { ResponreItemsType } from './ControllerMethodsForm'\r\n\r\ntype ValueType = {\r\n    type: 'Response' | 'method' | '',\r\n    methodId?: number,\r\n    methodName?: string,\r\n    responseItems?: Array<ResponreItemsType>\r\n}\r\n\r\ntype ResponseItemPropsType = {\r\n    responseInit: ValueType\r\n    initialValues: any,\r\n    setResponseValues: (responseValues: ValueType)=>void\r\n    // methodList !!!!!\r\n}\r\n\r\nconst ResponseItem: React.FC<ResponseItemPropsType> = (props) => {\r\n    const [value, setValue] = useState<ValueType>(props.responseInit)\r\n    // console.log(props)\r\n\r\n    useEffect( () => {\r\n        setValue(props.responseInit)\r\n    },[props.responseInit])\r\n\r\n    const onResponseTypeChange = (typeValue: 'Response'|'method'|'', labelList: React.ReactNode[], extra: any) => {\r\n        let newResponse: Array<ResponreItemsType> = []\r\n        let methodId: number = 0\r\n        let methodName: string = ''\r\n        let type: 'Response'|'method'|'' = ''\r\n\r\n        if(typeValue === 'Response') {\r\n            type = typeValue\r\n            // if(value.responseItems && value.responseItems.length === 0) {\r\n                newResponse.push({\r\n                    key: '',\r\n                    variable: ''\r\n                })\r\n            // }\r\n        } else {\r\n            // console.log('GO TO METHOD!!!',typeValue)\r\n            // console.log(props)\r\n            methodId = props.initialValues.controllerMethodsList.filter( (item: any) => item.name === typeValue )[0].id\r\n            methodName = props.initialValues.controllerMethodsList.filter( (item: any) => item.name === typeValue )[0].name\r\n            // console.log(methodId)\r\n\r\n            type = 'method'\r\n        }\r\n\r\n        setValue({...value, type: type, responseItems: newResponse, methodId: methodId, methodName: methodName})\r\n        props.setResponseValues({...value, type: type, responseItems: newResponse, methodId: methodId, methodName: methodName})\r\n\r\n        // console.log(typeValue)\r\n        // console.log(labelList)\r\n        // console.log(extra.triggerValue)\r\n    }\r\n\r\n    const onRowChange = (rowValue: string, elementNumber: number, param: 'key'|'variable') => {\r\n        // console.log(rowValue)\r\n        // console.log(elementNumber)\r\n        // console.log(param)\r\n\r\n        let responseItems: Array<ResponreItemsType> = value.responseItems ? value.responseItems : []\r\n        if (responseItems[elementNumber]) {\r\n            responseItems[elementNumber][param] = rowValue\r\n        }\r\n        setValue({\r\n            ...value,\r\n            responseItems: responseItems\r\n        })\r\n        props.setResponseValues({\r\n            ...value,\r\n            responseItems: responseItems\r\n        })\r\n    }\r\n\r\n    const addParam = () => {\r\n        let responseItems: Array<ResponreItemsType> = value.responseItems ? [... value.responseItems] : []\r\n        responseItems.push({key:'', variable:''})\r\n        setValue({...value, responseItems: responseItems })\r\n    }\r\n\r\n    const dellParam = () => {\r\n        let responseItems: Array<ResponreItemsType> = value.responseItems ? [... value.responseItems] : []\r\n        responseItems.pop()\r\n        setValue({...value, responseItems: responseItems })\r\n    }\r\n\r\n    console.log('ResponseItem value: ', value)\r\n    console.log('ResponseItem props: ', props)\r\n\r\n    return(\r\n        <>\r\n        <div className=\"row mt-1 mb-3\">\r\n            <div className=\"ant-col ant-form-item-label mt-2\">\r\n                Response:\r\n            </div>\r\n            <div className=\"col-4\">\r\n                <TreeSelect\r\n                    className=\" ml-2 TreeSelect_Request_Type\"\r\n                    style={{ width: '100%' }}\r\n                    showSearch\r\n                    value={value.type === 'method' ?  \r\n                    props.initialValues.controllerMethodsList.filter((controllerMethod: ControllerMethodsType)=>controllerMethod.id === value.methodId)[0].name\r\n                    : value.type\r\n                    }\r\n                    dropdownStyle={{ maxHeight: 400, overflow: 'auto' }}\r\n                    placeholder=\"Reqest type\"\r\n                    allowClear\r\n                    showCheckedStrategy={'SHOW_PARENT'}\r\n                    onChange={onResponseTypeChange}\r\n\r\n                    // treeCheckable={true}\r\n                >\r\n                    <TreeNode\r\n                        // selectable={false} \r\n                        // per_id={props.item.id} \r\n                        value=\"Response\" \r\n                        title=\"Response\"\r\n                    ></TreeNode>\r\n                    <TreeNode\r\n                        selectable={false} \r\n                        // per_id={props.item.id} \r\n                        value=\"method\" \r\n                        title=\"Method\"\r\n                    >\r\n                        {\r\n                            props.initialValues.controllerMethodsList !== undefined ?\r\n                            // @ts-ignore\r\n                            props.initialValues.controllerMethodsList.filter((controllerMethod: ControllerMethodsType)=>controllerMethod.name !== props.initialValues.name)\r\n                                .map(( controllerMethod: ControllerMethodsType ) => {\r\n                                return (\r\n                                    <TreeNode \r\n                                        key={controllerMethod.name}\r\n                                        // per_id={props.item.id} \r\n                                        value={controllerMethod.name} \r\n                                        title={controllerMethod.name}\r\n                                    ></TreeNode>\r\n                                )\r\n                            })\r\n                            : null\r\n                        }\r\n                    </TreeNode>\r\n                </TreeSelect>\r\n            </div>\r\n            <div className=\"col-4\">\r\n                {value.type === 'Response' ? \r\n                    <>\r\n                        <Button className=\"ml-2\" type=\"primary\" onClick={addParam}>Add param</Button>\r\n                        <Button className=\"ml-2\" type=\"primary\" onClick={dellParam}>Del param</Button>\r\n                    </>\r\n                :null}\r\n            </div>\r\n        </div>\r\n        {value.type === 'Response' ?\r\n            <div className=\"row mt-1 mb-3\">\r\n                <ResponseRows \r\n                    responseRows={value.responseItems ? value.responseItems : []}\r\n                    onRowChange={onRowChange}\r\n                />\r\n            </div>\r\n        :\r\n        null}\r\n        {value.type === 'method' ?\r\n            <div className=\"row mt-1 mb-3\">\r\n                methodId: {value.methodId}\r\n            </div>\r\n        :\r\n        null}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ResponseItem\r\n\r\ntype ResponseRowsPropsType = {\r\n    responseRows: Array<ResponreItemsType>\r\n    onRowChange: (value: string, elementNumber: number, param: 'key'|'variable')=>void\r\n}\r\n\r\nconst ResponseRows: React.FC<ResponseRowsPropsType> = (props) => {\r\n    // console.log(props)\r\n\r\n    const onNameChange = (event: any) => {\r\n        props.onRowChange(event.target.value, Number(event.target.name), 'key')\r\n    }\r\n\r\n    const onVariableChange = (event: any) => {\r\n        props.onRowChange(event.target.value, Number(event.target.name), 'variable')\r\n    }\r\n\r\n    return(\r\n        <>\r\n            {props.responseRows.map( (item, index: number)=> {\r\n                return(\r\n                // <>\r\n                <div key={index.toString()} className=\"row w-100\" >\r\n                        <div className=\"ant-col ant-form-item-label pr-2 mt-3\">\r\n                            param {index+1}:\r\n                        </div>\r\n                    <div className=\"col-4 mt-2\">\r\n                        <Input \r\n                            className=\"w-100 ml-2\" \r\n                            value={item.key} \r\n                            name={index.toString()}  \r\n                            onChange={onNameChange} \r\n                            placeholder=\"Param name\" \r\n                        />\r\n                    </div>\r\n                    <div className=\"col-4 mt-2\">\r\n                        <Input \r\n                            className=\"w-100 ml-2\" \r\n                            value={item.variable} \r\n                            name={index.toString()} \r\n                            onChange={onVariableChange} \r\n                            placeholder=\"Param variable\" \r\n                        />\r\n                    </div>\r\n                </div>\r\n                // </>\r\n                )\r\n            })}\r\n        </>\r\n    )\r\n}","import { Form, Field, FormikProps } from 'formik'\r\nimport React, { ReactNode, useState, useEffect } from 'react'\r\nimport { AntCheckbox, AntInput, AntSelect } from '../../../../../../../utils/Formik/CreateAntField'\r\nimport { validateRequired } from '../../../../../../../utils/Formik/ValidateFields'\r\nimport {SelectOptionType} from '../../../../../../../Types/types'\r\nimport { Button, Checkbox, Input, TreeSelect } from 'antd'\r\nimport { ModelsType } from '../../../../../../../api/projectAPI'\r\nimport RequestItem from './RequestItem'\r\nimport ResponseItem from './ResponseItem'\r\nimport TextArea from 'antd/lib/input/TextArea'\r\n\r\nexport type RequestType = {\r\n    label: string,\r\n    type: string,\r\n    name: string,\r\n    id: number\r\n}\r\n\r\nexport type ResponreItemsType = {\r\n    key: string,\r\n    variable: string,\r\n}\r\n\r\nexport type ResponseType = {\r\n    type: 'Response' | 'method' | '',\r\n    methodId?: number,\r\n    methodName?: string,\r\n    responseItems?: Array<ResponreItemsType>\r\n}\r\n\r\nconst ControllerMethodsForm: ((props: FormikProps<{}>) => ReactNode) = (props) => {\r\n    // @ts-ignore\r\n    const [request, setRequest] = useState<Array<RequestType>>(props.initialValues.request !== undefined ? props.initialValues.request : [])\r\n    // @ts-ignore\r\n    const [isRequest, setIsRequest] = useState(props.initialValues.request && props.initialValues.request.length !== 0 ? true : false)\r\n\r\n    // @ts-ignore\r\n    const [response, setResponse] = useState<ResponseType | undefined>(props.initialValues.response)\r\n    // @ts-ignore\r\n    const [isResponse, setIsResponse] = useState(props.initialValues.response? true : false)\r\n    console.log('isResponse: ', isResponse)\r\n\r\n    // @ts-ignore\r\n    const [body_actions, setBody_actions] = useState<string>(props.initialValues.body_actions)\r\n    // @ts-ignore\r\n    const [isBody_actions, setIsBody_actions] = useState(props.initialValues.body_actions ? true : false)\r\n    \r\n    const [value, setValue] = useState(undefined)\r\n\r\n    useEffect( () => {\r\n        // @ts-ignore\r\n        // console.log('!!!!!!!!!!!!useEffect ControllerMethodsForm', props.initialValues.response.responseItems)\r\n        // @ts-ignore\r\n        setRequest(props.initialValues.request !== undefined ? props.initialValues.request : [])\r\n        // @ts-ignore\r\n        setIsRequest(props.initialValues.request && props.initialValues.request.length !== 0 ? true : false)\r\n        // @ts-ignore\r\n        setResponse(props.initialValues.response ? props.initialValues.response : undefined)\r\n        // @ts-ignore\r\n        setBody_actions(props.initialValues.body_actions ? props.initialValues.body_actions : '')\r\n        // @ts-ignore\r\n        setIsBody_actions(props.initialValues.body_actions ? true : false)\r\n    },[props.initialValues])\r\n\r\n    const onRequest = (val: any) => {\r\n        console.log(val.target.checked)\r\n        console.log(request)\r\n\r\n        if (val.target.checked) {\r\n            if (request!==undefined && request.length === 0) {\r\n\r\n            }\r\n        }\r\n\r\n        if (request!==undefined && request.length === 0) {\r\n            console.log('onAddRequest')\r\n            onAddRequest()\r\n        } else {\r\n            console.log('setRequest')\r\n            setRequest([])\r\n        }\r\n        setIsRequest(!isRequest)\r\n    }\r\n\r\n    const onAddRequest = () => {\r\n        console.log('onAddRequest:', request)\r\n        let newRequest = [...request]\r\n\r\n        newRequest.push({\r\n            label: 'param '+ (request.length+1),\r\n            type: '',\r\n            name: '',\r\n            id: request.length\r\n        })\r\n        setRequest(newRequest)\r\n        props.setValues({...props.values, request: newRequest})\r\n    }\r\n\r\n    const onDeleteRequest = () => {\r\n        let newRequest = [...request]\r\n        newRequest.pop()\r\n        setRequest(newRequest)\r\n        if (newRequest.length === 0) {\r\n            setIsRequest(false)\r\n        }\r\n        props.setValues({...props.values, request: newRequest})\r\n    }\r\n\r\n    const onResponse = () => {\r\n        console.log('onResponse', isResponse)\r\n        setIsResponse(!isResponse)\r\n        console.log('response: ', response)\r\n        if (!response) {\r\n            setResponse({\r\n                type: ''\r\n            })\r\n        } else {\r\n            setResponse(undefined)\r\n        }\r\n    }\r\n\r\n    const onBodyActions = () => {\r\n        setIsBody_actions(!isBody_actions)\r\n    }\r\n\r\n    const onAddResponse = () => {\r\n        \r\n    }\r\n\r\n    const onRowChange = (id: number, type: string, name: string) => {\r\n        let requestCopy = [...request]\r\n\r\n        for (let index = 0; index < request.length; index++) {\r\n            const element = request[index];\r\n            if (element.id === id) {\r\n                requestCopy[index] = {...element, name: name, type: type}\r\n            }\r\n        }\r\n        setRequest(requestCopy)\r\n        props.setValues({...props.values, request: requestCopy})\r\n    }\r\n\r\n    const setResponseValues = (responseValues: ResponseType) => {\r\n        // console.log('setResponseValues:', responseValues)\r\n        props.setValues({...props.values, response: responseValues})\r\n    }\r\n\r\n    console.log('props.initialValues: ',props.initialValues)\r\n    // console.log(response)\r\n\r\n    // if (response !== undefined && response.type !== undefined) {\r\n    //     console.log('show response')\r\n    // }\r\n\r\n    const onKeyDown = (v: any) => {\r\n        if (v.keyCode === 9) {\r\n            v.preventDefault()\r\n\r\n            const before = body_actions.substr(0, v.target.selectionEnd)\r\n            const after = body_actions.substr(v.target.selectionEnd)\r\n\r\n            setBody_actions(before+'    '+after)\r\n            props.setValues({...props.values, body_actions: v.target.value})\r\n\r\n            const newStart = v.target.selectionStart+4\r\n            const newEnd = v.target.selectionEnd+4\r\n\r\n            setTimeout( ()=> {\r\n                v.target.selectionStart = newStart\r\n                v.target.selectionEnd = newEnd\r\n            }, 0)\r\n            \r\n        }\r\n    }\r\n\r\n    const onBodyChange = (v: any) => {\r\n        setBody_actions(v.target.value)\r\n        props.setValues({...props.values, body_actions: v.target.value})\r\n    }\r\n\r\n    console.log('ResponseItem:', response)\r\n\r\n    return (\r\n        <Form\r\n            className=\"form-container\"\r\n            onSubmit={props.handleSubmit}\r\n        >\r\n            <Field\r\n                component={AntInput}\r\n                name=\"name\"\r\n                type=\"text\"\r\n                label=\"Method name\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n            <Field\r\n                component={AntSelect}\r\n                name=\"rest_type\"\r\n                type=\"select\"\r\n                label=\"REST Type\"\r\n                selectOptions={RestTypeOtions}\r\n                validate={validateRequired}\r\n                hasFeedback\r\n            /> \r\n\r\n            <div className=\"ant-row ant-form-item \">\r\n                <div className=\"ant-col ant-form-item-label pr-2\">Request:</div>\r\n                <div className=\"ant-col ant-form-item-control\">\r\n                    <Checkbox onChange={onRequest} checked={isRequest}></Checkbox>\r\n                </div>\r\n            </div>\r\n\r\n            {request && request.length>0 ? \r\n                request.map( (item: RequestType) => {\r\n                    return <RequestItem key={item.id} item={item} initialValues={props.initialValues} onRowChange={onRowChange}/>\r\n                })\r\n            :\r\n                null\r\n            }\r\n            {request && request.length>=1 ? \r\n            <div className=\"my-2\">\r\n                <Button className=\"mr-3\" type=\"primary\" size=\"small\" onClick={onAddRequest}>Add</Button> \r\n                <Button className=\"mr-3\" type=\"primary\" size=\"small\" onClick={onDeleteRequest}>del</Button>\r\n            </div>\r\n            : null}\r\n\r\n            <div className=\"ant-row ant-form-item\">\r\n                <div className=\"ant-col ant-form-item-label pr-2\">body_actions:</div>\r\n                <div className=\"ant-col ant-form-item-control\">\r\n                    <Checkbox onChange={onBodyActions} checked={isBody_actions}></Checkbox>\r\n                </div>\r\n            </div>\r\n\r\n            {isBody_actions ? \r\n                <TextArea \r\n                    onKeyDown={onKeyDown} \r\n                    // onBlur={onBlur} \r\n                    rows={4} \r\n                    value={body_actions}\r\n                    onChange={onBodyChange}\r\n                />\r\n            : null }\r\n\r\n\r\n\r\n\r\n            <div className=\"ant-row ant-form-item \">\r\n                <div className=\"ant-col ant-form-item-label pr-2\">Response:</div>\r\n                <div className=\"ant-col ant-form-item-control\">\r\n                    <Checkbox onChange={onResponse} checked={isResponse}></Checkbox>\r\n                </div>\r\n            </div>\r\n\r\n            {response !== undefined && response.type !== undefined ? \r\n                <ResponseItem \r\n                    responseInit={response} \r\n                    initialValues={props.initialValues}\r\n                    setResponseValues={setResponseValues}\r\n                />\r\n            :\r\n            null\r\n            }\r\n\r\n\r\n\r\n\r\n\r\n            <Field\r\n                component={AntCheckbox}\r\n                name=\"isMiddleware\"\r\n                type=\"checkbox\"\r\n                label=\"isMiddleware\"\r\n                submitCount={props.submitCount}\r\n            />\r\n\r\n            <div className=\"submit-container\">\r\n                <button className=\"ant-btn ant-btn-primary\" type=\"submit\">\r\n                    Save\r\n                </button>\r\n            </div>\r\n\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default ControllerMethodsForm\r\n\r\nconst RestTypeOtions = [\r\n    {\r\n        name: 'GET',\r\n        value: 'get'\r\n    },\r\n    {\r\n        name: 'POST',\r\n        value: 'post'\r\n    },\r\n    {\r\n        name: 'PUT',\r\n        value: 'put'\r\n    },\r\n    {\r\n        name: 'DELETE',\r\n        value: 'delete'\r\n    },\r\n]","import { Button, List, Modal } from 'antd'\r\nimport { Formik } from 'formik'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { ControllerMethodsType, rest_typeType } from '../../../../../../api/ControllerMethodsAPI'\r\nimport { ModelsType } from '../../../../../../api/projectAPI'\r\nimport { ControllerMethodsPropsType } from './ControllerMethodsContainer'\r\nimport ControllerMethodsCode from './ControllerMethodsForm/ControllerMethodsCode'\r\nimport ControllerMethodsForm, { RequestType } from './ControllerMethodsForm/ControllerMethodsForm'\r\n\r\nexport type initialValuesType = {\r\n    modelsList: Array<ModelsType>,\r\n    controllerMethodsList: Array<ControllerMethodsType>,\r\n    body_actions?: string\r\n    name: string,\r\n    rest_type?: rest_typeType,\r\n    request?: Array<RequestType>,\r\n    response?: any,\r\n    id?: number\r\n}\r\n\r\nconst ControllerMethods: React.FC<ControllerMethodsPropsType> = (props) => {\r\n\r\n    let emptyInitialValues: initialValuesType = {\r\n        modelsList: props.modelsList,\r\n        name: '',\r\n        controllerMethodsList: props.controllerMethodsList\r\n    }\r\n\r\n    const [methodData, setMethodData] = useState<ControllerMethodsType | null>(null)\r\n    const [initialValues, setinitialValues] = useState<initialValuesType>(emptyInitialValues)\r\n    const [modalTitle, setModalTitle] = useState<string>('Controller Method form')\r\n\r\n    useEffect(() => {\r\n        if (props.controllerMethodsList.length === 0) {\r\n            props.getControllerMethodsList()\r\n        }\r\n    }, [])\r\n\r\n    // console.log('props.controllerMethodsList', props.controllerMethodsList)\r\n        \r\n    useEffect(() => {\r\n        console.log('useEffect, setinitialValues for: ', props.controllerData.id)\r\n        const newControllerMethodsList = props.controllerMethodsList.filter(item=> item.controller_id === props.controllerData.id)\r\n        console.log('newControllerMethodsList', newControllerMethodsList)\r\n        setinitialValues({\r\n            ...initialValues,\r\n            controllerMethodsList: newControllerMethodsList\r\n        })\r\n        // emptyInitialValues.controllerMethodsList = props.controllerMethodsList\r\n    }, [props.controllerMethodsList])\r\n\r\n    const [isModalVisible, setIsModalVisible] = useState(false)\r\n\r\n    const showMethod = (id: number) => {\r\n        const target = props.controllerMethodsList.filter( (item) => item.id === id)[0]\r\n        console.log('target of method', target)\r\n        setModalTitle('Edit Controller Method '+ target.name)\r\n        setMethodData({\r\n            body_actions: target.body_actions,\r\n            controller_id: target.controller_id,\r\n            id: id,\r\n            isMiddleware: false,\r\n            name: target.name,\r\n            request: target.request,\r\n            response: target.response,\r\n            rest_type: target.rest_type\r\n        })\r\n        setIsModalVisible(true)\r\n        setinitialValues({\r\n            ...initialValues,\r\n            name: target.name,\r\n            request: target.request ? JSON.parse(target.request) : [],\r\n            response: target.response ? JSON.parse(target.response) : undefined,\r\n            body_actions: target.body_actions,\r\n            rest_type: target.rest_type,\r\n            id: target.id\r\n        })\r\n    }\r\n\r\n    const addMethod = () => {\r\n        setinitialValues(emptyInitialValues)\r\n        setModalTitle('Controller Method form')\r\n        setIsModalVisible(true)\r\n    }\r\n\r\n    const onOk = () => {\r\n        console.log('onOk')\r\n        setIsModalVisible(false)\r\n    }\r\n\r\n    const onHandleSubmit = (values: initialValuesType) => {\r\n        console.log('onHandleSubmit values:',values)\r\n        console.log('props: ', props)\r\n\r\n        const controllerMethods: ControllerMethodsType = {\r\n            body_actions: values.body_actions? values.body_actions : '',\r\n            controller_id: props.controllerData.id,\r\n            id: values.id ? values.id : 0,\r\n            isMiddleware: false,\r\n            name: values.name,\r\n            request: JSON.stringify(values.request),\r\n            response: JSON.stringify(values.response),\r\n            rest_type: values.rest_type ? values.rest_type : null\r\n        }\r\n\r\n        console.log(controllerMethods)\r\n\r\n        setMethodData(controllerMethods)\r\n\r\n        if(values.id) {\r\n            console.log('UPDATE: ', controllerMethods)\r\n            props.updateControllerMethodsList(controllerMethods, values.id)\r\n        } else {\r\n            console.log('CREATE: ', controllerMethods)\r\n            props.createControllerMethodsList(controllerMethods)\r\n        }\r\n    }\r\n\r\n    console.log('ControllerMethods props', props)\r\n    console.log('ControllerMethods initialValues: ', initialValues)\r\n\r\n    return (\r\n        <>\r\n            <div className=\"w-100 d-flex flex-row-reverse\">\r\n                <Button type=\"primary\" onClick={addMethod}>Add Method</Button>\r\n            </div>\r\n\r\n            {\r\n            // props.controllerMethodsList.length !== 0 ?\r\n                <>\r\n                    <List\r\n                        className=\"mt-2\"\r\n                        header={<div>Controller Methods List:</div>}\r\n                        // footer={<div>Footer</div>}\r\n                        bordered\r\n                        dataSource={initialValues.controllerMethodsList}\r\n                        renderItem={item => (\r\n                            <List.Item\r\n                                actions={[<a key=\"list-loadmore-edit\" onClick={()=>{showMethod(item.id)}}>edit</a>, <a key=\"list-loadmore-more\">code</a>]}\r\n                            >\r\n                                {/* {item.name} */}\r\n                                <div className=\"row w-100\">\r\n                                    <div className=\"col-6\">{item.name}</div>\r\n                                    <div className=\"col-3\">{item.rest_type}</div>\r\n                                </div>\r\n                            </List.Item>\r\n                        )}\r\n                    />\r\n                </>\r\n                // :\r\n                // null\r\n            }\r\n\r\n            <Modal title={modalTitle} visible={isModalVisible} onOk={onOk} onCancel={() => { setIsModalVisible(false) }} width={1000}>\r\n                <Formik\r\n                    initialValues={initialValues}\r\n                    onSubmit={onHandleSubmit}\r\n                    enableReinitialize={true}\r\n                >\r\n                    {ControllerMethodsForm}\r\n                </Formik>\r\n\r\n                <ControllerMethodsCode methodData={methodData} controllerData={props.controllerData}/>\r\n\r\n            </Modal>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ControllerMethods","import {connect} from 'react-redux'\r\nimport ControllerMethods from './ControllerMethods'\r\nimport { AppStateType } from '../../../../../../redux/store'\r\nimport { getControllersList, createControllerMethodsList, updateControllerMethodsList, getControllerMethodsList } from '../../../../../../redux/projectReducer'\r\nimport { ControllersType } from '../../../../../../api/projectAPI'\r\n// import { ModelsType } from '../../../.././../api/projectAPI'\r\n\r\ntype OwnControllerMethodsPropsType = {\r\n    controllerData: ControllersType\r\n}\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    getControllerMethodsList: ()=>void,\r\n    updateControllerMethodsList: (values: any, controllerMethodId: number)=>void,\r\n    createControllerMethodsList: (values: any)=> void,\r\n    // getControllersList: (backendId: number) => void\r\n    // createController: (values: any) => void,\r\n    // getModelsList: (backendId: number) => void,\r\n}\r\n\r\nexport type ControllerMethodsPropsType = MapPropsType & MapDispatchPropsType & OwnControllerMethodsPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        controllersList: state.projects.controllersList,\r\n        modelsList: state.projects.modelsList,\r\n        controllerMethodsList: state.projects.controllerMethodsList\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnControllerMethodsPropsType, AppStateType>(mapStateToProps, \r\n    {getControllerMethodsList, updateControllerMethodsList, createControllerMethodsList}) \r\n    (ControllerMethods)\r\n    \r\n\r\n","import React, { useEffect, useState } from 'react'\r\nimport { ControllerMethodsType } from '../../../../../../../api/ControllerMethodsAPI'\r\nimport { ControllersType } from '../../../../../../../api/projectAPI'\r\nimport { tab } from '../../../../../Code/Model/ModelCode'\r\nimport { FullControllerMethodCodePropsType } from './FullControllerMethodCodeContainer'\r\nimport ControllerMethodsCode from './../ControllerMethodsForm/ControllerMethodsCode'\r\n\r\nconst FullControllerMethodCode:React.FC<FullControllerMethodCodePropsType> = (props) => {\r\n    const [methods, setMethods] = useState<Array<ControllerMethodsType>>()\r\n    useEffect(() => {\r\n        if (props.controllerMethodsList.length === 0) {\r\n            props.getControllerMethodsList()\r\n        }\r\n    }, [])\r\n    useEffect(() => {\r\n        setMethods(props.controllerMethodsList.filter(item=> item.controller_id === props.controllerData.id))\r\n    }, [props.controllerMethodsList])\r\n\r\n    console.log(props)\r\n    console.log(methods)\r\n\r\n    return(\r\n        <div className=\"text-left\">\r\n            <code>{tab(0, '<?php')}</code><br/>\r\n            <br/>\r\n            <code>{tab(0, 'namespace App\\\\Http\\\\Controllers;')}</code><br/>\r\n            <br/>\r\n            <code>{tab(0, 'use App\\\\'+props.controllerData.models[0].name+';')}</code><br/>\r\n            <code>{tab(0, 'use Illuminate\\\\Http\\\\Request;')}</code><br/>\r\n            <br/>\r\n            <code>{tab(0, 'class '+props.controllerData.name+' extends Controller')}</code><br/>\r\n            <code>{tab(0, '{')}</code><br/>\r\n            <code>{tab(1, '//...')}</code><br/>\r\n            {\r\n                methods?.map(method => {\r\n                    return (\r\n                        <ControllerMethodsCode\r\n                            methodData={method}\r\n                            controllerData={props.controllerData}\r\n                        />\r\n                    ) \r\n                })\r\n            }\r\n            <code>{tab(0, '}')}</code><br/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FullControllerMethodCode","import {connect} from 'react-redux'\r\nimport FullControllerMethodCode from './FullControllerMethodCode'\r\nimport { AppStateType } from '../../../../../../../redux/store'\r\nimport { getControllersList, createControllerMethodsList, updateControllerMethodsList, getControllerMethodsList } from '../../../../../../../redux/projectReducer'\r\nimport { ControllersType } from '../../../../../../../api/projectAPI'\r\n// import { ModelsType } from '../../../.././../api/projectAPI'\r\n\r\ntype OwnFullControllerMethodCodePropsType = {\r\n    controllerData: ControllersType\r\n}\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    getControllerMethodsList: ()=>void,\r\n    updateControllerMethodsList: (values: any, controllerMethodId: number)=>void,\r\n    createControllerMethodsList: (values: any)=> void,\r\n    // getControllersList: (backendId: number) => void\r\n    // createController: (values: any) => void,\r\n    // getModelsList: (backendId: number) => void,\r\n}\r\n\r\nexport type FullControllerMethodCodePropsType = MapPropsType & MapDispatchPropsType & OwnFullControllerMethodCodePropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        controllersList: state.projects.controllersList,\r\n        modelsList: state.projects.modelsList,\r\n        controllerMethodsList: state.projects.controllerMethodsList\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnFullControllerMethodCodePropsType, AppStateType>(mapStateToProps, \r\n    {getControllerMethodsList, updateControllerMethodsList, createControllerMethodsList}) \r\n    (FullControllerMethodCode)\r\n    \r\n\r\n","import { Button, Collapse, Empty } from 'antd'\r\nimport Modal from 'antd/lib/modal/Modal'\r\nimport { Field, Form, Formik, FormikProps } from 'formik'\r\nimport React, { ReactNode, useEffect, useState } from 'react'\r\nimport { ControllersPropsType } from './ControllersContainer'\r\nimport ControllerForm from './ControllerForm'\r\nimport { AntCheckbox, AntSelect } from '../../../../../../utils/Formik/CreateAntField'\r\nimport { ControllersType, ModelsType } from '../../../../../../api/projectAPI'\r\nimport {SelectOptionType} from './../../../../../../Types/types'\r\nimport { initialValues } from '../../../../../ToDo/ToDoMobile'\r\nimport Item from 'antd/lib/list/Item'\r\nimport ControllerMethods from './ControllerMethodsContainer'\r\nimport FullControllerMethodCode from './FullControllerMethodCode/FullControllerMethodCodeContainer'\r\n\r\nconst { Panel } = Collapse\r\n\r\nconst Controllers: React.FC<ControllersPropsType> = (props) => {\r\n    useEffect(() => {\r\n        props.getControllersList(props.backendId)\r\n\r\n        if (props.modelsList.length === 0) {\r\n            // console.log('getModelsList')\r\n            props.getModelsList(props.backendId)\r\n        }\r\n\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n    }, [props.controllersList])\r\n\r\n    const [isModalVisible, setIsModalVisible] = useState(false)\r\n\r\n    if (props.modelsList.length > 0) {\r\n        const modelsListOptions = props.modelsList.map( (item: ModelsType) => {\r\n            return ( {\r\n                name: item.name,\r\n                value: item.id\r\n            } )\r\n        })\r\n    }\r\n    \r\n\r\n    const addController = () => {\r\n        setIsModalVisible(true)\r\n    }\r\n\r\n    const handleOk = () => { setIsModalVisible(!isModalVisible) }\r\n    const handleCancel = () => { setIsModalVisible(!isModalVisible) }\r\n\r\n    const handleSubmit = (vals: any) => {\r\n        // console.log(vals)\r\n        // console.log(props)\r\n\r\n        props.createController({\r\n            ...vals,\r\n            backend_id: props.backendId\r\n        })\r\n    }\r\n\r\n    // console.log(props)\r\n\r\n    // if (props.controllersList.length > 0) {\r\n        return (\r\n            <div>\r\n                <div className=\"w-100 d-flex flex-row-reverse\">\r\n                    <Button className=\"mr-4 ml-auto mb-3\" type=\"primary\" onClick={addController}>Add Controller</Button>\r\n                </div>\r\n\r\n                {\r\n                    props.controllersList.length > 0 ?\r\n                    <Collapse defaultActiveKey={[]}>\r\n                        {props.controllersList.map((item: ControllersType) => {\r\n                            return (\r\n                                <Panel \r\n                                    key={item.name}\r\n                                    header={item.name} \r\n                                    // extra={[<div key={'any_'+item.name}>any</div>]}\r\n                                >\r\n                                    <ControllerItem item={item} modelsList={props.modelsList} updateController={props.updateController}/>\r\n                                </Panel>\r\n                            )\r\n                        })}\r\n                    </Collapse>\r\n                    : <Empty />\r\n                }\r\n\r\n                <Modal title=\"Create new Controller\" visible={isModalVisible} onOk={handleOk} onCancel={handleCancel}>\r\n                    <Formik\r\n                        // initialValues={initialModalValues}\r\n                        initialValues={{}}\r\n                        onSubmit={handleSubmit}\r\n                        enableReinitialize={true}\r\n                    >\r\n                        {ControllerForm}\r\n                    </Formik>\r\n                </Modal>\r\n            </div>\r\n        )\r\n    // } \r\n    // else {\r\n    //     return(\r\n    //         <>\r\n    //             <div className=\"w-100 d-flex flex-row-reverse\">\r\n    //                 <Button className=\"mr-4 ml-auto mb-3\" type=\"primary\" onClick={addController}>Add Controller</Button>\r\n    //             </div>\r\n    //             <div>No Data</div>\r\n    //         </>\r\n    //     ) \r\n    // }\r\n}\r\n\r\nexport default Controllers\r\n\r\ntype ControllerItemType = {\r\n    item: ControllersType,\r\n    modelsList: Array<ModelsType>,\r\n    updateController: (values: ControllersType, controllerId: number) => void\r\n}\r\n\r\nconst ControllerItem:React.FC<ControllerItemType> = (props) => {\r\n    console.log('ControllerItem props', props)\r\n\r\n    type initialFormValuesType = {\r\n        isResurce: boolean,\r\n        modelsOptions: Array<SelectOptionType>,\r\n        models: Array<number>\r\n    }\r\n\r\n    const getOptions = ():Array<SelectOptionType> => {\r\n        let options:Array<SelectOptionType> = []\r\n        for (let index = 0; index < props.modelsList.length; index++) {\r\n            const element = props.modelsList[index];\r\n            options.push({\r\n                name: element.name,\r\n                value: element.id ? Number(element.id) : 0\r\n            })\r\n        }\r\n        return options\r\n    }\r\n\r\n    const initialFormValues: initialFormValuesType = {\r\n        isResurce: props.item.isResource,\r\n        modelsOptions: getOptions(),\r\n        models: props.item.models.length>0 ? props.item.models.map( (i: ModelsType) => i.id ) : []\r\n    }\r\n\r\n    // console.log(props)\r\n\r\n    const onControllerInstanseSubmit = (values: any) => {\r\n        // console.log(values)\r\n\r\n        props.updateController({\r\n            models: values.models,\r\n            backend_id: props.item.backend_id,\r\n            folder: props.item.folder,\r\n            id: props.item.id,\r\n            isResource: values.isResurce,\r\n            model_id: props.item.model_id,\r\n            name: props.item.name,\r\n        }, props.item.id)\r\n    }\r\n\r\n    return(\r\n    <div key={props.item.name}>\r\n        <h4>{props.item.name}</h4>\r\n        <Collapse defaultActiveKey={[]} ghost>\r\n            <Panel header=\"Instanses\" key=\"instanse\">\r\n                <Formik\r\n                    initialValues={initialFormValues}\r\n                    // initialValues={{}}\r\n                    onSubmit={onControllerInstanseSubmit}\r\n                    enableReinitialize={true}\r\n                >\r\n                    {ControllerInstansesForm}\r\n                </Formik>\r\n                \r\n            </Panel>\r\n            <Panel header=\"Methods\" key=\"methods\">\r\n                <ControllerMethods controllerData={props.item}/>\r\n            </Panel>\r\n            <Panel header=\"Full code\" key=\"code\">\r\n                <FullControllerMethodCode controllerData={props.item}/>\r\n            </Panel>\r\n            <Panel header=\"Actions to create\" key=\"actions\">\r\n                {\r\n                    props.item.models[0] ?\r\n                    <h5>php artisan make:model {props.item.models[0].name} -mcr</h5>\r\n                    : <h5>No Model</h5>\r\n                }\r\n                <br/>\r\n                {\r\n                     props.item.models[0] ?\r\n                     <>\r\n                    <h5>php artisan make:controller {props.item.name} --resource</h5>\r\n                    <h5>php artisan make:model {props.item.models[0].name} --migration</h5>\r\n                    </>\r\n                    : <h5>No Model</h5>\r\n                }\r\n            </Panel>\r\n        </Collapse>\r\n    </div>\r\n    )\r\n}\r\n\r\nconst ControllerInstansesForm: ((props: FormikProps<{}>) => ReactNode) = (props) => {\r\n\r\n    // console.log(props.initialValues)\r\n\r\n    return (\r\n        <Form\r\n            className=\"form-container\"\r\n            onSubmit={props.handleSubmit}\r\n        >\r\n            <Field\r\n                component={AntCheckbox}\r\n                name=\"isResurce\"\r\n                type=\"checkbox\"\r\n                label=\"isResurce\"\r\n                submitCount={props.submitCount}\r\n                // onClick={submitBackEnd}\r\n                // onSelect={submitBackEnd}\r\n            />\r\n\r\n            <Field\r\n                component={AntSelect}\r\n                name=\"models\"\r\n                type=\"select\"\r\n                label=\"Including Models\"\r\n                mode=\"multiple\"\r\n                selectOptions={\r\n                    // @ts-ignore\r\n                    props.initialValues.modelsOptions\r\n                }\r\n                // onSelect = {onSelect}\r\n            />\r\n\r\n            <div className=\"submit-container\">\r\n                <button className=\"ant-btn ant-btn-primary\" type=\"submit\">\r\n                    Save\r\n                </button>\r\n            </div>\r\n\r\n        </Form>\r\n    )\r\n}\r\n\r\n\r\n","import {connect} from 'react-redux'\r\nimport Controllers from './Controllers'\r\nimport { AppStateType } from '../../../../../../redux/store'\r\nimport { getControllersList, createController, getModelsList, updateController } from '../../../../../../redux/projectReducer'\r\nimport { ControllersType } from '../../../../../../api/projectAPI'\r\n// import { ModelsType } from '../../../.././../api/projectAPI'\r\n\r\ntype OwnControllersPropsType = {\r\n    backendId: number\r\n}\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    getControllersList: (backendId: number) => void\r\n    createController: (values: any) => void,\r\n    getModelsList: (backendId: number) => void,\r\n    updateController:(values: ControllersType, controllerId: number) => void,\r\n}\r\n\r\nexport type ControllersPropsType = MapPropsType & MapDispatchPropsType & OwnControllersPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        controllersList: state.projects.controllersList,\r\n        modelsList: state.projects.modelsList\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnControllersPropsType, AppStateType>(mapStateToProps, \r\n    {getControllersList, createController, getModelsList, updateController}) \r\n    (Controllers)\r\n    \r\n\r\n","import React, { useEffect, useState } from 'react'\r\nimport {BackendPropsType} from './BackendContainer'\r\nimport {getTargetProject} from './../CurrentProject'\r\nimport { Collapse, Spin } from 'antd'\r\nimport { Formik } from 'formik'\r\nimport InstansesForm from './Instanses/InstansesForm'\r\nimport Models from './Models/ModelsContainer'\r\nimport Controllers from './Controllers/ControllersContainer'\r\n\r\nconst { Panel } = Collapse\r\n\r\nconst Backend: React.FC<BackendPropsType> = (props) => {\r\n    const [activeKey, setActiveKey] = useState<Array<string>>()\r\n\r\n    useEffect( ()=>{\r\n        props.getBackendData(1)\r\n    }, [])\r\n\r\n    const project = getTargetProject(props.projectsList, props.projectId.toString())\r\n\r\n    // console.log('project', project)\r\n\r\n    const instansesInitialValues = {\r\n        name: project.backendData ? project.backendData.name : null,\r\n        url: project.backendData ? project.backendData.url : null,\r\n        ip: project.backendData ? project.backendData.ip : null,\r\n        login: project.backendData ? project.backendData.login : null,\r\n        password: project.backendData ? project.backendData.password : null,\r\n        folder: project.backendData ? project.backendData.folder : null,\r\n    }\r\n\r\n    // console.log(props)\r\n\r\n    const instansesHandleSubmit = (val: any) => {\r\n        // console.log(project.backendData ? project.backendData.id : undefined)\r\n        // console.log(val)\r\n        if (project.backendData) {\r\n            props.updateBackend(val, project.backendData.id)\r\n        }\r\n    }\r\n\r\n    const changePanel = (closeKey: string, openKey: Array<string>) => {\r\n        console.log(openKey)\r\n        if (openKey) {\r\n            setActiveKey(openKey)\r\n        } else {\r\n            setActiveKey([])\r\n        }\r\n        \r\n    }\r\n\r\n    const onCollapseChange = (v:any) => {\r\n        console.log('onCollapseChange', v)\r\n        console.log('activeKey: ', [activeKey])\r\n        changePanel('', v)\r\n    }\r\n\r\n    // console.log(project)\r\n\r\n    if (project.backendData) {\r\n        return(\r\n            <>\r\n                <h5>{project.backendData.name}</h5>\r\n                <Collapse defaultActiveKey={[]} activeKey={activeKey} onChange={onCollapseChange}>\r\n                    <Panel header=\"Instanses\" key=\"1\">\r\n                        <Formik\r\n                            initialValues={instansesInitialValues}\r\n                            onSubmit={instansesHandleSubmit}\r\n                            enableReinitialize={true}\r\n                        >\r\n                            {InstansesForm}\r\n                        </Formik>\r\n                    </Panel>\r\n                    <Panel header=\"Models\" key=\"2\">\r\n                        <Models backendId={project.backend_id} changePanel={changePanel} />\r\n                    </Panel>\r\n                    <Panel header=\"Controllers\" key=\"3\">\r\n                        <Controllers backendId={project.backend_id}/>\r\n                    </Panel>\r\n                    <Panel header=\"Api\" key=\"4\">\r\n\r\n                    </Panel>\r\n                </Collapse>\r\n                <br/><br/><br/>\r\n\r\n                <li>Seeders</li>\r\n                <li>Fasades</li>\r\n                <li>Middleware</li>\r\n                <li>Services</li>\r\n                <li>Events</li>\r\n                <li>Workers</li>\r\n            </>\r\n        )\r\n    } else {\r\n        return <Spin key=\"spin\" size=\"large\" />\r\n    }\r\n    \r\n}\r\n\r\nexport default Backend","import {connect} from 'react-redux'\r\nimport Backend from './Backend'\r\nimport { AppStateType } from '../../../../../redux/store'\r\nimport { isMobile } from 'react-device-detect'\r\n// import { getUsersList, updateUser, actions } from '../../../../../../redux/usersReducer'\r\nimport { getProjectList, getBackendData, updateBackend } from '../../../../../redux/projectReducer'\r\nimport { UserType } from '../../../../../redux/authReducer'\r\nimport { BackendType } from '../../../../../api/projectAPI'\r\n// import CurrentUserMobile from './CurrentUserMobile'\r\n\r\ntype OwnBackendPropsType = {\r\n    projectId: number\r\n}\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    getProjectList: ()=>void,\r\n    getBackendData: (projectid: number)=>void,\r\n    updateBackend: (values: BackendType, backendId: number) =>void,\r\n    // updateUser: (values: UserType, userId: number)=>void,\r\n    // setUsersDataChanged: (isUsersDataChanged: boolean)=>void\r\n}\r\n\r\nexport type BackendPropsType = MapPropsType & MapDispatchPropsType & OwnBackendPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        projectsList: state.projects.projectList,\r\n        isProjectsLoaded: state.projects.isProjectLoaded\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnBackendPropsType, AppStateType>(mapStateToProps, \r\n    {getProjectList, getBackendData, updateBackend}) \r\n    (Backend)\r\n    \r\n\r\n","import { Button, Tree } from \"antd\"\r\nimport { Field, Form, FormikProps, FormikValues } from \"formik\"\r\nimport React, { ReactNode, useState } from \"react\"\r\nimport { AntInput } from \"../../../../../../utils/Formik/CreateAntField\"\r\nimport { validateRequired } from \"../../../../../../utils/Formik/ValidateFields\"\r\n\r\ntype OtherProps = {\r\n\r\n}\r\n\r\nconst InstansesFrontendForm: ((props: OtherProps & FormikProps<FormikValues>) => ReactNode) = (props) => {\r\n    const [isDataChanged, setIsDataChanged] = useState(false)\r\n\r\n    // const [srcTree, setSrcTree] = useState(props.initialValues.src_tree)\r\n    const [srcTree, setSrcTree] = useState(treeData)\r\n\r\n    const addTreeItem = (trace:Array<string>) => {\r\n        for (let index = 0; index < trace.length; index++) {\r\n            const key = trace[index]\r\n            console.log(key)\r\n        }\r\n    }\r\n\r\n    const onChange = (val: any) => {\r\n        setIsDataChanged(true)\r\n    }\r\n\r\n    return (\r\n        <Form\r\n            className=\"form-container mt-2\"\r\n            onSubmit={props.handleSubmit}\r\n        >\r\n            <Field\r\n                component={AntInput}\r\n                name=\"name\"\r\n                type=\"text\"\r\n                label=\"Name\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n                onChange={onChange}\r\n            />\r\n\r\n            <TreeSRC addTreeItem={addTreeItem}/>\r\n\r\n            {isDataChanged ?\r\n                <div className=\"submit-container\">\r\n                    <button className=\"ant-btn ant-btn-primary\" type=\"submit\">\r\n                        Save\r\n                    </button>\r\n                </div>\r\n                : null}\r\n\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default InstansesFrontendForm\r\n\r\n\r\ntype TreeSRCPropsType = {\r\n    addTreeItem: (trace:Array<string>) => void,\r\n}\r\n\r\nconst TreeSRC: React.FC<TreeSRCPropsType> = (props) => {\r\n    const onSelect = (selectedKeys: React.Key[], info: any) => {\r\n        console.log('selected', selectedKeys, info);\r\n    }\r\n\r\n    const onCheck = (checkedKeys: any, info: any) => {\r\n        console.log('onCheck', checkedKeys, info);\r\n    }\r\n    return (\r\n        <div className=\"ant-row ant-form-item \">\r\n            <div className=\"ant-col ant-form-item-label pr-2\">SRC tree:</div>\r\n            <div className=\"ant-col ant-form-item-control\">\r\n            <Tree\r\n                checkable\r\n                defaultExpandedKeys={[]}\r\n                defaultSelectedKeys={['0-0-0', '0-0-1']}\r\n                defaultCheckedKeys={['0-0-0', '0-0-1']}\r\n                onSelect={onSelect}\r\n                onCheck={onCheck}\r\n                treeData={treeData}\r\n            />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype FolderRowPropsType = {\r\n    name: string,\r\n    trace: Array<string>\r\n    // addTreeItem: (trace:Array<string>) => void,\r\n    \r\n}\r\n\r\nexport const FolderRow:React.FC<FolderRowPropsType> = (props) => {\r\n    const onAdd = (v: Array<string>) => {\r\n        console.log(v)\r\n        // addTreeItem(trace).bind(props.trace)\r\n    }\r\n    return(\r\n        <div>{props.name}\r\n            <Button onClick={()=>{onAdd(props.trace)}} className=\"ml-2\" type=\"primary\" size=\"small\">Add</Button>\r\n            <Button className=\"ml-2\" type=\"primary\" size=\"small\">Dell</Button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport type treeDataItem = {\r\n    title: string | JSX.Element,\r\n    key: string,\r\n    disableCheckbox?: boolean,\r\n    disabled?: boolean,\r\n    children?: Array<treeDataItem>,\r\n    trace?: Array<string>,\r\n}\r\n\r\nconst treeData: Array<treeDataItem> = [\r\n    {\r\n        title: <FolderRow name=\"src\" trace={['src']}/>,\r\n        key: '0',\r\n        trace:['0'],\r\n        children: [\r\n        //     {\r\n        //         title: <FolderRow name=\"parent 1-0\"/>,\r\n        //         key: '0-0-0',\r\n        //         disabled: true,\r\n        //         children: [\r\n        //             {\r\n        //                 title: 'leaf0',\r\n        //                 key: '0-0-0-0',\r\n        //                 // disableCheckbox: true,\r\n        //             },\r\n        //             {\r\n        //                 title: 'leaf1',\r\n        //                 key: '0-0-0-1',\r\n        //             },\r\n        //         ],\r\n        //     },\r\n            {\r\n                title: <FolderRow name=\"Components\" trace={['src', 'Components']}/>,\r\n                key: '0-0-1',\r\n                children: [{ title: <FolderRow name=\"Development\" trace={['src', 'Components', 'Development']}/>,  key: '0-0-1-0' }],\r\n            },\r\n        ],\r\n    },\r\n];\r\n\r\n","import { Collapse } from 'antd'\r\nimport CollapsePanel from 'antd/lib/collapse/CollapsePanel'\r\nimport { Formik } from 'formik'\r\nimport React, {useEffect} from 'react'\r\nimport InstansesFrontendForm from './Instanses/InstansesFrontendForm'\r\n\r\ntype FrontendPropsType = {\r\n    projectId: number\r\n}\r\n\r\nconst Frontend:React.FC<FrontendPropsType> = (props) => {\r\n    useEffect( ()=> {\r\n        getCurrentFrontend(props.projectId)\r\n    },[])\r\n    console.log('Frontend props: ', props)\r\n    type InstansesInitialValuesType = {\r\n\r\n    }\r\n    const instansesInitialValues: InstansesInitialValuesType = {\r\n        \r\n    }\r\n\r\n    const instansesHandleSubmit = (values: InstansesInitialValuesType) => {\r\n        console.log(values)\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            <h5>Frontend</h5>\r\n            <Collapse defaultActiveKey={[]}>\r\n                <CollapsePanel header=\"Instanses\" key=\"1\">\r\n                    <li>1) Create new component \"FrontEnd\"</li>\r\n                    <li>1.1) Create model</li>\r\n                    <li>1.2) Create migrations</li>\r\n                    <li>1.3) Create controller</li>\r\n                    <Formik\r\n                        initialValues={instansesInitialValues}\r\n                        onSubmit={instansesHandleSubmit}\r\n                    >\r\n                        {InstansesFrontendForm}\r\n                    </Formik>\r\n                </CollapsePanel>\r\n                <CollapsePanel header=\"APIs\" key=\"2\"></CollapsePanel>\r\n                <CollapsePanel header=\"Reducers\" key=\"3\"></CollapsePanel>\r\n                <CollapsePanel header=\"Components\" key=\"4\">\r\n                    <li>1) Create new component</li>\r\n                    <li>1.1) Create model</li>\r\n                    <li>1.2) Create migrations</li>\r\n                    <li>1.3) Create controller</li>\r\n                    <li>2) Get componentList</li>\r\n                   \r\n                </CollapsePanel>\r\n            </Collapse>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Frontend\r\n\r\nexport const getCurrentFrontend = (projectId: Number) => {\r\n    console.log('getCurrentFrontend for: '+projectId)\r\n}","import { Collapse, Spin } from 'antd'\r\nimport React, { useEffect } from 'react'\r\nimport { ProjectItemType } from '../../../../redux/projectReducer'\r\nimport Backend from './Backend/BackendContainer'\r\nimport { CurrenProjectPropsType } from './CurrentProjectContainer'\r\nimport Frontend from './Frontend/Frontend'\r\n\r\nconst { Panel } = Collapse\r\n\r\nexport const getTargetProject = (projectList: Array<ProjectItemType>, userId: string): ProjectItemType => {\r\n    return projectList.filter((item: ProjectItemType) => item.id.toString() === userId)[0]\r\n}\r\n\r\nconst CurrentProject: React.FC<CurrenProjectPropsType> = (props) => {\r\n    useEffect(() => {\r\n        if (!props.isProjectsLoaded) {\r\n            props.getProjectList()\r\n        }\r\n    }, [props.isProjectsLoaded])\r\n\r\n    const project = getTargetProject(props.projectsList, props.match.params.userId)\r\n\r\n    if (project) {\r\n        return (\r\n            <>\r\n                <h3>{project.name}</h3>\r\n                <Collapse defaultActiveKey={[]}>\r\n                    {project.backend_id ?\r\n                        <Panel header=\"Backend\" key=\"1\">\r\n                            Backend data to {project.backend_id}\r\n                            <Backend projectId={Number(props.match.params.userId)}/>\r\n                        </Panel>\r\n                        :\r\n                        null\r\n                    }\r\n                    {project.frontend_id ?\r\n                        <Panel header=\"Frontend\" key=\"2\">\r\n                            <Frontend projectId={Number(props.match.params.userId)}/>\r\n                        </Panel>\r\n                        :\r\n                        null\r\n                    }\r\n                </Collapse>\r\n            </>\r\n        )\r\n    } else {\r\n        return <Spin key=\"spin\" size=\"large\" />\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default CurrentProject","import {connect} from 'react-redux'\r\nimport CurrentProject from './CurrentProject'\r\nimport { AppStateType } from '../../../../redux/store'\r\nimport { isMobile } from 'react-device-detect'\r\nimport { getUsersList, updateUser, actions } from '../../../../redux/usersReducer'\r\nimport { getProjectList } from '../../../../redux/projectReducer'\r\nimport { UserType } from '../../../../redux/authReducer'\r\n// import CurrentUserMobile from './CurrentUserMobile'\r\n\r\ntype OwnCurrentProjectPropsType = {\r\n    match: any\r\n    location: any\r\n    history: any\r\n}\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    getProjectList: ()=>void,\r\n    updateUser: (values: UserType, userId: number)=>void,\r\n    // setUsersDataChanged: (isUsersDataChanged: boolean)=>void\r\n}\r\n\r\nexport type CurrenProjectPropsType = MapPropsType & MapDispatchPropsType & OwnCurrentProjectPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        projectsList: state.projects.projectList,\r\n        isProjectsLoaded: state.projects.isProjectLoaded\r\n        // errorMessage: state.task.errorMessage,\r\n        // isInterval: state.task.isInterval,\r\n        // taskSaveStatus: state.task.taskSaveStatus,\r\n        // settings:state.auth.viewSettings,\r\n        // appLocation: state.app.location,\r\n        // viewSettings: state.auth.viewSettings,\r\n        // isUsersDataChanged: state.users.isUsersDataChanged\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnCurrentProjectPropsType, AppStateType>(mapStateToProps, \r\n    {getProjectList, updateUser}) \r\n    (isMobile ? CurrentProject : CurrentProject)\r\n    \r\n\r\n","import { Button, List } from 'antd'\r\nimport React, {useEffect} from 'react'\r\nimport { EnglishPropsType } from './EnglishContainer'\r\n\r\n\r\nconst English:React.FC<EnglishPropsType> = (props) => {\r\n\r\n    useEffect( ()=>{\r\n        props.getVocabularyList(1)\r\n    },[])\r\n\r\n    const onPlay = (url:string | null) => {\r\n        console.log(url)\r\n        if (url) {\r\n            const audio = new Audio(url)\r\n            audio.play()\r\n        } \r\n        \r\n    }\r\n\r\n    console.log(props)\r\n    return(\r\n        <>\r\n        <div>\r\n            <h4>Vocabulary:</h4>\r\n            <div className=\"row\">\r\n                <Button className=\"ml-auto mr-5\" type=\"primary\">Get Vocabulary List</Button>\r\n            </div>\r\n            <li>Бэкэнд словаря</li>\r\n            <li>Api</li>\r\n            <li>Reducer</li>\r\n            <li>CRUD</li>\r\n            <li>Список слов с частотой использования</li>\r\n            <li>Запрос данных на Яндекс</li>\r\n            <br/><br/>\r\n            <li>php artisan make:model Englesh/Vocabulary -mcr</li>\r\n\r\n            <button \r\n                data-url={\"https://s3-eu-west-1.amazonaws.com/com.idmgroup.lab.sounds.prod/en/0/b/8/0b8263d341de01f741e4deadfb18f9eb.mp3\"}\r\n            >\r\n                play\r\n            </button>\r\n\r\n            \r\n\r\n        </div>\r\n\r\n        {/* <div >\r\n        {props.vocabularyList.map(item => {\r\n            return(\r\n                <div className=\"row\">\r\n                <Button\r\n                    type={item.eng_sound ? \"primary\" : \"ghost\"}\r\n                    onClick={()=>{onPlay(item.eng_sound)}}\r\n                >\r\n                    {item.eng_value}\r\n                </Button> : {item.rus_value}\r\n                </div>\r\n            )\r\n        })}\r\n        </div> */}\r\n\r\n        <List\r\n            size=\"small\"\r\n            header={<div>Header</div>}\r\n            footer={<div>Footer</div>}\r\n            bordered\r\n            dataSource={props.vocabularyList}\r\n            renderItem={ (item: any) => \r\n                    <List.Item\r\n                    // actions={item.eng_sound ? [<a key={item.eng_sound} onClick={()=>{onPlay(item.eng_sound)}}>sound</a>] : []}\r\n                    >\r\n                        <div className=\"row w-100\">\r\n                            <div className=\"col-5\">\r\n                                {item.eng_value}\r\n                            </div>\r\n                            <div className=\"col-5\">\r\n                                {item.rus_value}\r\n                            </div>\r\n                            {item.eng_sound ? <div className=\"col-2\">\r\n                            <Button\r\n                                type={item.eng_sound ? \"primary\" : \"ghost\"} size=\"small\"\r\n                                onClick={()=>{onPlay(item.eng_sound)}}\r\n                            >eng</Button>\r\n                            </div> : null}\r\n                        </div>\r\n                    </List.Item>\r\n            }\r\n        />\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default English","import {connect} from 'react-redux'\r\nimport English from './English'\r\nimport {actions} from '../../redux/authReducer'\r\nimport { AppStateType } from '../../redux/store'\r\nimport {getVocabularyList} from './../../redux/vocabularyReducer'\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype OwnEnglishType = {\r\n\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    getVocabularyList: (part: number)=>void\r\n}\r\n\r\nexport type EnglishPropsType = MapPropsType & MapDispatchPropsType & OwnEnglishType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        vocabularyList: state.vocabulary.vocabularyList,\r\n        user: state.auth.user\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnEnglishType, AppStateType>(mapStateToProps, \r\n    {getVocabularyList}) \r\n    (English)\r\n    \r\n\r\n","import React, { useEffect, useState } from 'react'\r\nimport ToDoList from './Components/ToDo/ToDoContainer'\r\nimport { BrowserRouter, Redirect, Route, Switch, withRouter, useLocation } from 'react-router-dom'\r\nimport { connect, Provider } from 'react-redux'\r\nimport './App.css'\r\nimport 'antd/dist/antd.css'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport 'antd-mobile/dist/antd-mobile.css'\r\nimport store, { AppStateType } from './redux/store'\r\nimport { Layout, Spin, Result, Button } from 'antd'\r\nimport { compose } from 'redux'\r\nimport { initializeApp, addLocation } from './redux/appReducer'\r\nimport { credsType, login } from './redux/authReducer'\r\nimport Header from './Components/Header/HeaderContainer'\r\nimport { isMobile } from \"react-device-detect\"\r\nimport Login from './Components/Login/LoginContainer'\r\nimport Orders from './Components/Orders/OrdersContainer'\r\nimport TasksTree from './Components/TasksTree/TasksTreeContainer'\r\nimport Register from './Components/Register/RegisterContainer'\r\nimport Users from './Components/Users/UsersContainer'\r\nimport CurrentUser from './Components/Users/CurrentUser/CurrentUserContainer'\r\nimport Projects from './Components/Development/Projects/ProjectsContainer'\r\nimport CurrentProject from './Components/Development/Projects/CurrentProject/CurrentProjectContainer'\r\nimport English from './Components/English/EnglishContainer'\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\ntype DispatchPropsType = {\r\n    initializeApp: () => void,\r\n    addLocation: (location: string) => void,\r\n    login: (data: credsType) => void,\r\n}\r\n\r\nconst App = (props: MapPropsType & DispatchPropsType) => {\r\n    const [location, setLocation] = useState(useLocation().pathname)\r\n\r\n    useEffect(() => {\r\n        if (!props.initialized) {\r\n            let instanseCreds = parseQueryString()\r\n            if (instanseCreds.email && instanseCreds.password) {\r\n                instanseCreds.remember = true\r\n                props.login(instanseCreds)\r\n            }\r\n\r\n            if (location === '/front1/') {\r\n                props.addLocation(location)\r\n                setLocation(location)\r\n            }\r\n            props.initializeApp()\r\n        }\r\n    }, [props, location])\r\n\r\n\r\n    if (!props.initialized) {\r\n        return <Spin key=\"spin\" size=\"large\" />\r\n    }\r\n\r\n    return (\r\n        <Layout>\r\n            <Header />\r\n            <Switch>\r\n                {!props.isAuth ?\r\n                    <Route exact path={props.appLocation}\r\n                        render={() => <Redirect to={props.appLocation + 'login'} />} />\r\n                    :\r\n                    <Route exact path={props.appLocation}\r\n                        render={() => <Redirect to={props.appLocation + 'toDoList'} />} />\r\n                }\r\n\r\n                {props.isAuth ?\r\n                    <Route exact path={props.appLocation + 'login'}\r\n                        render={() => <Redirect to={props.appLocation + 'toDoList'} />}\r\n                    />\r\n                    :\r\n                    null\r\n                }\r\n\r\n                <Route path={props.appLocation + 'login'}\r\n                    render={() => <Login />} />\r\n\r\n                <Route path={props.appLocation + 'toDoList'}\r\n                    render={() => <ToDoList />} />\r\n\r\n                <Route path={props.appLocation + 'tasksTree'}\r\n                    render={() => <TasksTree />} />\r\n\r\n                <Route path={props.appLocation + 'orders'}\r\n                    render={() => <Orders />} />\r\n\r\n                <Route path={props.appLocation + 'vocabulary'}\r\n                    render={() => <English />} />\r\n\r\n                <Route path={props.appLocation + 'register'}\r\n                    render={() => <Register />} />\r\n\r\n                <Route path={props.appLocation + 'users/:userId'}\r\n                    component={props.userStatus === 'admin' || props.userStatus === 'superAdmin' ? CurrentUser : Page404} />\r\n\r\n                <Route exact path={props.appLocation + 'users'}\r\n                    component={props.userStatus === 'admin' || props.userStatus === 'superAdmin' ? Users : Page404} />\r\n\r\n                <Route path={props.appLocation + 'projects/:userId'}\r\n                    component={props.userStatus === 'admin' || props.userStatus === 'superAdmin' ? CurrentProject : Page404} />\r\n\r\n                <Route exact path={props.appLocation + 'projects'}\r\n                    component={props.userStatus === 'admin' || props.userStatus === 'superAdmin' ? Projects : Page404} />\r\n\r\n                <Route path={props.appLocation + '*'} component={Page404} />\r\n\r\n            </Switch>\r\n        </Layout>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n    initialized: state.app.initialized,\r\n    appLocation: state.app.location,\r\n    isAuth: state.auth.isAuth,\r\n    userStatus: state.auth.user?.status\r\n})\r\n\r\nlet AppContainer = compose<React.ComponentType>(\r\n    withRouter,\r\n    connect(mapStateToProps, { initializeApp, addLocation, login }))(App)\r\n\r\nconst MainApp = () => {\r\n    return (\r\n        <BrowserRouter>\r\n            <Provider store={store}>\r\n                <div className={isMobile ? \"\" : \"container\"}>\r\n                    <AppContainer />\r\n                </div>\r\n            </Provider>\r\n        </BrowserRouter>\r\n    )\r\n}\r\n\r\nexport default MainApp\r\n\r\nconst parseQueryString = (): any => {\r\n    const params: any = {}\r\n    document.location.search.substr(1).split('&').forEach((pair) => {\r\n        const [key, value] = pair.split('=')\r\n        params[key] = value\r\n    })\r\n    return params;\r\n};\r\n\r\nconst Page404: React.FC<any> = (props) => {\r\n    return (\r\n        <Result\r\n            status=\"404\"\r\n            title=\"404\"\r\n            subTitle=\"Sorry, the page you visited does not exist.\"\r\n            extra={<Button type=\"primary\">Back Home</Button>}\r\n        />\r\n    )\r\n}","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './App'\r\nimport reportWebVitals from './reportWebVitals'\r\n\r\nReactDOM.render(\r\n    <App />\r\n  ,\r\n  document.getElementById('root')\r\n)\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals()\r\n"],"sourceRoot":""}
{"version":3,"sources":["utils/Formik/ValidateFields.ts","utils/Formik/CreateAntField.tsx","Components/ToDo/Settings/SettingsModal.tsx","api/api.ts","api/authAPI.ts","redux/authReducer.ts","Components/ToDo/Settings/SettingsModalContainer.tsx","Components/ToDo/ToDoHeader/ToDoHeader.tsx","api/taskApi.ts","redux/taskReducer.ts","Components/ToDo/ToDoHeader/ToDoHeaderMobile.tsx","Components/ToDo/ToDoHeader/ToDoHeaderContainer.tsx","Components/ToDo/ToDoForm/ToDoForm.tsx","Components/ToDo/ToDoMobile.tsx","Components/TimeScale/TaskItem/TaskItem.tsx","Components/TimeScale/TaskItem/TaskItemContainer.tsx","utils/array-helpers.ts","Components/TimeScale/TimeScale.tsx","Components/TimeScale/TimeScaleContainer.tsx","Components/ToDo/ToDoBrowser.tsx","Components/ToDo/ToDoListContainer.tsx","redux/appReducer.ts","api/taskListAPI.ts","redux/TaskListReducer.ts","redux/store.ts","Components/Header/MenuBrowser.tsx","Components/Header/MenuBrowserConainer.tsx","Components/Header/MenuPopover.tsx","Components/Header/MenuMobile.tsx","Components/Header/MenuMobileContainer.tsx","Components/Header/Header.tsx","Components/Header/HeaderContainer.tsx","Components/Login/LoginForm.tsx","Components/Login/Login.tsx","Components/Login/LoginContainer.tsx","Components/Orders/Orders.tsx","Components/Orders/OrdersContainer.tsx","Components/TasksTree/NewTaskTreeForm.tsx","Components/TasksTree/TasksTreeBrowser.tsx","Components/TasksTree/TaskTreeItem.tsx","Components/TasksTree/TasksTreeMobile.tsx","Components/TasksTree/TasksTreeContainer.tsx","Components/Register/RegisterForm.tsx","Components/Register/Register.tsx","Components/Register/RegisterContainer.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["validateRequired","value","errors","validateEmail","test","FormItem","Form","Item","Option","Select","CheckboxItem","CheckboxMobile","TextArea","Input","CreateAntField","AntComponent","field","form","hasFeedback","label","selectOptions","submitCount","type","props","touched","name","submitted","hasError","submittedError","touchedError","onInputChange","undefined","setFieldValue","target","Array","isArray","onChange","checked","onBlur","setFieldTouched","isMobile","help","validateStatus","allowClear","map","item","title","AntSelect","Picker","AntDatePicker","DatePickerMobile","DatePicker","AntInput","InputItem","AntInputPassword","Password","AntTimePicker","TimePicker","AntCheckbox","Checkbox","AntTextArea","TextareaItem","MobileComponent","useState","defaultValue","setValue","useEffect","console","log","data","key","mode","defaultChecked","locale","enUs","autoHeight","className","cols","onOk","v","onPickerChange","zeroTime","Date","setHours","setMinutes","setSeconds","setMilliseconds","maxTime","ResultCodesEnum","settingasInstanse","timeScaleInrerval","completeInrerval","timeScaleSingle","completeSingle","timeStart","timeEnd","SettingsModal","viewSettings","settings","propName","ToDo","Object","prototype","hasOwnProperty","call","visible","isModalVisible","handleOk","onCancel","handleCancel","initialValues","onSubmit","values","changeSettings","render","SettingsForm","handleSubmit","renderHeader","component","validate","instance","axios","create","withCredentials","baseURL","authAPI","get","localStorage","getItem","then","response","post","remember_token","setItem","removeItem","status","catch","err","request","creds","token","initialState","user","isAuth","actions","setAuthUserData","logout","settingType","login","dispatch","getState","a","authReducer","state","action","JSON","parse","view_settings","connect","auth","RangePicker","ToDoHeader","isInterval","setIsInterval","startDate","moment","endDate","dates","setDates","dateInterval","isSame","format","formatString","style","marginLeft","dateString","e","shape","icon","FileAddOutlined","fontSize","onClick","showDrawer","showModal","SettingOutlined","taskAPI","defaults","headers","common","taskId","delete","put","taskList","taskListIsFetching","taskSaveStatus","errorMessage","setTaskList","setTaskSaveStatus","setErrorMessage","message","setTaskListIsFetching","isFetchingValue","date","editTaskList","task","getTaskList","start_date","end_date","updateTask","taskReducer","stateCopy","id","Tasks","ToDoHeaderMobile","toDate","extra","inline","size","ToDoForm","ToDoMobile","setIsTimeScaleVisible","setVisible","setIsModalVisible","isTimeScaleVisible","Header","minHeight","document","documentElement","clientHeight","contentStyle","color","textAlign","paddingTop","width","sidebar","open","onOpenChange","args","TaskItemMobile","useDispatch","backgroundColor","autoClose","right","text","left","onPress","element","isCompleted","wrap","time","split","TimeScale","dateArrey","isSameOrBefore","push","add","getTasksForHour","hour","tasksForHour","itemTime","hours","getHours","headlineDate","index","orientation","TasksOnly","TaskItem","setChecked","deleteingInProgess","setDeleteingInProgess","ListGroup","join","placement","descriptions","textDecoration","onEdit","EditOutlined","danger","taskid","deleteTask","DeleteOutlined","sortTaskArrayByParams","b","selestedDates","setSelectedDates","success","getTimeScaleArrey","timeScaleArrey","tomorowTasks","sort","getHeadlineLabel","length","i","timeVal","Number","concat","initialDrewerData","header","minutes","seconds","milliseconds","ToDoBrowser","drawerData","setDrawerData","initialFormValues","setInitialFormValues","ToDoHeaderContainer","bordered","splitTime","closable","onClose","formProps","formPropsCopy","user_id","userId","createNewTask","enableReinitialize","reload","initialized","location","appReducer","taskListAPI","isTaskListLoaded","selectedTasks","setSelectedTasks","backSelectedTasks","taskListReducer","newSelectedTasks","pop","rootReducer","combineReducers","app","store","createStore","applyMiddleware","thunkMiddleware","SubMenu","Menu","MenuBrowser","history","useHistory","theme","menuData","childs","children","to","replace","appLocation","Popover","MenuPopover","mask","overlay","onVisibleChange","onSelect","opt","onLogout","height","padding","marginRight","display","alignItems","MenuMobile","useLocation","show","setShow","initData","forEach","dataItem","pathname","getSelectedMenuItem","selectedMenuItem","setSelectedMenuItem","subMenu","cItem","menuEl","loadingEl","justifyContent","leftContent","src","alt","onLeftClick","preventDefault","rightContent","disabled","LoginForm","Login","remember","block","Orders","NewTaskTreeForm","taskTypes","taskType","setTaskType","task_type","Collapse","Panel","TasksTreeBrowser","dataSource","getTaskTreeItems","deleteTaskList","updateTaskList","renderItem","draggable","time_to_complete","createNewTaskList","onStatusChange","day","zone","parseInt","parent_id","List","TaskTreeItemMobile","taskItem","new_time_to_complete","getTime","onComplet","TasksTreeMobile","initialTimeToComplete","onAdd","parentId","RegisterForm","Register","register","credsToLogin","email","password","AppContainer","compose","withRouter","initializeApp","promise","resultCode","Promise","all","addLocation","instanseCreds","parseQueryString","exact","path","MainApp","params","search","substr","pair","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.31e2ae47.chunk.js","sourcesContent":["// import { userAPI } from \"../../api/userAPI\";\r\n\r\nexport const validateRequired = (value: string) => {\r\n    let errors;\r\n    if (!value) {\r\n        errors = \"Required!\";\r\n    }\r\n    return errors;\r\n}\r\n\r\nexport const validateEmail = (value: string) => {\r\n    let errors;\r\n\r\n    if (!value) {\r\n        errors = \"Required!\";\r\n    } else if (!/^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/.test(value)) {\r\n        errors = \"Invalid email address!\";\r\n    }\r\n\r\n    return errors;\r\n};\r\n\r\nexport const validateAsync = (value: string) => {\r\n    const sleep = () => new Promise(resolve => setTimeout(resolve, 2000));\r\n    return sleep().then(() => {\r\n        if (['admin', 'null', 'god'].includes(value)) {\r\n            return 'Nice try'\r\n        }\r\n    })\r\n}\r\n\r\n// export const validateUserExistense = (value: string) => {\r\n//     //console.log(value)\r\n//     return userAPI.checkUserForExistence(value).then( (result) => {\r\n//         //console.log(result.status)\r\n//         if (result.status !== 404) {\r\n//             return 'Name is bisy'\r\n//         } \r\n//     })\r\n//     //console.log(test)\r\n\r\n// }","import React, { useState, useEffect } from 'react'\r\nimport { isMobile } from \"react-device-detect\"\r\nimport {\r\n    DatePicker,\r\n    Form,\r\n    Input,\r\n    TimePicker,\r\n    Select,\r\n    Checkbox\r\n} from \"antd\"\r\nimport enUs from 'antd-mobile/lib/date-picker/locale/en_US'\r\nimport {\r\n    List,\r\n    InputItem,\r\n    Checkbox as CheckboxMobile,\r\n    TextareaItem,\r\n    Picker,\r\n    DatePicker as DatePickerMobile,\r\n} from 'antd-mobile'\r\n\r\nconst FormItem = Form.Item\r\nconst Option: React.FC<any> = Select.Option\r\nconst CheckboxItem = CheckboxMobile.CheckboxItem\r\nconst { TextArea } = Input;\r\n\r\nconst CreateAntField = (AntComponent: any) => (\r\n    {\r\n        field,\r\n        form,\r\n        hasFeedback,\r\n        label,\r\n        selectOptions,\r\n        submitCount,\r\n        type,\r\n        ...props\r\n    }: any\r\n) => {\r\n\r\n    const touched = form.touched[field.name];\r\n    const submitted = submitCount > 0;\r\n    const hasError = form.errors[field.name];\r\n    const submittedError = hasError && submitted;\r\n    const touchedError = hasError && touched;\r\n\r\n    // type OnInputChangeValueType = React.ChangeEvent<HTMLInputElement> | moment.Moment | Date | string\r\n    // const onInputChange = (value: OnInputChangeValueType, field: any) => {\r\n    const onInputChange = (value: any) => {\r\n        // console.log('value: ', value)\r\n        // console.log('field: ', field)\r\n        // console.log('type: ', type)\r\n        if (value === undefined) {\r\n            if (type === 'select' || type === 'time') {\r\n                form.setFieldValue(field.name, null)\r\n            }\r\n        } else if(value === null) {\r\n            form.setFieldValue(field.name, null)\r\n        } else if (value.target) {\r\n            form.setFieldValue(field.name, value.target.value)\r\n        } else {\r\n            if (type === 'time') {\r\n                // if (value instanceof moment) {\r\n                //     console.log('moment')\r\n                //     form.setFieldValue(field.name, value)\r\n                // } else {\r\n                //     console.log('not moment')\r\n                //     // form.setFieldValue(field.name, moment(value.setSeconds(0)))\r\n                //     form.setFieldValue(field.name, value)\r\n                // }\r\n                form.setFieldValue(field.name, value)\r\n            } else if (Array.isArray(value)) {\r\n                // добавтить проверуку на пустой массив\r\n                form.setFieldValue(field.name, value[0])\r\n            } else {\r\n                form.setFieldValue(field.name, value)\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    const onChange = (value: string | React.ChangeEvent<HTMLInputElement>) => {\r\n        // console.log('onChange: ', value)\r\n        if (typeof value !== \"string\" && value.target.type === 'checkbox') {\r\n            form.setFieldValue(field.name, value.target.checked)\r\n        } else {\r\n            form.setFieldValue(field.name, value)\r\n        }\r\n    }\r\n\r\n    const onBlur = () => form.setFieldTouched(field.name, true);\r\n\r\n    return (\r\n        <FormItem\r\n            label={!isMobile ? label : null}\r\n            hasFeedback={\r\n                (hasFeedback && submitted) || (hasFeedback && touched) ? true : false\r\n            }\r\n            help={submittedError || touchedError ? hasError : false}\r\n            validateStatus={submittedError || touchedError ? \"error\" : \"success\"}\r\n        >\r\n            {isMobile ?\r\n                <MobileComponent\r\n                    AntComponent={AntComponent}\r\n                    onBlur={onBlur}\r\n                    type={type}\r\n                    onInputChange={onInputChange}\r\n                    onChange={onChange}\r\n                    label={label}\r\n                    selectOptions={selectOptions}\r\n                    value={field.value}\r\n                />\r\n                :\r\n                <AntComponent\r\n                    {...field}\r\n                    {...props}\r\n                    allowClear={selectOptions ? \"true\" : \"false\"}\r\n                    onBlur={onBlur}\r\n                    onChange={type ? onInputChange : onChange}\r\n                >\r\n                    {selectOptions &&\r\n                        selectOptions.map((item: any) => <Option title={item.name} value={item.value} key={item.name}>{item.name}</Option>)}\r\n\r\n\r\n                </AntComponent>\r\n            }\r\n\r\n        </FormItem>\r\n    )\r\n}\r\n\r\nexport const AntSelect = !isMobile ? CreateAntField(Select) : CreateAntField(Picker)\r\nexport const AntDatePicker = !isMobile ? CreateAntField(DatePicker) : CreateAntField(DatePickerMobile)\r\nexport const AntInput = !isMobile ? CreateAntField(Input) : CreateAntField(InputItem)\r\nexport const AntInputPassword = !isMobile ? CreateAntField(Input.Password) : CreateAntField(InputItem)\r\nexport const AntTimePicker = !isMobile ? CreateAntField(TimePicker) : CreateAntField(DatePickerMobile)\r\nexport const AntCheckbox = !isMobile ? CreateAntField(Checkbox) : CreateAntField(CheckboxItem)\r\nexport const AntTextArea = !isMobile ? CreateAntField(TextArea) : CreateAntField(TextareaItem)\r\n\r\ntype MobileComponentType = {\r\n    onInputChange: (value: any) => void,\r\n    selectOptions: Array<any>,\r\n    AntComponent: any,\r\n    onBlur: () => void,\r\n    type: 'select' | 'date' | 'text' | 'number' | 'password' | 'time' | 'checkbox' | 'textarea',\r\n    onChange: (value: any) => void,\r\n    label: string,\r\n    value: any\r\n}\r\n\r\n// const MobileComponent: React.FC<any> = (props) => {\r\nconst MobileComponent: React.FC<MobileComponentType> = (props) => {\r\n    const [defaultValue, setValue] = useState(props.type === 'select' ? [props.value] : props.value)\r\n\r\n    useEffect(() => {\r\n        if (props.type === 'select' && props.label === 'task_type') {\r\n            console.log('useEffect parent_id: ',props.value)\r\n        }\r\n\r\n        setValue(props.value)\r\n\r\n    }, [props.value])\r\n\r\n    const onInputChange = (value: any) => {\r\n        setValue(value)\r\n        props.onInputChange(value)\r\n    }\r\n\r\n    const onPickerChange = (value:any) => {\r\n        console.log('onPickerChange: ',defaultValue)\r\n        setValue(value)\r\n    }\r\n\r\n    // const onOk = (value:any) => {\r\n    //     console.log('onOk; ', value)\r\n    //     setValue(value)\r\n    // }\r\n\r\n    type DataType = Array<\r\n        {\r\n            label: string,\r\n            value: string,\r\n            key: string\r\n        }\r\n    >\r\n\r\n    let data: DataType\r\n    if (props.selectOptions !== null && props.selectOptions !== undefined) {\r\n        data = props.selectOptions.map((item: any) => {\r\n            return (\r\n                {\r\n                    label: item.name,\r\n                    value: item.value,\r\n                    key: item.name\r\n                }\r\n            )\r\n        })\r\n    } else {\r\n        data = []\r\n    }\r\n\r\n    // if (props.type === 'select' && props.label === 'task Types') {\r\n    //     console.log('render: ',props.value)\r\n    // }\r\n\r\n    const mode = props.type\r\n    \r\n    return (\r\n        <List>\r\n            <props.AntComponent\r\n                onBlur={props.onBlur}\r\n                type={props.type}\r\n                onChange={props.type ? onInputChange : props.onChange}\r\n                mode={mode}\r\n                defaultValue={defaultValue}\r\n                defaultChecked={defaultValue}\r\n                value={defaultValue}\r\n                key={props.label}\r\n                title={props.label}\r\n                locale={enUs}\r\n                autoHeight\r\n                // autoHeight\r\n                // autoHeight ={props.type === 'textarea' ? true : false}\r\n                // {props.type === 'textarea' ? 'autoHeight' : null}\r\n                className={props.type === 'text' ? 'pl-0' : null}\r\n                data={data}\r\n                cols={1}\r\n                onOk={(v:any) => setValue(v)}\r\n                onPickerChange={onPickerChange}\r\n            >\r\n                <List.Item\r\n                    className=\"pl-0\"\r\n                >\r\n                    {props.label}\r\n                </List.Item>\r\n            </props.AntComponent>\r\n        </List>\r\n    )\r\n}","import React, { ReactNode, useState } from 'react'\r\nimport { Card, Modal } from 'antd'\r\nimport { SettingsModalPropsType } from './SettingsModalContainer'\r\nimport { Form, Field, FormikProps, Formik } from 'formik'\r\nimport { validateRequired } from '../../../utils/Formik/ValidateFields'\r\nimport { AntInput, AntSelect, AntTextArea, AntTimePicker, AntDatePicker, AntCheckbox } from '../../../utils/Formik/CreateAntField'\r\nimport { List } from 'antd-mobile'\r\n\r\nconst zeroTime = new Date()\r\nzeroTime.setHours(0)\r\nzeroTime.setMinutes(0)\r\nzeroTime.setSeconds(0)\r\nzeroTime.setMilliseconds(0)\r\n\r\nconst maxTime = new Date()\r\nmaxTime.setHours(23)\r\nmaxTime.setMinutes(59)\r\nmaxTime.setSeconds(0)\r\nmaxTime.setMilliseconds(0)\r\n\r\nconst settingasInstanse: any = {\r\n        timeScaleInrerval: false,\r\n        completeInrerval: true,\r\n        timeScaleSingle: true,\r\n        completeSingle: true,\r\n        timeStart: zeroTime,\r\n        timeEnd: maxTime,\r\n}\r\n\r\nexport type OwmSettingsModalPropsType = {\r\n    isModalVisible: boolean,\r\n    handleOk: () => void,\r\n    handleCancel: () => void\r\n}\r\n\r\n\r\nconst SettingsModal: React.FC< SettingsModalPropsType > = (props) => {\r\n    const [settings, setSettings] = useState(props.viewSettings !== null ? props.viewSettings : settingasInstanse)\r\n\r\n    const handleSubmit = (values: any) => {\r\n        // console.log(values)\r\n        props.changeSettings('ToDo', values)\r\n        props.handleOk()\r\n    }\r\n\r\n    let settingsBlock: Array<any> = []\r\n\r\n    for (const propName in settings.ToDo) {\r\n        if (Object.prototype.hasOwnProperty.call(settings.ToDo, propName)) {\r\n            const element = settings.ToDo[propName]\r\n            // console.log(propName, element)\r\n            // settingsBlock.push(<FormItem title={propName} data={element}/>)\r\n        }\r\n    }\r\n\r\n    console.log('SettingsModal', props)\r\n\r\n    return (\r\n        <Modal\r\n            title=\"Task display settings\"\r\n            visible={props.isModalVisible}\r\n            // onOk={props.handleOk} \r\n            onOk={props.handleOk}\r\n            onCancel={props.handleCancel}\r\n        >\r\n            <Formik\r\n                initialValues={settingasInstanse}\r\n                // initialValues={{}}\r\n                onSubmit={handleSubmit}\r\n                render={SettingsForm}\r\n            />\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default SettingsModal\r\n\r\n\r\nconst SettingsForm: ((props: FormikProps<{}>) => ReactNode) = (props) => {\r\n    return (\r\n        <Form\r\n            className=\"form-container\"\r\n            onSubmit={props.handleSubmit}\r\n        >\r\n            <List renderHeader={() => 'Single date settings'}>\r\n                <Field\r\n                    component={AntCheckbox}\r\n                    name=\"timeScaleSingle\"\r\n                    label=\"is time scale visible\"\r\n                    submitCount={props.submitCount}\r\n                />\r\n\r\n                <Field\r\n                    component={AntCheckbox}\r\n                    name=\"completeSingle\"\r\n                    label=\"is complete visible\"\r\n                    submitCount={props.submitCount}\r\n                />\r\n            </List>\r\n\r\n            <List renderHeader={() => 'Inrerval date settings'}>\r\n                <Field\r\n                    component={AntCheckbox}\r\n                    name=\"timeScaleInrerval\"\r\n                    label=\"is time scale visible\"\r\n                    submitCount={props.submitCount}\r\n                />\r\n\r\n                <Field\r\n                    component={AntCheckbox}\r\n                    name=\"completeInrerval\"\r\n                    label=\"is complete visible\"\r\n                    submitCount={props.submitCount}\r\n                />\r\n            </List>\r\n            <List renderHeader={() => 'Work day info'}>\r\n                <Field\r\n                    component={AntDatePicker}\r\n                    name=\"timeStart\"\r\n                    type=\"time\"\r\n                    label=\"Start time\"\r\n                    validate={validateRequired}\r\n                    submitCount={props.submitCount}\r\n                    hasFeedback\r\n                />\r\n\r\n                <Field\r\n                    component={AntDatePicker}\r\n                    name=\"timeEnd\"\r\n                    type=\"time\"\r\n                    label=\"End time\"\r\n                    validate={validateRequired}\r\n                    submitCount={props.submitCount}\r\n                    hasFeedback\r\n                />\r\n            </List>\r\n\r\n            <div className=\"submit-container\">\r\n                <button className=\"ant-btn ant-btn-primary\" type=\"submit\">\r\n                    Save\r\n                </button>\r\n            </div>\r\n\r\n        </Form>\r\n    )\r\n}\r\n\r\n\r\n","import axios from 'axios'\r\n\r\nexport const instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://crmapiserver.h1n.ru/api/',\r\n    // baseURL: 'https://81.90.181.175/api/',\r\n    // headers:     {\r\n    //     'X-Auth-Token': localStorage.getItem('remember_token')\r\n    // }\r\n})\r\n\r\nexport enum ResultCodesEnum {\r\n    Success = 0,\r\n    Error = 1\r\n}\r\n\r\nexport type APIResponseType<D = {}, RC = ResultCodesEnum> = {\r\n    data: D\r\n    messages: Array<string>\r\n    resultCode: RC\r\n}\r\n","import {instance, APIResponseType} from \"./api\";\r\n\r\ntype MeResponseDataType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n    // remember_token?: string,\r\n    // user?: any\r\n    // error?: boolean,\r\n    // message?: string\r\n}\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get(`authMe/`+localStorage.getItem('remember_token')).then( (response) => {\r\n            //console.log('login: ', response)\r\n            return response\r\n        })\r\n    },\r\n    login(data: any) {\r\n        return instance.post('login', data)\r\n        .then(response => {\r\n            //console.log('login: ', response)\r\n            if (response.data.remember_token !== null) {\r\n                localStorage.setItem('remember_token', response.data.remember_token);\r\n            } else {\r\n                localStorage.removeItem('remember_token');\r\n            }\r\n            return response.status === 200 ? response : null;\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                //console.log(err.response)\r\n                return err.response\r\n            } else if (err.request) {\r\n                //console.log('request', err.request)\r\n            } else {\r\n                //console.log('anything else: ', err)\r\n            }\r\n            return null\r\n        })\r\n    },\r\n    register(creds: any) {\r\n        return instance.post('register', creds)\r\n        .then(response => {\r\n            //console.log('login: ', response)\r\n            if (response.data.remember_token !== null) {\r\n                localStorage.setItem('remember_token', response.data.token);\r\n            } else {\r\n                localStorage.removeItem('remember_token');\r\n            }\r\n            return response.status === 200 ? response : null;\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                //console.log(err.response)\r\n                return err.response\r\n            } else if (err.request) {\r\n                //console.log('request', err.request)\r\n            } else {\r\n                //console.log('anything else: ', err)\r\n            }\r\n            return null\r\n        })\r\n    }\r\n}","import { act } from \"@testing-library/react\";\r\nimport { authAPI } from \"../api/authAPI\";\r\nimport { BaseThunkType, InferActionsTypes } from \"./store\"\r\n// import {FormAction} from 'redux-form/lib/actions';\r\n\r\ntype InitialStateType = {\r\n    user: UserType | null,\r\n    remember_token: string | null,\r\n    isAuth: boolean\r\n    viewSettings: any\r\n}\r\nlet initialState: InitialStateType = {\r\n    user: null,\r\n    remember_token: null,\r\n    isAuth: false,\r\n    viewSettings: {\r\n        ToDo: {}\r\n    }\r\n}\r\n\r\nconst authReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/AUTH/SET_SETTINGS_DATA':\r\n            console.log(action)\r\n            let viewSettings = {...state.viewSettings}\r\n            viewSettings[action.settingType] = action.settings\r\n            return {...state, viewSettings: viewSettings}\r\n        case 'SN/AUTH/SET_USER_DATA':\r\n            if (action.user !== null) {\r\n                //console.log('1')\r\n                return { ...state, \r\n                            user: action.user, \r\n                            remember_token: action.remember_token, \r\n                            isAuth: true, \r\n                            viewSettings: JSON.parse(action.user.view_settings)\r\n                        }\r\n            } else {\r\n                return initialState;\r\n            }\r\n            \r\n        case 'SN/AUTH/LOGOUT':\r\n            localStorage.removeItem('remember_token');\r\n            return initialState;\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport type UserType = {\r\n    created_at: string\r\n    email: string\r\n    email_verified_at: null | any\r\n    id: number\r\n    name: string\r\n    status: string\r\n    updated_at: string,\r\n    view_settings: any\r\n}\r\nexport const actions = {\r\n    setAuthUserData: (user: UserType | null, remember_token: string | null) => ({ type: 'SN/AUTH/SET_USER_DATA', user, remember_token } as const),\r\n    logout: () => ({type: 'SN/AUTH/LOGOUT'} as const),\r\n    changeSettings: (settingType: string, settings: any) => ({ type: 'SN/AUTH/SET_SETTINGS_DATA', settingType, settings } as const),\r\n}\r\n\r\n// export const getAuthUserData = (): ThunkType => async (dispatch) => {\r\n//     let response = await authAPI.me()\r\n//     //console.log('getAuthUserData', response)\r\n// }\r\n\r\nexport const getAuthUserData = (): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        let response = await authAPI.me()\r\n\r\n        if (response !== null) {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(actions.setAuthUserData(response.data.user, response.data.remember_token))\r\n            } else {\r\n                //console.log(response.data.messages[0])\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport type credsType = {\r\n    email: string,\r\n    password: string,\r\n    remember: boolean\r\n}\r\n\r\nexport const login = (data: credsType): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        let response = await authAPI.login(data)\r\n        if (response) {\r\n            //console.log(response)\r\n            if (response.status === 200) {\r\n                dispatch(actions.setAuthUserData(response.data.user, response.data.remember_token))\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport const register = (creds: any): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        await authAPI.register(creds)\r\n        //console.log(response)\r\n        const credsToLogin: credsType = {\r\n            email: creds.email,\r\n            password: creds.password,\r\n            remember: creds.remember\r\n        }\r\n        dispatch(login(credsToLogin))\r\n    }\r\n}\r\n\r\nexport default authReducer;\r\n\r\n// export type InitialStateType = typeof initialState;\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType< ActionsTypes>\r\n\r\n","import {connect} from 'react-redux'\r\nimport SettingsModal, { OwmSettingsModalPropsType } from './SettingsModal'\r\nimport { AppStateType } from '../../../redux/store'\r\nimport { actions } from './../../../redux/authReducer'\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    // getTaskList: (start_date: string, end_date:string)=>void\r\n    changeSettings: (settingType: string, settings: any)=> void\r\n    // actions: any\r\n}\r\n\r\nexport type SettingsModalPropsType = MapPropsType & MapDispatchPropsType & OwmSettingsModalPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    // console.log(state)\r\n    return {\r\n        viewSettings: state.auth.viewSettings\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwmSettingsModalPropsType, AppStateType>(mapStateToProps, \r\n    {changeSettings: actions.changeSettings} ) \r\n    ( SettingsModal )\r\n    \r\n\r\n","import React, { useState, useEffect } from 'react'\r\nimport { DatePicker, Checkbox, Button } from 'antd'\r\nimport { FileAddOutlined, SettingOutlined } from '@ant-design/icons'\r\nimport { CheckboxChangeEvent } from 'antd/lib/checkbox'\r\nimport {RangeValue} from '../../../Types/types'\r\nimport { ToDoHeaderPropsType } from './ToDoHeaderContainer'\r\nimport moment from 'moment'\r\n\r\nconst { RangePicker } = DatePicker\r\n\r\nexport type OwnToDoHeaderPropsType = {\r\n    showDrawer: () => void,\r\n    showModal: () => void,\r\n}\r\n\r\nconst ToDoHeader: React.FC<ToDoHeaderPropsType> = (props) => {\r\n    const [isInterval, setIsInterval] = useState(false)\r\n    const [dates, setDates] = useState<{startDate: moment.Moment, endDate: moment.Moment}>({startDate: moment(), endDate: moment()})\r\n\r\n    useEffect(() => {\r\n        if ( \r\n            !props.dateInterval.startDate.isSame(dates.startDate.format('YYYY-MM-DD'), \"day\" ) ||\r\n            !props.dateInterval.endDate.isSame(dates.endDate.format('YYYY-MM-DD'), \"day\" )\r\n        ) {\r\n            props.setIsInterval(isInterval, dates)\r\n        }\r\n        \r\n    }, [isInterval, dates, props])\r\n\r\n\r\n    const onDateTypeChange = (e: CheckboxChangeEvent) => {\r\n        if (!e.target.checked) {\r\n            setDates({\r\n                startDate: dates.startDate,\r\n                endDate: dates.startDate\r\n            })\r\n        }\r\n        setIsInterval(e.target.checked)\r\n    }\r\n\r\n    const onDateRangeChange = (values: RangeValue<moment.Moment>, formatString: [string, string]): void => {\r\n        if (values !== null && values[0] !== null && values[1] !== null ) {\r\n            setDates({\r\n                startDate: values[0],\r\n                endDate: values[1],\r\n            })\r\n        }\r\n        \r\n    }\r\n\r\n    const onDateChange = (value: moment.Moment | null, dateString: string):void => {\r\n        if (value !== null) {\r\n            setDates({\r\n                startDate: value,\r\n                endDate: value,\r\n            })\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"row w-100\" >\r\n            <div className=\"col-12 col-md-9 col-lg-9 col-xl-7 w-100\">\r\n                <div className=\"d-none d-sm-inline\">\r\n                    <label >{isInterval ? \"Date interval\" : \"Date\"}:</label>\r\n                </div>\r\n\r\n                <div className=\"d-none d-inline\">\r\n                    {isInterval ?\r\n                        <RangePicker\r\n                            onChange={onDateRangeChange}\r\n                            defaultValue={[props.dateInterval.startDate, props.dateInterval.endDate]}\r\n                            value = {[props.dateInterval.startDate, props.dateInterval.endDate]}\r\n                            format='DD-MM-YYYY'\r\n                            style={{ marginLeft: 10 }}\r\n                        />\r\n                        :\r\n                        <DatePicker\r\n                            onChange={onDateChange}\r\n                            defaultValue={props.dateInterval.startDate}\r\n                            format='DD-MM-YYYY'\r\n                            style={{ marginLeft: 10 }}\r\n                        />\r\n                    }\r\n                </div>\r\n            </div>\r\n            <div className=\"col-12 col-md-3 col-lg-3 col-xl-2 m-2 m-md-0\" >\r\n                <Checkbox className=\"ml-3\" onChange={onDateTypeChange}>Date interval</Checkbox>\r\n            </div>\r\n            <div className=\"col-12 col-md-12 col-lg-4 col-xl-3 mt-lg-2\">\r\n                <Button\r\n                    type=\"primary\"\r\n                    shape=\"round\"\r\n                    icon={\r\n                        <div className=\"d-flex flex-wrap align-content-start\">\r\n                            <FileAddOutlined style={{ fontSize: '18px' }} />\r\n                            <span className=\"ml-1\" style={{ fontSize: '14px' }}>Add</span>\r\n                        </div>}\r\n                    style={{ marginLeft: 10 }}\r\n                    onClick={props.showDrawer}\r\n                />\r\n\r\n                <Button className=\"\"\r\n                    type=\"primary\"\r\n                    shape=\"round\"\r\n                    style={{ marginLeft: 10 }}\r\n                    onClick={props.showModal}\r\n                    icon={\r\n                        <div className=\"d-flex flex-wrap align-content-start\">\r\n                            <SettingOutlined style={{ fontSize: '18px' }} />\r\n                            <span className=\"ml-1\" style={{ fontSize: '14px' }}>Settings</span>\r\n                        </div>} \r\n                    />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ToDoHeader","import { NewTaskDataType, TaskType } from '../Types/types'\r\nimport {instance} from './api'\r\n\r\nexport type TaskListType = {\r\n    Tasks: Array<TaskType>\r\n}\r\n\r\nexport const taskAPI = {\r\n    createNewTask(values: NewTaskDataType) {\r\n        return instance.post<TaskListType>(`tasks`, values)\r\n        .then(response => {\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                return err.response\r\n            } else if (err.request) {\r\n                //console.log('request', err.request)\r\n            } else {\r\n                //console.log('anything else: ', err)\r\n            }\r\n            return null\r\n        })\r\n    },\r\n\r\n    getTaskList(values: getTaskListValuesType) {\r\n        instance.defaults.headers.common['X-Auth-Token'] = localStorage.getItem('remember_token')\r\n        // .headers = {\r\n        //     'X-Auth-Token': localStorage.getItem('remember_token')\r\n        // }\r\n        return instance.post<TaskListType>(`tasks/part`, values)\r\n        .then(response => {\r\n            //console.log(response)\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                //console.log('request', err.request)\r\n                return err.response\r\n            } else if (err.request) {\r\n                //console.log('request', err.request)\r\n            } else {\r\n                //console.log('anything else: ', err)\r\n            }\r\n            return null\r\n        })\r\n    },\r\n\r\n    deleteTask(taskId: number) {\r\n        return instance.delete<TaskListType>(`tasks/${taskId}`).then(response => {\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                return err.response\r\n            } else if (err.request) {\r\n                //console.log('request', err.request)\r\n            } else {\r\n                //console.log('anything else: ', err)\r\n            }\r\n            return null\r\n        })\r\n    }, \r\n\r\n    updateTask(values: any, taskId: number) {\r\n        return instance.put<any>(`tasks/${taskId}`, values)\r\n        .then(response => {\r\n            console.log(response)\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                console.log(err.response)\r\n                return err.response\r\n            } else if (err.request) {\r\n                //console.log('request', err.request)\r\n            } else {\r\n                //console.log('anything else: ', err)\r\n            }\r\n            return null\r\n        })\r\n    }\r\n}\r\n\r\nexport type getTaskListValuesType = {\r\n    start_date: string, \r\n    end_date: string\r\n}","import { Dispatch } from 'redux'\r\nimport { taskAPI, TaskListType } from '../api/taskApi'\r\nimport { NewTaskDataType, TaskType } from '../Types/types'\r\nimport {BaseThunkType, InferActionsTypes} from './store'\r\nimport moment from 'moment'\r\n\r\nexport type InitialStateType = {\r\n    taskList: null | Array<TaskType>,\r\n    taskListIsFetching: boolean,\r\n    taskSaveStatus: 'no' | 'inProgress' | 'success' | 'error'\r\n    errorMessage: null | string,\r\n    isInterval: boolean,\r\n    dateInterval: {\r\n        startDate: moment.Moment,\r\n        endDate: moment.Moment\r\n    }\r\n}\r\n\r\nlet initialState:InitialStateType = {\r\n    taskList: null,\r\n    taskListIsFetching: false,\r\n    taskSaveStatus: 'no',\r\n    errorMessage: null,\r\n    isInterval: false,\r\n    dateInterval: {\r\n        startDate: moment(),\r\n        endDate: moment()\r\n    }\r\n}\r\n\r\nconst taskReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n    \r\n    switch (action.type) {\r\n        case 'SN/TASK/EDIT_TASK_LIST':\r\n            if (state.taskList !== null) {\r\n            const stateCopy = state.taskList.map( item => {\r\n                if (action.task.id === item.id) {\r\n                    return action.task\r\n                } else {\r\n                    return item\r\n                }\r\n            })\r\n            return {...state, taskList: stateCopy}\r\n            } else {\r\n                return state\r\n            }\r\n\r\n        case 'SN/TASK/SET_TASK_LIST':\r\n            return {...state, taskList: action.taskList.Tasks}\r\n\r\n        case 'SN/TASK/SET_TASK_SAVE_STATUS':\r\n            return {...state, taskSaveStatus: action.taskSaveStatus}\r\n\r\n        case 'SN/TASK/SET_ERROR_MESSAGE':\r\n            return {...state, errorMessage: action.message}\r\n\r\n        case 'SN/TASK/SET_TASK_LIST_IS_FETCHING':\r\n            return {...state, taskListIsFetching: action.isFetchingValue}\r\n\r\n        case 'SN/TASK/SET_IS_INTERVAL':\r\n            console.log('SET_IS_INTERVAL')\r\n            const dateInterval = {\r\n                startDate: action.date.startDate,\r\n                endDate: action.date.endDate\r\n            }\r\n            return {...state, isInterval: action.isInterval, dateInterval }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    setTaskList: (taskList: TaskListType) => ({ type: 'SN/TASK/SET_TASK_LIST', taskList } as const),\r\n    setTaskSaveStatus: (taskSaveStatus: 'no' | 'inProgress' | 'success' | 'error') => ({ type: 'SN/TASK/SET_TASK_SAVE_STATUS', taskSaveStatus } as const),\r\n    setErrorMessage: (message: string | null) => ({type: 'SN/TASK/SET_ERROR_MESSAGE', message} as const),\r\n    setTaskListIsFetching: (isFetchingValue: boolean) => ({type: 'SN/TASK/SET_TASK_LIST_IS_FETCHING', isFetchingValue} as const),\r\n    setIsInterval: (isInterval: boolean, date: {startDate: moment.Moment, endDate: moment.Moment}) => ({type: 'SN/TASK/SET_IS_INTERVAL', isInterval, date} as const),\r\n    editTaskList: (task: TaskType) => ({type: 'SN/TASK/EDIT_TASK_LIST', task} as const),\r\n}\r\n\r\nexport const createNewTask = (values: NewTaskDataType, reload:boolean = true): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        dispatch(actions.setTaskSaveStatus('inProgress'))\r\n\r\n        let response = await taskAPI.createNewTask(values)\r\n\r\n        if (response && response.status && response.status === 200) {\r\n            if (reload) {\r\n                const state = getState()\r\n                const startDate = state.task.dateInterval.startDate.format('YYYY-MM-DD')\r\n                const endDate = state.task.dateInterval.endDate.format('YYYY-MM-DD')\r\n                dispatch(getTaskList(startDate, endDate))\r\n            }\r\n            dispatch(actions.setTaskSaveStatus('success'))\r\n            dispatch(actions.setTaskSaveStatus('no'))\r\n        } else {\r\n            if (response && response.data) {\r\n                dispatch(actions.setErrorMessage(response.data.message))\r\n                dispatch(actions.setTaskSaveStatus('error'))\r\n                dispatch(actions.setTaskSaveStatus('no'))\r\n                dispatch( actions.setErrorMessage(null) )\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport const getTaskList = (startDate: string, endDate:string): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        dispatch(actions.setTaskListIsFetching(true))\r\n\r\n        const values = {start_date: startDate, end_date: endDate}\r\n        let response = await taskAPI.getTaskList(values)\r\n\r\n        if (response !== undefined && response !== null) {\r\n            console.log(response)\r\n            dispatch(actions.setTaskList(response.data))\r\n        } else {\r\n            // add error message\r\n        }\r\n        dispatch(actions.setTaskListIsFetching(false))\r\n    }\r\n}\r\n\r\nexport const deleteTask = (taskid: number, startDate: string, endDate:string): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        let response = await taskAPI.deleteTask(taskid)\r\n\r\n        if (response !== null) {\r\n            dispatch(actions.setErrorMessage('Task deletion was successful'))\r\n            dispatch(getTaskList(startDate, endDate))\r\n            dispatch( actions.setErrorMessage(null) )\r\n        }\r\n    }\r\n}\r\n\r\nexport const updateTask = (values: any, taskId: number): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        let response = await taskAPI.updateTask(values, taskId)\r\n        console.log(response)\r\n        dispatch(actions.editTaskList(response.data[0]))\r\n    }\r\n}\r\n\r\nexport default taskReducer\r\n\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsTypes>\r\nexport type DispatchType = Dispatch<ActionsTypes>\r\n","import React, { useState } from 'react'\r\nimport { ToDoHeaderPropsType } from './ToDoHeaderContainer'\r\nimport { Button, DatePicker, List, Switch } from 'antd-mobile'\r\nimport enUs from 'antd-mobile/lib/date-picker/locale/en_US'\r\nimport moment from \"moment\"\r\n\r\nexport type OwnToDoHeaderPropsType = {\r\n    showDrawer: () => void,\r\n    showModal: () => void,\r\n}\r\n\r\nconst ToDoHeaderMobile: React.FC<ToDoHeaderPropsType> = (props) => {\r\n    const [isInterval, setIsInterval] = useState(false)\r\n\r\n    const onIntervalChange = (e: boolean) => {\r\n        if (e) {\r\n            props.setIsInterval( !isInterval, {startDate: props.dateInterval.startDate, endDate: props.dateInterval.endDate })\r\n        } else {\r\n            props.setIsInterval( !isInterval, {startDate: props.dateInterval.startDate, endDate: props.dateInterval.startDate })\r\n        }\r\n        \r\n        setIsInterval(!isInterval)\r\n    }\r\n\r\n    const onStartChange = (value: Date) => {\r\n        console.log(value)\r\n        console.log(props)\r\n        if (!isInterval) {\r\n            props.setIsInterval(isInterval, {startDate: moment(value), endDate: moment(value) })\r\n        } else {\r\n            props.setIsInterval(isInterval, {startDate: moment(value), endDate: props.dateInterval.endDate })\r\n        }\r\n        \r\n    }\r\n\r\n    const onEndChange = (value: Date) => {\r\n        props.setIsInterval(isInterval, {startDate: props.dateInterval.startDate, endDate: moment(value) })\r\n    }\r\n\r\n    return (\r\n        <div className=\"w-100\">\r\n            <DatePicker\r\n                locale={enUs}\r\n                mode=\"date\"\r\n                value={props.dateInterval.startDate.toDate()}\r\n                onChange={onStartChange}\r\n            >\r\n                <List.Item className=\"w-100\">\r\n                {isInterval ? 'Start:' : 'Date:'}\r\n                </List.Item>\r\n            </DatePicker>\r\n\r\n            {isInterval ?\r\n                <DatePicker\r\n                    locale={enUs}\r\n                    mode=\"date\"\r\n                    value={props.dateInterval.endDate.toDate()}\r\n                    onChange={onEndChange}\r\n                >\r\n                    <List.Item >End:</List.Item>\r\n                </DatePicker>\r\n                :\r\n                null\r\n            }\r\n\r\n            <List.Item\r\n                extra={\r\n                        <Switch\r\n                            checked={isInterval}\r\n                            onChange={onIntervalChange}\r\n                        />\r\n                }\r\n                >\r\n                Date interval\r\n            </List.Item>\r\n\r\n            <Button\r\n                inline\r\n                size=\"small\"\r\n                className=\"ml-3\"\r\n                // style={{ marginRight: '4px' }} \r\n                onClick={()=>{props.showDrawer()}}\r\n                type=\"primary\"\r\n            >\r\n                Add\r\n            </Button>\r\n            <Button\r\n                inline\r\n                size=\"small\"\r\n                className=\"ml-3\"\r\n                // style={{ marginRight: '4px' }} \r\n                onClick={()=>{props.showModal()}}\r\n                type=\"primary\"\r\n            >\r\n                Settings\r\n            </Button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ToDoHeaderMobile","import {connect} from 'react-redux'\r\nimport ToDoHeader, { OwnToDoHeaderPropsType } from './ToDoHeader'\r\nimport {actions} from '../../../redux/taskReducer'\r\nimport { AppStateType } from '../../../redux/store'\r\nimport { isMobile } from 'react-device-detect'\r\nimport ToDoHeaderMobile from './ToDoHeaderMobile'\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    setIsInterval: (isInterval: boolean, date: {startDate: moment.Moment, endDate: moment.Moment}) => {\r\n        type: \"SN/TASK/SET_IS_INTERVAL\",\r\n        isInterval: boolean,\r\n        date: {startDate: moment.Moment, endDate: moment.Moment}\r\n    }\r\n}\r\n\r\nexport type ToDoHeaderPropsType = MapPropsType & MapDispatchPropsType & OwnToDoHeaderPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        dateInterval: state.task.dateInterval\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnToDoHeaderPropsType, AppStateType>(mapStateToProps, \r\n    {setIsInterval: actions.setIsInterval}) \r\n    (isMobile ? ToDoHeaderMobile : ToDoHeader)\r\n    \r\n\r\n","import { Form, Field, FormikProps } from 'formik'\r\nimport React, { ReactNode, useState, useEffect } from 'react'\r\nimport { AntInput, AntSelect, AntTextArea, AntTimePicker, AntDatePicker } from '../../../utils/Formik/CreateAntField'\r\nimport { validateRequired } from '../../../utils/Formik/ValidateFields'\r\n\r\n\r\nconst ToDoForm: ((props: FormikProps<{}>) => ReactNode) = (props) => {\r\n    // console.log('!!!!!!!!!! ToDoForm')\r\n    return (\r\n        <Form\r\n            className=\"form-container\"\r\n            onSubmit={props.handleSubmit}\r\n        >\r\n            <Field\r\n                component={AntInput}\r\n                name=\"name\"\r\n                type=\"text\"\r\n                label=\"Name\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n\r\n            <Field\r\n                component={AntDatePicker}\r\n                name=\"date\"\r\n                type=\"date\"\r\n                label=\"Task date\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                // hasFeedback\r\n            />\r\n\r\n            <Field\r\n                component={AntTimePicker}\r\n                name=\"time\"\r\n                type=\"time\"\r\n                label=\"Task time\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                // hasFeedback\r\n            />\r\n\r\n            <Field\r\n                component={AntTextArea}\r\n                name=\"descriptions\"\r\n                type=\"text\"\r\n                label=\"Descriptions\"\r\n                // validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n            // hasFeedback\r\n            />\r\n\r\n            <div className=\"submit-container\">\r\n                <button className=\"ant-btn ant-btn-primary\" type=\"submit\">\r\n                    Save\r\n                </button>\r\n            </div>\r\n\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default ToDoForm","import { List, Card, Drawer, WhiteSpace, WingBlank, SwipeAction } from 'antd-mobile'\r\nimport { Formik } from 'formik'\r\nimport React, { useEffect, useState } from 'react'\r\nimport SettingsModal from './Settings/SettingsModalContainer'\r\nimport ToDoHeader from './ToDoHeader/ToDoHeaderContainer'\r\nimport { ToDoListPropsType } from './ToDoListContainer'\r\nimport ToDoForm from './ToDoForm/ToDoForm'\r\n// import TimeScale from './../TimeScale/TimeScaleContainer'\r\nimport TaskItem from './../TimeScale/TaskItem/TaskItemContainer'\r\nimport { useDispatch } from 'react-redux'\r\nimport moment from 'moment'\r\nimport { TaskType } from '../../Types/types'\r\nimport { Divider } from 'antd'\r\n\r\n\r\nconst ToDoMobile: React.FC<ToDoListPropsType> = (props) => {\r\n    useEffect(() => {\r\n        // console.log('useEffect')\r\n        if (props.taskList === null) {\r\n            props.getTaskList(props.dateInterval.startDate.format('YYYY-MM-DD'), props.dateInterval.endDate.format('YYYY-MM-DD'))\r\n        }\r\n    }, [props.taskList])\r\n\r\n    useEffect(() => {\r\n        props.getTaskList(props.dateInterval.startDate.format('YYYY-MM-DD'), props.dateInterval.endDate.format('YYYY-MM-DD'))\r\n    }, [props.dateInterval])\r\n\r\n    useEffect(() => {\r\n        if (props.isInterval) {\r\n            setIsTimeScaleVisible(props.viewSettings.ToDo.timeScaleInrerval)\r\n        } else {\r\n            setIsTimeScaleVisible(props.viewSettings.ToDo.timeScaleSingle)\r\n        }\r\n        console.log('useEffect.isTimeScaleVisible=', props.viewSettings.ToDo.timeScaleSingle)\r\n    }, [props.isInterval, props.viewSettings])\r\n\r\n    const [visible, setVisible] = useState(false)\r\n    const [isModalVisible, setIsModalVisible] = useState(false)\r\n    // const [initialFormValues, setInitialFormValues] = useState()\r\n    const [isTimeScaleVisible, setIsTimeScaleVisible] = useState(props.viewSettings.ToDo.timeScaleSingle)\r\n\r\n    const showDrawer = (): void => {\r\n        setVisible(!visible)\r\n    }\r\n\r\n    const showModal = () => {\r\n        setIsModalVisible(true)\r\n    }\r\n\r\n    const handleOk = () => {\r\n        setIsModalVisible(false)\r\n    }\r\n\r\n    const handleCancel = () => {\r\n        setIsModalVisible(false)\r\n    }\r\n\r\n    const handleSubmit = (values: any) => {\r\n        console.log('handleSubmit')\r\n    }\r\n\r\n    const onAdd = (args: any) => {\r\n        console.log('on add')\r\n        setVisible(!visible)\r\n    }\r\n\r\n    console.log('ToDoMobile: ', props.taskList)\r\n\r\n    if (props.taskList !== null) {\r\n        return (\r\n            <WingBlank size=\"lg\">\r\n                <WhiteSpace size=\"lg\" />\r\n                <Card>\r\n                    <Card.Header\r\n                        title={<ToDoHeader\r\n                            showDrawer={showDrawer}\r\n                            showModal={showModal}\r\n                        />}\r\n                    >\r\n                    </Card.Header>\r\n\r\n                    <SettingsModal\r\n                        isModalVisible={isModalVisible}\r\n                        handleOk={handleOk}\r\n                        handleCancel={handleCancel}\r\n                    />\r\n\r\n                    <Drawer\r\n                        className=\"my-drawer\"\r\n                        style={{ minHeight: document.documentElement.clientHeight }}\r\n                        // enableDragHandle\r\n                        contentStyle={{ color: '#A6A6A6', textAlign: 'center', paddingTop: 0, width: \"100%\" }}\r\n                        sidebar={\r\n                            <div className=\"mt-4\">\r\n                                <Formik\r\n                                    // initialValues={initialFormValues}\r\n                                    initialValues={{}}\r\n                                    onSubmit={handleSubmit}\r\n                                    render={ToDoForm}\r\n                                />\r\n                            </div>\r\n                        }\r\n                        open={visible}\r\n                        onOpenChange={onAdd}\r\n                    >\r\n                        <List>\r\n                            {\r\n                                isTimeScaleVisible ?\r\n                                    <TimeScale taskList={props.taskList} dateInterval={props.dateInterval} />\r\n                                    :\r\n                                    <TasksOnly taskList={props.taskList} dateInterval={props.dateInterval} />\r\n                            }\r\n                        </List>\r\n\r\n                    </Drawer>\r\n                </Card>\r\n            </WingBlank>\r\n        )\r\n    } else {\r\n        return <div>null</div>\r\n    }\r\n}\r\n\r\nexport default ToDoMobile\r\n\r\nconst TaskItemMobile: React.FC<any> = (props) => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const onSubTask = () => { }\r\n    const onEdit = () => { }\r\n\r\n    const onItemOpen = () => {\r\n        // dispatch(actions.setSelectedTasks(props.element.id));\r\n    }\r\n\r\n    const onComplet = () => { }\r\n    // console.log(props)\r\n    return (\r\n        <SwipeAction\r\n            style={{ backgroundColor: 'gray' }}\r\n            autoClose\r\n            right={[\r\n                // {\r\n                //     text: 'SubTask',\r\n                //     onPress: () => { onSubTask() },\r\n                //     style: { backgroundColor: 'green', color: 'white' },\r\n                // },\r\n                {\r\n                    text: 'Delete',\r\n                    // onPress: () => props.deleteTaskList(props.element.id),\r\n                    style: { backgroundColor: '#F4333C', color: 'white' },\r\n                },\r\n            ]}\r\n            left={[\r\n                {\r\n                    text: 'Edit',\r\n                    onPress: () => { onEdit() },\r\n                    style: { backgroundColor: '#108ee9', color: 'white' },\r\n                },\r\n                {\r\n                    text: props.element.isCompleted ? 'Not Done' : 'Done',\r\n                    onPress: () => onComplet(),\r\n                    style: { backgroundColor: 'green', color: 'white' },\r\n                },\r\n            ]}\r\n        // onOpen={() => console.log('global open')}\r\n        // onClose={() => console.log('global close')}\r\n        >\r\n\r\n            <List.Item\r\n                onClick={onItemOpen}\r\n                key={props.element.id}\r\n                wrap\r\n            >\r\n                <div className=\"w-100 row \" key={props.element.id}>\r\n                    <div className=\"col-2 \">\r\n                        <span className=\"ml-3\">{props.element.time.split(/:/)[0] + ':' + props.element.time.split(/:/)[1]}</span>\r\n                    </div>\r\n                    <div className=\"col-10\">\r\n                        {props.element.isCompleted ?\r\n                            <span className=\"text-black-50 text-break ml-3\">{props.element.name}</span>\r\n                            :\r\n                            <span className=\"text-break ml-3\">{props.element.name}</span>\r\n                        }\r\n                    </div>\r\n                </div>\r\n\r\n            </List.Item>\r\n\r\n        </SwipeAction>\r\n    )\r\n}\r\n\r\ntype TimeScaleType = {\r\n    taskList: Array<TaskType> | null\r\n    dateInterval: {\r\n        startDate: moment.Moment,\r\n        endDate: moment.Moment,\r\n    }\r\n}\r\nconst TimeScale: React.FC<TimeScaleType> = (props) => {\r\n    const [startHour, setStartHour] = useState<number>(0)\r\n\r\n    let startDate = moment(props.dateInterval.startDate)\r\n    // startDate.add(-2, 'days')\r\n\r\n    // console.log( moment(startDate.format('YYYY-MM-DD')).isSameOrBefore( moment(props.dateInterval.endDate.format('YYYY-MM-DD')) ) )\r\n    // console.log( startDate.isAfter(props.dateInterval.endDate) )\r\n\r\n    let dateArrey: any = []\r\n\r\n    // console.log('startDate: ', startDate.format('YYYY-MM-DD'))\r\n    // console.log('endDate: ', props.dateInterval.endDate.format('YYYY-MM-DD'))\r\n    // console.log('startDate props: ', props.dateInterval.startDate.format('YYYY-MM-DD'))\r\n\r\n\r\n\r\n    while (moment(startDate.format('YYYY-MM-DD')).isSameOrBefore(moment(props.dateInterval.endDate.format('YYYY-MM-DD')))) {\r\n        // console.log('1')\r\n        dateArrey.push(moment(startDate))\r\n        startDate.add(1, 'days')\r\n    }\r\n    // console.log(dateArrey)\r\n\r\n    const getTasksForHour = (date: string, hour: number) => {\r\n        let tasksForHour: Array<any> = []\r\n        if (props.taskList !== null) {\r\n            tasksForHour = props.taskList.map(item => {\r\n                if (item.date === date) {\r\n                    let itemTime = item.time.split(':')[0]\r\n                    // console.log(moment().hours(hour).format('HH'), ' === ', itemTime, moment().hours(hour).format('HH') === itemTime)\r\n                    if (moment().hours(hour).format('HH') === itemTime) {\r\n                        return <TaskItemMobile element={item} />\r\n                    }\r\n                }\r\n            })\r\n        }\r\n        // console.log(tasksForHour)\r\n        return tasksForHour\r\n\r\n    }\r\n\r\n    const getHours = (headlineDate: string) => {\r\n        let hours: any = []\r\n        for (let index = 8; index < 24; index++) {\r\n            hours.push(\r\n                <>\r\n                    <Divider key={index + 'to' + headlineDate} orientation=\"left\">\r\n                        {index <= 9 ? '0' : null}{index}:00\r\n                </Divider>\r\n                    {getTasksForHour(headlineDate, index)}\r\n                </>\r\n            )\r\n        }\r\n        return hours\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {\r\n                dateArrey.map((date: moment.Moment) => {\r\n                    return (\r\n                        <>\r\n                            <h3>{date.format('DD MMMM')}</h3>\r\n                            {getHours(date.format('YYYY-MM-DD'))}\r\n                        </>\r\n                    )\r\n                })\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nconst TasksOnly: React.FC<TimeScaleType> = (props) => {\r\n\r\n    const startDate = moment(props.dateInterval.startDate)\r\n    let dateArrey: Array<moment.Moment> = []\r\n    while (moment(startDate.format('YYYY-MM-DD')).isSameOrBefore(moment(props.dateInterval.endDate.format('YYYY-MM-DD')))) {\r\n        dateArrey.push(moment(startDate))\r\n        startDate.add(1, 'days')\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {dateArrey.map((date: moment.Moment) => {\r\n                return (\r\n                    <>\r\n                        <h3>{date.format('DD MMMM')}</h3>\r\n                        {props.taskList?.map(task => {\r\n                            if (task.date === date.format('YYYY-MM-DD')) {\r\n                                return <TaskItemMobile element={task} />\r\n                            }\r\n                        })}\r\n                    </>\r\n                )\r\n            })}\r\n        </>\r\n    )\r\n}","import React, { useState } from 'react'\r\nimport { Col, Row, Checkbox, Tooltip, Button, Spin } from 'antd'\r\nimport { CheckboxChangeEvent } from 'antd/lib/checkbox'\r\nimport { ListGroup } from 'react-bootstrap'\r\nimport { TaskType } from '../../../Types/types'\r\nimport { DeleteOutlined, EditOutlined } from '@ant-design/icons'\r\nimport { TaskItemPropsType } from './TaskItemContainer'\r\n\r\nexport type OwnTaskItemPropsType = {\r\n    element: TaskType,\r\n    onEdit: (value:any)=>void\r\n}\r\n\r\nconst TaskItem: React.FC<TaskItemPropsType> = (props) => {\r\n    // type PropsElementType = typeof props.element.isCompleted\r\n    const [checked, setChecked] = useState(props.element.isCompleted === 1 ? true : false)\r\n    const [deleteingInProgess, setDeleteingInProgess] = useState(false)\r\n\r\n    const onisCompletedChange = (e: CheckboxChangeEvent) => {\r\n        setChecked(!checked)\r\n        const values = { isCompleted: e.target.checked }\r\n        props.updateTask(values, props.element.id)\r\n    }\r\n\r\n    const onEdit = (e: any) => {\r\n        props.onEdit(e)\r\n    }\r\n\r\n    const deleteTask: (taskid: number) => void = (taskid) => {\r\n        setDeleteingInProgess(true)\r\n        props.deleteTask(taskid, props.dateInterval.startDate.format('YYYY-MM-DD'), props.dateInterval.endDate.format('YYYY-MM-DD'))\r\n    }\r\n\r\n    return (\r\n        <ListGroup.Item action className=\"\">\r\n            <Row className=\"px-0 ml-0 ml-sm-5\">\r\n                <Col className=\"mx-2\">\r\n                    <Checkbox \r\n                        // checked={props.element.isCompleted === 1 ? true : false} \r\n                        onChange={onisCompletedChange} \r\n                        checked={checked}\r\n                        />\r\n                </Col>\r\n                <Col className=\"mx-2\">\r\n                    {props.element.time.split(':', 2).join(':')}\r\n                </Col>\r\n                <Col className=\"mx-2\">\r\n                    <Tooltip key={props.element.id} placement=\"topLeft\" title={props.element.descriptions}>\r\n                        <span\r\n                            style={{ textDecoration: checked ? 'line-through' : '' }}\r\n                            // className=\"text-break\"\r\n                        >\r\n                            {props.element.name}\r\n                        </span>\r\n                    </Tooltip>\r\n                </Col>\r\n                <Col className=\"mr-auto ml-0 mr-sm-2 ml-sm-auto\">\r\n                    <Button className=\"\"\r\n                        type=\"primary\"\r\n                        shape=\"circle\"\r\n                        size=\"small\"\r\n                        style={{ marginLeft: 10 }}\r\n                        onClick={()=>{onEdit(props.element)}}\r\n                        icon={\r\n                            <div className=\"d-flex flex-wrap align-content-start\">\r\n                                <EditOutlined className=\"ml-1\" style={{ fontSize: '14px' }} />\r\n                            </div>\r\n                        }\r\n                    />\r\n\r\n                    {!deleteingInProgess ? \r\n                    <Button \r\n                        danger\r\n                        type=\"primary\"\r\n                        shape=\"circle\"\r\n                        size=\"small\"\r\n                        style={{ marginLeft: 10 }}\r\n                        onClick={() => { deleteTask(props.element.id) }}\r\n                        icon={\r\n                            <div className=\"d-flex flex-wrap align-content-start\">\r\n                                <DeleteOutlined className=\"ml-1\" style={{ fontSize: '14px' }} />\r\n                            </div>\r\n                        }\r\n                    />\r\n                    :\r\n                    <Spin key=\"spin\" size=\"small\" />\r\n                    }\r\n                </Col>\r\n            </Row>\r\n\r\n        </ListGroup.Item>\r\n    )\r\n}\r\n\r\nexport default TaskItem\r\n","import {connect} from 'react-redux'\r\nimport TaskItem, { OwnTaskItemPropsType } from './TaskItem'\r\nimport {deleteTask, getTaskList, updateTask} from './../../../redux/taskReducer'\r\nimport {AppStateType} from '../../../redux/store'\r\n\r\nexport type MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype DispatchPropsType = {\r\n    deleteTask: (taskid: number, startDate: string, endDate: string) => void\r\n    getTaskList: (startDate: string, endDate: string) => void,\r\n    updateTask: (values: any, taskId: number) => void,\r\n}\r\n\r\nexport type TaskItemPropsType = MapPropsType & DispatchPropsType & OwnTaskItemPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        dateInterval: state.task.dateInterval,\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, DispatchPropsType, OwnTaskItemPropsType, AppStateType>(mapStateToProps, \r\n    {deleteTask, getTaskList, updateTask}) \r\n    (TaskItem)","import { TaskType } from \"../Types/types\"\r\n\r\nexport const sortTaskArrayByParams = (field: 'date' | 'time') => {\r\n    if (field === 'date') {\r\n        return (a: TaskType, b: TaskType) => a['date'] > b['date'] ? 1 : -1\r\n    } else {\r\n        return (a: TaskType, b: TaskType) => a['time'] > b['time'] ? -1 : 1\r\n    }\r\n}","import React, { useEffect, useState } from 'react'\r\nimport { TaskType } from '../../Types/types'\r\nimport moment from 'moment'\r\nimport { TimeScalePropsType } from './TimeScaleContainer'\r\nimport { Divider, Spin, Tooltip, message } from 'antd'\r\nimport TaskItem from './TaskItem/TaskItemContainer'\r\nimport { sortTaskArrayByParams } from '../../utils/array-helpers'\r\n\r\nexport type OwnTaskTimeScaleType = {\r\n    onEdit: (value:any)=>void\r\n}\r\nconst TimeScale: React.FC<TimeScalePropsType> = (props) => {\r\n    type SelestedDatesType = typeof props.dateInterval\r\n    const [selestedDates, setSelectedDates] = useState<SelestedDatesType>({ startDate: moment(null), endDate: moment() })\r\n    // const [isInterval, setIsInterval] = useState(\r\n    //     props.dateInterval.startDate.format('YYYY-MM-DD') === props.dateInterval.endDate.format('YYYY-MM-DD') ? false : true\r\n    //     )\r\n    useEffect(() => {\r\n        if (\r\n            props.dateInterval.startDate.isSame(selestedDates.startDate.format('YYYY-MM-DD'), \"day\" ) &&\r\n            props.dateInterval.endDate.isSame(selestedDates.endDate.format('YYYY-MM-DD'), \"day\" )\r\n        ) { }\r\n        else {\r\n            if (props.dateInterval.startDate !== null) {\r\n                props.getTaskList(\r\n                    props.dateInterval.startDate.format('YYYY-MM-DD'),\r\n                    props.dateInterval.endDate.format('YYYY-MM-DD')\r\n                )\r\n                setSelectedDates(props.dateInterval)\r\n            }\r\n        }\r\n    }, [props.dateInterval])\r\n\r\n    useEffect(() => {\r\n        if (props.errorMessage !== null) {\r\n            message.success(props.errorMessage)\r\n        }\r\n    }, [props.errorMessage])\r\n    \r\n    console.log(props.dateInterval)\r\n\r\n    if (props.taskList !== undefined) {\r\n        if (props.taskList !== null) {\r\n            return (\r\n                <>\r\n                    {getTimeScaleArrey(props.taskList, props.isInterval, props.onEdit)}\r\n                </>\r\n            )\r\n        } else {\r\n            return (\r\n                <Spin key=\"spin\" size=\"large\" />\r\n            )\r\n        }\r\n    } else {\r\n        return <div>Authorization required to get a list of tasks</div>\r\n    }\r\n    \r\n}\r\n\r\nexport default TimeScale\r\n\r\n\r\nconst getTimeScaleArrey = (taskList: Array<TaskType>, isInterval:boolean, onEdit:(value:any)=>void): Array<React.ReactElement<string>> => {\r\n    let timeScaleArrey: Array<React.ReactElement<string>> = []\r\n    let tomorowTasks: Array<TaskType> = []\r\n\r\n    console.log('isInterval: ', isInterval)\r\n\r\n    taskList.sort(sortTaskArrayByParams('time')).sort(sortTaskArrayByParams('date'))\r\n\r\n    const getHeadlineLabel = (task: TaskType) => {\r\n        return moment(task.date).format('D MMMM')\r\n    }\r\n\r\n    let headlineDate: string | null = null\r\n\r\n    if (taskList !== null && taskList.length > 0) {\r\n        headlineDate = getHeadlineLabel(taskList[0])\r\n        timeScaleArrey.push(\r\n            <h5 \r\n                key={headlineDate + 'title'}\r\n                className={isInterval ? \"text-left\" : \"\"}\r\n            >\r\n                {headlineDate}:\r\n            </h5>\r\n        )\r\n    }\r\n\r\n    for (let index: number = 0; index < 24; index++) {\r\n        if (taskList.length > 0) {\r\n            if (!isInterval && index > 7) {\r\n                timeScaleArrey.push(\r\n                    <Divider key={index + 'to' + headlineDate} orientation=\"left\">\r\n                        {index <= 9 ? '0' : null}{index}:00\r\n                    </Divider>\r\n                )\r\n            }\r\n        } else {\r\n            timeScaleArrey.push(<h3 key=\"noTasks\">no tasks</h3>)\r\n            break\r\n        }\r\n\r\n        if (taskList !== null) {\r\n            for (let i = 0; i < taskList.length; i++) {\r\n                const element: TaskType = taskList[i]\r\n                const timeVal = Number(element.time.split(':', 1))\r\n                const nextHour = index + 1\r\n                if (timeVal >= index && timeVal < nextHour) {\r\n                    if (getHeadlineLabel(element) === headlineDate) {\r\n                        timeScaleArrey.push(\r\n                            <Tooltip key={index + '-' + element.id} placement=\"topLeft\" title={element.descriptions}>\r\n                                <TaskItem element={element} onEdit={onEdit}/>\r\n                            </Tooltip>\r\n                        )\r\n                    }\r\n                    else {\r\n                        tomorowTasks.push(element)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (tomorowTasks.length > 0) {\r\n        timeScaleArrey = timeScaleArrey.concat(getTimeScaleArrey(tomorowTasks, isInterval, onEdit))\r\n    }\r\n\r\n    return timeScaleArrey\r\n}","import {connect} from 'react-redux'\r\nimport TimeScale from './TimeScale'\r\nimport {getTaskList} from './../../redux/taskReducer'\r\nimport { AppStateType } from '../../redux/store'\r\nimport { OwnTaskTimeScaleType } from './TimeScale'\r\n\r\nexport type MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype DispatchPropsType = {\r\n    getTaskList: (startDate: string, endDate: string) => void\r\n}\r\n\r\nexport type TimeScalePropsType = MapPropsType & DispatchPropsType & OwnTaskTimeScaleType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        taskList: state.task.taskList,\r\n        taskSaveStatus: state.task.taskSaveStatus,\r\n        taskListIsFetching: state.task.taskListIsFetching,\r\n        dateInterval: state.task.dateInterval,\r\n        errorMessage: state.task.errorMessage,\r\n        isInterval: state.task.isInterval\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, DispatchPropsType, OwnTaskTimeScaleType, AppStateType>(mapStateToProps, \r\n    {getTaskList}) \r\n    (TimeScale)\r\n\r\n\r\n","import { Button, Card, Drawer } from 'antd'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { ToDoListPropsType } from '../ToDoListContainer'\r\nimport { FileAddOutlined, SettingOutlined } from '@ant-design/icons'\r\nimport ToDoHeaderContainer from './ToDoHeader/ToDoHeaderContainer'\r\nimport { List } from 'antd/lib/form/Form'\r\nimport TimeScale from '../TimeScale/TimeScaleContainer'\r\nimport SettingsModal from './Settings/SettingsModalContainer'\r\nimport { Formik } from 'formik'\r\nimport ToDoForm from './ToDoForm/ToDoForm'\r\nimport moment from \"moment\"\r\n\r\ntype InitialDrewerDataType = {\r\n    header: string,\r\n    taskId: false | number\r\n}\r\n\r\nconst initialDrewerData: InitialDrewerDataType = {\r\n    header: 'Create New Task',\r\n    taskId: false\r\n}\r\n\r\nconst zeroTime = moment()\r\nzeroTime.hours(0)\r\nzeroTime.minutes(0)\r\nzeroTime.seconds(0)\r\nzeroTime.milliseconds(0)\r\n\r\ntype InitialValuesType = {\r\n    name: string | null,\r\n    time: moment.Moment,\r\n    date: moment.Moment,\r\n    descriptions: string | null \r\n\r\n}\r\nconst initialValues: any = {\r\n    name: '',\r\n    time: zeroTime,\r\n    date: moment(),\r\n    descriptions: ''\r\n\r\n}\r\n\r\nconst ToDoBrowser: React.FC<any> = (props) => {\r\n    const [visible, setVisible] = useState(false)\r\n    const [isModalVisible, setIsModalVisible] = useState(false)\r\n    const [drawerData, setDrawerData] = useState(initialDrewerData)\r\n    const [initialFormValues, setInitialFormValues] = useState(initialValues)\r\n\r\n    useEffect(() => {\r\n        if (props.taskList === null) {\r\n            props.getTaskList(props.dateInterval.startDate.format('YYYY-MM-DD'), props.dateInterval.endDate.format('YYYY-MM-DD'))\r\n        }\r\n    }, [props.getTaskList])\r\n\r\n    const onTaskEdit = (value:any) => {\r\n        console.log('onTaskEdit: ', value)\r\n        setDrawerData({\r\n            header: 'Edite \"'+value.name+'\"',\r\n            taskId: value.id\r\n        })\r\n\r\n        const splitTime = value.time.split(/:/)\r\n\r\n        setInitialFormValues({\r\n            name: value.name,\r\n            time: moment().hours(splitTime[0]).minutes(splitTime[1]).seconds(0),\r\n            date: moment(value.date),\r\n            descriptions: value.descriptions ? value.descriptions : null\r\n        })\r\n        \r\n        showDrawer()\r\n    }\r\n\r\n    const showDrawer = (): void => {\r\n        console.log('drawerData', drawerData)\r\n        if (!drawerData.taskId) {\r\n            console.log('empty')\r\n        }\r\n        console.log(initialFormValues)\r\n        setVisible(true)\r\n    }\r\n\r\n    const onClose = (): void => {\r\n        setInitialFormValues(initialValues)\r\n        setDrawerData(initialDrewerData)\r\n        setVisible(false)\r\n    }\r\n\r\n    const showModal = () => {\r\n        setIsModalVisible(true)\r\n    }\r\n    const onAdd = () => {\r\n        // setDrawerData(initialDrewerData)\r\n        // setInitialFormValues(initialValues)\r\n        // showDrawer()\r\n    }\r\n\r\n    const handleOk = () => {\r\n        setIsModalVisible(false)\r\n    }\r\n\r\n    const handleCancel = () => {\r\n        setIsModalVisible(false)\r\n    }\r\n\r\n    const handleSubmit = (formProps: any) => {\r\n        let formPropsCopy: any = { ...formProps }\r\n        // delete formPropsCopy.selectOptions\r\n        // delete formPropsCopy.taskTypes\r\n        if (formPropsCopy.time !== undefined) {\r\n            formPropsCopy.time = formPropsCopy.time.format('HH:mm:ss')\r\n        }\r\n        if (formPropsCopy.date !== undefined) {\r\n            formPropsCopy.date = formPropsCopy.date.format('YYYY-MM-DD')\r\n        }\r\n\r\n        formPropsCopy.user_id = props.userId\r\n        console.log('handleSubmit', formPropsCopy)\r\n        if (!drawerData.taskId) {\r\n            props.createNewTask(formPropsCopy, true)\r\n        } else {\r\n        //     // console.log(formPropsCopy)\r\n            props.updateTask(formPropsCopy, drawerData.taskId)\r\n        }\r\n    }\r\n\r\n    console.log('ToDoBrowser initialFormValues: ', initialFormValues)\r\n\r\n    return (\r\n        <Card\r\n            title={ <ToDoHeaderContainer \r\n                        showDrawer={showDrawer} \r\n                        showModal={showModal}\r\n                    />}\r\n            bordered={false}\r\n        >\r\n            <TimeScale onEdit={onTaskEdit}/>\r\n\r\n            <Drawer\r\n                title={drawerData.header}\r\n                placement=\"right\"\r\n                closable={true}\r\n                onClose={onClose}\r\n                visible={visible}\r\n                width=\"90%\"\r\n            >\r\n\r\n                <Formik\r\n                    initialValues={initialFormValues}\r\n                    // initialValues={{}}\r\n                    onSubmit={handleSubmit}\r\n                    render={ToDoForm}\r\n                    enableReinitialize={true}\r\n                />\r\n\r\n            </Drawer>\r\n\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default ToDoBrowser","import {connect} from 'react-redux'\r\nimport ToDoMobile from './ToDoMobile'\r\nimport { isMobile } from 'react-device-detect'\r\nimport {getTaskList, createNewTask, updateTask} from '../../redux/taskReducer'\r\nimport { AppStateType } from '../../redux/store'\r\nimport ToDoList from '../ToDoList'\r\nimport ToDoBrowser from './ToDoBrowser'\r\nimport { NewTaskDataType } from '../../Types/types'\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    getTaskList: (start_date: string, end_date:string)=>void,\r\n    createNewTask: (values: NewTaskDataType, reload:boolean)=>void,\r\n    updateTask: (values: any, taskId: number)=>void\r\n}\r\n\r\nexport type ToDoListPropsType = MapPropsType & MapDispatchPropsType & OwnToDoListPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        taskList: state.task.taskList,\r\n        viewSettings: state.auth.viewSettings,\r\n        isInterval: state.task.isInterval,\r\n        dateInterval: state.task.dateInterval,\r\n        userId: state.auth.user?.id\r\n    }\r\n}\r\n\r\ntype OwnToDoListPropsType = {}\r\n\r\nconst component: any = isMobile ? ToDoMobile : ToDoBrowser\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnToDoListPropsType, AppStateType>(mapStateToProps, \r\n    {getTaskList, createNewTask, updateTask}) \r\n    ( component )\r\n    \r\n\r\n","import {getAuthUserData} from \"./authReducer\"\r\nimport {InferActionsTypes} from './store'\r\n\r\nlet initialState = {\r\n    initialized: false,\r\n    location: '/'\r\n}\r\n\r\n// export type InitialStateType = typeof initialState\r\nexport type InitialStateType ={\r\n    initialized: boolean,\r\n    location: string\r\n}\r\n\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\n\r\nconst appReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/APP/INITIALIZED_SUCCESS':\r\n            //console.log('INITIALIZED_SUCCESS: true')\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            }\r\n\r\n        case 'SN/APP/SET_LOCATION':\r\n            //console.log('location in appReducer:', action.location)\r\n            return  {\r\n                ...state,\r\n                location: action.location\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    initializedSuccess: () => ({type: 'SN/APP/INITIALIZED_SUCCESS'} as const),\r\n    setLocation: (location: string) => ({type: 'SN/APP/SET_LOCATION', location} as const),\r\n}\r\n\r\nexport const initializeApp = () => (dispatch: any) => {\r\n    let promise = dispatch(getAuthUserData());\r\n    Promise.all([promise])\r\n        .then(() => {\r\n            //console.log('dispatch(actions.initializedSuccess());')\r\n            dispatch(actions.initializedSuccess());\r\n        });\r\n}\r\n\r\nexport const addLocation = (location: string) => (dispatch: any) => {\r\n    dispatch(actions.setLocation(location));\r\n}\r\n\r\n\r\nexport default appReducer;","import { TaskListType } from '../Types/types'\r\nimport {instance} from './api'\r\n\r\ninstance.defaults.headers.common['X-Auth-Token'] = localStorage.getItem('remember_token')\r\n\r\nexport const taskListAPI = {\r\n    getTaskList() {\r\n        return instance.get<TaskListType>(`taskList`)\r\n        .then(response => {\r\n            //console.log(response)\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                //console.log(err.response)\r\n                return err.response\r\n            } else if (err.request) {\r\n                //console.log('request', err.request)\r\n            } else {\r\n                //console.log('anything else: ', err)\r\n            }\r\n            return null\r\n        })\r\n    },\r\n    createNewTaskList(values: any) {\r\n        return instance.post<TaskListType>(`taskList`, values)\r\n        .then(response => {\r\n            console.log(response)\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                console.log(err.response)\r\n                return err.response\r\n            } else if (err.request) {\r\n                console.log('request', err.request)\r\n            } else {\r\n                console.log('anything else: ', err)\r\n            }\r\n            return null\r\n        })\r\n    },\r\n    deleteTask(taskId: number) {\r\n        return instance.delete<TaskListType>(`taskList/${taskId}`).then(response => {\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                return err.response\r\n            } else if (err.request) {\r\n                //console.log('request', err.request)\r\n            } else {\r\n                //console.log('anything else: ', err)\r\n            }\r\n            return null\r\n        })\r\n    },\r\n    updateTask(values: any, taskId: number) {\r\n        return instance.put<TaskListType>(`taskList/${taskId}`, values)\r\n        .then(response => {\r\n            console.log(response)\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                console.log(err.response)\r\n                return err.response\r\n            } else if (err.request) {\r\n                //console.log('request', err.request)\r\n            } else {\r\n                //console.log('anything else: ', err)\r\n            }\r\n            return null\r\n        })\r\n    }\r\n}\r\n//descriptions\r\n//descriptions","import { Dispatch } from \"react\";\r\nimport { BaseThunkType, InferActionsTypes } from \"./store\";\r\nimport { taskListAPI } from './../api/taskListAPI'\r\nimport { TaskListType } from \"../Types/types\";\r\n\r\n\r\nexport type InitialStateType = {\r\n    taskList: Array<TaskListType>,\r\n    taskListIsFetching: boolean,\r\n    isTaskListLoaded: boolean,\r\n    selectedTasks: Array<number>\r\n    // taskSaveStatus: 'no' | 'inProgress' | 'success' | 'error'\r\n    // errorMessage: null | string,\r\n    // isInterval: boolean,\r\n    // dateInterval: {\r\n    //     startDate: moment.Moment,\r\n    //     endDate: moment.Moment\r\n    // }\r\n}\r\n\r\nlet initialState:InitialStateType = {\r\n    taskList: [],\r\n    taskListIsFetching: false,\r\n    isTaskListLoaded: false,\r\n    selectedTasks:[]\r\n    // taskSaveStatus: 'no',\r\n    // errorMessage: null,\r\n    // isInterval: false,\r\n    // dateInterval: {\r\n    //     startDate: moment(),\r\n    //     endDate: moment()\r\n    // }\r\n}\r\n\r\nconst taskListReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/TASK_LIST/BACK_SELECTED_TASK':\r\n            let newSelectedTasks: Array<number> = [...state.selectedTasks]\r\n            if (newSelectedTasks.length > 0) {\r\n                newSelectedTasks.pop()\r\n            }              \r\n            return { ...state, selectedTasks: newSelectedTasks }\r\n        case 'SN/TASK_LIST/SET_SELECTED_TASK':\r\n            console.log( { ...state, selectedTasks: [...state.selectedTasks, action.taskId] })\r\n            return { ...state, selectedTasks: [...state.selectedTasks, action.taskId] }\r\n        case 'SN/TASK_LIST/SET_TASK_LIST':\r\n            return { ...state, taskList: action.taskList, isTaskListLoaded: true}\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    setTaskList: (taskList: Array<any>) => ({ type: 'SN/TASK_LIST/SET_TASK_LIST', taskList } as const),\r\n    setSelectedTasks: (taskId: number) => ({ type: 'SN/TASK_LIST/SET_SELECTED_TASK', taskId } as const),\r\n    backSelectedTasks: () => ({type: 'SN/TASK_LIST/BACK_SELECTED_TASK'} as const),\r\n    // setTaskSaveStatus: (taskSaveStatus: 'no' | 'inProgress' | 'success' | 'error') => ({ type: 'SN/TASK/SET_TASK_SAVE_STATUS', taskSaveStatus } as const),\r\n    // setErrorMessage: (message: string | null) => ({type: 'SN/TASK/SET_ERROR_MESSAGE', message} as const),\r\n    // setTaskListIsFetching: (isFetchingValue: boolean) => ({type: 'SN/TASK/SET_TASK_LIST_IS_FETCHING', isFetchingValue} as const),\r\n    // setIsInterval: (isInterval: boolean, date: {startDate: moment.Moment, endDate: moment.Moment}) => ({type: 'SN/TASK/SET_IS_INTERVAL', isInterval, date} as const)\r\n}\r\n\r\nexport const getTaskList = (): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        // dispatch(actions.setTaskListIsFetching(true))\r\n\r\n        let response = await taskListAPI.getTaskList()\r\n        //console.log(response)\r\n\r\n        if (response !== undefined && response !== null) {\r\n            dispatch(actions.setTaskList(response.data.Tasks))\r\n        } else {\r\n            // add error message\r\n        }\r\n        // dispatch(actions.setTaskListIsFetching(false))\r\n    }\r\n}\r\n\r\nexport const createNewTaskList = (values: any): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        let response = await taskListAPI.createNewTaskList(values)\r\n        //console.log(response)\r\n        dispatch(actions.setTaskList(response.data.Tasks))\r\n    }\r\n}\r\n\r\nexport const deleteTaskList = (taskId: number): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        let response = await taskListAPI.deleteTask(taskId)\r\n        //console.log(response)\r\n        dispatch(actions.setTaskList(response.data.Tasks))\r\n    }\r\n}\r\n\r\nexport const updateTaskList = (values: any, taskId: number): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        let response = await taskListAPI.updateTask(values, taskId)\r\n        //console.log(response)\r\n        dispatch(actions.setTaskList(response.data.Tasks))\r\n    }\r\n}\r\n\r\nexport default taskListReducer\r\n\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsTypes>\r\nexport type DispatchType = Dispatch<ActionsTypes>","import {Action, applyMiddleware, combineReducers, createStore} from \"redux\"\r\nimport thunkMiddleware, {ThunkAction} from \"redux-thunk\"\r\nimport appReducer from \"./appReducer\"\r\nimport authReducer from \"./authReducer\"\r\nimport taskListReducer from \"./TaskListReducer\"\r\nimport taskReducer from './taskReducer'\r\n\r\n\r\nlet rootReducer = combineReducers({\r\n    task: taskReducer,\r\n    app: appReducer,\r\n    auth: authReducer,\r\n    taskList: taskListReducer,\r\n})\r\n\r\ntype rootReducerType = typeof rootReducer\r\nexport type AppStateType = ReturnType<rootReducerType>\r\n\r\nexport type InferActionsTypes<T> = T extends { [keys: string]: (...args: any[]) => infer U } ? U : never\r\nexport type BaseThunkType<A extends Action = Action, R = Promise<void>> = ThunkAction<R, AppStateType, unknown, A>\r\n\r\nlet store = createStore(rootReducer, applyMiddleware(thunkMiddleware))\r\n\r\n// console.log('global State:', store.getState())\r\n\r\nexport default store","import React, {useState} from 'react'\r\nimport { Button, Menu } from 'antd';\r\nimport {Link, useHistory} from 'react-router-dom'\r\n// import { MailOutlined, AppstoreOutlined, SettingOutlined } from '@ant-design/icons';\r\nimport {LogoutOutlined} from '@ant-design/icons'\r\nimport {MenuBrowserPropsType} from './MenuBrowserConainer'\r\nimport { TaskListType } from '../../Types/types';\r\nimport { MenuDataType } from './Header';\r\n\r\nconst { SubMenu } = Menu;\r\n\r\nexport type OwnMenuBrowserPropsType = {\r\n    menuData: any,\r\n    // logout: any,\r\n    // appLocation: string | null\r\n}\r\n\r\nconst MenuBrowser: React.FC<MenuBrowserPropsType> = (props) => {\r\n    let history = useHistory();\r\n    const [state, setState] = useState<Array<string>>([])\r\n    const handleClick = (e: any | undefined) => {\r\n        // //console.log('click ', e);\r\n        // setState({ current: e.key });\r\n    }\r\n\r\n    const getMenuItem = (childs: any):any => {\r\n        // return <Menu.Item key=\"setting:1\">Option 1</Menu.Item>\r\n        const menuItems = childs.map( (item: any) => {\r\n            return (\r\n                <Menu.Item key={item.value}>\r\n                    <Link to={item.value}>{item.label}</Link>\r\n                </Menu.Item>\r\n            )\r\n        })\r\n        return menuItems\r\n    }\r\n\r\n    const getSubMenu = () => {\r\n        // //console.log(props.menuData)\r\n        const subMenu = props.menuData.map( (item: any) => {\r\n            // //console.log(item)\r\n            return (\r\n                <SubMenu \r\n                    key={item.value} \r\n                    // icon={<MailOutlined />}\r\n                    title={item.label}\r\n                >\r\n                    {getMenuItem(item.children)}\r\n                </SubMenu >\r\n            )\r\n        })\r\n        // subMenu.push(\r\n        //     <Menu.Item key=\"login\">\r\n        //         <Link to={props.appLocation +\"login\"} >Login</Link>\r\n        //     </Menu.Item>\r\n        // )\r\n        return subMenu\r\n    }\r\n\r\n    const onLogout = () => {\r\n        // onChange(['', ''])\r\n        history.replace(props.appLocation+'login')\r\n        props.logout()\r\n    }\r\n\r\n    //console.log(props)\r\n\r\n    return (\r\n        <Menu \r\n            onClick={handleClick} \r\n            // selectedKeys={[current]} \r\n            mode=\"horizontal\"\r\n            theme=\"dark\"\r\n        >\r\n            {getSubMenu()}\r\n\r\n            {!props.isAuth ? \r\n                <Menu.Item key=\"login\">\r\n                    <Link to={props.appLocation +\"login\"} >Login</Link>\r\n                </Menu.Item>\r\n            :\r\n                <SubMenu \r\n                    key={props.user?.name} \r\n                    title={props.user?.name}\r\n                >\r\n                    <Menu.Item key=\"login\" onClick={onLogout}>\r\n                        {/* <Link to={props.appLocation +\"login\"} > */}\r\n                            Logout\r\n                        {/* </Link> */}\r\n                    </Menu.Item>\r\n                </SubMenu >\r\n                \r\n            }\r\n        </Menu>\r\n    )\r\n}\r\n\r\nexport default MenuBrowser","import {connect} from 'react-redux'\r\nimport MenuBrowser, { OwnMenuBrowserPropsType } from './MenuBrowser'\r\nimport { AppStateType } from '../../redux/store'\r\nimport {actions} from './../../redux/authReducer'\r\n\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    logout: ()=>void\r\n}\r\n\r\nexport type MenuBrowserPropsType = MapPropsType & MapDispatchPropsType & OwnMenuBrowserPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n        user: state.auth.user,\r\n        appLocation: state.app.location\r\n        \r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnMenuBrowserPropsType, AppStateType>(mapStateToProps, \r\n    {logout: actions.logout}) \r\n    (MenuBrowser)\r\n    \r\n\r\n","import { Popover, Icon } from 'antd-mobile'\r\nimport React, { useState } from 'react'\r\n\r\nconst Item = Popover.Item\r\n\r\nconst MenuPopover: React.FC<any> = (props) => {\r\n    const [visible, setVisible] = useState(false)\r\n\r\n    const onSelect = (opt: any, index?: number) => {\r\n        // console.log(opt.props);\r\n        setVisible(false)\r\n        if(opt.props.children === \"Logout\") {\r\n            props.onLogout()\r\n        }\r\n    }\r\n\r\n    const handleVisibleChange = (visible: boolean) => {\r\n        setVisible(visible)\r\n    }\r\n\r\n    const fortest:String = \"fortest\"\r\n\r\n    return (\r\n        <div className=\"mr-3\">\r\n        <Popover \r\n            mask\r\n            visible={visible}\r\n            overlay={[\r\n                (<Item key=\"1\" >Logout</Item>),\r\n                (<Item key=\"2\" >Info</Item>),\r\n                (<Item key=\"3\" >Help</Item>),\r\n            ]}\r\n            onVisibleChange={handleVisibleChange}\r\n            onSelect={onSelect}\r\n        >\r\n            <div style={{\r\n                height: '100%',\r\n                padding: '0 15px',\r\n                marginRight: '-20px',\r\n                display: 'flex',\r\n                alignItems: 'center',\r\n            }}\r\n            >\r\n                <Icon type=\"ellipsis\" />\r\n            </div>\r\n        </Popover>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MenuPopover","import React, { useState } from 'react'\r\nimport { Menu, ActivityIndicator, NavBar, Button } from 'antd-mobile'\r\nimport { ValueType } from 'antd-mobile/lib/menu/PropsType'\r\nimport './MenuMobile.css'\r\nimport { useHistory, useLocation } from 'react-router-dom'\r\nimport { MenuDataType } from './Header'\r\nimport { MenuMobilePropsType } from './MenuMobileContainer'\r\nimport { Link } from 'react-router-dom'\r\nimport { LogoutOutlined } from '@ant-design/icons'\r\nimport MenuPopover from './MenuPopover'\r\n\r\nexport type OwnMenuMobilePropsType = {\r\n    menuData: MenuDataType,\r\n    logout: () => void\r\n}\r\n\r\nconst MenuMobile: React.FC<MenuMobilePropsType> = (props) => {\r\n    let history = useHistory();\r\n    const location = useLocation();\r\n    const [show, setShow] = useState(false)\r\n    type DataType = typeof props.menuData\r\n    const data = [...props.menuData]\r\n    const [initData, setInitData] = useState<DataType>(data)\r\n\r\n    const getSelectedMenuItem = (): ValueType => {\r\n        let response: ValueType = [data[0].value, '']\r\n        data.forEach((dataItem: any) => {\r\n            if (dataItem.children) {\r\n                dataItem.children.forEach((item: any) => {\r\n                    //console.log('/',item.value,'===',location.pathname)\r\n                    if (item.value === location.pathname) {\r\n                        response = [dataItem.value, item.value]\r\n                    }\r\n                })\r\n            }\r\n        })\r\n        //console.log('getSelectedMenuItem response: ', response)\r\n        return response\r\n    }\r\n\r\n    const [selectedMenuItem, setSelectedMenuItem] = useState<ValueType>(getSelectedMenuItem())\r\n\r\n    const handleClick = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\r\n        e.preventDefault(); // Fix event propagation on Android\r\n        setShow(!show)\r\n        // if (!initData) {\r\n        //     setInitData(data)\r\n        // }\r\n    }\r\n\r\n    const onChange = (value?: ValueType | undefined) => {\r\n        //console.log('input values: ', value)\r\n        if (value) {\r\n            let subMenu = value[0]\r\n\r\n            data.forEach((dataItem) => {\r\n                if (dataItem.value === value[0]) {\r\n                    subMenu = value[0]\r\n                    if (dataItem.children && value[1]) {\r\n                        dataItem.children.forEach((cItem: { value: string | string[]; label: any }) => {\r\n                            if (cItem.value === value[1]) {\r\n                                history.replace(`${cItem.value}`)\r\n                                setShow(false)\r\n                            }\r\n                        })\r\n                    }\r\n                }\r\n            })\r\n        \r\n            if (subMenu === '') {\r\n                subMenu = data[0].value\r\n            }\r\n            //console.log('set values: ', [subMenu, value[1]])\r\n            setSelectedMenuItem([subMenu, value[1]])\r\n        }\r\n        \r\n    }\r\n\r\n    const onMaskClick = () => {\r\n        setShow(false)\r\n    }\r\n\r\n    const menuEl = (\r\n        <Menu\r\n            className=\"foo-menu\"\r\n            data={initData}\r\n            value={selectedMenuItem}\r\n            onChange={onChange}\r\n            height={document.documentElement.clientHeight * 0.6}\r\n        />\r\n    );\r\n\r\n    const loadingEl = (\r\n        <div style={{ width: '100%', height: document.documentElement.clientHeight * 0.6, display: 'flex', justifyContent: 'center' }}>\r\n            <ActivityIndicator size=\"large\" />\r\n        </div>\r\n    );\r\n\r\n    //console.log(props)\r\n\r\n    const onLogout = () => {\r\n        onChange(['', ''])\r\n        history.replace(props.appLocation + 'login')\r\n        props.logout()\r\n    }\r\n\r\n    return (\r\n        <div className={show ? 'menu-active' : ''}>\r\n            <div>\r\n                <NavBar\r\n                    leftContent=\"\"\r\n                    mode=\"light\"\r\n                    icon={<img src=\"https://gw.alipayobjects.com/zos/rmsportal/iXVHARNNlmdCGnwWxQPH.svg\" className=\"am-icon am-icon-md\" alt=\"\" />}\r\n                    onLeftClick={handleClick}\r\n                    className=\"top-nav-bar\"\r\n                    rightContent={props.isAuth ? <MenuPopover onLogout={onLogout} /> : null}\r\n                >\r\n                    {!props.isAuth ?\r\n                        <Link\r\n                            to={props.appLocation + \"login\"}\r\n                            onClick={() => { onChange(['', '']) }}\r\n                        >\r\n                            <span className=\"text-white\">Login</span>\r\n                        </Link>\r\n                        :\r\n                        <>\r\n                        <div>\r\n                            {props.user?.name}\r\n                            {/* <Button className=\"ml-5\" size=\"small\" icon={<LogoutOutlined />} onClick={onLogout} inline >\r\n\r\n                            </Button> */}\r\n                        </div>\r\n                        {/* <div className=\"w-100\">\r\n                            \r\n                        </div> */}\r\n                        </>\r\n                    }\r\n                    \r\n\r\n                </NavBar>\r\n            </div>\r\n            {show ? initData ? menuEl : loadingEl : null}\r\n            {show ? <div className=\"menu-mask\" onClick={onMaskClick} /> : null}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default (MenuMobile)\r\n\r\n\r\n","import {connect} from 'react-redux'\r\nimport MenuMobile, { OwnMenuMobilePropsType } from './MenuMobile'\r\n// import {getTaskList} from '../../redux/taskReducer'\r\nimport { AppStateType } from '../../redux/store'\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    // getTaskList: (start_date: string, end_date:string)=>void\r\n}\r\n\r\nexport type MenuMobilePropsType = MapPropsType & MapDispatchPropsType & OwnMenuMobilePropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        appLocation: state.app.location,\r\n        isAuth: state.auth.isAuth,\r\n        user: state.auth.user\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnMenuMobilePropsType, AppStateType>(mapStateToProps, \r\n    {}) \r\n    (MenuMobile)\r\n    \r\n\r\n","import React from 'react'\r\nimport {\r\n    BrowserView,\r\n    MobileView,\r\n    isBrowser,\r\n    isMobile\r\n} from \"react-device-detect\"\r\nimport { HeaderPropsType } from './HeaderContainer'\r\nimport MenuBrowser from './MenuBrowserConainer'\r\nimport MenuMobile from './MenuMobileContainer'\r\n// import {useHistory, useLocation} from 'react-router-dom'\r\n\r\n// type MenuDataType = Array<any>\r\n\r\nexport type OwnHeaderPropsType = {}\r\n\r\nconst Header: React.FC<HeaderPropsType> = (props) => {\r\n    // const location = useLocation()\r\n    //console.log('Header')\r\n\r\n    if (isMobile) {\r\n        return <MenuMobile menuData={menuData(props.appLocation)} logout={props.logout}/>\r\n    } else {\r\n        return <MenuBrowser menuData={menuData(props.appLocation)}/>\r\n    }\r\n}\r\n\r\nexport default Header\r\n\r\n\r\nexport type MenuDataType = ReturnType<typeof menuData>\r\n\r\nconst menuData = (appLocation: string) => {\r\n    const data = [\r\n    {\r\n        value: 'planning',\r\n        label: 'Planning',\r\n        children: [\r\n            {\r\n                label: 'ToDo list',\r\n                // label: <Link to='/toDoList'>ToDo list</Link>,\r\n                value: appLocation + 'toDoList',\r\n                disabled: false,\r\n            },\r\n            {\r\n                label: 'Tasks tree',\r\n                value: appLocation + 'tasksTree',\r\n            },\r\n            {\r\n                label: 'Analysis',\r\n                value: appLocation + 'analysis',\r\n                disabled: true,\r\n            }\r\n        ],\r\n    }, {\r\n        value: 'catalog',\r\n        label: 'Catalog',\r\n        children: [\r\n            {\r\n                label: 'Products',\r\n                value: appLocation + 'products',\r\n            }\r\n            , {\r\n                label: 'Providers',\r\n                value: appLocation + 'providers',\r\n            }\r\n        ],\r\n    },\r\n    {\r\n        value: 'orders',\r\n        label: 'Orders',\r\n        // isLeaf: true,\r\n        children: [\r\n            {\r\n                label: 'Orders',\r\n                value: appLocation + 'orders',\r\n            },\r\n            {\r\n                label: 'Leads',\r\n                value: appLocation + 'leads',\r\n            },\r\n        ],\r\n    },\r\n    ]\r\n    return data\r\n}\r\n","import {connect} from 'react-redux'\r\nimport Header, { OwnHeaderPropsType } from './Header'\r\nimport {actions} from '../../redux/authReducer'\r\nimport { AppStateType } from '../../redux/store'\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    logout: ()=>void\r\n}\r\n\r\nexport type HeaderPropsType = MapPropsType & MapDispatchPropsType & OwnHeaderPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        appLocation: state.app.location,\r\n        user: state.auth.user\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnHeaderPropsType, AppStateType>(mapStateToProps, \r\n    {logout: actions.logout}) \r\n    (Header)\r\n    \r\n\r\n","import React, { ReactNode } from 'react'\r\nimport { Form, Field, FormikProps } from \"formik\"\r\nimport { AntInput, AntCheckbox, AntInputPassword } from '../../utils/Formik/CreateAntField'\r\nimport { validateEmail, validateRequired } from '../../utils/Formik/ValidateFields'\r\n\r\nconst LoginForm: ((props: FormikProps<{}>) => ReactNode) = (props) => {\r\n    return (\r\n        <Form \r\n            className=\"form-container\" \r\n            onSubmit={props.handleSubmit}\r\n        >\r\n            <Field\r\n                component={AntInput}\r\n                name=\"email\"\r\n                type=\"email\"\r\n                label=\"Email\"\r\n                validate={validateEmail}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n            <Field\r\n                component={AntInputPassword}\r\n                name=\"password\"\r\n                type=\"password\"\r\n                label=\"Password\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n            <Field\r\n                component={AntCheckbox}\r\n                name=\"remember\"\r\n                label=\"Remember Me\"\r\n                submitCount={props.submitCount}\r\n            />\r\n            <div className=\"submit-container\">\r\n                <button className=\"ant-btn ant-btn-primary\" type=\"submit\">\r\n                    Login\r\n                </button>\r\n            </div>\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default LoginForm","import React from 'react'\r\nimport { LoginPropsType } from './LoginContainer'\r\nimport { List, InputItem, Checkbox } from 'antd-mobile'\r\nimport { Formik } from \"formik\"\r\nimport moment from \"moment\"\r\nimport LoginForm from './LoginForm'\r\nimport { propTypes } from 'react-bootstrap/esm/Image'\r\nimport { Button } from 'antd'\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst CheckboxItem = Checkbox.CheckboxItem;\r\n\r\nconst initialValues = {\r\n    // bookingClient: \"\",\r\n    // bookingDate: moment(Date.now()),\r\n    // bookingTime: moment(Date.now()),\r\n    // selectOptions: [\"Mark\", \"Bob\", \"Anthony\"]\r\n}\r\n\r\n// export const dateFormat = \"YYYY--MM-DD\";\r\n// export const timeFormat = \"h:mm A\";\r\n\r\nexport type OwnLoginPropsType = {}\r\n\r\nconst Login: React.FC<LoginPropsType> = (props) => {\r\n    const handleSubmit = (formProps: any) => {\r\n        //console.log('formProps: ', formProps)\r\n        if (!formProps.remember) {\r\n            formProps.remember = false\r\n        }\r\n        props.login(formProps)\r\n    }\r\n\r\n    //console.log(props)\r\n\r\n    return (\r\n        <>\r\n            <h1 className=\"mb-5 mx-auto\">Login Form</h1>\r\n            <Formik\r\n                initialValues={initialValues}\r\n                onSubmit={handleSubmit}\r\n                render={LoginForm}\r\n            />\r\n            <div className=\"mt-3\">\r\n                <Link to={props.location +\"register\"}><Button type=\"link\" block>Register</Button></Link>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Login","import {connect} from 'react-redux'\r\nimport Login, { OwnLoginPropsType } from './Login'\r\nimport { AppStateType } from '../../redux/store'\r\nimport {credsType, login} from './../../redux/authReducer'\r\n\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    login: (data: credsType)=>void\r\n}\r\n\r\nexport type LoginPropsType = MapPropsType & MapDispatchPropsType & OwnLoginPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        auth: state.auth,\r\n        location: state.app.location\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnLoginPropsType, AppStateType>(mapStateToProps, \r\n    {login}) \r\n    (Login)\r\n    \r\n\r\n","import { formatCountdown } from 'antd/lib/statistic/utils'\r\nimport React from 'react'\r\nimport { OrdersPropsType } from './OrdersContainer'\r\n\r\nexport type OwnOrdersPropsType = {}\r\nconst Orders: React.FC<OrdersPropsType> = (props) => {\r\n    return(\r\n        <div>Orders</div>\r\n    )\r\n}\r\n\r\nexport default Orders","import {connect} from 'react-redux'\r\nimport Orders, { OwnOrdersPropsType } from './Orders'\r\n// import {getTaskList} from '../../redux/taskReducer'\r\nimport { AppStateType } from '../../redux/store'\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    // getTaskList: (start_date: string, end_date:string)=>void\r\n}\r\n\r\nexport type OrdersPropsType = MapPropsType & MapDispatchPropsType & OwnOrdersPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        appLocation: state.app.location\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnOrdersPropsType, AppStateType>(mapStateToProps, \r\n    {}) \r\n    (Orders)\r\n    \r\n\r\n","import { Form, Field, FormikProps } from 'formik'\r\nimport React, { ReactNode, useState, useEffect } from 'react'\r\nimport { AntInput, AntSelect, AntTextArea, AntTimePicker } from '../../utils/Formik/CreateAntField'\r\nimport { validateRequired } from '../../utils/Formik/ValidateFields'\r\nimport { Select } from 'antd';\r\n\r\nconst { Option }: any = Select;\r\n\r\n\r\nconst NewTaskTreeForm: ((props: FormikProps<{}>) => ReactNode) = (props) => {\r\n    const values: any = props.values\r\n    //console.log(values)\r\n    const selectOptions = values.selectOptions\r\n    const taskTypes = values.taskTypes // ++++++\r\n\r\n    const [taskType, setTaskType] = useState(values.taskType)\r\n\r\n    useEffect(() => {\r\n        const values: any = props.values\r\n        const taskTypes = values.task_type\r\n        setTaskType(taskTypes)\r\n\r\n        // console.log('useEffect NewTaskTreeForm', props.initialValues)\r\n    }, [props.values])\r\n\r\n    //console.log('NewTaskTreeForm props: ', props)\r\n\r\n    // const handleSubmit = (formProps: any) => {\r\n    //     //console.log('formProps in NewTaskTreeForm: ',formProps)\r\n    //     props.handleSubmit(formProps)\r\n    // }\r\n\r\n    // console.log('NewTaskTreeForm', props)\r\n    // console.log('NewTaskTreeForm render', values)\r\n\r\n    return (\r\n        <Form\r\n            className=\"form-container\"\r\n            onSubmit={props.handleSubmit}\r\n        >\r\n            <Field\r\n                component={AntInput}\r\n                name=\"name\"\r\n                type=\"text\"\r\n                label=\"Name\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n\r\n            <Field\r\n                component={AntSelect}\r\n\r\n                selectOptions={selectOptions}\r\n\r\n                name=\"parent_id\"\r\n                type=\"select\"\r\n                label=\"Parent\"\r\n                // validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n            // hasFeedback\r\n            />\r\n\r\n            <Field\r\n                component={AntTextArea}\r\n                name=\"descriptions\"\r\n                type=\"text\"\r\n                label=\"Descriptions\"\r\n                // validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                // hasFeedback\r\n            />\r\n\r\n            <Field\r\n                component={AntTimePicker}\r\n                name=\"time_to_complete\"\r\n                type=\"time\"\r\n                label=\"Time to complete\"\r\n                // validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n            // hasFeedback\r\n            />\r\n\r\n            <Field\r\n                component={AntSelect}\r\n\r\n                selectOptions={taskTypes}\r\n\r\n                name=\"task_type\"\r\n                type=\"select\"\r\n                label=\"task Types\"\r\n                // validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                // hasFeedback\r\n            />\r\n\r\n\r\n            {taskType === 2 ?\r\n                <>\r\n                    <Field\r\n                        component={AntInput}\r\n                        name=\"context1\"\r\n                        type=\"text\"\r\n                        label=\"context1\"\r\n                        validate={validateRequired}\r\n                        submitCount={props.submitCount}\r\n                        hasFeedback\r\n                    />\r\n                    <Field\r\n                        component={AntInput}\r\n                        name=\"context2\"\r\n                        type=\"text\"\r\n                        label=\"context2\"\r\n                        validate={validateRequired}\r\n                        submitCount={props.submitCount}\r\n                        hasFeedback\r\n                    />\r\n                </>\r\n                :\r\n                null\r\n            }\r\n\r\n            <div className=\"submit-container\">\r\n                <button className=\"ant-btn ant-btn-primary\" type=\"submit\">\r\n                    Save\r\n                </button>\r\n            </div>\r\n\r\n        </Form>\r\n    )\r\n    // )\r\n}\r\nexport default NewTaskTreeForm","import { Button, Card, Drawer, List, Checkbox, Collapse } from 'antd'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { TasksTreePropsType } from './TasksTreeContainer'\r\nimport { FileAddOutlined, SettingOutlined } from '@ant-design/icons'\r\nimport NewTaskTreeForm from './NewTaskTreeForm'\r\nimport { Formik, FormikProps } from 'formik'\r\nimport moment from \"moment\"\r\nimport { DeleteOutlined, EditOutlined } from '@ant-design/icons'\r\n\r\nconst { Panel } = Collapse;\r\n\r\ntype InitialDrewerDataType = {\r\n    header: string,\r\n    taskId: false | number\r\n}\r\n\r\nconst initialDrewerData: InitialDrewerDataType = {\r\n    header: 'Create New Task',\r\n    taskId: false\r\n}\r\n\r\nconst TasksTreeBrowser: React.FC<TasksTreePropsType> = (props) => {\r\n    useEffect(() => {\r\n        if (props.taskList !== undefined && props.taskList.length === 0 && !props.isTaskListLoaded) {\r\n            props.getTaskList()\r\n        }\r\n        else if (props.taskList === undefined) {\r\n            props.getTaskList()\r\n        }\r\n        setVisible(false)\r\n        setInitialFormValues(initialValues)\r\n    }, [props.taskList])\r\n\r\n    const [visible, setVisible] = useState(false)\r\n    const [drawerData, setDrawerData] = useState(initialDrewerData)\r\n\r\n    const getSelectOptions = () => {\r\n        if (props.taskList !== undefined && props.taskList.length > 0) {\r\n            return props.taskList.map((item) => {\r\n                return ({\r\n                    name: item.name,\r\n                    value: item.id\r\n                })\r\n            })\r\n        } else {\r\n            return null\r\n        }\r\n    }\r\n\r\n    const initialValues: any = {\r\n        selectOptions: getSelectOptions(),\r\n        taskTypes: [\r\n            {\r\n                name: 'Простая задача',\r\n                value: 1\r\n            },\r\n            {\r\n                name: 'Задача с контектом',\r\n                value: 2\r\n            }\r\n        ],\r\n        task_type: 1,\r\n        name: '',\r\n        // new: true\r\n\r\n    }\r\n\r\n    const [initialFormValues, setInitialFormValues] = useState(initialValues)\r\n\r\n    const onClose = () => {\r\n        setVisible(false)\r\n    }\r\n\r\n    const showDrawer = () => {\r\n        setVisible(true)\r\n    }\r\n\r\n    const onAdd = () => {\r\n        setDrawerData(initialDrewerData)\r\n        setInitialFormValues(initialValues)\r\n        // console.log(initialValues)\r\n        showDrawer()\r\n    }\r\n\r\n    const handleSubmit = (formProps: any) => {\r\n        let formPropsCopy: any = { ...formProps }\r\n        delete formPropsCopy.selectOptions\r\n        delete formPropsCopy.taskTypes\r\n        if (formPropsCopy.time_to_complete !== undefined) {\r\n            formPropsCopy.time_to_complete = formPropsCopy.time_to_complete.format('HH:mm:ss')\r\n        }\r\n\r\n        formPropsCopy.user_id = props.userId\r\n        if (!drawerData.taskId) {\r\n            props.createNewTaskList(formPropsCopy)\r\n        } else {\r\n            // console.log(formPropsCopy)\r\n            props.updateTaskList(formPropsCopy, drawerData.taskId)\r\n        }\r\n\r\n    }\r\n\r\n    // console.log('initialFormValues: ', initialFormValues)\r\n\r\n    return (\r\n        <>\r\n            <div className=\"site-card-border-less-wrapper\">\r\n                <Card\r\n                    title={\r\n                        <div\r\n                            // className=\"col-12 col-md-12 col-lg-4\"\r\n                            className=\"inline\"\r\n                        >\r\n                            <div ><h2>Tasks Tree</h2></div>\r\n\r\n\r\n                        </div>\r\n                    }\r\n                    extra={\r\n                        <>\r\n                            <Button\r\n                                type=\"primary\"\r\n                                shape=\"round\"\r\n                                icon={\r\n                                    <div className=\"d-flex flex-wrap align-content-start\">\r\n                                        <FileAddOutlined style={{ fontSize: '18px' }} />\r\n                                        <span className=\"ml-1\" style={{ fontSize: '14px' }}>Add</span>\r\n                                    </div>}\r\n                                style={{ marginLeft: 10 }}\r\n                                onClick={onAdd}\r\n                            />\r\n\r\n                            <Button className=\"\"\r\n                                type=\"primary\"\r\n                                shape=\"round\"\r\n                                style={{ marginLeft: 10 }}\r\n                                // onClick={props.showModal}\r\n                                icon={\r\n                                    <div className=\"d-flex flex-wrap align-content-start\">\r\n                                        <SettingOutlined style={{ fontSize: '18px' }} />\r\n                                        <span className=\"ml-1\" style={{ fontSize: '14px' }}>Settings</span>\r\n                                    </div>}\r\n                            />\r\n                        </>\r\n                    }\r\n                    bordered={false}\r\n                >\r\n\r\n                    {/* { getTaskTreeItems(props.taskList) } */}\r\n                    <List\r\n                        size=\"small\"\r\n                        // header={<h2>Tasks Tree</h2>}\r\n                        // footer={<div>Footer</div>}\r\n                        bordered\r\n                        dataSource={getTaskTreeItems(\r\n                            props.taskList,\r\n                            props.deleteTaskList,\r\n                            props.updateTaskList,\r\n                            showDrawer,\r\n                            setDrawerData,\r\n                            initialFormValues,\r\n                            setInitialFormValues\r\n                        )}\r\n\r\n                        renderItem={item => <List.Item draggable>{item}</List.Item>}\r\n                    />\r\n\r\n                    <Drawer\r\n                        title={drawerData.header}\r\n                        placement=\"right\"\r\n                        closable={true}\r\n                        onClose={onClose}\r\n                        visible={visible}\r\n                        width=\"90%\"\r\n                    >\r\n\r\n                        <Formik\r\n                            initialValues={initialFormValues}\r\n                            onSubmit={handleSubmit}\r\n                            render={NewTaskTreeForm}\r\n                            enableReinitialize={true}\r\n                        />\r\n\r\n                    </Drawer>\r\n\r\n                </Card>\r\n            </div>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default TasksTreeBrowser\r\n\r\nconst getTaskTreeItems = (\r\n    taskList: Array<any>,\r\n    deleteTask: (taskId: number) => void,\r\n    updateTaskList: (values: any, taskId: number)=> void,\r\n    showDrawer: () => void,\r\n    setDrawerData: (drawerData: any) => void,\r\n    initialFormValues: any,\r\n    setInitialFormValues: (initialFormValues: any) => void\r\n) => {\r\n    const onEdit = (task: any) => {\r\n        setDrawerData({\r\n            header: 'Edit: \"' + task.name + '\"',\r\n            taskId: task.id\r\n        })\r\n\r\n\r\n        let day = moment().zone('GMT')\r\n        if (task.time_to_complete !== null) {\r\n            const splitTime = task.time_to_complete.split(/:/)\r\n            day.hours(parseInt(splitTime[0])).minutes(parseInt(splitTime[1])).seconds(0).milliseconds(0);\r\n        } else {\r\n            day.hours(0).minutes(0).seconds(0).milliseconds(0);\r\n        }\r\n\r\n        setInitialFormValues(\r\n            {\r\n                ...initialFormValues,\r\n                // new: false,\r\n                name: task.name,\r\n                time_to_complete: day,\r\n                descriptions: task.descriptions,\r\n                parent_id: task.parent_id,\r\n                task_type: Number(task.task_type)\r\n            }\r\n        )\r\n        showDrawer()\r\n    }\r\n\r\n    const onStatusChange = (e:any) => {\r\n        const values = { isCompleted: e.target.checked }\r\n        console.log(e)\r\n        updateTaskList(values, e.target.id)\r\n    }\r\n\r\n    if (taskList !== undefined && taskList.length > 0) {\r\n        return taskList.map((item) => {\r\n            return (\r\n                <>\r\n                    <div><Checkbox checked={item.isCompleted} id={item.id} onClick={onStatusChange}/></div>\r\n                    <div className=\"w-100 float-left\" key={item.id}>\r\n                        <div className=\"ml-3 float-left\">\r\n                            \r\n                            {item.isCompleted ? <span className=\"text-black-50\">{item.name}</span> : <span>{item.name}</span>}\r\n                            \r\n                        </div>\r\n                        <div className=\"ml-3 float-right\">\r\n                            {item.time_to_complete}\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"d-flex flex-row\">\r\n                        <Button className=\"\"\r\n                            type=\"primary\"\r\n                            shape=\"circle\"\r\n                            size=\"small\"\r\n                            style={{ marginLeft: 10 }}\r\n                            onClick={() => { onEdit(item) }}\r\n                            icon={\r\n                                <div className=\"d-flex flex-wrap align-content-start\">\r\n                                    <EditOutlined className=\"ml-1\" style={{ fontSize: '14px' }} />\r\n                                </div>\r\n                            }\r\n                        />\r\n                        <Button className=\"\"\r\n                            type=\"primary\"\r\n                            danger\r\n                            shape=\"circle\"\r\n                            size=\"small\"\r\n                            style={{ marginLeft: 10 }}\r\n                            onClick={() => { deleteTask(item.id) }}\r\n                            icon={\r\n                                <div className=\"d-flex flex-wrap align-content-start\">\r\n                                    <DeleteOutlined className=\"ml-1\" style={{ fontSize: '14px' }} />\r\n                                </div>\r\n                            }\r\n                        />\r\n                    </div>\r\n                </>\r\n            )\r\n        })\r\n    } else {\r\n        return []\r\n    }\r\n}","import { SwipeAction, List } from 'antd-mobile'\r\nimport React from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { TaskListType } from '../../Types/types'\r\nimport { actions } from './../../redux/TaskListReducer'\r\n\r\nconst Item = List.Item\r\n\r\n\r\nconst time_to_complete = new Date()\r\ntime_to_complete.setHours(0)\r\ntime_to_complete.setMinutes(0)\r\ntime_to_complete.setSeconds(0)\r\ntime_to_complete.setMilliseconds(0)\r\n\r\nexport type OwnTaskTreeItemsType = {\r\n    taskItem: TaskListType,\r\n    deleteTaskList: (taskId: number) => void,\r\n    showDrawer: () => void,\r\n    setDrawerData: (drawerData: any) => void,\r\n    initialFormValues: any,\r\n    setInitialFormValues: (initialFormValues: any) => void\r\n    updateTaskList: (values: any, taskId: number) => void,\r\n}\r\nexport const TaskTreeItemMobile: React.FC<OwnTaskTreeItemsType> = (props) => {\r\n    const dispatch = useDispatch()\r\n\r\n    const onSubTask = () => {\r\n        // console.log(props.taskItem.id, ': onSubTask')\r\n        props.setDrawerData({\r\n            header: 'SubTask for: \"' + props.taskItem.name + '\"',\r\n            taskId: false\r\n        })\r\n        console.log('parent_id:', props.taskItem.parent_id)\r\n\r\n        props.setInitialFormValues({\r\n            ...props.initialFormValues,\r\n            name: '',\r\n            time_to_complete: time_to_complete,\r\n            descriptions: '',\r\n            parent_id: [Number(props.taskItem.id)],\r\n            task_type: [0]\r\n        })\r\n        props.showDrawer()\r\n    }\r\n\r\n    const onEdit = (task: TaskListType) => {\r\n        props.setDrawerData({\r\n            header: 'Edit: \"' + task.name + '\"',\r\n            taskId: task.id\r\n        })\r\n\r\n        // let new_time_to_complete = {...time_to_complete}\r\n        let new_time_to_complete = new Date(time_to_complete.getTime())\r\n        if (task.time_to_complete !== null) {\r\n            const splitTime = task.time_to_complete.split(/:/)\r\n            new_time_to_complete.setHours(parseInt(splitTime[0]))\r\n            new_time_to_complete.setMinutes(parseInt(splitTime[1]))\r\n            new_time_to_complete.setSeconds(0)\r\n            new_time_to_complete.setMilliseconds(0)\r\n        } else {\r\n            \r\n        }\r\n\r\n        props.setInitialFormValues({\r\n            ...props.initialFormValues,\r\n            name: task.name,\r\n            time_to_complete: new_time_to_complete,\r\n            descriptions: task.descriptions,\r\n            parent_id: [task.parent_id],\r\n            task_type: [Number(task.task_type)]\r\n        })\r\n\r\n        props.showDrawer()\r\n    }\r\n\r\n    const onItemOpen = () => {\r\n        dispatch(actions.setSelectedTasks(props.taskItem.id));\r\n    }\r\n\r\n    const onComplet = () => {\r\n        console.log('onComplet')\r\n        const values = { isCompleted: !props.taskItem.isCompleted }\r\n        props.updateTaskList(values, props.taskItem.id)\r\n    }\r\n\r\n    return (\r\n        <SwipeAction\r\n            style={{ backgroundColor: 'gray' }}\r\n            autoClose\r\n            right={[\r\n                {\r\n                    text: 'SubTask',\r\n                    onPress: () => { onSubTask() },\r\n                    style: { backgroundColor: 'green', color: 'white' },\r\n                },\r\n                {\r\n                    text: 'Delete',\r\n                    onPress: () => props.deleteTaskList(props.taskItem.id),\r\n                    style: { backgroundColor: '#F4333C', color: 'white' },\r\n                },\r\n            ]}\r\n            left={[\r\n                {\r\n                    text: 'Edit',\r\n                    onPress: () => { onEdit(props.taskItem) },\r\n                    style: { backgroundColor: '#108ee9', color: 'white' },\r\n                },\r\n                {\r\n                    text: props.taskItem.isCompleted ? 'Not Done' : 'Done',\r\n                    onPress: () => onComplet(),\r\n                    style: { backgroundColor: 'green', color: 'white' },\r\n                },\r\n            ]}\r\n        // onOpen={() => console.log('global open')}\r\n        // onClose={() => console.log('global close')}\r\n        >\r\n            <Item\r\n                // className=\"my-3\"\r\n                onClick={onItemOpen}\r\n                // arrow=\"horizontal\"\r\n                key={props.taskItem.id}\r\n                wrap\r\n            >\r\n                {/* {props.taskItem.isCompleted ? <span className=\"text-black-50\">{props.taskItem.name}</span> : <span>{props.taskItem.name}</span>} */}\r\n\r\n                <div className=\"w-100 row \" key={props.taskItem.id}>\r\n                    <div className=\"col-10\">\r\n                        {props.taskItem.isCompleted ? \r\n                        <span className=\"text-black-50 text-break\">{props.taskItem.name}</span> \r\n                        : \r\n                        <span className=\"text-break\">{props.taskItem.name}</span>}\r\n                    </div>\r\n                    <div className=\"col-2\">\r\n                        {props.taskItem.time_to_complete.split(/:/)[0]+':'+props.taskItem.time_to_complete.split(/:/)[1]}\r\n                    </div>\r\n                </div>\r\n\r\n            </Item>\r\n\r\n        </SwipeAction>\r\n    )\r\n}","import React, { useState, useEffect } from 'react'\r\nimport { TasksTreePropsType } from './TasksTreeContainer'\r\nimport { Drawer, List, SwipeAction, Icon, Button, Card, WingBlank, WhiteSpace } from 'antd-mobile'\r\nimport NewTaskTreeForm from './NewTaskTreeForm'\r\nimport './TasksTreeMobile.css'\r\nimport { Formik } from 'formik'\r\nimport { Spin, Empty } from 'antd'\r\nimport { propTypes } from 'react-bootstrap/esm/Image'\r\nimport moment from \"moment\"\r\nimport { TaskListType } from '../../Types/types'\r\nimport { useDispatch } from 'react-redux'\r\nimport { TaskTreeItemMobile } from './TaskTreeItem'\r\n\r\nconst Item = List.Item\r\n\r\ntype InitialDrewerDataType = {\r\n    header: string,\r\n    taskId: false | number\r\n}\r\n\r\nconst initialDrewerData: InitialDrewerDataType = {\r\n    header: 'Create New Task',\r\n    taskId: false\r\n}\r\n\r\nconst TasksTreeMobile: React.FC<TasksTreePropsType> = (props) => {\r\n    useEffect(() => {\r\n        if (props.taskList && props.taskList.length === 0 && !props.isTaskListLoaded) {\r\n            props.getTaskList()\r\n        } else if (props.taskList === undefined) {\r\n            props.getTaskList()\r\n        }\r\n        setVisible(false)\r\n        // console.log('initialValues: ', initialValues)\r\n        setInitialFormValues(initialValues)\r\n    }, [props.taskList])\r\n\r\n    const getSelectOptions = () => {\r\n        if (props.taskList !== undefined && props.taskList.length > 0) {\r\n            return props.taskList.map((item) => {\r\n                return ({\r\n                    name: item.name,\r\n                    value: item.id\r\n                })\r\n            })\r\n        } else {\r\n            //console.log('вернули пыстой список', props.taskList)\r\n            return null\r\n        }\r\n    }\r\n\r\n    let initialTimeToComplete = new Date()\r\n    initialTimeToComplete.setHours(0)\r\n    initialTimeToComplete.setMinutes(0)\r\n    initialTimeToComplete.setSeconds(0)\r\n    initialTimeToComplete.setMilliseconds(0)\r\n\r\n    const initialValues: any = {\r\n        selectOptions: getSelectOptions(),\r\n        taskTypes: [\r\n            {\r\n                name: 'Простая задача',\r\n                value: 1\r\n            },\r\n            {\r\n                name: 'Задача с контектом',\r\n                value: 2\r\n            }\r\n        ],\r\n        task_type: 1,\r\n        time_to_complete: initialTimeToComplete\r\n        // parent_id:[]\r\n    }\r\n\r\n    const [visible, setVisible] = useState(false)\r\n    const [initialFormValues, setInitialFormValues] = useState(initialValues)\r\n    const [drawerData, setDrawerData] = useState(initialDrewerData)\r\n\r\n    const handleSubmit = (formProps: any) => {\r\n        // console.log('handleSubmit TasksTreeMobile: ', formProps.time_to_complete)\r\n        let formPropsCopy: any = { ...formProps }\r\n        delete formPropsCopy.selectOptions\r\n        delete formPropsCopy.taskTypes\r\n        if (formPropsCopy.time_to_complete !== undefined) {\r\n            // console.log(formPropsCopy.time_to_complete)\r\n            const time_to_complete = moment(formPropsCopy.time_to_complete)\r\n            formPropsCopy.time_to_complete = time_to_complete.format('HH:mm:ss')\r\n        }\r\n        if (Array.isArray(formPropsCopy.parent_id)) {\r\n            formPropsCopy.parent_id = formPropsCopy.parent_id[0]\r\n        }\r\n\r\n        //console.log('NewTaskMobile submit: ', formPropsCopy)\r\n\r\n        formPropsCopy.user_id = props.userId\r\n        // props.createNewTaskList(formPropsCopy)\r\n        // setInitialFormValues(initialValues)\r\n        console.log('taskId: ', drawerData.taskId)\r\n        if (!drawerData.taskId) {\r\n            // console.log('createNewTaskList: ', formPropsCopy)\r\n            props.createNewTaskList(formPropsCopy)\r\n        } else {\r\n            console.log('updateTaskList: ', formPropsCopy)\r\n            props.updateTaskList(formPropsCopy, drawerData.taskId)\r\n        }\r\n    }\r\n\r\n    const onAdd = (args: any) => {\r\n        if (props.selectedTasks.length !== 0) {\r\n            setDrawerData({ ...drawerData, taskId: false })\r\n            console.log('sub')\r\n            console.log('initialValues', initialValues)\r\n            setInitialFormValues({ ...initialValues, parent_id: [Number(props.selectedTasks[props.selectedTasks.length - 1])] })\r\n        } else {\r\n            setInitialFormValues(initialValues)\r\n        }\r\n\r\n        setVisible(!visible)\r\n    }\r\n\r\n    const showDrawer = () => {\r\n        setVisible(true)\r\n    }\r\n\r\n    const onBack = () => {\r\n        props.backSelectedTasks()\r\n    }\r\n\r\n    console.log('TasksTreeMobile props: ', props)\r\n    // console.log('TasksTreeMobile name: ', initialFormValues.name)\r\n\r\n    // if (props.taskList !== undefined) {\r\n    return (\r\n        <WingBlank size=\"lg\">\r\n            <WhiteSpace size=\"lg\" />\r\n            <Card>\r\n                <Card.Header\r\n                    title={<h4 className=\"w-100 text-center\">Tasks Tree</h4>}\r\n                    extra={\r\n                        <div className=\"d-flex flex-row\">\r\n                            {props.selectedTasks.length > 0 && !visible ?\r\n                                <Button\r\n                                    inline\r\n                                    size=\"small\"\r\n                                    className=\"mx-3 my-2\"\r\n                                    // style={{ marginRight: '4px' }} \r\n                                    onClick={onBack}\r\n                                    type=\"primary\"\r\n                                >\r\n                                    Back\r\n                                    </Button>\r\n                                :\r\n                                null\r\n                            }\r\n                            <Button\r\n                                inline\r\n                                size=\"small\"\r\n                                className=\"mx-3 my-2\"\r\n                                // style={{ marginRight: '4px' }} \r\n                                onClick={onAdd}\r\n                                type=\"primary\"\r\n                            >\r\n                                {visible ? 'Close' : 'Add'}\r\n                            </Button>\r\n                        </div>\r\n                    }\r\n                >\r\n\r\n                </Card.Header>\r\n\r\n                <Drawer\r\n                    className=\"my-drawer\"\r\n                    style={{ minHeight: document.documentElement.clientHeight }}\r\n                    // enableDragHandle\r\n                    contentStyle={{ color: '#A6A6A6', textAlign: 'center', paddingTop: 0, width: \"100%\" }}\r\n                    sidebar={\r\n                        <div className=\"mt-4\">\r\n                            <Formik\r\n                                initialValues={initialFormValues}\r\n                                onSubmit={handleSubmit}\r\n                                render={NewTaskTreeForm}\r\n                                enableReinitialize={true}\r\n                            />\r\n                        </div>\r\n                    }\r\n                    open={visible}\r\n                    onOpenChange={onAdd}\r\n                >\r\n                    <List>\r\n\r\n\r\n                        {props.taskList !== undefined ?\r\n                            props.taskList.map((item) => {\r\n                                let parentId: number\r\n                                if (props.selectedTasks.length !== 0) {\r\n                                    parentId = props.selectedTasks[props.selectedTasks.length - 1]\r\n                                    if (item.parent_id === parentId) {\r\n                                        return (\r\n                                            <TaskTreeItemMobile\r\n                                                taskItem={item}\r\n                                                deleteTaskList={props.deleteTaskList}\r\n                                                showDrawer={showDrawer}\r\n                                                setDrawerData={setDrawerData}\r\n                                                initialFormValues={initialFormValues}\r\n                                                setInitialFormValues={setInitialFormValues}\r\n                                                updateTaskList={props.updateTaskList}\r\n                                            />\r\n                                        )\r\n                                    }\r\n                                } else {\r\n                                    if (item.parent_id === null) {\r\n                                        return (\r\n                                            <TaskTreeItemMobile\r\n                                                taskItem={item}\r\n                                                deleteTaskList={props.deleteTaskList}\r\n                                                showDrawer={showDrawer}\r\n                                                setDrawerData={setDrawerData}\r\n                                                initialFormValues={initialFormValues}\r\n                                                setInitialFormValues={setInitialFormValues}\r\n                                                updateTaskList={props.updateTaskList}\r\n                                            />\r\n                                        )\r\n                                    }\r\n                                }\r\n\r\n                            })\r\n                            :\r\n                            null\r\n                        }\r\n\r\n                    </List>\r\n                </Drawer>\r\n\r\n\r\n\r\n            </Card>\r\n        </WingBlank>\r\n    )\r\n    // } else {\r\n    //     return <Spin key=\"spin\" size=\"large\" />\r\n    // }\r\n}\r\n\r\nexport default TasksTreeMobile\r\n\r\n// const getTaskTreeItems = (\r\n//     taskList: Array<any>,\r\n//     deleteTaskList: (taskId: number) => void,\r\n//     showDrawer: () => void,\r\n//     setDrawerData: (drawerData: any) => void,\r\n//     initialFormValues: any,\r\n//     setInitialFormValues: (initialFormValues: any) => void\r\n// ) => {\r\n//     const onEdit = (task: any) => {\r\n//         // console.log(task)\r\n\r\n//         setDrawerData({\r\n//             header: 'Edit: \"' + task.name + '\"',\r\n//             taskId: task.id\r\n//         })\r\n\r\n//         let day = new Date()\r\n//         if (task.time_to_complete !== null) {\r\n//             const splitTime = task.time_to_complete.split(/:/)\r\n//             day.setHours(parseInt(splitTime[0]))\r\n//             day.setMinutes(parseInt(splitTime[1]))\r\n//             day.setSeconds(0)\r\n//             day.setMilliseconds(0)\r\n//         } else {\r\n//             day.setHours(0)\r\n//             day.setMinutes(0)\r\n//             day.setSeconds(0)\r\n//             day.setMilliseconds(0)\r\n//         }\r\n\r\n//         setInitialFormValues(\r\n//             {\r\n//                 ...initialFormValues,\r\n//                 // new: false,\r\n//                 name: task.name,\r\n//                 time_to_complete: day,\r\n//                 descriptions: task.descriptions,\r\n//                 parent_id: [task.parent_id],\r\n//                 task_type: [Number(task.task_type)]\r\n//             }\r\n//         )\r\n\r\n//         showDrawer()\r\n//     }\r\n\r\n//     const onItemOpen = (itemId: number) => {\r\n//         console.log(itemId, 'is open')\r\n//         // const dispatch = useDispatch()\r\n//         // dispatch( { type: 'SN/TASK_LIST/SET_SELECTED_TASK', itemId } )\r\n//     }\r\n\r\n//     // console.log(taskList)\r\n\r\n//     if (taskList && taskList.length > 0) {\r\n//         return taskList.map((item) => {\r\n//             //console.log('!!!!!!!')\r\n//             return (\r\n//                 <SwipeAction\r\n//                     style={{ backgroundColor: 'gray' }}\r\n//                     autoClose\r\n//                     right={[\r\n//                         {\r\n//                             text: 'Cancel',\r\n//                             onPress: () => {\r\n//                                 //console.log('cancel') \r\n//                             },\r\n//                             style: { backgroundColor: '#ddd', color: 'white' },\r\n//                         },\r\n//                         {\r\n//                             text: 'Delete',\r\n//                             onPress: () => deleteTaskList(item.id),\r\n//                             style: { backgroundColor: '#F4333C', color: 'white' },\r\n//                         },\r\n//                     ]}\r\n//                     left={[\r\n//                         {\r\n//                             text: 'Edit',\r\n//                             onPress: () => { onEdit(item) },\r\n//                             style: { backgroundColor: '#108ee9', color: 'white' },\r\n//                         },\r\n//                         {\r\n//                             text: 'Execute',\r\n//                             onPress: () => {\r\n//                                 // console.log('cancel')\r\n//                             },\r\n//                             style: { backgroundColor: 'green', color: 'white' },\r\n//                         },\r\n//                     ]}\r\n//                 // onOpen={() => console.log('global open')}\r\n//                 // onClose={() => console.log('global close')}\r\n//                 >\r\n//                     <Item\r\n//                         // className=\"my-3\"\r\n//                         onClick={() => { onItemOpen(item.id) }}\r\n//                         arrow=\"horizontal\"\r\n//                         key={item.id}\r\n//                     >\r\n//                         {item.name}\r\n//                     </Item>\r\n\r\n//                 </SwipeAction>\r\n//             )\r\n//         })\r\n//     } else {\r\n//         return (\r\n//             <Empty />\r\n//         )\r\n//     }\r\n\r\n\r\n// }\r\n\r\n","import {connect} from 'react-redux'\r\n// import TasksTree, { OwnTasksTreePropsType } from './TasksTree'\r\nimport { AppStateType } from '../../redux/store'\r\nimport {getTaskList, createNewTaskList, deleteTaskList, updateTaskList, actions} from './../../redux/TaskListReducer'\r\nimport { isMobile } from 'react-device-detect'\r\nimport TasksTreeBrowser from './TasksTreeBrowser'\r\nimport TasksTreeMobile from './TasksTreeMobile'\r\n\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    getTaskList: ()=>void,\r\n    createNewTaskList: (values: any)=>void,\r\n    deleteTaskList: (taskId: number)=>void,\r\n    updateTaskList: (values: any, taskId: number)=> void,\r\n    backSelectedTasks: ()=>void,\r\n}\r\n\r\ntype OwnTasksTreePropsType = {\r\n\r\n}\r\n\r\nexport type TasksTreePropsType = MapPropsType & MapDispatchPropsType & OwnTasksTreePropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        taskList: state.taskList.taskList,\r\n        userId: state.auth.user?.id,\r\n        isTaskListLoaded: state.taskList.isTaskListLoaded,\r\n        selectedTasks: state.taskList.selectedTasks\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnTasksTreePropsType, AppStateType>(mapStateToProps, \r\n    {getTaskList, createNewTaskList, deleteTaskList, updateTaskList, backSelectedTasks: actions.backSelectedTasks}) \r\n    (isMobile ? TasksTreeMobile : TasksTreeBrowser)\r\n    \r\n\r\n","import React, { ReactNode } from 'react'\r\nimport { Form, Field, FormikProps } from \"formik\"\r\nimport { AntCheckbox, AntInput, AntInputPassword } from '../../utils/Formik/CreateAntField'\r\nimport { validateEmail, validateRequired } from '../../utils/Formik/ValidateFields'\r\n\r\nconst RegisterForm: ((props: FormikProps<{}>) => ReactNode) = (props) => {\r\n    return(\r\n        <Form\r\n            className=\"form-container\" \r\n            onSubmit={props.handleSubmit}\r\n        >\r\n            <Field\r\n                component={AntInput}\r\n                name=\"name\"\r\n                type=\"text\"\r\n                label=\"Name\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n            <Field\r\n                component={AntInput}\r\n                name=\"email\"\r\n                type=\"email\"\r\n                label=\"Email\"\r\n                validate={validateEmail}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n            <Field\r\n                component={AntInputPassword}\r\n                name=\"password\"\r\n                type=\"password\"\r\n                label=\"Password\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n\r\n            <Field\r\n                component={AntInputPassword}\r\n                name=\"c_password\"\r\n                type=\"password\"\r\n                label=\"Confirm\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n\r\n            <Field\r\n                component={AntCheckbox}\r\n                name=\"remember\"\r\n                label=\"Remember Me\"\r\n                submitCount={props.submitCount}\r\n            />\r\n            <div className=\"submit-container\">\r\n                <button className=\"ant-btn ant-btn-primary\" type=\"submit\">\r\n                    Register\r\n                </button>\r\n            </div>\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default RegisterForm","import { Formik } from 'formik'\r\nimport React, { useEffect } from 'react'\r\nimport RegisterForm from './RegisterForm'\r\nimport { RegisterPropsType } from './RegisterContainer'\r\nimport { propTypes } from 'react-bootstrap/esm/Image'\r\nimport { Redirect, Route, useHistory } from 'react-router-dom'\r\n\r\nconst initialValues = {\r\n    // parent_id :['1', '2', '3']\r\n}\r\n\r\nexport type OwnRegisterPropsType = {}\r\n\r\nconst Register: React.FC<RegisterPropsType> = (props) => {\r\n    let history = useHistory();\r\n    useEffect( () => {\r\n        //console.log('useEffect in Register: ', props.isAuth)\r\n        if(props.isAuth) {\r\n            history.replace(props.appLocation+'toDoList')\r\n        }\r\n    }, [props.isAuth])\r\n    const handleSubmit = (formProps: any) => {\r\n        //console.log(formProps)\r\n        formProps.status = 'guest'\r\n        props.register(formProps)\r\n    }\r\n\r\n    //console.log('Register', props)\r\n    return (\r\n        <>\r\n            <h1 className=\"mb-5 mx-auto\">Register Form</h1>\r\n            <Formik\r\n                initialValues={initialValues}\r\n                onSubmit={handleSubmit}\r\n                render={RegisterForm}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Register","import {connect} from 'react-redux'\r\nimport Register, { OwnRegisterPropsType } from './Register'\r\nimport { AppStateType } from '../../redux/store'\r\nimport {register} from './../../redux/authReducer'\r\n\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    register: (creds: any)=>void\r\n}\r\n\r\nexport type RegisterPropsType = MapPropsType & MapDispatchPropsType & OwnRegisterPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n        appLocation: state.app.location\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnRegisterPropsType, AppStateType>(mapStateToProps, \r\n    {register}) \r\n    (Register)\r\n    \r\n\r\n","import React, { useEffect, useState } from 'react'\r\nimport './App.css'\r\nimport ToDoList from './Components/ToDo/ToDoListContainer'\r\nimport { BrowserRouter, Redirect, Route, Switch, withRouter, useLocation } from 'react-router-dom'\r\nimport { connect, Provider } from 'react-redux'\r\nimport 'antd/dist/antd.css'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport 'antd-mobile/dist/antd-mobile.css'\r\nimport store, { AppStateType } from './redux/store'\r\nimport { Layout, Spin } from 'antd'\r\nimport { compose } from 'redux'\r\nimport { initializeApp, addLocation } from './redux/appReducer'\r\nimport {login} from './redux/authReducer'\r\nimport Header from './Components/Header/HeaderContainer'\r\nimport { isMobile } from \"react-device-detect\"\r\nimport Login from './Components/Login/LoginContainer'\r\nimport Orders from './Components/Orders/OrdersContainer'\r\nimport TasksTree from './Components/TasksTree/TasksTreeContainer'\r\nimport Register from './Components/Register/RegisterContainer'\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\ntype DispatchPropsType = {\r\n  initializeApp: () => void,\r\n  addLocation: (location: string) => void,\r\n  login: (data: any)=> void,\r\n}\r\n\r\nconst App = (props: MapPropsType & DispatchPropsType) => {\r\n  const [location, setLocation] = useState(useLocation().pathname)\r\n\r\n  useEffect(() => {\r\n    if (!props.initialized) {\r\n      // http://localhost:3000/?email=7383125@gmail.com&password=gfhjkm4501\r\n      let instanseCreds = parseQueryString()\r\n      if (instanseCreds.email && instanseCreds.password) {\r\n        instanseCreds.remember = true\r\n        props.login(instanseCreds)\r\n      }\r\n\r\n      if (location === '/front1/') {\r\n        props.addLocation(location)\r\n      }\r\n      //console.log('initialized FALSE', props)\r\n      props.initializeApp()\r\n    } else {\r\n      //console.log('initialized TRUE', props)\r\n    }\r\n  }, [props.initialized])\r\n\r\n\r\n  if (!props.initialized) {\r\n    return <Spin key=\"spin\" size=\"large\" />\r\n  }\r\n\r\n  return (\r\n    <Layout>\r\n      <Header />\r\n      <Switch>\r\n        {!props.isAuth ?\r\n          <Route exact path={props.appLocation}\r\n            render={() => <Redirect to={props.appLocation+'login'} />} />\r\n        :\r\n          <Route exact path={props.appLocation}\r\n            render={() => <Redirect to={props.appLocation+'toDoList'} />} />\r\n        }\r\n        \r\n        {props.isAuth ?\r\n            <Route exact path={props.appLocation+'login'}\r\n              render={ () => <Redirect to={props.appLocation+'toDoList'} /> } \r\n            />  \r\n          :\r\n            null\r\n        }\r\n\r\n        <Route path={props.appLocation+'login'}\r\n          render={() => <Login />} />\r\n        \r\n         <Route path={props.appLocation+'toDoList'}\r\n            render={() => <ToDoList />} />\r\n\r\n          <Route path={props.appLocation+'tasksTree'}\r\n            render={() => <TasksTree />} />\r\n\r\n          <Route path={props.appLocation+'orders'}\r\n            render={() => <Orders />} />\r\n\r\n          <Route path={props.appLocation+'register'}\r\n            render={() => <Register />} />\r\n\r\n          <Route path={props.appLocation+'*'}\r\n            render={() => <div>404 NOT FOUND</div>} />\r\n      </Switch>\r\n    </Layout>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n  initialized: state.app.initialized,\r\n  appLocation: state.app.location,\r\n  isAuth: state.auth.isAuth\r\n})\r\n\r\nlet AppContainer = compose<React.ComponentType>(\r\n  withRouter,\r\n  connect(mapStateToProps, { initializeApp, addLocation, login }))(App)\r\n\r\nconst MainApp = () => {\r\n  return (\r\n    <BrowserRouter>\r\n      <Provider store={store}>\r\n        <div className={isMobile ? \"\" : \"container\"}>\r\n          <AppContainer />\r\n        </div>\r\n      </Provider>\r\n    </BrowserRouter>\r\n  )\r\n}\r\n\r\nexport default MainApp\r\n\r\nconst parseQueryString = (): any => {\r\n  const params:  any = {}\r\n  document.location.search.substr(1).split('&').forEach( (pair) => {\r\n      const [key, value] = pair.split('=')\r\n      params[key] = value\r\n  })\r\n  return params;\r\n};\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './App'\r\nimport reportWebVitals from './reportWebVitals'\r\n\r\nReactDOM.render(\r\n  // <React.StrictMode>\r\n    <App />\r\n  // </React.StrictMode>\r\n  ,\r\n  document.getElementById('root')\r\n)\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(// //console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals()\r\n"],"sourceRoot":""}
[{"C:\\OSPanel\\domains\\epam-app\\src\\index.tsx":"1","C:\\OSPanel\\domains\\epam-app\\src\\reportWebVitals.ts":"2","C:\\OSPanel\\domains\\epam-app\\src\\App.tsx":"3","C:\\OSPanel\\domains\\epam-app\\src\\api\\api.ts":"4","C:\\OSPanel\\domains\\epam-app\\src\\redux\\taskReducer.ts":"5","C:\\OSPanel\\domains\\epam-app\\src\\redux\\store.ts":"6","C:\\OSPanel\\domains\\epam-app\\src\\api\\taskApi.ts":"7","C:\\OSPanel\\domains\\epam-app\\src\\Components\\TimeScale\\TaskItem\\TaskItem.tsx":"8","C:\\OSPanel\\domains\\epam-app\\src\\utils\\array-helpers.ts":"9","C:\\OSPanel\\domains\\epam-app\\src\\Components\\TimeScale\\TimeScale.tsx":"10","C:\\OSPanel\\domains\\epam-app\\src\\Components\\TimeScale\\TimeScaleContainer.tsx":"11","C:\\OSPanel\\domains\\epam-app\\src\\Components\\TimeScale\\TaskItem\\TaskItemContainer.tsx":"12","C:\\OSPanel\\domains\\front1\\src\\index.tsx":"13","C:\\OSPanel\\domains\\front1\\src\\reportWebVitals.ts":"14","C:\\OSPanel\\domains\\front1\\src\\App.tsx":"15","C:\\OSPanel\\domains\\front1\\src\\redux\\store.ts":"16","C:\\OSPanel\\domains\\front1\\src\\redux\\appReducer.ts":"17","C:\\OSPanel\\domains\\front1\\src\\Components\\ToDo\\ToDoListContainer.tsx":"18","C:\\OSPanel\\domains\\front1\\src\\Components\\Header\\Header.tsx":"19","C:\\OSPanel\\domains\\front1\\src\\Components\\Login\\Login.tsx":"20","C:\\OSPanel\\domains\\front1\\src\\redux\\authReducer.ts":"21","C:\\OSPanel\\domains\\front1\\src\\redux\\taskReducer.ts":"22","C:\\OSPanel\\domains\\front1\\src\\Components\\ToDo\\ToDoList.tsx":"23","C:\\OSPanel\\domains\\front1\\src\\Components\\Header\\MenuBrowser.tsx":"24","C:\\OSPanel\\domains\\front1\\src\\Components\\Header\\MenuMobile.tsx":"25","C:\\OSPanel\\domains\\front1\\src\\api\\authAPI.ts":"26","C:\\OSPanel\\domains\\front1\\src\\api\\taskApi.ts":"27","C:\\OSPanel\\domains\\front1\\src\\Components\\TimeScale\\TimeScaleContainer.tsx":"28","C:\\OSPanel\\domains\\front1\\src\\Components\\ToDo\\Settings\\SettingsModal.tsx":"29","C:\\OSPanel\\domains\\front1\\src\\Components\\ToDo\\ToDoHeader\\ToDoHeaderContainer.tsx":"30","C:\\OSPanel\\domains\\front1\\src\\Components\\ToDo\\NewTaskForm\\NewTaskFormContainer.tsx":"31","C:\\OSPanel\\domains\\front1\\src\\api\\api.ts":"32","C:\\OSPanel\\domains\\front1\\src\\Components\\TimeScale\\TimeScale.tsx":"33","C:\\OSPanel\\domains\\front1\\src\\Components\\ToDo\\ToDoHeader\\ToDoHeader.tsx":"34","C:\\OSPanel\\domains\\front1\\src\\Components\\ToDo\\NewTaskForm\\NewTaskForm.tsx":"35","C:\\OSPanel\\domains\\front1\\src\\utils\\array-helpers.ts":"36","C:\\OSPanel\\domains\\front1\\src\\Components\\TimeScale\\TaskItem\\TaskItemContainer.tsx":"37","C:\\OSPanel\\domains\\front1\\src\\Components\\TimeScale\\TaskItem\\TaskItem.tsx":"38","C:\\OSPanel\\domains\\front1\\src\\Components\\Header\\HeaderContainer.tsx":"39","C:\\OSPanel\\domains\\front1\\src\\Components\\Orders\\OrdersContainer.tsx":"40","C:\\OSPanel\\domains\\front1\\src\\Components\\Orders\\Orders.tsx":"41","C:\\OSPanel\\domains\\front1\\src\\Components\\Header\\MenuMobileContainer.tsx":"42","C:\\OSPanel\\domains\\front1\\src\\utils\\Formik\\CreateAntField.tsx":"43","C:\\OSPanel\\domains\\front1\\src\\Components\\Login\\LoginForm.tsx":"44","C:\\OSPanel\\domains\\front1\\src\\utils\\Formik\\ValidateFields.ts":"45","C:\\OSPanel\\domains\\front1\\src\\Components\\TasksTree\\TasksTreeContainer.tsx":"46","C:\\OSPanel\\domains\\front1\\src\\redux\\TaskListReducer.ts":"47","C:\\OSPanel\\domains\\front1\\src\\api\\taskListAPI.ts":"48","C:\\OSPanel\\domains\\front1\\src\\Components\\TasksTree\\TasksTreeMobile.tsx":"49","C:\\OSPanel\\domains\\front1\\src\\Components\\Login\\LoginContainer.tsx":"50","C:\\OSPanel\\domains\\front1\\src\\Components\\Register\\Register.tsx":"51","C:\\OSPanel\\domains\\front1\\src\\Components\\Register\\RegisterForm.tsx":"52","C:\\OSPanel\\domains\\front1\\src\\Components\\Register\\RegisterContainer.tsx":"53","C:\\OSPanel\\domains\\front1\\src\\Components\\Header\\MenuBrowserConainer.tsx":"54","C:\\OSPanel\\domains\\front1\\src\\Components\\TasksTree\\TasksTreeBrowser.tsx":"55","C:\\OSPanel\\domains\\front1\\src\\Components\\TasksTree\\NewTaskTreeForm.tsx":"56","C:\\OSPanel\\domains\\front1\\src\\Components\\Header\\MenuPopover.tsx":"57","C:\\OSPanel\\domains\\front1\\src\\Components\\ToDo\\Settings\\SettingsModalContainer.tsx":"58","C:\\OSPanel\\domains\\front1\\src\\Components\\ToDo\\ToDoHeader\\ToDoHeaderMobile.tsx":"59","C:\\OSPanel\\domains\\front1\\src\\Components\\TasksTree\\TaskTreeItem.tsx":"60"},{"size":523,"mtime":1611574553464,"results":"61","hashOfConfig":"62"},{"size":440,"mtime":1611045973906,"results":"63","hashOfConfig":"62"},{"size":489,"mtime":1611647363642,"results":"64","hashOfConfig":"62"},{"size":490,"mtime":1611575513710,"results":"65","hashOfConfig":"62"},{"size":4730,"mtime":1611647323257,"results":"66","hashOfConfig":"62"},{"size":665,"mtime":1611575234925,"results":"67","hashOfConfig":"62"},{"size":1866,"mtime":1611574837519,"results":"68","hashOfConfig":"62"},{"size":2997,"mtime":1611563564363,"results":"69","hashOfConfig":"62"},{"size":318,"mtime":1611575192165,"results":"70","hashOfConfig":"62"},{"size":3830,"mtime":1611737108320,"results":"71","hashOfConfig":"62"},{"size":961,"mtime":1611575085038,"results":"72","hashOfConfig":"62"},{"size":832,"mtime":1611575102823,"results":"73","hashOfConfig":"62"},{"size":525,"mtime":1612618967385,"results":"74","hashOfConfig":"75"},{"size":440,"mtime":1611045973906,"results":"76","hashOfConfig":"75"},{"size":4009,"mtime":1612618967385,"results":"77","hashOfConfig":"75"},{"size":926,"mtime":1612773846155,"results":"78","hashOfConfig":"75"},{"size":1600,"mtime":1612618967384,"results":"79","hashOfConfig":"75"},{"size":727,"mtime":1611825054146,"results":"80","hashOfConfig":"75"},{"size":2206,"mtime":1612618967385,"results":"81","hashOfConfig":"75"},{"size":1483,"mtime":1612618967385,"results":"82","hashOfConfig":"75"},{"size":3374,"mtime":1612869889150,"results":"83","hashOfConfig":"75"},{"size":5018,"mtime":1612780398195,"results":"84","hashOfConfig":"75"},{"size":1815,"mtime":1612709637361,"results":"85","hashOfConfig":"75"},{"size":3026,"mtime":1612618967386,"results":"86","hashOfConfig":"75"},{"size":5276,"mtime":1612690339110,"results":"87","hashOfConfig":"75"},{"size":2145,"mtime":1612618967385,"results":"88","hashOfConfig":"75"},{"size":2797,"mtime":1612780587714,"results":"89","hashOfConfig":"75"},{"size":1005,"mtime":1612776991639,"results":"90","hashOfConfig":"75"},{"size":1823,"mtime":1612773624099,"results":"91","hashOfConfig":"75"},{"size":1092,"mtime":1612789910049,"results":"92","hashOfConfig":"75"},{"size":997,"mtime":1612430063188,"results":"93","hashOfConfig":"75"},{"size":497,"mtime":1612426928687,"results":"94","hashOfConfig":"75"},{"size":4568,"mtime":1612779219428,"results":"95","hashOfConfig":"75"},{"size":4536,"mtime":1611760415596,"results":"96","hashOfConfig":"75"},{"size":5022,"mtime":1612431598786,"results":"97","hashOfConfig":"75"},{"size":318,"mtime":1611575192165,"results":"98","hashOfConfig":"75"},{"size":913,"mtime":1612780465906,"results":"99","hashOfConfig":"75"},{"size":3791,"mtime":1612785039675,"results":"100","hashOfConfig":"75"},{"size":713,"mtime":1612190659226,"results":"101","hashOfConfig":"75"},{"size":709,"mtime":1611924636969,"results":"102","hashOfConfig":"75"},{"size":308,"mtime":1611923733716,"results":"103","hashOfConfig":"75"},{"size":805,"mtime":1612189115138,"results":"104","hashOfConfig":"75"},{"size":7789,"mtime":1612869855763,"results":"105","hashOfConfig":"75"},{"size":1508,"mtime":1612259199052,"results":"106","hashOfConfig":"75"},{"size":1096,"mtime":1612618967385,"results":"107","hashOfConfig":"75"},{"size":1577,"mtime":1612859705204,"results":"108","hashOfConfig":"75"},{"size":4222,"mtime":1612860097973,"results":"109","hashOfConfig":"75"},{"size":2576,"mtime":1612859306180,"results":"110","hashOfConfig":"75"},{"size":13864,"mtime":1612870837624,"results":"111","hashOfConfig":"75"},{"size":708,"mtime":1612197613887,"results":"112","hashOfConfig":"75"},{"size":1204,"mtime":1612618967385,"results":"113","hashOfConfig":"75"},{"size":2110,"mtime":1612261006098,"results":"114","hashOfConfig":"75"},{"size":734,"mtime":1612258579867,"results":"115","hashOfConfig":"75"},{"size":798,"mtime":1612265114824,"results":"116","hashOfConfig":"75"},{"size":10201,"mtime":1612784998575,"results":"117","hashOfConfig":"75"},{"size":4112,"mtime":1612705936035,"results":"118","hashOfConfig":"75"},{"size":1335,"mtime":1612689654639,"results":"119","hashOfConfig":"75"},{"size":735,"mtime":1612711193074,"results":"120","hashOfConfig":"75"},{"size":2339,"mtime":1612868234727,"results":"121","hashOfConfig":"75"},{"size":5128,"mtime":1612870806528,"results":"122","hashOfConfig":"75"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},"136sl52",{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},"1p43c50",{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"150"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"150"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"150"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"176","usedDeprecatedRules":"150"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179","usedDeprecatedRules":"150"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"182","usedDeprecatedRules":"150"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"189","usedDeprecatedRules":"150"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"198","usedDeprecatedRules":"150"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"203","usedDeprecatedRules":"150"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"216","usedDeprecatedRules":"150"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"221","messages":"222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"227","usedDeprecatedRules":"150"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"234","messages":"235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"238","usedDeprecatedRules":"150"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"247","usedDeprecatedRules":"150"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"250","usedDeprecatedRules":"150"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"253","usedDeprecatedRules":"150"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"150"},{"filePath":"256","messages":"257","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"258","messages":"259","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\OSPanel\\domains\\epam-app\\src\\index.tsx",[],["260","261"],"C:\\OSPanel\\domains\\epam-app\\src\\reportWebVitals.ts",[],"C:\\OSPanel\\domains\\epam-app\\src\\App.tsx",[],"C:\\OSPanel\\domains\\epam-app\\src\\api\\api.ts",[],"C:\\OSPanel\\domains\\epam-app\\src\\redux\\taskReducer.ts",[],"C:\\OSPanel\\domains\\epam-app\\src\\redux\\store.ts",[],"C:\\OSPanel\\domains\\epam-app\\src\\api\\taskApi.ts",[],"C:\\OSPanel\\domains\\epam-app\\src\\Components\\TimeScale\\TaskItem\\TaskItem.tsx",[],"C:\\OSPanel\\domains\\epam-app\\src\\utils\\array-helpers.ts",[],"C:\\OSPanel\\domains\\epam-app\\src\\Components\\TimeScale\\TimeScale.tsx",["262"],"C:\\OSPanel\\domains\\epam-app\\src\\Components\\TimeScale\\TimeScaleContainer.tsx",[],"C:\\OSPanel\\domains\\epam-app\\src\\Components\\TimeScale\\TaskItem\\TaskItemContainer.tsx",[],"C:\\OSPanel\\domains\\front1\\src\\index.tsx",[],["263","264"],"C:\\OSPanel\\domains\\front1\\src\\reportWebVitals.ts",[],"C:\\OSPanel\\domains\\front1\\src\\App.tsx",["265","266"],"import React, { useEffect, useState } from 'react'\r\nimport './App.css'\r\nimport ToDoList from './Components/ToDo/ToDoListContainer'\r\nimport { BrowserRouter, Redirect, Route, Switch, withRouter, useLocation } from 'react-router-dom'\r\nimport { connect, Provider } from 'react-redux'\r\nimport 'antd/dist/antd.css'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport 'antd-mobile/dist/antd-mobile.css'\r\nimport store, { AppStateType } from './redux/store'\r\nimport { Layout, Spin } from 'antd'\r\nimport { compose } from 'redux'\r\nimport { initializeApp, addLocation } from './redux/appReducer'\r\nimport {login} from './redux/authReducer'\r\nimport Header from './Components/Header/HeaderContainer'\r\nimport { isMobile } from \"react-device-detect\"\r\nimport Login from './Components/Login/LoginContainer'\r\nimport Orders from './Components/Orders/OrdersContainer'\r\nimport TasksTree from './Components/TasksTree/TasksTreeContainer'\r\nimport Register from './Components/Register/RegisterContainer'\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\ntype DispatchPropsType = {\r\n  initializeApp: () => void,\r\n  addLocation: (location: string) => void,\r\n  login: (data: any)=> void,\r\n}\r\n\r\nconst App = (props: MapPropsType & DispatchPropsType) => {\r\n  const [location, setLocation] = useState(useLocation().pathname)\r\n\r\n  useEffect(() => {\r\n    if (!props.initialized) {\r\n      // http://localhost:3000/?email=7383125@gmail.com&password=gfhjkm4501\r\n      let instanseCreds = parseQueryString()\r\n      if (instanseCreds.email && instanseCreds.password) {\r\n        instanseCreds.remember = true\r\n        props.login(instanseCreds)\r\n      }\r\n\r\n      if (location === '/front1/') {\r\n        props.addLocation(location)\r\n      }\r\n      console.log('initialized FALSE', props)\r\n      props.initializeApp()\r\n    } else {\r\n      console.log('initialized TRUE', props)\r\n    }\r\n  }, [props.initialized])\r\n\r\n\r\n  if (!props.initialized) {\r\n    return <Spin key=\"spin\" size=\"large\" />\r\n  }\r\n\r\n  return (\r\n    <Layout>\r\n      <Header />\r\n      <Switch>\r\n        {!props.isAuth ?\r\n          <Route exact path={props.appLocation}\r\n            render={() => <Redirect to={props.appLocation+'login'} />} />\r\n        :\r\n          <Route exact path={props.appLocation}\r\n            render={() => <Redirect to={props.appLocation+'toDoList'} />} />\r\n        }\r\n        \r\n        {props.isAuth ?\r\n            <Route exact path={props.appLocation+'login'}\r\n              render={ () => <Redirect to={props.appLocation+'toDoList'} /> } \r\n            />  \r\n          :\r\n            null\r\n        }\r\n\r\n        <Route path={props.appLocation+'login'}\r\n          render={() => <Login />} />\r\n        \r\n         <Route path={props.appLocation+'toDoList'}\r\n            render={() => <ToDoList />} />\r\n\r\n          <Route path={props.appLocation+'tasksTree'}\r\n            render={() => <TasksTree />} />\r\n\r\n          <Route path={props.appLocation+'orders'}\r\n            render={() => <Orders />} />\r\n\r\n          <Route path={props.appLocation+'register'}\r\n            render={() => <Register />} />\r\n\r\n          <Route path={props.appLocation+'*'}\r\n            render={() => <div>404 NOT FOUND</div>} />\r\n      </Switch>\r\n    </Layout>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n  initialized: state.app.initialized,\r\n  appLocation: state.app.location,\r\n  isAuth: state.auth.isAuth\r\n})\r\n\r\nlet AppContainer = compose<React.ComponentType>(\r\n  withRouter,\r\n  connect(mapStateToProps, { initializeApp, addLocation, login }))(App)\r\n\r\nconst MainApp = () => {\r\n  return (\r\n    <BrowserRouter>\r\n      <Provider store={store}>\r\n        <div className={isMobile ? \"\" : \"container\"}>\r\n          <AppContainer />\r\n        </div>\r\n      </Provider>\r\n    </BrowserRouter>\r\n  )\r\n}\r\n\r\nexport default MainApp\r\n\r\nconst parseQueryString = (): any => {\r\n  const params:  any = {}\r\n  document.location.search.substr(1).split('&').forEach( (pair) => {\r\n      const [key, value] = pair.split('=')\r\n      params[key] = value\r\n  })\r\n  return params;\r\n};\r\n","C:\\OSPanel\\domains\\front1\\src\\redux\\store.ts",[],"C:\\OSPanel\\domains\\front1\\src\\redux\\appReducer.ts",[],"C:\\OSPanel\\domains\\front1\\src\\Components\\ToDo\\ToDoListContainer.tsx",[],"C:\\OSPanel\\domains\\front1\\src\\Components\\Header\\Header.tsx",["267","268","269"],"import React from 'react'\r\nimport {\r\n    BrowserView,\r\n    MobileView,\r\n    isBrowser,\r\n    isMobile\r\n} from \"react-device-detect\"\r\nimport { HeaderPropsType } from './HeaderContainer'\r\nimport MenuBrowser from './MenuBrowserConainer'\r\nimport MenuMobile from './MenuMobileContainer'\r\n// import {useHistory, useLocation} from 'react-router-dom'\r\n\r\n// type MenuDataType = Array<any>\r\n\r\nexport type OwnHeaderPropsType = {}\r\n\r\nconst Header: React.FC<HeaderPropsType> = (props) => {\r\n    // const location = useLocation()\r\n    console.log('Header')\r\n\r\n    if (isMobile) {\r\n        return <MenuMobile menuData={menuData(props.appLocation)} logout={props.logout}/>\r\n    } else {\r\n        return <MenuBrowser menuData={menuData(props.appLocation)}/>\r\n    }\r\n}\r\n\r\nexport default Header\r\n\r\n\r\nexport type MenuDataType = ReturnType<typeof menuData>\r\n\r\nconst menuData = (appLocation: string) => {\r\n    const data = [\r\n    {\r\n        value: 'planning',\r\n        label: 'Planning',\r\n        children: [\r\n            {\r\n                label: 'ToDo list',\r\n                // label: <Link to='/toDoList'>ToDo list</Link>,\r\n                value: appLocation + 'toDoList',\r\n                disabled: false,\r\n            },\r\n            {\r\n                label: 'Tasks tree',\r\n                value: appLocation + 'tasksTree',\r\n            },\r\n            {\r\n                label: 'Analysis',\r\n                value: appLocation + 'analysis',\r\n                disabled: true,\r\n            }\r\n        ],\r\n    }, {\r\n        value: 'catalog',\r\n        label: 'Catalog',\r\n        children: [\r\n            {\r\n                label: 'Products',\r\n                value: appLocation + 'products',\r\n            }\r\n            , {\r\n                label: 'Providers',\r\n                value: appLocation + 'providers',\r\n            }\r\n        ],\r\n    },\r\n    {\r\n        value: 'orders',\r\n        label: 'Orders',\r\n        // isLeaf: true,\r\n        children: [\r\n            {\r\n                label: 'Orders',\r\n                value: appLocation + 'orders',\r\n            },\r\n            {\r\n                label: 'Leads',\r\n                value: appLocation + 'leads',\r\n            },\r\n        ],\r\n    },\r\n    ]\r\n    return data\r\n}\r\n","C:\\OSPanel\\domains\\front1\\src\\Components\\Login\\Login.tsx",["270","271","272","273","274"],"import React from 'react'\r\nimport { LoginPropsType } from './LoginContainer'\r\nimport { List, InputItem, Checkbox } from 'antd-mobile'\r\nimport { Formik } from \"formik\"\r\nimport moment from \"moment\"\r\nimport LoginForm from './LoginForm'\r\nimport { propTypes } from 'react-bootstrap/esm/Image'\r\nimport { Button } from 'antd'\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst CheckboxItem = Checkbox.CheckboxItem;\r\n\r\nconst initialValues = {\r\n    // bookingClient: \"\",\r\n    // bookingDate: moment(Date.now()),\r\n    // bookingTime: moment(Date.now()),\r\n    // selectOptions: [\"Mark\", \"Bob\", \"Anthony\"]\r\n}\r\n\r\n// export const dateFormat = \"YYYY--MM-DD\";\r\n// export const timeFormat = \"h:mm A\";\r\n\r\nexport type OwnLoginPropsType = {}\r\n\r\nconst Login: React.FC<LoginPropsType> = (props) => {\r\n    const handleSubmit = (formProps: any) => {\r\n        //console.log('formProps: ', formProps)\r\n        if (!formProps.remember) {\r\n            formProps.remember = false\r\n        }\r\n        props.login(formProps)\r\n    }\r\n\r\n    //console.log(props)\r\n\r\n    return (\r\n        <>\r\n            <h1 className=\"mb-5 mx-auto\">Login Form</h1>\r\n            <Formik\r\n                initialValues={initialValues}\r\n                onSubmit={handleSubmit}\r\n                render={LoginForm}\r\n            />\r\n            <div className=\"mt-3\">\r\n                <Link to={props.location +\"register\"}><Button type=\"link\" block>Register</Button></Link>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Login","C:\\OSPanel\\domains\\front1\\src\\redux\\authReducer.ts",[],"C:\\OSPanel\\domains\\front1\\src\\redux\\taskReducer.ts",[],"C:\\OSPanel\\domains\\front1\\src\\Components\\ToDo\\ToDoList.tsx",[],"C:\\OSPanel\\domains\\front1\\src\\Components\\Header\\MenuBrowser.tsx",["275","276","277","278","279","280"],"import React, {useState} from 'react'\r\nimport { Button, Menu } from 'antd';\r\nimport {Link, useHistory} from 'react-router-dom'\r\n// import { MailOutlined, AppstoreOutlined, SettingOutlined } from '@ant-design/icons';\r\nimport {LogoutOutlined} from '@ant-design/icons'\r\nimport {MenuBrowserPropsType} from './MenuBrowserConainer'\r\nimport { TaskListType } from '../../Types/types';\r\nimport { MenuDataType } from './Header';\r\n\r\nconst { SubMenu } = Menu;\r\n\r\nexport type OwnMenuBrowserPropsType = {\r\n    menuData: any,\r\n    // logout: any,\r\n    // appLocation: string | null\r\n}\r\n\r\nconst MenuBrowser: React.FC<MenuBrowserPropsType> = (props) => {\r\n    let history = useHistory();\r\n    const [state, setState] = useState<Array<string>>([])\r\n    const handleClick = (e: any | undefined) => {\r\n        // //console.log('click ', e);\r\n        // setState({ current: e.key });\r\n    }\r\n\r\n    const getMenuItem = (childs: any):any => {\r\n        // return <Menu.Item key=\"setting:1\">Option 1</Menu.Item>\r\n        const menuItems = childs.map( (item: any) => {\r\n            return (\r\n                <Menu.Item key={item.value}>\r\n                    <Link to={item.value}>{item.label}</Link>\r\n                </Menu.Item>\r\n            )\r\n        })\r\n        return menuItems\r\n    }\r\n\r\n    const getSubMenu = () => {\r\n        // //console.log(props.menuData)\r\n        const subMenu = props.menuData.map( (item: any) => {\r\n            // //console.log(item)\r\n            return (\r\n                <SubMenu \r\n                    key={item.value} \r\n                    // icon={<MailOutlined />}\r\n                    title={item.label}\r\n                >\r\n                    {getMenuItem(item.children)}\r\n                </SubMenu >\r\n            )\r\n        })\r\n        // subMenu.push(\r\n        //     <Menu.Item key=\"login\">\r\n        //         <Link to={props.appLocation +\"login\"} >Login</Link>\r\n        //     </Menu.Item>\r\n        // )\r\n        return subMenu\r\n    }\r\n\r\n    const onLogout = () => {\r\n        // onChange(['', ''])\r\n        history.replace(props.appLocation+'login')\r\n        props.logout()\r\n    }\r\n\r\n    console.log(props)\r\n\r\n    return (\r\n        <Menu \r\n            onClick={handleClick} \r\n            // selectedKeys={[current]} \r\n            mode=\"horizontal\"\r\n            theme=\"dark\"\r\n        >\r\n            {getSubMenu()}\r\n\r\n            {!props.isAuth ? \r\n                <Menu.Item key=\"login\">\r\n                    <Link to={props.appLocation +\"login\"} >Login</Link>\r\n                </Menu.Item>\r\n            :\r\n                <SubMenu \r\n                    key={props.user?.name} \r\n                    title={props.user?.name}\r\n                >\r\n                    <Menu.Item key=\"login\" onClick={onLogout}>\r\n                        {/* <Link to={props.appLocation +\"login\"} > */}\r\n                            Logout\r\n                        {/* </Link> */}\r\n                    </Menu.Item>\r\n                </SubMenu >\r\n                \r\n            }\r\n        </Menu>\r\n    )\r\n}\r\n\r\nexport default MenuBrowser","C:\\OSPanel\\domains\\front1\\src\\Components\\Header\\MenuMobile.tsx",["281","282","283"],"import React, { useState } from 'react'\r\nimport { Menu, ActivityIndicator, NavBar, Button } from 'antd-mobile'\r\nimport { ValueType } from 'antd-mobile/lib/menu/PropsType'\r\nimport './MenuMobile.css'\r\nimport { useHistory, useLocation } from 'react-router-dom'\r\nimport { MenuDataType } from './Header'\r\nimport { MenuMobilePropsType } from './MenuMobileContainer'\r\nimport { Link } from 'react-router-dom'\r\nimport { LogoutOutlined } from '@ant-design/icons'\r\nimport MenuPopover from './MenuPopover'\r\n\r\nexport type OwnMenuMobilePropsType = {\r\n    menuData: MenuDataType,\r\n    logout: () => void\r\n}\r\n\r\nconst MenuMobile: React.FC<MenuMobilePropsType> = (props) => {\r\n    let history = useHistory();\r\n    const location = useLocation();\r\n    const [show, setShow] = useState(false)\r\n    type DataType = typeof props.menuData\r\n    const data = [...props.menuData]\r\n    const [initData, setInitData] = useState<DataType>(data)\r\n\r\n    const getSelectedMenuItem = (): ValueType => {\r\n        let response: ValueType = [data[0].value, '']\r\n        data.forEach((dataItem: any) => {\r\n            if (dataItem.children) {\r\n                dataItem.children.forEach((item: any) => {\r\n                    //console.log('/',item.value,'===',location.pathname)\r\n                    if (item.value === location.pathname) {\r\n                        response = [dataItem.value, item.value]\r\n                    }\r\n                })\r\n            }\r\n        })\r\n        //console.log('getSelectedMenuItem response: ', response)\r\n        return response\r\n    }\r\n\r\n    const [selectedMenuItem, setSelectedMenuItem] = useState<ValueType>(getSelectedMenuItem())\r\n\r\n    const handleClick = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\r\n        e.preventDefault(); // Fix event propagation on Android\r\n        setShow(!show)\r\n        // if (!initData) {\r\n        //     setInitData(data)\r\n        // }\r\n    }\r\n\r\n    const onChange = (value?: ValueType | undefined) => {\r\n        //console.log('input values: ', value)\r\n        if (value) {\r\n            let subMenu = value[0]\r\n\r\n            data.forEach((dataItem) => {\r\n                if (dataItem.value === value[0]) {\r\n                    subMenu = value[0]\r\n                    if (dataItem.children && value[1]) {\r\n                        dataItem.children.forEach((cItem: { value: string | string[]; label: any }) => {\r\n                            if (cItem.value === value[1]) {\r\n                                history.replace(`${cItem.value}`)\r\n                                setShow(false)\r\n                            }\r\n                        })\r\n                    }\r\n                }\r\n            })\r\n        \r\n            if (subMenu === '') {\r\n                subMenu = data[0].value\r\n            }\r\n            //console.log('set values: ', [subMenu, value[1]])\r\n            setSelectedMenuItem([subMenu, value[1]])\r\n        }\r\n        \r\n    }\r\n\r\n    const onMaskClick = () => {\r\n        setShow(false)\r\n    }\r\n\r\n    const menuEl = (\r\n        <Menu\r\n            className=\"foo-menu\"\r\n            data={initData}\r\n            value={selectedMenuItem}\r\n            onChange={onChange}\r\n            height={document.documentElement.clientHeight * 0.6}\r\n        />\r\n    );\r\n\r\n    const loadingEl = (\r\n        <div style={{ width: '100%', height: document.documentElement.clientHeight * 0.6, display: 'flex', justifyContent: 'center' }}>\r\n            <ActivityIndicator size=\"large\" />\r\n        </div>\r\n    );\r\n\r\n    //console.log(props)\r\n\r\n    const onLogout = () => {\r\n        onChange(['', ''])\r\n        history.replace(props.appLocation + 'login')\r\n        props.logout()\r\n    }\r\n\r\n    return (\r\n        <div className={show ? 'menu-active' : ''}>\r\n            <div>\r\n                <NavBar\r\n                    leftContent=\"\"\r\n                    mode=\"light\"\r\n                    icon={<img src=\"https://gw.alipayobjects.com/zos/rmsportal/iXVHARNNlmdCGnwWxQPH.svg\" className=\"am-icon am-icon-md\" alt=\"\" />}\r\n                    onLeftClick={handleClick}\r\n                    className=\"top-nav-bar\"\r\n                    rightContent={props.isAuth ? <MenuPopover onLogout={onLogout} /> : null}\r\n                >\r\n                    {!props.isAuth ?\r\n                        <Link\r\n                            to={props.appLocation + \"login\"}\r\n                            onClick={() => { onChange(['', '']) }}\r\n                        >\r\n                            <span className=\"text-white\">Login</span>\r\n                        </Link>\r\n                        :\r\n                        <>\r\n                        <div>\r\n                            {props.user?.name}\r\n                            {/* <Button className=\"ml-5\" size=\"small\" icon={<LogoutOutlined />} onClick={onLogout} inline >\r\n\r\n                            </Button> */}\r\n                        </div>\r\n                        {/* <div className=\"w-100\">\r\n                            \r\n                        </div> */}\r\n                        </>\r\n                    }\r\n                    \r\n\r\n                </NavBar>\r\n            </div>\r\n            {show ? initData ? menuEl : loadingEl : null}\r\n            {show ? <div className=\"menu-mask\" onClick={onMaskClick} /> : null}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default (MenuMobile)\r\n\r\n\r\n","C:\\OSPanel\\domains\\front1\\src\\api\\authAPI.ts",["284","285"],"import {instance, APIResponseType} from \"./api\";\r\n\r\ntype MeResponseDataType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n    // remember_token?: string,\r\n    // user?: any\r\n    // error?: boolean,\r\n    // message?: string\r\n}\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get(`authMe/`+localStorage.getItem('remember_token')).then( (response) => {\r\n            console.log('login: ', response)\r\n            return response\r\n        })\r\n    },\r\n    login(data: any) {\r\n        return instance.post('login', data)\r\n        .then(response => {\r\n            console.log('login: ', response)\r\n            if (response.data.remember_token !== null) {\r\n                localStorage.setItem('remember_token', response.data.remember_token);\r\n            } else {\r\n                localStorage.removeItem('remember_token');\r\n            }\r\n            return response.status === 200 ? response : null;\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                console.log(err.response)\r\n                return err.response\r\n            } else if (err.request) {\r\n                console.log('request', err.request)\r\n            } else {\r\n                console.log('anything else: ', err)\r\n            }\r\n            return null\r\n        })\r\n    },\r\n    register(creds: any) {\r\n        return instance.post('register', creds)\r\n        .then(response => {\r\n            console.log('login: ', response)\r\n            if (response.data.remember_token !== null) {\r\n                localStorage.setItem('remember_token', response.data.token);\r\n            } else {\r\n                localStorage.removeItem('remember_token');\r\n            }\r\n            return response.status === 200 ? response : null;\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                console.log(err.response)\r\n                return err.response\r\n            } else if (err.request) {\r\n                console.log('request', err.request)\r\n            } else {\r\n                console.log('anything else: ', err)\r\n            }\r\n            return null\r\n        })\r\n    }\r\n}","C:\\OSPanel\\domains\\front1\\src\\api\\taskApi.ts",[],"C:\\OSPanel\\domains\\front1\\src\\Components\\TimeScale\\TimeScaleContainer.tsx",[],"C:\\OSPanel\\domains\\front1\\src\\Components\\ToDo\\Settings\\SettingsModal.tsx",["286","287","288"],"import React, {useState} from 'react'\r\nimport { Card, Modal } from 'antd'\r\nimport { SettingsModalPropsType } from './SettingsModalContainer'\r\n\r\nconst settingasInstanse = {\r\n    ToDo: {\r\n        singlDateView: {\r\n            timeScale: true,\r\n            isCompletedVisible: true\r\n        },\r\n        intervalDateView: {\r\n            timeScale: false,\r\n            isCompletedVisible: true\r\n        }\r\n    }\r\n}\r\n\r\nexport type OwmSettingsModalPropsType = {\r\n    isModalVisible: boolean,\r\n    handleOk: () => void,\r\n    handleCancel: () => void\r\n}\r\n\r\n\r\n\r\nconst SettingsModal = (props:any) => {\r\n\r\n    const [settings, setSettings] = useState(props.viewSettings!==null ? props.viewSettings : settingasInstanse)\r\n\r\n    let settingsBlock: Array<any> = []\r\n\r\n        for (const propName in settings.ToDo) {\r\n            if (Object.prototype.hasOwnProperty.call(settings.ToDo, propName)) {\r\n                const element = settings.ToDo[propName]\r\n                console.log(propName, element)\r\n                settingsBlock.push(<FormItem title={propName} data={element}/>)\r\n            }\r\n        }\r\n    \r\n\r\n    return (\r\n        <Modal title=\"Task display settings\" visible={props.isModalVisible} onOk={props.handleOk} onCancel={props.handleCancel}>\r\n            {settingsBlock}\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default SettingsModal\r\n\r\nconst FormItem: React.FC<any> = (props) => {\r\n    let settingsItem: Array<any> = []\r\n    for (const propName in props.data) {\r\n        if (Object.prototype.hasOwnProperty.call(props.data, propName)) {\r\n            const element = props.data[propName]\r\n            settingsItem.push(<div>{propName} = {element ? 'yes' : 'no'}</div>)\r\n        }\r\n    }\r\n\r\n    return(\r\n        <Card title={props.title} extra={<a href=\"#\">More</a>} >\r\n            {settingsItem}\r\n        </Card>\r\n    )\r\n}","C:\\OSPanel\\domains\\front1\\src\\Components\\ToDo\\ToDoHeader\\ToDoHeaderContainer.tsx",[],"C:\\OSPanel\\domains\\front1\\src\\Components\\ToDo\\NewTaskForm\\NewTaskFormContainer.tsx",[],"C:\\OSPanel\\domains\\front1\\src\\api\\api.ts",[],"C:\\OSPanel\\domains\\front1\\src\\Components\\TimeScale\\TimeScale.tsx",["289"],"import React, { useEffect, useState } from 'react'\r\nimport { TaskType } from '../../Types/types'\r\nimport moment from 'moment'\r\nimport { TimeScalePropsType } from './TimeScaleContainer'\r\nimport { Divider, Spin, Tooltip, message } from 'antd'\r\nimport TaskItem from './TaskItem/TaskItemContainer'\r\nimport { sortTaskArrayByParams } from '../../utils/array-helpers'\r\n\r\nexport type OwnTaskTimeScaleType = {}\r\nconst TimeScale: React.FC<TimeScalePropsType> = (props) => {\r\n    type SelestedDatesType = typeof props.dateInterval\r\n    const [selestedDates, setSelectedDates] = useState<SelestedDatesType>({ startDate: moment(null), endDate: moment() })\r\n    // const [isInterval, setIsInterval] = useState(\r\n    //     props.dateInterval.startDate.format('YYYY-MM-DD') === props.dateInterval.endDate.format('YYYY-MM-DD') ? false : true\r\n    //     )\r\n    useEffect(() => {\r\n        if (\r\n            props.dateInterval.startDate.isSame(selestedDates.startDate.format('YYYY-MM-DD'), \"day\" ) &&\r\n            props.dateInterval.endDate.isSame(selestedDates.endDate.format('YYYY-MM-DD'), \"day\" )\r\n        ) { }\r\n        else {\r\n            if (props.dateInterval.startDate !== null) {\r\n                props.getTaskList(\r\n                    props.dateInterval.startDate.format('YYYY-MM-DD'),\r\n                    props.dateInterval.endDate.format('YYYY-MM-DD')\r\n                )\r\n                setSelectedDates(props.dateInterval)\r\n            }\r\n        }\r\n    }, [props.dateInterval])\r\n\r\n    useEffect(() => {\r\n        if (props.errorMessage !== null) {\r\n            message.success(props.errorMessage)\r\n        }\r\n    }, [props.errorMessage])\r\n    \r\n    console.log(props.dateInterval)\r\n\r\n    if (props.taskList !== undefined) {\r\n        if (props.taskList !== null) {\r\n            return (\r\n                <>\r\n                    {getTimeScaleArrey(props.taskList, props.isInterval)}\r\n                </>\r\n            )\r\n        } else {\r\n            return (\r\n                <Spin key=\"spin\" size=\"large\" />\r\n            )\r\n        }\r\n    } else {\r\n        return <div>Authorization required to get a list of tasks</div>\r\n    }\r\n    \r\n}\r\n\r\nexport default TimeScale\r\n\r\n\r\nconst getTimeScaleArrey = (taskList: Array<TaskType>, isInterval:boolean): Array<React.ReactElement<string>> => {\r\n    let timeScaleArrey: Array<React.ReactElement<string>> = []\r\n    let tomorowTasks: Array<TaskType> = []\r\n\r\n    console.log('isInterval: ', isInterval)\r\n\r\n    taskList.sort(sortTaskArrayByParams('time')).sort(sortTaskArrayByParams('date'))\r\n\r\n    const getHeadlineLabel = (task: TaskType) => {\r\n        return moment(task.date).format('D MMMM')\r\n    }\r\n\r\n    let headlineDate: string | null = null\r\n\r\n    if (taskList !== null && taskList.length > 0) {\r\n        headlineDate = getHeadlineLabel(taskList[0])\r\n        timeScaleArrey.push(\r\n            <h5 \r\n                key={headlineDate + 'title'}\r\n                className={isInterval ? \"text-left\" : \"\"}\r\n            >\r\n                {headlineDate}:\r\n            </h5>\r\n        )\r\n    }\r\n\r\n    for (let index: number = 0; index < 24; index++) {\r\n        if (taskList.length > 0) {\r\n            if (!isInterval && index > 7) {\r\n                timeScaleArrey.push(\r\n                    <Divider key={index + 'to' + headlineDate} orientation=\"left\">\r\n                        {index <= 9 ? '0' : null}{index}:00\r\n                    </Divider>\r\n                )\r\n            }\r\n        } else {\r\n            timeScaleArrey.push(<h3 key=\"noTasks\">no tasks</h3>)\r\n            break\r\n        }\r\n\r\n        if (taskList !== null) {\r\n            for (let i = 0; i < taskList.length; i++) {\r\n                const element: TaskType = taskList[i]\r\n                const timeVal = Number(element.time.split(':', 1))\r\n                const nextHour = index + 1\r\n                if (timeVal >= index && timeVal < nextHour) {\r\n                    if (getHeadlineLabel(element) === headlineDate) {\r\n                        timeScaleArrey.push(\r\n                            <Tooltip key={index + '-' + element.id} placement=\"topLeft\" title={element.descriptions}>\r\n                                <TaskItem element={element} />\r\n                            </Tooltip>\r\n                        )\r\n                    }\r\n                    else {\r\n                        tomorowTasks.push(element)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (tomorowTasks.length > 0) {\r\n        timeScaleArrey = timeScaleArrey.concat(getTimeScaleArrey(tomorowTasks, isInterval))\r\n    }\r\n\r\n    return timeScaleArrey\r\n}","C:\\OSPanel\\domains\\front1\\src\\Components\\ToDo\\ToDoHeader\\ToDoHeader.tsx",[],"C:\\OSPanel\\domains\\front1\\src\\Components\\ToDo\\NewTaskForm\\NewTaskForm.tsx",["290"],"import React, { useState, useEffect } from 'react'\r\nimport moment from 'moment'\r\nimport { Form, Input, Button, TimePicker, DatePicker, Drawer, Spin, message } from 'antd'\r\nimport { NewTaskFormPropsType } from './NewTaskFormContainer'\r\nimport './../style.css'\r\n\r\nconst layout = {\r\n    labelCol: { span: 8 },\r\n    wrapperCol: { span: 16 },\r\n}\r\nconst tailLayout = {\r\n    wrapperCol: { offset: 8, span: 16 },\r\n}\r\n\r\nexport type NewTaskFormOwnPropsType = {\r\n    onClose: () => void\r\n    visible: boolean,\r\n    setVisible: (visible: boolean) => void\r\n}\r\n\r\nconst { TextArea } = Input\r\n\r\nconst timeFormat: string = 'HH:mm'\r\n\r\nconst NewTaskForm: React.FC<NewTaskFormPropsType> = (props) => {\r\n    const [form] = Form.useForm()\r\n    const [selectedDate, setSelectedDate] = useState<moment.Moment>(moment())\r\n    const [saveStatus, setSaveStatus] = useState<string>(props.taskSaveStatus)\r\n\r\n    useEffect(() => {\r\n        switch (props.taskSaveStatus) {\r\n            case 'inProgress':\r\n                setSaveStatus(props.taskSaveStatus)\r\n                break\r\n            case 'success':\r\n                message.success('The task was successfully created')\r\n                props.onClose()\r\n                setSaveStatus('')\r\n                onReset()\r\n                break\r\n            case 'error':\r\n                message.error('Error: ' + props.errorMessage)\r\n                setSaveStatus(props.taskSaveStatus)\r\n                break\r\n\r\n            default:\r\n                break\r\n        }\r\n    }, [props.taskSaveStatus])\r\n\r\n    type OnFinishType = {\r\n        taskName: string,\r\n        date: moment.Moment,\r\n        taskTime: moment.Moment,\r\n        description?: string\r\n    }\r\n    const onFinish = (values: OnFinishType) => {\r\n        const data = {\r\n            date: values.date.format('YYYY-MM-DD'),\r\n            taskTime: values.taskTime.format('HH:mm'),\r\n            taskName: values.taskName,\r\n            user_id: props.userId,\r\n            description: values.description\r\n        }\r\n\r\n        if (!moment(selectedDate.format('YYYY-MM-DD')).isBetween(\r\n            props.dateInterval.startDate.format('YYYY-MM-DD'),\r\n            props.dateInterval.endDate.format('YYYY-MM-DD'),\r\n            undefined, '[]'\r\n        )) {\r\n            props.createNewTask(data, false)\r\n        } else {\r\n            props.createNewTask(data, true)\r\n        }\r\n    }\r\n\r\n    const onReset = () => {\r\n        form.resetFields()\r\n    }\r\n\r\n    const onDateChange = (value: moment.Moment | null, dateString: string): void => {\r\n        if (value !== null) {\r\n            setSelectedDate(value)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Drawer\r\n            title={\"Create New Task for \" + selectedDate.format('DD MMM YYYY')}\r\n            placement=\"right\"\r\n            closable={true}\r\n            onClose={props.onClose}\r\n            visible={props.visible}\r\n            width=\"90%\"\r\n        >\r\n            <Form\r\n                {...layout}\r\n                form={form}\r\n                name=\"control-hooks\"\r\n                onFinish={onFinish}\r\n            >\r\n                <Form.Item\r\n                    label=\"Task name\"\r\n                    name=\"taskName\"\r\n                    rules={[{ required: true, message: 'Please input task name!' }]}\r\n                >\r\n                    <Input />\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    label=\"Task date\"\r\n                    name=\"date\"\r\n                    initialValue={selectedDate}\r\n                    rules={[{ required: true, message: 'Please input task date!' }]}\r\n                >\r\n                    <DatePicker\r\n                        onChange={onDateChange}\r\n                        format='DD-MM-YYYY'\r\n                        autoComplete=\"off\"\r\n                    />\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    label=\"Task time\"\r\n                    name=\"taskTime\"\r\n                    rules={[{ required: true, message: 'Please input task time!' }]}\r\n                >\r\n                    <TimePicker\r\n                        format={timeFormat}\r\n                    />\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    label=\"Description\"\r\n                    name=\"description\"\r\n                >\r\n                    <TextArea rows={2} />\r\n                </Form.Item>\r\n\r\n                <Form.Item {...tailLayout}>\r\n                    {saveStatus === 'inProgress' ?\r\n                        <Spin></Spin>\r\n                        :\r\n                        <>\r\n                            <Button type=\"primary\" htmlType=\"submit\">\r\n                                Create\r\n                            </Button>\r\n                            <Button className=\"ml-3\" type=\"primary\" onClick={onReset}>\r\n                                Reset\r\n                            </Button>\r\n                        </>\r\n                    }\r\n                </Form.Item>\r\n            </Form>\r\n\r\n        </Drawer>\r\n    )\r\n}\r\n\r\n\r\nexport default NewTaskForm","C:\\OSPanel\\domains\\front1\\src\\utils\\array-helpers.ts",[],"C:\\OSPanel\\domains\\front1\\src\\Components\\TimeScale\\TaskItem\\TaskItemContainer.tsx",[],"C:\\OSPanel\\domains\\front1\\src\\Components\\TimeScale\\TaskItem\\TaskItem.tsx",[],"C:\\OSPanel\\domains\\front1\\src\\Components\\Header\\HeaderContainer.tsx",[],"C:\\OSPanel\\domains\\front1\\src\\Components\\Orders\\OrdersContainer.tsx",[],"C:\\OSPanel\\domains\\front1\\src\\Components\\Orders\\Orders.tsx",["291"],"import { formatCountdown } from 'antd/lib/statistic/utils'\r\nimport React from 'react'\r\nimport { OrdersPropsType } from './OrdersContainer'\r\n\r\nexport type OwnOrdersPropsType = {}\r\nconst Orders: React.FC<OrdersPropsType> = (props) => {\r\n    return(\r\n        <div>Orders</div>\r\n    )\r\n}\r\n\r\nexport default Orders","C:\\OSPanel\\domains\\front1\\src\\Components\\Header\\MenuMobileContainer.tsx",[],"C:\\OSPanel\\domains\\front1\\src\\utils\\Formik\\CreateAntField.tsx",["292"],"C:\\OSPanel\\domains\\front1\\src\\Components\\Login\\LoginForm.tsx",[],"C:\\OSPanel\\domains\\front1\\src\\utils\\Formik\\ValidateFields.ts",[],"C:\\OSPanel\\domains\\front1\\src\\Components\\TasksTree\\TasksTreeContainer.tsx",["293"],"import {connect} from 'react-redux'\r\n// import TasksTree, { OwnTasksTreePropsType } from './TasksTree'\r\nimport { AppStateType } from '../../redux/store'\r\nimport {getTaskList, createNewTaskList, deleteTaskList, updateTaskList, actions} from './../../redux/TaskListReducer'\r\nimport { isMobile } from 'react-device-detect'\r\nimport TasksTreeBrowser from './TasksTreeBrowser'\r\nimport TasksTreeMobile from './TasksTreeMobile'\r\nimport { act } from '@testing-library/react'\r\n\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    getTaskList: ()=>void,\r\n    createNewTaskList: (values: any)=>void,\r\n    deleteTaskList: (taskId: number)=>void,\r\n    updateTaskList: (values: any, taskId: number)=> void,\r\n    backSelectedTasks: ()=>void,\r\n}\r\n\r\ntype OwnTasksTreePropsType = {\r\n\r\n}\r\n\r\nexport type TasksTreePropsType = MapPropsType & MapDispatchPropsType & OwnTasksTreePropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        taskList: state.taskList.taskList,\r\n        userId: state.auth.user?.id,\r\n        isTaskListLoaded: state.taskList.isTaskListLoaded,\r\n        selectedTasks: state.taskList.selectedTasks\r\n    }\r\n}\r\n\r\n// const TasksTree: React.FC<TasksTreePropsType> = (props) => {\r\n//     return {\r\n\r\n//     }\r\n// }\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnTasksTreePropsType, AppStateType>(mapStateToProps, \r\n    {getTaskList, createNewTaskList, deleteTaskList, updateTaskList, backSelectedTasks: actions.backSelectedTasks}) \r\n    (isMobile ? TasksTreeMobile : TasksTreeBrowser)\r\n    \r\n\r\n","C:\\OSPanel\\domains\\front1\\src\\redux\\TaskListReducer.ts",[],"C:\\OSPanel\\domains\\front1\\src\\api\\taskListAPI.ts",[],"C:\\OSPanel\\domains\\front1\\src\\Components\\TasksTree\\TasksTreeMobile.tsx",["294","295","296","297","298","299","300","301","302","303"],"C:\\OSPanel\\domains\\front1\\src\\Components\\Login\\LoginContainer.tsx",[],"C:\\OSPanel\\domains\\front1\\src\\Components\\Register\\Register.tsx",["304","305","306","307"],"import { Formik } from 'formik'\r\nimport React, { useEffect } from 'react'\r\nimport RegisterForm from './RegisterForm'\r\nimport { RegisterPropsType } from './RegisterContainer'\r\nimport { propTypes } from 'react-bootstrap/esm/Image'\r\nimport { Redirect, Route, useHistory } from 'react-router-dom'\r\n\r\nconst initialValues = {\r\n    // parent_id :['1', '2', '3']\r\n}\r\n\r\nexport type OwnRegisterPropsType = {}\r\n\r\nconst Register: React.FC<RegisterPropsType> = (props) => {\r\n    let history = useHistory();\r\n    useEffect( () => {\r\n        //console.log('useEffect in Register: ', props.isAuth)\r\n        if(props.isAuth) {\r\n            history.replace(props.appLocation+'toDoList')\r\n        }\r\n    }, [props.isAuth])\r\n    const handleSubmit = (formProps: any) => {\r\n        //console.log(formProps)\r\n        formProps.status = 'guest'\r\n        props.register(formProps)\r\n    }\r\n\r\n    //console.log('Register', props)\r\n    return (\r\n        <>\r\n            <h1 className=\"mb-5 mx-auto\">Register Form</h1>\r\n            <Formik\r\n                initialValues={initialValues}\r\n                onSubmit={handleSubmit}\r\n                render={RegisterForm}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Register","C:\\OSPanel\\domains\\front1\\src\\Components\\Register\\RegisterForm.tsx",[],"C:\\OSPanel\\domains\\front1\\src\\Components\\Register\\RegisterContainer.tsx",[],"C:\\OSPanel\\domains\\front1\\src\\Components\\Header\\MenuBrowserConainer.tsx",[],"C:\\OSPanel\\domains\\front1\\src\\Components\\TasksTree\\TasksTreeBrowser.tsx",["308","309","310"],"import { Button, Card, Drawer, List, Checkbox, Collapse } from 'antd'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { TasksTreePropsType } from './TasksTreeContainer'\r\nimport { FileAddOutlined, SettingOutlined } from '@ant-design/icons'\r\nimport NewTaskTreeForm from './NewTaskTreeForm'\r\nimport { Formik, FormikProps } from 'formik'\r\nimport moment from \"moment\"\r\nimport { DeleteOutlined, EditOutlined } from '@ant-design/icons'\r\n\r\nconst { Panel } = Collapse;\r\n\r\ntype InitialDrewerDataType = {\r\n    header: string,\r\n    taskId: false | number\r\n}\r\n\r\nconst initialDrewerData: InitialDrewerDataType = {\r\n    header: 'Create New Task',\r\n    taskId: false\r\n}\r\n\r\nconst TasksTreeBrowser: React.FC<TasksTreePropsType> = (props) => {\r\n    useEffect(() => {\r\n        if (props.taskList !== undefined && props.taskList.length === 0 && !props.isTaskListLoaded) {\r\n            props.getTaskList()\r\n        }\r\n        else if (props.taskList === undefined) {\r\n            props.getTaskList()\r\n        }\r\n        setVisible(false)\r\n        setInitialFormValues(initialValues)\r\n    }, [props.taskList])\r\n\r\n    const [visible, setVisible] = useState(false)\r\n    const [drawerData, setDrawerData] = useState(initialDrewerData)\r\n\r\n    const getSelectOptions = () => {\r\n        if (props.taskList !== undefined && props.taskList.length > 0) {\r\n            return props.taskList.map((item) => {\r\n                return ({\r\n                    name: item.name,\r\n                    value: item.id\r\n                })\r\n            })\r\n        } else {\r\n            return null\r\n        }\r\n    }\r\n\r\n    const initialValues: any = {\r\n        selectOptions: getSelectOptions(),\r\n        taskTypes: [\r\n            {\r\n                name: 'Простая задача',\r\n                value: 1\r\n            },\r\n            {\r\n                name: 'Задача с контектом',\r\n                value: 2\r\n            }\r\n        ],\r\n        task_type: 1,\r\n        name: '',\r\n        // new: true\r\n\r\n    }\r\n\r\n    const [initialFormValues, setInitialFormValues] = useState(initialValues)\r\n\r\n    const onClose = () => {\r\n        setVisible(false)\r\n    }\r\n\r\n    const showDrawer = () => {\r\n        setVisible(true)\r\n    }\r\n\r\n    const onAdd = () => {\r\n        setDrawerData(initialDrewerData)\r\n        setInitialFormValues(initialValues)\r\n        // console.log(initialValues)\r\n        showDrawer()\r\n    }\r\n\r\n    const handleSubmit = (formProps: any) => {\r\n        let formPropsCopy: any = { ...formProps }\r\n        delete formPropsCopy.selectOptions\r\n        delete formPropsCopy.taskTypes\r\n        if (formPropsCopy.time_to_complete !== undefined) {\r\n            formPropsCopy.time_to_complete = formPropsCopy.time_to_complete.format('HH:mm:ss')\r\n        }\r\n\r\n        formPropsCopy.user_id = props.userId\r\n        if (!drawerData.taskId) {\r\n            props.createNewTaskList(formPropsCopy)\r\n        } else {\r\n            // console.log(formPropsCopy)\r\n            props.updateTaskList(formPropsCopy, drawerData.taskId)\r\n        }\r\n\r\n    }\r\n\r\n    // console.log('initialFormValues: ', initialFormValues)\r\n\r\n    return (\r\n        <>\r\n            <div className=\"site-card-border-less-wrapper\">\r\n                <Card\r\n                    title={\r\n                        <div\r\n                            // className=\"col-12 col-md-12 col-lg-4\"\r\n                            className=\"inline\"\r\n                        >\r\n                            <div ><h2>Tasks Tree</h2></div>\r\n\r\n\r\n                        </div>\r\n                    }\r\n                    extra={\r\n                        <>\r\n                            <Button\r\n                                type=\"primary\"\r\n                                shape=\"round\"\r\n                                icon={\r\n                                    <div className=\"d-flex flex-wrap align-content-start\">\r\n                                        <FileAddOutlined style={{ fontSize: '18px' }} />\r\n                                        <span className=\"ml-1\" style={{ fontSize: '14px' }}>Add</span>\r\n                                    </div>}\r\n                                style={{ marginLeft: 10 }}\r\n                                onClick={onAdd}\r\n                            />\r\n\r\n                            <Button className=\"\"\r\n                                type=\"primary\"\r\n                                shape=\"round\"\r\n                                style={{ marginLeft: 10 }}\r\n                                // onClick={props.showModal}\r\n                                icon={\r\n                                    <div className=\"d-flex flex-wrap align-content-start\">\r\n                                        <SettingOutlined style={{ fontSize: '18px' }} />\r\n                                        <span className=\"ml-1\" style={{ fontSize: '14px' }}>Settings</span>\r\n                                    </div>}\r\n                            />\r\n                        </>\r\n                    }\r\n                    bordered={false}\r\n                >\r\n\r\n                    {/* { getTaskTreeItems(props.taskList) } */}\r\n                    <List\r\n                        size=\"small\"\r\n                        // header={<h2>Tasks Tree</h2>}\r\n                        // footer={<div>Footer</div>}\r\n                        bordered\r\n                        dataSource={getTaskTreeItems(\r\n                            props.taskList,\r\n                            props.deleteTaskList,\r\n                            props.updateTaskList,\r\n                            showDrawer,\r\n                            setDrawerData,\r\n                            initialFormValues,\r\n                            setInitialFormValues\r\n                        )}\r\n\r\n                        renderItem={item => <List.Item draggable>{item}</List.Item>}\r\n                    />\r\n\r\n                    <Drawer\r\n                        title={drawerData.header}\r\n                        placement=\"right\"\r\n                        closable={true}\r\n                        onClose={onClose}\r\n                        visible={visible}\r\n                        width=\"90%\"\r\n                    >\r\n\r\n                        <Formik\r\n                            initialValues={initialFormValues}\r\n                            onSubmit={handleSubmit}\r\n                            render={NewTaskTreeForm}\r\n                            enableReinitialize={true}\r\n                        />\r\n\r\n                    </Drawer>\r\n\r\n                </Card>\r\n            </div>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default TasksTreeBrowser\r\n\r\nconst getTaskTreeItems = (\r\n    taskList: Array<any>,\r\n    deleteTask: (taskId: number) => void,\r\n    updateTaskList: (values: any, taskId: number)=> void,\r\n    showDrawer: () => void,\r\n    setDrawerData: (drawerData: any) => void,\r\n    initialFormValues: any,\r\n    setInitialFormValues: (initialFormValues: any) => void\r\n) => {\r\n    const onEdit = (task: any) => {\r\n        setDrawerData({\r\n            header: 'Edit: \"' + task.name + '\"',\r\n            taskId: task.id\r\n        })\r\n\r\n\r\n        let day = moment().zone('GMT')\r\n        if (task.time_to_complete !== null) {\r\n            const splitTime = task.time_to_complete.split(/:/)\r\n            day.hours(parseInt(splitTime[0])).minutes(parseInt(splitTime[1])).seconds(0).milliseconds(0);\r\n        } else {\r\n            day.hours(0).minutes(0).seconds(0).milliseconds(0);\r\n        }\r\n\r\n        setInitialFormValues(\r\n            {\r\n                ...initialFormValues,\r\n                // new: false,\r\n                name: task.name,\r\n                time_to_complete: day,\r\n                descriptions: task.descriptions,\r\n                parent_id: task.parent_id,\r\n                task_type: Number(task.task_type)\r\n            }\r\n        )\r\n        showDrawer()\r\n    }\r\n\r\n    const onStatusChange = (e:any) => {\r\n        const values = { isCompleted: e.target.checked }\r\n        console.log(e)\r\n        updateTaskList(values, e.target.id)\r\n    }\r\n\r\n    if (taskList !== undefined && taskList.length > 0) {\r\n        return taskList.map((item) => {\r\n            return (\r\n                <>\r\n                    <div><Checkbox checked={item.isCompleted} id={item.id} onClick={onStatusChange}/></div>\r\n                    <div className=\"w-100 float-left\" key={item.id}>\r\n                        <div className=\"ml-3 float-left\">\r\n                            \r\n                            {item.isCompleted ? <span className=\"text-black-50\">{item.name}</span> : <span>{item.name}</span>}\r\n                            \r\n                        </div>\r\n                        <div className=\"ml-3 float-right\">\r\n                            {item.time_to_complete}\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"d-flex flex-row\">\r\n                        <Button className=\"\"\r\n                            type=\"primary\"\r\n                            shape=\"circle\"\r\n                            size=\"small\"\r\n                            style={{ marginLeft: 10 }}\r\n                            onClick={() => { onEdit(item) }}\r\n                            icon={\r\n                                <div className=\"d-flex flex-wrap align-content-start\">\r\n                                    <EditOutlined className=\"ml-1\" style={{ fontSize: '14px' }} />\r\n                                </div>\r\n                            }\r\n                        />\r\n                        <Button className=\"\"\r\n                            type=\"primary\"\r\n                            danger\r\n                            shape=\"circle\"\r\n                            size=\"small\"\r\n                            style={{ marginLeft: 10 }}\r\n                            onClick={() => { deleteTask(item.id) }}\r\n                            icon={\r\n                                <div className=\"d-flex flex-wrap align-content-start\">\r\n                                    <DeleteOutlined className=\"ml-1\" style={{ fontSize: '14px' }} />\r\n                                </div>\r\n                            }\r\n                        />\r\n                    </div>\r\n                </>\r\n            )\r\n        })\r\n    } else {\r\n        return []\r\n    }\r\n}","C:\\OSPanel\\domains\\front1\\src\\Components\\TasksTree\\NewTaskTreeForm.tsx",["311"],"import { Form, Field, FormikProps } from 'formik'\r\nimport React, { ReactNode, useState, useEffect } from 'react'\r\nimport { AntInput, AntSelect, AntTextArea, AntTimePicker } from '../../utils/Formik/CreateAntField'\r\nimport { validateRequired } from '../../utils/Formik/ValidateFields'\r\nimport { Select } from 'antd';\r\n\r\nconst { Option }: any = Select;\r\n\r\n\r\nconst NewTaskTreeForm: ((props: FormikProps<{}>) => ReactNode) = (props) => {\r\n    const values: any = props.values\r\n    //console.log(values)\r\n    const selectOptions = values.selectOptions\r\n    const taskTypes = values.taskTypes // ++++++\r\n\r\n    const [taskType, setTaskType] = useState(values.taskType)\r\n\r\n    useEffect(() => {\r\n        const values: any = props.values\r\n        const taskTypes = values.task_type\r\n        setTaskType(taskTypes)\r\n\r\n        // console.log('useEffect NewTaskTreeForm', props.initialValues)\r\n    }, [props.values])\r\n\r\n    //console.log('NewTaskTreeForm props: ', props)\r\n\r\n    // const handleSubmit = (formProps: any) => {\r\n    //     //console.log('formProps in NewTaskTreeForm: ',formProps)\r\n    //     props.handleSubmit(formProps)\r\n    // }\r\n\r\n    // console.log('NewTaskTreeForm', props)\r\n    // console.log('NewTaskTreeForm render', values)\r\n\r\n    return (\r\n        <Form\r\n            className=\"form-container\"\r\n            onSubmit={props.handleSubmit}\r\n        >\r\n            <Field\r\n                component={AntInput}\r\n                name=\"name\"\r\n                type=\"text\"\r\n                label=\"Name\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n\r\n            <Field\r\n                component={AntSelect}\r\n\r\n                selectOptions={selectOptions}\r\n\r\n                name=\"parent_id\"\r\n                type=\"select\"\r\n                label=\"Parent\"\r\n                // validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n            // hasFeedback\r\n            />\r\n\r\n            <Field\r\n                component={AntTextArea}\r\n                name=\"descriptions\"\r\n                type=\"text\"\r\n                label=\"Descriptions\"\r\n                // validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                // hasFeedback\r\n            />\r\n\r\n            <Field\r\n                component={AntTimePicker}\r\n                name=\"time_to_complete\"\r\n                type=\"time\"\r\n                label=\"Time to complete\"\r\n                // validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n            // hasFeedback\r\n            />\r\n\r\n            <Field\r\n                component={AntSelect}\r\n\r\n                selectOptions={taskTypes}\r\n\r\n                name=\"task_type\"\r\n                type=\"select\"\r\n                label=\"task Types\"\r\n                // validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                // hasFeedback\r\n            />\r\n\r\n\r\n            {taskType === 2 ?\r\n                <>\r\n                    <Field\r\n                        component={AntInput}\r\n                        name=\"context1\"\r\n                        type=\"text\"\r\n                        label=\"context1\"\r\n                        validate={validateRequired}\r\n                        submitCount={props.submitCount}\r\n                        hasFeedback\r\n                    />\r\n                    <Field\r\n                        component={AntInput}\r\n                        name=\"context2\"\r\n                        type=\"text\"\r\n                        label=\"context2\"\r\n                        validate={validateRequired}\r\n                        submitCount={props.submitCount}\r\n                        hasFeedback\r\n                    />\r\n                </>\r\n                :\r\n                null\r\n            }\r\n\r\n            <div className=\"submit-container\">\r\n                <button className=\"ant-btn ant-btn-primary\" type=\"submit\">\r\n                    Save\r\n                </button>\r\n            </div>\r\n\r\n        </Form>\r\n    )\r\n    // )\r\n}\r\nexport default NewTaskTreeForm","C:\\OSPanel\\domains\\front1\\src\\Components\\Header\\MenuPopover.tsx",["312"],"import { Popover, Icon } from 'antd-mobile'\r\nimport React, { useState } from 'react'\r\n\r\nconst Item = Popover.Item\r\n\r\nconst MenuPopover: React.FC<any> = (props) => {\r\n    const [visible, setVisible] = useState(false)\r\n\r\n    const onSelect = (opt: any, index?: number) => {\r\n        // console.log(opt.props);\r\n        setVisible(false)\r\n        if(opt.props.children === \"Logout\") {\r\n            props.onLogout()\r\n        }\r\n    }\r\n\r\n    const handleVisibleChange = (visible: boolean) => {\r\n        setVisible(visible)\r\n    }\r\n\r\n    const fortest:String = \"fortest\"\r\n\r\n    return (\r\n        <div className=\"mr-3\">\r\n        <Popover \r\n            mask\r\n            visible={visible}\r\n            overlay={[\r\n                (<Item key=\"1\" >Logout</Item>),\r\n                (<Item key=\"2\" >Info</Item>),\r\n                (<Item key=\"3\" >Help</Item>),\r\n            ]}\r\n            onVisibleChange={handleVisibleChange}\r\n            onSelect={onSelect}\r\n        >\r\n            <div style={{\r\n                height: '100%',\r\n                padding: '0 15px',\r\n                marginRight: '-20px',\r\n                display: 'flex',\r\n                alignItems: 'center',\r\n            }}\r\n            >\r\n                <Icon type=\"ellipsis\" />\r\n            </div>\r\n        </Popover>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MenuPopover","C:\\OSPanel\\domains\\front1\\src\\Components\\ToDo\\Settings\\SettingsModalContainer.tsx",[],"C:\\OSPanel\\domains\\front1\\src\\Components\\ToDo\\ToDoHeader\\ToDoHeaderMobile.tsx",["313"],"C:\\OSPanel\\domains\\front1\\src\\Components\\TasksTree\\TaskTreeItem.tsx",["314"],{"ruleId":"315","replacedBy":"316"},{"ruleId":"317","replacedBy":"318"},{"ruleId":"319","severity":1,"message":"320","line":27,"column":8,"nodeType":"321","endLine":27,"endColumn":28,"suggestions":"322"},{"ruleId":"315","replacedBy":"323"},{"ruleId":"317","replacedBy":"324"},{"ruleId":"325","severity":1,"message":"326","line":29,"column":20,"nodeType":"327","messageId":"328","endLine":29,"endColumn":31},{"ruleId":"319","severity":1,"message":"329","line":48,"column":6,"nodeType":"321","endLine":48,"endColumn":25,"suggestions":"330"},{"ruleId":"325","severity":1,"message":"331","line":3,"column":5,"nodeType":"327","messageId":"328","endLine":3,"endColumn":16},{"ruleId":"325","severity":1,"message":"332","line":4,"column":5,"nodeType":"327","messageId":"328","endLine":4,"endColumn":15},{"ruleId":"325","severity":1,"message":"333","line":5,"column":5,"nodeType":"327","messageId":"328","endLine":5,"endColumn":14},{"ruleId":"325","severity":1,"message":"334","line":3,"column":10,"nodeType":"327","messageId":"328","endLine":3,"endColumn":14},{"ruleId":"325","severity":1,"message":"335","line":3,"column":16,"nodeType":"327","messageId":"328","endLine":3,"endColumn":25},{"ruleId":"325","severity":1,"message":"336","line":5,"column":8,"nodeType":"327","messageId":"328","endLine":5,"endColumn":14},{"ruleId":"325","severity":1,"message":"337","line":7,"column":10,"nodeType":"327","messageId":"328","endLine":7,"endColumn":19},{"ruleId":"325","severity":1,"message":"338","line":11,"column":7,"nodeType":"327","messageId":"328","endLine":11,"endColumn":19},{"ruleId":"325","severity":1,"message":"339","line":2,"column":10,"nodeType":"327","messageId":"328","endLine":2,"endColumn":16},{"ruleId":"325","severity":1,"message":"340","line":5,"column":9,"nodeType":"327","messageId":"328","endLine":5,"endColumn":23},{"ruleId":"325","severity":1,"message":"341","line":7,"column":10,"nodeType":"327","messageId":"328","endLine":7,"endColumn":22},{"ruleId":"325","severity":1,"message":"342","line":8,"column":10,"nodeType":"327","messageId":"328","endLine":8,"endColumn":22},{"ruleId":"325","severity":1,"message":"343","line":20,"column":12,"nodeType":"327","messageId":"328","endLine":20,"endColumn":17},{"ruleId":"325","severity":1,"message":"344","line":20,"column":19,"nodeType":"327","messageId":"328","endLine":20,"endColumn":27},{"ruleId":"325","severity":1,"message":"339","line":2,"column":43,"nodeType":"327","messageId":"328","endLine":2,"endColumn":49},{"ruleId":"325","severity":1,"message":"340","line":9,"column":10,"nodeType":"327","messageId":"328","endLine":9,"endColumn":24},{"ruleId":"325","severity":1,"message":"345","line":23,"column":22,"nodeType":"327","messageId":"328","endLine":23,"endColumn":33},{"ruleId":"325","severity":1,"message":"346","line":1,"column":19,"nodeType":"327","messageId":"328","endLine":1,"endColumn":34},{"ruleId":"325","severity":1,"message":"347","line":3,"column":6,"nodeType":"327","messageId":"328","endLine":3,"endColumn":24},{"ruleId":"325","severity":1,"message":"348","line":3,"column":10,"nodeType":"327","messageId":"328","endLine":3,"endColumn":32},{"ruleId":"325","severity":1,"message":"349","line":28,"column":22,"nodeType":"327","messageId":"328","endLine":28,"endColumn":33},{"ruleId":"350","severity":1,"message":"351","line":60,"column":42,"nodeType":"352","endLine":60,"endColumn":54},{"ruleId":"319","severity":1,"message":"320","line":30,"column":8,"nodeType":"321","endLine":30,"endColumn":28,"suggestions":"353"},{"ruleId":"319","severity":1,"message":"354","line":49,"column":8,"nodeType":"321","endLine":49,"endColumn":30,"suggestions":"355"},{"ruleId":"325","severity":1,"message":"356","line":1,"column":10,"nodeType":"327","messageId":"328","endLine":1,"endColumn":25},{"ruleId":"319","severity":1,"message":"357","line":160,"column":8,"nodeType":"321","endLine":160,"endColumn":21,"suggestions":"358"},{"ruleId":"325","severity":1,"message":"359","line":8,"column":10,"nodeType":"327","messageId":"328","endLine":8,"endColumn":13},{"ruleId":"325","severity":1,"message":"360","line":3,"column":24,"nodeType":"327","messageId":"328","endLine":3,"endColumn":35},{"ruleId":"325","severity":1,"message":"361","line":3,"column":37,"nodeType":"327","messageId":"328","endLine":3,"endColumn":41},{"ruleId":"325","severity":1,"message":"362","line":7,"column":10,"nodeType":"327","messageId":"328","endLine":7,"endColumn":14},{"ruleId":"325","severity":1,"message":"363","line":7,"column":16,"nodeType":"327","messageId":"328","endLine":7,"endColumn":21},{"ruleId":"325","severity":1,"message":"337","line":8,"column":10,"nodeType":"327","messageId":"328","endLine":8,"endColumn":19},{"ruleId":"325","severity":1,"message":"341","line":10,"column":10,"nodeType":"327","messageId":"328","endLine":10,"endColumn":22},{"ruleId":"325","severity":1,"message":"364","line":11,"column":10,"nodeType":"327","messageId":"328","endLine":11,"endColumn":21},{"ruleId":"325","severity":1,"message":"365","line":14,"column":7,"nodeType":"327","messageId":"328","endLine":14,"endColumn":11},{"ruleId":"319","severity":1,"message":"366","line":36,"column":8,"nodeType":"321","endLine":36,"endColumn":24,"suggestions":"367"},{"ruleId":"368","severity":1,"message":"369","line":198,"column":55,"nodeType":"370","messageId":"371","endLine":198,"endColumn":57},{"ruleId":"325","severity":1,"message":"337","line":5,"column":10,"nodeType":"327","messageId":"328","endLine":5,"endColumn":19},{"ruleId":"325","severity":1,"message":"372","line":6,"column":10,"nodeType":"327","messageId":"328","endLine":6,"endColumn":18},{"ruleId":"325","severity":1,"message":"373","line":6,"column":20,"nodeType":"327","messageId":"328","endLine":6,"endColumn":25},{"ruleId":"319","severity":1,"message":"374","line":21,"column":8,"nodeType":"321","endLine":21,"endColumn":22,"suggestions":"375"},{"ruleId":"325","severity":1,"message":"376","line":6,"column":18,"nodeType":"327","messageId":"328","endLine":6,"endColumn":29},{"ruleId":"325","severity":1,"message":"377","line":10,"column":9,"nodeType":"327","messageId":"328","endLine":10,"endColumn":14},{"ruleId":"319","severity":1,"message":"366","line":32,"column":8,"nodeType":"321","endLine":32,"endColumn":24,"suggestions":"378"},{"ruleId":"325","severity":1,"message":"379","line":7,"column":9,"nodeType":"327","messageId":"328","endLine":7,"endColumn":15},{"ruleId":"325","severity":1,"message":"380","line":21,"column":11,"nodeType":"327","messageId":"328","endLine":21,"endColumn":25},{"ruleId":"325","severity":1,"message":"336","line":5,"column":8,"nodeType":"327","messageId":"328","endLine":5,"endColumn":14},{"ruleId":"325","severity":1,"message":"381","line":4,"column":10,"nodeType":"327","messageId":"328","endLine":4,"endColumn":17},"no-native-reassign",["382"],"no-negated-in-lhs",["383"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'props', 'selestedDates.endDate', and 'selestedDates.startDate'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["384"],["382"],["383"],"@typescript-eslint/no-unused-vars","'setLocation' is assigned a value but never used.","Identifier","unusedVar","React Hook useEffect has missing dependencies: 'location' and 'props'. Either include them or remove the dependency array.",["385"],"'BrowserView' is defined but never used.","'MobileView' is defined but never used.","'isBrowser' is defined but never used.","'List' is defined but never used.","'InputItem' is defined but never used.","'moment' is defined but never used.","'propTypes' is defined but never used.","'CheckboxItem' is assigned a value but never used.","'Button' is defined but never used.","'LogoutOutlined' is defined but never used.","'TaskListType' is defined but never used.","'MenuDataType' is defined but never used.","'state' is assigned a value but never used.","'setState' is assigned a value but never used.","'setInitData' is assigned a value but never used.","'APIResponseType' is defined but never used.","'MeResponseDataType' is defined but never used.","'SettingsModalPropsType' is defined but never used.","'setSettings' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement",["386"],"React Hook useEffect has missing dependencies: 'onReset' and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["387"],"'formatCountdown' is defined but never used.","React Hook useEffect has missing dependencies: 'props.label' and 'props.type'. Either include them or remove the dependency array.",["388"],"'act' is defined but never used.","'SwipeAction' is defined but never used.","'Icon' is defined but never used.","'Spin' is defined but never used.","'Empty' is defined but never used.","'useDispatch' is defined but never used.","'Item' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'initialValues' and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["389"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'Redirect' is defined but never used.","'Route' is defined but never used.","React Hook useEffect has missing dependencies: 'history' and 'props.appLocation'. Either include them or remove the dependency array.",["390"],"'FormikProps' is defined but never used.","'Panel' is assigned a value but never used.",["391"],"'Option' is assigned a value but never used.","'fortest' is assigned a value but never used.","'taskAPI' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"392","fix":"393"},{"desc":"394","fix":"395"},{"desc":"392","fix":"396"},{"desc":"397","fix":"398"},{"desc":"399","fix":"400"},{"desc":"401","fix":"402"},{"desc":"403","fix":"404"},{"desc":"401","fix":"405"},"Update the dependencies array to be: [props, props.dateInterval, selestedDates.endDate, selestedDates.startDate]",{"range":"406","text":"407"},"Update the dependencies array to be: [location, props, props.initialized]",{"range":"408","text":"409"},{"range":"410","text":"407"},"Update the dependencies array to be: [onReset, props, props.taskSaveStatus]",{"range":"411","text":"412"},"Update the dependencies array to be: [props.label, props.type, props.value]",{"range":"413","text":"414"},"Update the dependencies array to be: [initialValues, props, props.taskList]",{"range":"415","text":"416"},"Update the dependencies array to be: [history, props.appLocation, props.isAuth]",{"range":"417","text":"418"},{"range":"419","text":"416"},[1258,1278],"[props, props.dateInterval, selestedDates.endDate, selestedDates.startDate]",[1861,1880],"[location, props, props.initialized]",[1455,1475],[1499,1521],"[onReset, props, props.taskSaveStatus]",[5729,5742],"[props.label, props.type, props.value]",[1259,1275],"[initialValues, props, props.taskList]",[686,700],"[history, props.appLocation, props.isAuth]",[1081,1097]]
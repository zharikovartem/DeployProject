{"version":3,"sources":["Components/NewTaskForm.tsx","Components/ToDoList.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["layout","labelCol","span","wrapperCol","tailLayout","offset","TextArea","Input","NewTaskForm","name","initialValues","remember","onFinish","values","console","log","onFinishFailed","errorInfo","Item","label","rules","required","message","onChange","value","dateString","format","rows","type","htmlType","ToDoList","useState","moment","selectedDate","setselectedDate","visible","setVisible","isAddActive","setIsAddActive","className","title","defaultValue","style","marginLeft","shape","icon","FileAddOutlined","size","onClick","disabled","bordered","timeScaleArrey","index","push","orientation","timeScale","placement","closable","onClose","App","props","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6UAIMA,EAAS,CACXC,SAAU,CAAEC,KAAM,GAClBC,WAAY,CAAED,KAAM,KAElBE,EAAa,CACfD,WAAY,CAAEE,OAAQ,EAAGH,KAAM,KAO3BI,EAAaC,IAAbD,SA6DOE,EAzD0B,WAarC,OACI,eAAC,IAAD,2BACQR,GADR,IAEIS,KAAK,QACLC,cAAe,CAAEC,UAAU,GAC3BC,SAjBS,SAACC,GACdC,QAAQC,IAAI,WAAYF,IAiBpBG,eAde,SAACC,GACpBH,QAAQC,IAAI,UAAWE,IAQvB,UAOI,cAAC,IAAKC,KAAN,CACIC,MAAM,YACNV,KAAK,WACLW,MAAO,CAAC,CAAEC,UAAU,EAAMC,QAAS,4BAHvC,SAKI,cAAC,IAAD,MAGJ,cAAC,IAAKJ,KAAN,CACIC,MAAM,YACNV,KAAK,WACLW,MAAO,CAAC,CAAEC,UAAU,EAAMC,QAAS,uBAHvC,SAKI,cAAC,IAAD,CACIC,SA1BK,SAACC,EAA6BC,GAC/CX,QAAQC,IAAIS,EAAOC,IA2BPC,OAvCO,YA2Cf,cAAC,IAAKR,KAAN,CACIC,MAAM,cACNV,KAAK,cAFT,SAII,cAACH,EAAD,CAAUqB,KAAM,MAGpB,cAAC,IAAKT,KAAN,2BAAed,GAAf,aACI,cAAC,IAAD,CAAQwB,KAAK,UAAUC,SAAS,SAAhC,4BCoBDC,EAnFY,WAAO,IAAD,EACWC,mBAAwBC,OADnC,mBACtBC,EADsB,KACRC,EADQ,OAECH,oBAAS,GAFV,mBAEtBI,EAFsB,KAEbC,EAFa,OAGSL,oBAAS,GAHlB,mBAGtBM,EAHsB,KAGTC,EAHS,KAoC7B,OACI,mCACI,sBAAKC,UAAU,gCAAf,UACI,cAAC,IAAD,CACIC,MACI,qCACI,iDACA,cAAC,IAAD,CACIjB,SAvCP,SAACC,EAA6BC,GACjC,OAAVD,GACAU,EAAgBV,GAChBc,GAAe,KAEfJ,EAAgBF,IAAO,OACvBM,GAAe,KAkCKG,aAAcR,EACdP,OAAO,aACPgB,MAAO,CAAEC,WAAY,MAEzB,cAAC,IAAD,CACIf,KAAK,UACLgB,MAAM,QACNC,KAAM,cAACC,EAAA,EAAD,IACNJ,MAAO,CAAEC,WAAY,IACrBI,KAAK,QACLC,QAxCT,WACfZ,GAAW,IAwCaa,SAAUZ,EAPd,oBAaRa,UAAU,EAvBd,SAfM,WAEd,IADA,IAAIC,EAA2C,GACtCC,EAAgB,EAAGA,EAAQ,GAAIA,IAEpCD,EAAeE,KACX,eAAC,IAAD,CAAqBC,YAAY,OAAjC,UACKF,GAAS,EAAI,IAAM,KAAMA,EAD9B,QAAcA,IAItB,OAAOD,EA+BMI,KAGL,cAAC,IAAD,CACIf,MAAO,uBAAyBP,EAAaP,OAAO,eACpD8B,UAAU,QACVC,UAAU,EACVC,QApDE,WACdtB,GAAW,IAoDCD,QAASA,EALb,SAQI,cAAC,EAAD,CAAaF,aAAcA,YCnEhC0B,G,OATH,SAACC,GAEX,OACE,qBAAKrB,UAAU,YAAf,SACE,cAAC,EAAD,QCKSsB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.53507ecf.chunk.js","sourcesContent":["import * as React from 'react'\r\nimport moment from 'moment'\r\nimport { Form, Input, Button, Checkbox, TimePicker } from 'antd'\r\n\r\nconst layout = {\r\n    labelCol: { span: 8 },\r\n    wrapperCol: { span: 16 },\r\n}\r\nconst tailLayout = {\r\n    wrapperCol: { offset: 8, span: 16 },\r\n}\r\n\r\ntype PropsType = {\r\n    selectedDate: moment.Moment\r\n}\r\n\r\nconst { TextArea } = Input;\r\n\r\nconst timeFormat: string = 'HH:mm';\r\n\r\nconst NewTaskForm: React.FC<PropsType> = () => {\r\n    const onFinish = (values: any) => {\r\n        console.log('Success:', values);\r\n    };\r\n\r\n    const onFinishFailed = (errorInfo: any) => {\r\n        console.log('Failed:', errorInfo);\r\n    };\r\n\r\n    const onTimeChange = (value: moment.Moment | null, dateString: string):void => {\r\n        console.log(value, dateString);\r\n    }\r\n\r\n    return (\r\n        <Form\r\n            {...layout}\r\n            name=\"basic\"\r\n            initialValues={{ remember: true }}\r\n            onFinish={onFinish}\r\n            onFinishFailed={onFinishFailed}\r\n        >\r\n            <Form.Item\r\n                label=\"Task name\"\r\n                name=\"taskNime\"\r\n                rules={[{ required: true, message: 'Please input task name!' }]}\r\n            >\r\n                <Input />\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n                label=\"Task time\"\r\n                name=\"taskTime\"\r\n                rules={[{ required: true, message: 'Please input time!' }]}\r\n            >\r\n                <TimePicker \r\n                    onChange={onTimeChange} \r\n                    // defaultValue={moment('12:08', timeFormat)} \r\n                    format={timeFormat} \r\n                />\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n                label=\"Description\"\r\n                name=\"description\"\r\n            >\r\n                <TextArea rows={2} />\r\n            </Form.Item>\r\n\r\n            <Form.Item {...tailLayout}>\r\n                <Button type=\"primary\" htmlType=\"submit\">\r\n                    Create\r\n                </Button>\r\n            </Form.Item>\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default NewTaskForm","import React, { useState } from 'react'\r\nimport { DatePicker, Card, Divider, Button, Drawer } from 'antd'\r\nimport { FileAddOutlined } from '@ant-design/icons'\r\nimport moment from 'moment'\r\nimport NewTaskForm from './NewTaskForm'\r\n\r\nconst ToDoList: React.FC = () => {\r\n    const [selectedDate, setselectedDate] = useState<moment.Moment>(moment())\r\n    const [visible, setVisible] = useState(false)\r\n    const [isAddActive, setIsAddActive] = useState(false)\r\n\r\n    const onDateChange = (value: moment.Moment | null, dateString: string): void => {\r\n        if (value !== null) {\r\n            setselectedDate(value)\r\n            setIsAddActive(false)\r\n        } else {\r\n            setselectedDate(moment(null))\r\n            setIsAddActive(true)\r\n        }\r\n    }\r\n\r\n    const showDrawer = ():void => {\r\n        setVisible(true);\r\n      }\r\n\r\n      const onClose = ():void => {\r\n        setVisible(false);\r\n      }\r\n\r\n    type timeScaleItemType = React.ReactElement<string>\r\n    const timeScale = (): Array<timeScaleItemType> => {\r\n        let timeScaleArrey: Array<timeScaleItemType> = []\r\n        for (let index: number = 0; index < 24; index++) {\r\n\r\n            timeScaleArrey.push(\r\n                <Divider key={index} orientation=\"left\">\r\n                    {index <= 9 ? '0' : null}{index}:00\r\n                </Divider>)\r\n        }\r\n        return timeScaleArrey\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"site-card-border-less-wrapper\">\r\n                <Card\r\n                    title={\r\n                        <>\r\n                            <label>Select date:</label>\r\n                            <DatePicker\r\n                                onChange={onDateChange}\r\n                                defaultValue={selectedDate}\r\n                                format='DD-MM-YYYY'\r\n                                style={{ marginLeft: 10 }}\r\n                            />\r\n                            <Button \r\n                                type=\"primary\" \r\n                                shape=\"round\" \r\n                                icon={<FileAddOutlined />} \r\n                                style={{ marginLeft: 10 }} \r\n                                size=\"small\" \r\n                                onClick={showDrawer}\r\n                                disabled={isAddActive}\r\n                            >\r\n                                Add\r\n                            </Button>\r\n                        </>\r\n                    }\r\n                    bordered={false}\r\n                >\r\n                    {timeScale()}\r\n                </Card>\r\n\r\n                <Drawer\r\n                    title={\"Create New Task for \" + selectedDate.format('DD MMM YYYY')}\r\n                    placement=\"right\"\r\n                    closable={false}\r\n                    onClose={onClose}\r\n                    visible={visible}\r\n                    // width=\"80%\"\r\n                >\r\n                    <NewTaskForm selectedDate={selectedDate}/>\r\n                </Drawer>\r\n            </div>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ToDoList","import React from 'react'\nimport './App.css'\nimport ToDoList from './Components/ToDoList'\nimport 'antd/dist/antd.css'\n\nconst App = (props: any) => {\n\n  return(\n    <div className=\"container\">\n      <ToDoList />\n    </div>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
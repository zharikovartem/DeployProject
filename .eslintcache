[{"C:\\OpenServer\\domains\\epam-app\\src\\index.tsx":"1","C:\\OpenServer\\domains\\epam-app\\src\\reportWebVitals.ts":"2","C:\\OpenServer\\domains\\epam-app\\src\\App.tsx":"3","C:\\OpenServer\\domains\\epam-app\\src\\redux\\store.ts":"4","C:\\OpenServer\\domains\\epam-app\\src\\Components\\ToDoListContainer.tsx":"5","C:\\OpenServer\\domains\\epam-app\\src\\redux\\taskReducer.ts":"6","C:\\OpenServer\\domains\\epam-app\\src\\Components\\ToDoList.tsx":"7","C:\\OpenServer\\domains\\epam-app\\src\\Components\\NewTaskFormContainer.tsx":"8","C:\\OpenServer\\domains\\epam-app\\src\\Components\\ToDoHeader.tsx":"9","C:\\OpenServer\\domains\\epam-app\\src\\Components\\NewTaskForm.tsx":"10"},{"size":500,"mtime":499162500000,"results":"11","hashOfConfig":"12"},{"size":425,"mtime":499162500000,"results":"13","hashOfConfig":"12"},{"size":450,"mtime":1611257603726,"results":"14","hashOfConfig":"12"},{"size":319,"mtime":1611257603753,"results":"15","hashOfConfig":"12"},{"size":357,"mtime":1611257603738,"results":"16","hashOfConfig":"12"},{"size":3104,"mtime":1611257603756,"results":"17","hashOfConfig":"12"},{"size":5860,"mtime":1611259788288,"results":"18","hashOfConfig":"12"},{"size":316,"mtime":1611257603731,"results":"19","hashOfConfig":"12"},{"size":3281,"mtime":1611265880209,"results":"20","hashOfConfig":"12"},{"size":2592,"mtime":1611257603729,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"1ak4mbk",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"24"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"24"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\OpenServer\\domains\\epam-app\\src\\index.tsx",[],["45","46"],"C:\\OpenServer\\domains\\epam-app\\src\\reportWebVitals.ts",[],"C:\\OpenServer\\domains\\epam-app\\src\\App.tsx",[],"C:\\OpenServer\\domains\\epam-app\\src\\redux\\store.ts",[],"C:\\OpenServer\\domains\\epam-app\\src\\Components\\ToDoListContainer.tsx",[],"C:\\OpenServer\\domains\\epam-app\\src\\redux\\taskReducer.ts",[],"C:\\OpenServer\\domains\\epam-app\\src\\Components\\ToDoList.tsx",["47","48","49"],"import React, { useState, useEffect } from 'react'\r\nimport { DatePicker, Card, Divider, Button, Drawer, Tooltip } from 'antd'\r\nimport moment from 'moment'\r\nimport NewTaskForm from './NewTaskFormContainer'\r\nimport ToDoHeader from './ToDoHeader'\r\n\r\nexport type taskType = {\r\n    created_at: string,\r\n    date: string,\r\n    deleted_at: string | null,\r\n    descriptions: string | null,\r\n    id: number,\r\n    name: string,\r\n    order_id: number | null,\r\n    tado_id: number | null, //////////////////////////// Опечатка\r\n    time: string,\r\n    type: string | null,\r\n    updated_at: string | null,\r\n    user_id: number | null\r\n}\r\n\r\nconst ToDoList: React.FC = (props: any) => {\r\n    const [selectedDate, setselectedDate] = useState<moment.Moment>(moment())\r\n    const [visible, setVisible] = useState(false)\r\n    const [isAddActive, setIsAddActive] = useState(false)\r\n    const [timeScaleBlock, setTimeScaleBlock] = useState<Array<React.ReactElement<string>> | null>(null)\r\n\r\n    useEffect(() => {\r\n        props.getTaskList(selectedDate.format('YYYY-MM-DD'))\r\n    }, [selectedDate]);\r\n\r\n    useEffect(() => {\r\n        console.log('props in useEffect', props.taskList)\r\n        const getTimeScaleArrey = (taskList:Array<taskType>):Array<React.ReactElement<string>> => {\r\n            let timeScaleArrey: Array<React.ReactElement<string>> = []\r\n            let tomorowTasks: Array<taskType> = []\r\n\r\n            const getHeadline = (task:taskType) => {\r\n                return moment(task.date).format('DD-MMMM')\r\n            }\r\n\r\n            let headlineDate: string|null = null;\r\n\r\n            if (taskList !== null && taskList.length > 0) {\r\n                headlineDate = getHeadline(taskList[0])\r\n                timeScaleArrey.push(\r\n                    <h3>{headlineDate}:</h3>\r\n                )\r\n            }\r\n            console.log('headlineDate: ',headlineDate)\r\n\r\n            for (let index: number = 0; index < 24; index++) {\r\n                timeScaleArrey.push(\r\n                    <Divider key={index+'to'+headlineDate} orientation=\"left\">\r\n                        {index <= 9 ? '0' : null}{index}:00\r\n                    </Divider>\r\n                )\r\n\r\n                if (taskList !== null) {\r\n                    for (let i = 0; i < taskList.length; i++) {\r\n                        const element: taskType = taskList[i];\r\n                        const timeVal = Number(element.time.split(':', 1))\r\n                        const nextHour = index + 1\r\n                        if (timeVal >= index && timeVal < nextHour) {\r\n                            // console.log(headlineDate)\r\n                            // console.log(element.name,' for ',getHeadline(element.date))\r\n                            // console.log(element.name, getHeadline(element) === headlineDate)\r\n                            if (getHeadline(element) === headlineDate) {\r\n                                timeScaleArrey.push(\r\n                                    <Tooltip key={index+'-'+i} placement=\"topLeft\" title={element.descriptions}>\r\n                                        <p className=\"ml-5\">{element.time.split(':', 2).join(':')} - {element.name} date: {element.date}</p>\r\n                                    </Tooltip>\r\n                                )\r\n                            }\r\n                            else {\r\n                                // console.log('push')\r\n                                tomorowTasks.push(element)\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            console.log('tomorowTasks count: ',tomorowTasks.length)\r\n            if (tomorowTasks.length > 0) {\r\n                const nextArr = getTimeScaleArrey(tomorowTasks)\r\n                // console.log('nextArr', nextArr)\r\n                timeScaleArrey = timeScaleArrey.concat(nextArr)\r\n            }\r\n            // else {\r\n            //     return timeScaleArrey\r\n            // }\r\n            // console.log('timeScaleArrey', timeScaleArrey)\r\n            return timeScaleArrey\r\n        }\r\n\r\n        setTimeScaleBlock(getTimeScaleArrey(props.taskList));\r\n    }, [props.taskList]);\r\n\r\n    const onDateChange = (value: moment.Moment | null, dateString: string): void => {\r\n        console.log('onDateChange value:', value)\r\n        if (value !== null) {\r\n            setselectedDate(value)\r\n            setIsAddActive(false)\r\n        } else {\r\n            setselectedDate(moment(null))\r\n            setIsAddActive(true)\r\n        }\r\n    }\r\n\r\n    const onGapDateChange = (value: Array<moment.Moment> ): void => {\r\n        console.log('onGapDateChange value', value)\r\n        setselectedDate(value[0])\r\n        props.getTaskListForGap(value[0].format('YYYY-MM-DD'), value[1].format('YYYY-MM-DD'))\r\n    }\r\n\r\n    const showDrawer = (): void => {\r\n        setVisible(true);\r\n    }\r\n\r\n    const onClose = (): void => {\r\n        setVisible(false);\r\n    }\r\n\r\n    // console.log('ToDoList props: ', props)\r\n    return (\r\n        <>\r\n            <div className=\"site-card-border-less-wrapper\">\r\n                <Card\r\n                    title={ <ToDoHeader onDateChange={onDateChange} selectedDate={selectedDate} showDrawer={showDrawer} isAddActive={isAddActive} onGapDateChange={onGapDateChange} />}\r\n                    bordered={false}\r\n                >\r\n                    {timeScaleBlock}\r\n                </Card>\r\n\r\n                <Drawer\r\n                    title={\"Create New Task for \" + selectedDate.format('DD MMM YYYY')}\r\n                    placement=\"right\"\r\n                    closable={false}\r\n                    onClose={onClose}\r\n                    visible={visible}\r\n                    width=\"80%\"\r\n                >\r\n                    <NewTaskForm selectedDate={selectedDate} />\r\n                </Drawer>\r\n            </div>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ToDoList","C:\\OpenServer\\domains\\epam-app\\src\\Components\\NewTaskFormContainer.tsx",[],"C:\\OpenServer\\domains\\epam-app\\src\\Components\\ToDoHeader.tsx",["50","51"],"import React, { useState, useEffect } from 'react'\r\nimport { DatePicker, Checkbox, Anchor, Button } from 'antd'\r\nimport { FileAddOutlined, SettingOutlined } from '@ant-design/icons'\r\n\r\nconst { RangePicker } = DatePicker\r\n\r\nconst ToDoHeader = (props: any) => {\r\n    const [isGap, setIsGap] = useState(false)\r\n    const [label, setLabel] = useState<'date' | 'interval'>('date')\r\n\r\n    const onChange = (e: any) => {\r\n        setIsGap(e.target.checked)\r\n        if (e.target.checked) {\r\n            setLabel('interval')\r\n        } else {\r\n            setLabel('date')\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"row\" >\r\n            {/* <Anchor> */}\r\n            <div className=\"col-12 col-md-8 col-lg-6\">\r\n                {/* d-inline */}\r\n                <div className=\"d-none d-sm-inline\">\r\n                    <label >Select {label}:</label>\r\n                </div>\r\n                {/* </div>\r\n            \r\n            <div className=\"col-md-8\"> */}\r\n                <div className=\"d-inline\">\r\n                    {isGap ?\r\n                        <RangePicker\r\n                            onChange={props.onGapDateChange}\r\n                            defaultValue={[props.selectedDate, props.selectedDate]}\r\n                            format='DD-MM-YYYY'\r\n                            style={{ marginLeft: 10 }}\r\n                        />\r\n                        :\r\n                        <DatePicker\r\n                            onChange={props.onDateChange}\r\n                            defaultValue={props.selectedDate}\r\n                            format='DD-MM-YYYY'\r\n                            style={{ marginLeft: 10 }}\r\n                        />\r\n                    }\r\n                </div>\r\n            </div>\r\n            <div className=\"col-12 col-md-4 col-lg-2 m-2 m-md-0\" >\r\n                <Checkbox className=\"ml-3\" onChange={onChange}>Date interval</Checkbox>\r\n            </div>\r\n            <div className=\"col-12 col-md-12 col-lg-4\">\r\n                <Button\r\n                    type=\"primary\"\r\n                    shape=\"round\"\r\n                    icon={\r\n                        <div className=\"d-flex flex-wrap align-content-start\">\r\n                            <FileAddOutlined style={{ fontSize: '18px' }}/> \r\n                            {/* d-none d-sm-inline */}\r\n                            <span className=\"ml-1\" style={{ fontSize: '14px' }}>Add</span>\r\n                        </div>}\r\n                    style={{ marginLeft: 10 }}\r\n                    // size=\"small\"\r\n                    onClick={props.showDrawer}\r\n                    disabled={props.isAddActive}\r\n                >\r\n                    \r\n                </Button>\r\n                \r\n                <Button className=\"\" \r\n                    type=\"primary\"  \r\n                    shape=\"round\" \r\n                    style={{ marginLeft: 10 }}\r\n                    icon={\r\n                    <div className=\"d-flex flex-wrap align-content-start\">\r\n                        <SettingOutlined style={{ fontSize: '18px' }} />\r\n                        <span className=\"ml-1\" style={{ fontSize: '14px' }}>Settings</span>\r\n                    </div>} />\r\n            </div>\r\n            {/* </Anchor> */}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ToDoHeader","C:\\OpenServer\\domains\\epam-app\\src\\Components\\NewTaskForm.tsx",[],{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","severity":1,"message":"57","line":2,"column":10,"nodeType":"58","messageId":"59","endLine":2,"endColumn":20},{"ruleId":"56","severity":1,"message":"60","line":2,"column":37,"nodeType":"58","messageId":"59","endLine":2,"endColumn":43},{"ruleId":"61","severity":1,"message":"62","line":30,"column":8,"nodeType":"63","endLine":30,"endColumn":22,"suggestions":"64"},{"ruleId":"56","severity":1,"message":"65","line":1,"column":27,"nodeType":"58","messageId":"59","endLine":1,"endColumn":36},{"ruleId":"56","severity":1,"message":"66","line":2,"column":32,"nodeType":"58","messageId":"59","endLine":2,"endColumn":38},"no-native-reassign",["67"],"no-negated-in-lhs",["68"],"@typescript-eslint/no-unused-vars","'DatePicker' is defined but never used.","Identifier","unusedVar","'Button' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["69"],"'useEffect' is defined but never used.","'Anchor' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"70","fix":"71"},"Update the dependencies array to be: [props, selectedDate]",{"range":"72","text":"73"},[1061,1075],"[props, selectedDate]"]
[{"C:\\OSPanel\\domains\\epam-app\\src\\index.tsx":"1","C:\\OSPanel\\domains\\epam-app\\src\\reportWebVitals.ts":"2","C:\\OSPanel\\domains\\epam-app\\src\\App.tsx":"3","C:\\OSPanel\\domains\\epam-app\\src\\Components\\ToDoList.tsx":"4","C:\\OSPanel\\domains\\epam-app\\src\\Components\\NewTaskForm.tsx":"5","C:\\OSPanel\\domains\\epam-app\\src\\Components\\NewTaskFormContainer.tsx":"6","C:\\OSPanel\\domains\\epam-app\\src\\Components\\ToDoListContainer.tsx":"7","C:\\OSPanel\\domains\\epam-app\\src\\api\\api.ts":"8","C:\\OSPanel\\domains\\epam-app\\src\\redux\\taskReducer.ts":"9","C:\\OSPanel\\domains\\epam-app\\src\\redux\\store.ts":"10","C:\\OSPanel\\domains\\epam-app\\src\\Components\\ToDoHeader.tsx":"11","C:\\OSPanel\\domains\\epam-app\\src\\Components\\Settings\\SettingsModal.tsx":"12","C:\\OSPanel\\domains\\epam-app\\src\\api\\taskApi.ts":"13","C:\\OSPanel\\domains\\epam-app\\src\\Components\\TimeScale\\TaskItem\\TaskItem.tsx":"14","C:\\OSPanel\\domains\\epam-app\\src\\utils\\array-helpers.ts":"15"},{"size":527,"mtime":1611312674852,"results":"16","hashOfConfig":"17"},{"size":440,"mtime":1611045973906,"results":"18","hashOfConfig":"17"},{"size":446,"mtime":1611481483703,"results":"19","hashOfConfig":"17"},{"size":6665,"mtime":1611483379255,"results":"20","hashOfConfig":"17"},{"size":5126,"mtime":1611420929135,"results":"21","hashOfConfig":"17"},{"size":898,"mtime":1611419522214,"results":"22","hashOfConfig":"17"},{"size":807,"mtime":1611419335638,"results":"23","hashOfConfig":"17"},{"size":295,"mtime":1611484201286,"results":"24","hashOfConfig":"17"},{"size":3314,"mtime":1611484253786,"results":"25","hashOfConfig":"17"},{"size":671,"mtime":1611404658886,"results":"26","hashOfConfig":"17"},{"size":4041,"mtime":1611481483708,"results":"27","hashOfConfig":"17"},{"size":452,"mtime":1611483361598,"results":"28","hashOfConfig":"17"},{"size":1989,"mtime":1611483600920,"results":"29","hashOfConfig":"17"},{"size":1546,"mtime":1611481483705,"results":"30","hashOfConfig":"17"},{"size":321,"mtime":1611482751963,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"136sl52",{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"34"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"45"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"34"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"C:\\OSPanel\\domains\\epam-app\\src\\index.tsx",[],["67","68"],"C:\\OSPanel\\domains\\epam-app\\src\\reportWebVitals.ts",[],"C:\\OSPanel\\domains\\epam-app\\src\\App.tsx",[],"C:\\OSPanel\\domains\\epam-app\\src\\Components\\ToDoList.tsx",["69","70"],"import React, { useState, useEffect } from 'react'\r\nimport { Spin, Card, Divider, Tooltip } from 'antd'\r\nimport moment from 'moment'\r\nimport NewTaskForm from './NewTaskFormContainer'\r\nimport ToDoHeader from './ToDoHeader'\r\nimport SettingsModal from './Settings/SettingsModal'\r\nimport { TaskType } from './../Types/types'\r\nimport { RangeValue, EventValue } from './../Types/types'\r\nimport { ToDoListPropsType } from './ToDoListContainer'\r\nimport TaskItem from './TimeScale/TaskItem/TaskItem'\r\n\r\nconst getTimeScaleArrey = (taskList: Array<TaskType>): Array<React.ReactElement<string>> => {\r\n    const sortByParams = (field: 'date' | 'time') => {\r\n        if (field === 'date') {\r\n            return (a: TaskType, b: TaskType) => a['date'] > b['date'] ? 1 : -1;\r\n        } else {\r\n            return (a: TaskType, b: TaskType) => a['time'] > b['time'] ? -1 : 1;\r\n        }\r\n    }\r\n\r\n    taskList.sort(sortByParams('time')).sort(sortByParams('date'))\r\n\r\n    let timeScaleArrey: Array<React.ReactElement<string>> = []\r\n    let tomorowTasks: Array<TaskType> = []\r\n\r\n    const getHeadline = (task: TaskType) => {\r\n        return moment(task.date).format('DD MMMM')\r\n    }\r\n\r\n    let headlineDate: string | null = null;\r\n\r\n    if (taskList !== null && taskList.length > 0) {\r\n        headlineDate = getHeadline(taskList[0])\r\n        timeScaleArrey.push(\r\n            <h3 key={headlineDate + 'title'}>{headlineDate}:</h3>\r\n        )\r\n    }\r\n\r\n    for (let index: number = 0; index < 24; index++) {\r\n        timeScaleArrey.push(\r\n            <Divider key={index + 'to' + headlineDate} orientation=\"left\">\r\n                {index <= 9 ? '0' : null}{index}:00\r\n            </Divider>\r\n        )\r\n\r\n        if (taskList !== null) {\r\n            for (let i = 0; i < taskList.length; i++) {\r\n                const element: TaskType = taskList[i];\r\n                const timeVal = Number(element.time.split(':', 1))\r\n                const nextHour = index + 1\r\n                if (timeVal >= index && timeVal < nextHour) {\r\n                    if (getHeadline(element) === headlineDate) {\r\n                        timeScaleArrey.push(\r\n                            <Tooltip key={index + '-' + element.id} placement=\"topLeft\" title={element.descriptions}>\r\n                                {/* <p className=\"ml-5\">{element.time.split(':', 2).join(':')} - {element.name} date: {element.date}; id=<b>{element.id}</b></p> */}\r\n                                <TaskItem element={element}/>\r\n                            </Tooltip>\r\n                        )\r\n                    }\r\n                    else {\r\n                        tomorowTasks.push(element)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (tomorowTasks.length > 0) {\r\n        timeScaleArrey = timeScaleArrey.concat(getTimeScaleArrey(tomorowTasks))\r\n    }\r\n\r\n    return timeScaleArrey\r\n}\r\nexport type OwnToDoListPropsType = {}\r\n\r\nconst ToDoList: React.FC<ToDoListPropsType> = (props) => {\r\n    const [selectedDate, setSelectedDate] = useState<moment.Moment>(moment())\r\n    const [visible, setVisible] = useState(false)\r\n    const [isAddActive, setIsAddActive] = useState(false)\r\n    const [timeScaleBlock, setTimeScaleBlock] = useState<Array<React.ReactElement<string>> | null>(null)\r\n    // const [showingMode, setShowingMode] = useState<'date' | 'interval'>('date')\r\n    const [isModalVisible, setIsModalVisible] = useState(false);\r\n\r\n    useEffect(() => {\r\n        // console.log('selectedDate changet to ', selectedDate.format('YYYY-MM-DD'))\r\n        props.getTaskList(selectedDate.format('YYYY-MM-DD'))\r\n        // props.test('2021-01-19')\r\n    }, [selectedDate]);\r\n\r\n    useEffect(() => {\r\n        if (props.taskList !== null) {\r\n            console.log('1) props in useEffect taskList:', props.taskList)\r\n            setTimeScaleBlock(getTimeScaleArrey(props.taskList))\r\n        } else {\r\n            setTimeScaleBlock([<Spin key=\"spin\" size=\"large\" />])\r\n        }\r\n    }, [props.taskList]);\r\n\r\n    const onDateChange = (value: moment.Moment | null, dateString: string): void => {\r\n        console.log('2) onDateChange value:', value)\r\n        if (value !== null) {\r\n            setTimeScaleBlock([<Spin key=\"spin\" size=\"large\" />])\r\n            setSelectedDate(value)\r\n            setIsAddActive(false)\r\n        } else {\r\n            setSelectedDate(moment(null))\r\n            setIsAddActive(true)\r\n        }\r\n    }\r\n\r\n    // const onGapDateChange = (values: Array<moment.Moment>): void => {\r\n    const onGapDateChange = (values: RangeValue<moment.Moment>, formatString: [string, string]): void => {\r\n        console.log('3) onGapDateChange value', values)\r\n        setTimeScaleBlock([<Spin key=\"spin\" size=\"large\" />])\r\n        if (values !== null && values[0] !== null && values[1] !== null) {\r\n            props.getTaskListForGap(values[0].format('YYYY-MM-DD'), values[1].format('YYYY-MM-DD'))\r\n        }\r\n    }\r\n\r\n    const showDrawer = (): void => {\r\n        setVisible(true);\r\n    }\r\n\r\n    const onClose = (): void => {\r\n        setVisible(false);\r\n    }\r\n\r\n    const showModal = () => {\r\n        setIsModalVisible(true);\r\n    };\r\n\r\n    const handleOk = () => {\r\n        setIsModalVisible(false);\r\n    };\r\n\r\n    const handleCancel = () => {\r\n        setIsModalVisible(false);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div className=\"site-card-border-less-wrapper\">\r\n                <Card\r\n                    title={<ToDoHeader\r\n                        onDateChange={onDateChange}\r\n                        getTaskList={props.getTaskList}\r\n                        selectedDate={selectedDate}\r\n                        setSelectedDate={setSelectedDate}\r\n                        showDrawer={showDrawer}\r\n                        isAddActive={isAddActive}\r\n                        onGapDateChange={onGapDateChange}\r\n                        showModal={showModal}\r\n                    />}\r\n                    bordered={false}\r\n                >\r\n\r\n                    <SettingsModal isModalVisible={isModalVisible} handleOk={handleOk} handleCancel={handleCancel}>\r\n                        <p>Some contents...</p>\r\n                        <p>Some contents...</p>\r\n                        <p>Some contents...</p>\r\n                    </SettingsModal>\r\n\r\n                    {timeScaleBlock}\r\n\r\n                </Card>\r\n\r\n                <NewTaskForm\r\n                    selectedDate={selectedDate}\r\n                    onClose={onClose}\r\n                    visible={visible}\r\n                    setVisible={setVisible}\r\n                // setSelectedDate={setSelectedDate}\r\n                />\r\n\r\n            </div>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ToDoList","C:\\OSPanel\\domains\\epam-app\\src\\Components\\NewTaskForm.tsx",["71","72"],"import React, { useState, useEffect } from 'react'\r\nimport moment from 'moment'\r\nimport { Form, Input, Button, TimePicker, DatePicker, Drawer, Spin, message } from 'antd'\r\nimport { NewTaskFormPropsType } from './NewTaskFormContainer'\r\n\r\nconst layout = {\r\n    labelCol: { span: 8 },\r\n    wrapperCol: { span: 16 },\r\n}\r\nconst tailLayout = {\r\n    wrapperCol: { offset: 8, span: 16 },\r\n}\r\n\r\nexport type NewTaskFormOwnPropsType = {\r\n    selectedDate: moment.Moment,\r\n    onClose: ()=>void\r\n    visible: boolean,\r\n    setVisible: (visible: boolean)=>void\r\n}\r\n\r\nconst { TextArea } = Input;\r\n\r\nconst timeFormat: string = 'HH:mm';\r\n\r\nconst NewTaskForm: React.FC<NewTaskFormPropsType> = (props) => {\r\n    const [selectedDate, setSelectedDate] = useState<moment.Moment>(props.selectedDate)\r\n    const [saveStatus, setSaveStatus] = useState<string>(props.taskSaveStatus)\r\n\r\n    useEffect(() => {\r\n        switch (props.taskSaveStatus) {\r\n            case 'inProgress':\r\n                setSaveStatus(props.taskSaveStatus)\r\n                break;\r\n            case 'success':\r\n                message.success('The task was successfully created');\r\n                props.onClose()\r\n                setSaveStatus('')\r\n                break;\r\n            case 'error':\r\n                message.error('Error: '+ props.errorMessage);\r\n                setSaveStatus(props.taskSaveStatus)\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n    }, [props.taskSaveStatus]);\r\n\r\n    type OnFinishType = {\r\n        taskName: string,\r\n        date: moment.Moment,\r\n        taskTime: moment.Moment,\r\n        description?: string\r\n    }\r\n    const onFinish = (values: OnFinishType) => {\r\n        console.log('onFinish, reload: ', selectedDate !== props.selectedDate)\r\n        const data = {\r\n            date: values.date.format('YYYY-MM-DD'),\r\n            taskTime: values.taskTime.format('HH:mm'),\r\n            taskName: values.taskName,\r\n            user_id: 1,\r\n            description: values.description\r\n        }\r\n\r\n        if (selectedDate.format('YYYY-MM-DD') !== props.selectedDate.format('YYYY-MM-DD')) {\r\n            console.log('ПЕРЕРИСОВКИ НЕТ')\r\n            props.createNewTask(data, false)\r\n        } else {\r\n            \r\n            props.createNewTask(data, true)\r\n            console.log('ПЕРЕРИСОВКА')\r\n        }\r\n    };\r\n\r\n    type ErrorItem = {\r\n        errors: string\r\n        name: string\r\n    }\r\n\r\n    const onTimeChange = (value: moment.Moment | null, dateString: string): void => {\r\n        // console.log(value, dateString);\r\n    }\r\n\r\n    const onDateChange = (value: moment.Moment | null, dateString: string): void => {\r\n        if (value !== null) {\r\n            setSelectedDate(value)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Drawer\r\n            title={\"Create New Task for \" + selectedDate.format('DD MMM YYYY')}\r\n            placement=\"right\"\r\n            closable={true}\r\n            onClose={props.onClose}\r\n            visible={props.visible}\r\n            width=\"80%\"\r\n        >\r\n            <Form\r\n                {...layout}\r\n                name=\"basic\"\r\n                initialValues={{ remember: true }}\r\n                onFinish={onFinish}\r\n            >\r\n                <Form.Item\r\n                    label=\"Task name\"\r\n                    name=\"taskName\"\r\n                    rules={[{ required: true, message: 'Please input task name!' }]}\r\n                >\r\n                    <Input />\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    label=\"Task date\"\r\n                    name=\"date\"\r\n                    initialValue={props.selectedDate}\r\n                rules={[{ required: true, message: 'Please input task date!' }]}\r\n                >\r\n                    <DatePicker\r\n                        // defaultValue={props.selectedDate}\r\n                        onChange={onDateChange}\r\n                        format='DD-MM-YYYY'\r\n                    />\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    label=\"Task time\"\r\n                    name=\"taskTime\"\r\n                    rules={[{ required: true, message: 'Please input task time!' }]}\r\n                >\r\n                    <TimePicker\r\n                        onChange={onTimeChange}\r\n                        // defaultValue={moment('12:08', timeFormat)} \r\n                        format={timeFormat}\r\n                    />\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    label=\"Description\"\r\n                    name=\"description\"\r\n                >\r\n                    <TextArea rows={2} />\r\n                </Form.Item>\r\n\r\n                <Form.Item {...tailLayout}>\r\n                    {saveStatus === 'inProgress' ?\r\n                        <Spin></Spin>\r\n                    :\r\n                        <Button type=\"primary\" htmlType=\"submit\">\r\n                            Create\r\n                        </Button>\r\n                        \r\n                    }\r\n                </Form.Item>\r\n            </Form>\r\n        </Drawer>\r\n    )\r\n}\r\n\r\nexport default NewTaskForm",["73","74"],"C:\\OSPanel\\domains\\epam-app\\src\\Components\\NewTaskFormContainer.tsx",[],"C:\\OSPanel\\domains\\epam-app\\src\\Components\\ToDoListContainer.tsx",[],"C:\\OSPanel\\domains\\epam-app\\src\\api\\api.ts",[],"C:\\OSPanel\\domains\\epam-app\\src\\redux\\taskReducer.ts",["75"],"import { Dispatch } from 'redux'\r\nimport { taskAPI, TaskListType } from '../api/taskApi'\r\nimport { NewTaskDataType, TaskType } from '../Types/types'\r\nimport { sortTaskArrayByParams } from '../utils/array-helpers'\r\nimport {BaseThunkType, InferActionsTypes} from './store'\r\n\r\ntype initialStateType = {\r\n    taskList: null | Array<TaskType>,\r\n    taskSaveStatus: 'no' | 'inProgress' | 'success' | 'error'\r\n    errorMessage: null | string\r\n}\r\n\r\nlet initialState:initialStateType = {\r\n    taskList: null,\r\n    taskSaveStatus: 'no',\r\n    errorMessage: null\r\n}\r\n\r\nconst taskReducer = (state = initialState, action: ActionsTypes): initialStateType => {\r\n    let stateCopy = { ...state }\r\n    switch (action.type) {\r\n        case 'SN/TASK/SET_TASK_LIST':\r\n            return {...state, taskList: action.taskList.Tasks.sort(sortTaskArrayByParams('time')).sort(sortTaskArrayByParams('date'))}\r\n\r\n        case 'SN/TASK/SET_TASK_SAVE_STATUS':\r\n            return {...state, taskSaveStatus: action.taskSaveStatus}\r\n\r\n        case 'SN/TASK/SET_ERROR_MESSAGE':\r\n            return {...state, errorMessage: action.message}\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    setTaskList: (taskList: TaskListType) => ({ type: 'SN/TASK/SET_TASK_LIST', taskList } as const),\r\n    setTaskSaveStatus: (taskSaveStatus: 'no' | 'inProgress' | 'success' | 'error') => ({ type: 'SN/TASK/SET_TASK_SAVE_STATUS', taskSaveStatus } as const),\r\n    setErrorMessage: (message: string | null) => ({type: 'SN/TASK/SET_ERROR_MESSAGE', message} as const)\r\n}\r\n\r\nexport const getTaskList = (date: string): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        let taskList = await taskAPI.getTaskList(date)\r\n        if (taskList !== null) {\r\n            dispatch(actions.setTaskList(taskList.data))\r\n        } else {\r\n            console.log('taskList === null')\r\n        }\r\n    }\r\n}\r\nexport const createNewTask = (values: NewTaskDataType, reload:boolean = true): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        dispatch(actions.setTaskSaveStatus('inProgress'))\r\n        console.log('setTaskSaveStatus inProgress')\r\n\r\n        let taskList = await taskAPI.createNewTask(values)\r\n\r\n        console.log('taskList: ', taskList)\r\n\r\n        if (taskList.status === 200) {\r\n            console.log('RESPONSE: ', taskList)\r\n            if (reload) {\r\n                dispatch(actions.setTaskList(taskList.data));\r\n                dispatch(actions.setTaskSaveStatus('success'))\r\n                dispatch(actions.setTaskSaveStatus('no'))\r\n            }\r\n        } else {\r\n            dispatch(actions.setErrorMessage(taskList.data.message))\r\n            dispatch(actions.setTaskSaveStatus('error'))\r\n            dispatch(actions.setTaskSaveStatus('no'))\r\n            dispatch( actions.setErrorMessage(null) )\r\n        }\r\n    }\r\n}\r\n\r\nexport const getTaskListForGap = (start_date: string, end_date:string): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        let response = await taskAPI.getTaskListForGap({start_date, end_date})\r\n        dispatch(actions.setTaskList(response.data))\r\n    }\r\n}\r\n\r\nexport default taskReducer\r\n\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsTypes>\r\nexport type DispatchType = Dispatch<ActionsTypes>\r\n","C:\\OSPanel\\domains\\epam-app\\src\\redux\\store.ts",[],"C:\\OSPanel\\domains\\epam-app\\src\\Components\\ToDoHeader.tsx",[],"C:\\OSPanel\\domains\\epam-app\\src\\Components\\Settings\\SettingsModal.tsx",[],"C:\\OSPanel\\domains\\epam-app\\src\\api\\taskApi.ts",[],"C:\\OSPanel\\domains\\epam-app\\src\\Components\\TimeScale\\TaskItem\\TaskItem.tsx",[],"C:\\OSPanel\\domains\\epam-app\\src\\utils\\array-helpers.ts",[],{"ruleId":"76","replacedBy":"77"},{"ruleId":"78","replacedBy":"79"},{"ruleId":"80","severity":1,"message":"81","line":8,"column":22,"nodeType":"82","messageId":"83","endLine":8,"endColumn":32},{"ruleId":"84","severity":1,"message":"85","line":88,"column":8,"nodeType":"86","endLine":88,"endColumn":22,"suggestions":"87"},{"ruleId":"84","severity":1,"message":"85","line":47,"column":8,"nodeType":"86","endLine":47,"endColumn":30,"suggestions":"88"},{"ruleId":"80","severity":1,"message":"89","line":75,"column":10,"nodeType":"82","messageId":"83","endLine":75,"endColumn":19},{"ruleId":"76","replacedBy":"90"},{"ruleId":"78","replacedBy":"91"},{"ruleId":"80","severity":1,"message":"92","line":20,"column":9,"nodeType":"82","messageId":"83","endLine":20,"endColumn":18},"no-native-reassign",["93"],"no-negated-in-lhs",["94"],"@typescript-eslint/no-unused-vars","'EventValue' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["95"],["96"],"'ErrorItem' is defined but never used.",["93"],["94"],"'stateCopy' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"97","fix":"98"},{"desc":"99","fix":"100"},"Update the dependencies array to be: [props, selectedDate]",{"range":"101","text":"102"},"Update the dependencies array to be: [props, props.taskSaveStatus]",{"range":"103","text":"104"},[3635,3649],"[props, selectedDate]",[1459,1481],"[props, props.taskSaveStatus]"]
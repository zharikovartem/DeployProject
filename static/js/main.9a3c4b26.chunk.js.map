{"version":3,"sources":["api/api.ts","Components/ToDo/NewTaskForm/NewTaskForm.tsx","api/taskApi.ts","redux/taskReducer.ts","Components/ToDo/NewTaskForm/NewTaskFormContainer.tsx","Components/ToDo/ToDoHeader/ToDoHeader.tsx","Components/ToDo/ToDoHeader/ToDoHeaderContainer.tsx","Components/ToDo/Settings/SettingsModal.tsx","Components/ToDo/Settings/SettingsModalContainer.tsx","Components/TimeScale/TaskItem/TaskItem.tsx","Components/TimeScale/TaskItem/TaskItemContainer.tsx","utils/array-helpers.ts","Components/TimeScale/TimeScale.tsx","Components/TimeScale/TimeScaleContainer.tsx","Components/ToDo/ToDoList.tsx","Components/ToDo/ToDoListContainer.tsx","api/authAPI.ts","redux/authReducer.ts","redux/appReducer.ts","api/taskListAPI.ts","redux/TaskListReducer.ts","redux/store.ts","Components/Header/MenuBrowser.tsx","Components/Header/MenuBrowserConainer.tsx","Components/Header/MenuPopover.tsx","Components/Header/MenuMobile.tsx","Components/Header/MenuMobileContainer.tsx","Components/Header/Header.tsx","Components/Header/HeaderContainer.tsx","utils/Formik/CreateAntField.tsx","utils/Formik/ValidateFields.ts","Components/Login/LoginForm.tsx","Components/Login/Login.tsx","Components/Login/LoginContainer.tsx","Components/Orders/Orders.tsx","Components/Orders/OrdersContainer.tsx","Components/TasksTree/NewTaskTreeForm.tsx","Components/TasksTree/TasksTreeBrowser.tsx","Components/TasksTree/TasksTreeMobile.tsx","Components/TasksTree/TasksTreeContainer.tsx","Components/Register/RegisterForm.tsx","Components/Register/Register.tsx","Components/Register/RegisterContainer.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ResultCodesEnum","layout","labelCol","span","wrapperCol","tailLayout","offset","TextArea","Input","NewTaskForm","props","Form","useForm","form","useState","moment","selectedDate","setSelectedDate","taskSaveStatus","saveStatus","setSaveStatus","useEffect","message","success","onClose","onReset","error","errorMessage","resetFields","title","format","placement","closable","visible","width","name","onFinish","values","data","date","taskTime","taskName","user_id","userId","description","isBetween","dateInterval","startDate","endDate","undefined","createNewTask","Item","label","rules","required","initialValue","onChange","value","dateString","autoComplete","rows","type","htmlType","className","onClick","instance","axios","create","withCredentials","baseURL","taskAPI","post","then","response","status","catch","err","request","defaults","headers","common","localStorage","getItem","taskId","delete","initialState","taskList","taskListIsFetching","isInterval","actions","setTaskList","setTaskSaveStatus","setErrorMessage","setTaskListIsFetching","isFetchingValue","setIsInterval","getTaskList","dispatch","getState","a","start_date","end_date","taskReducer","state","action","Tasks","connect","task","auth","user","id","reload","RangePicker","DatePicker","ToDoHeader","dates","setDates","isSame","formatString","defaultValue","style","marginLeft","e","target","checked","shape","icon","FileAddOutlined","fontSize","showDrawer","showModal","SettingOutlined","SettingsModal","viewSettings","settings","settingsBlock","propName","ToDo","Object","prototype","hasOwnProperty","call","element","console","log","push","isModalVisible","onOk","handleOk","onCancel","handleCancel","FormItem","settingsItem","extra","href","TaskItem","setStetus","deleteingInProgess","setDeleteingInProgess","ListGroup","time","split","join","descriptions","textDecoration","size","taskid","deleteTask","DeleteOutlined","sortTaskArrayByParams","field","b","TimeScale","selestedDates","setSelectedDates","getTimeScaleArrey","timeScaleArrey","tomorowTasks","sort","getHeadlineLabel","headlineDate","length","index","orientation","i","timeVal","Number","concat","ToDoList","setVisible","setIsModalVisible","bordered","authAPI","get","remember_token","setItem","removeItem","creds","token","isAuth","setAuthUserData","logout","login","authReducer","JSON","parse","view_settings","initialized","location","appReducer","taskListAPI","put","isTaskListLoaded","taskListReducer","rootReducer","combineReducers","app","store","createStore","applyMiddleware","thunkMiddleware","SubMenu","Menu","MenuBrowser","history","useHistory","mode","theme","menuData","map","item","childs","children","to","replace","appLocation","Popover","MenuPopover","mask","overlay","onVisibleChange","onSelect","opt","onLogout","height","padding","marginRight","display","alignItems","MenuMobile","useLocation","show","setShow","initData","forEach","dataItem","pathname","getSelectedMenuItem","selectedMenuItem","setSelectedMenuItem","subMenu","cItem","menuEl","document","documentElement","clientHeight","loadingEl","justifyContent","leftContent","src","alt","onLeftClick","preventDefault","rightContent","Header","isMobile","disabled","Option","Select","CheckboxItem","CheckboxMobile","CreateAntField","AntComponent","hasFeedback","selectOptions","submitCount","touched","submitted","hasError","errors","submittedError","touchedError","onInputChange","setFieldValue","Array","isArray","onBlur","setFieldTouched","help","validateStatus","allowClear","AntSelect","Picker","AntInput","InputItem","AntInputPassword","Password","AntTimePicker","DatePickerMobile","TimePicker","AntCheckbox","Checkbox","AntTextArea","TextareaItem","MobileComponent","setValue","key","locale","enUs","autoHeight","cols","v","onPickerChange","validateRequired","validateEmail","test","LoginForm","onSubmit","handleSubmit","component","validate","initialValues","Login","formProps","remember","render","block","Orders","NewTaskTreeForm","taskTypes","taskType","setTaskType","task_type","initialDrewerData","Collapse","Panel","header","TasksTreeBrowser","setInitialFormValues","drawerData","setDrawerData","initialFormValues","dataSource","getTaskTreeItems","deleteTaskList","renderItem","draggable","formPropsCopy","time_to_complete","updateTaskList","createNewTaskList","enableReinitialize","day","zone","splitTime","hours","parseInt","minutes","seconds","milliseconds","onEdit","EditOutlined","danger","List","TasksTreeMobile","initialTimeToComplete","Date","setHours","setMinutes","setSeconds","setMilliseconds","onOpenChange","args","inline","minHeight","enableDragHandle","contentStyle","color","textAlign","paddingTop","sidebar","parent_id","open","backgroundColor","autoClose","right","text","onPress","left","arrow","RegisterForm","Register","register","credsToLogin","email","password","AppContainer","compose","withRouter","initializeApp","promise","resultCode","Promise","all","addLocation","instanseCreds","parseQueryString","exact","path","MainApp","params","search","substr","pair","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.9a3c4b26.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nexport const instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://crmapiserver.h1n.ru/api/',\r\n    // baseURL: 'https://81.90.181.175/api/',\r\n    // headers:     {\r\n    //     'X-Auth-Token': localStorage.getItem('remember_token')\r\n    // }\r\n})\r\n\r\nexport enum ResultCodesEnum {\r\n    Success = 0,\r\n    Error = 1\r\n}\r\n\r\nexport type APIResponseType<D = {}, RC = ResultCodesEnum> = {\r\n    data: D\r\n    messages: Array<string>\r\n    resultCode: RC\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport moment from 'moment'\r\nimport { Form, Input, Button, TimePicker, DatePicker, Drawer, Spin, message } from 'antd'\r\nimport { NewTaskFormPropsType } from './NewTaskFormContainer'\r\nimport './../style.css'\r\n\r\nconst layout = {\r\n    labelCol: { span: 8 },\r\n    wrapperCol: { span: 16 },\r\n}\r\nconst tailLayout = {\r\n    wrapperCol: { offset: 8, span: 16 },\r\n}\r\n\r\nexport type NewTaskFormOwnPropsType = {\r\n    onClose: () => void\r\n    visible: boolean,\r\n    setVisible: (visible: boolean) => void\r\n}\r\n\r\nconst { TextArea } = Input\r\n\r\nconst timeFormat: string = 'HH:mm'\r\n\r\nconst NewTaskForm: React.FC<NewTaskFormPropsType> = (props) => {\r\n    const [form] = Form.useForm()\r\n    const [selectedDate, setSelectedDate] = useState<moment.Moment>(moment())\r\n    const [saveStatus, setSaveStatus] = useState<string>(props.taskSaveStatus)\r\n\r\n    useEffect(() => {\r\n        switch (props.taskSaveStatus) {\r\n            case 'inProgress':\r\n                setSaveStatus(props.taskSaveStatus)\r\n                break\r\n            case 'success':\r\n                message.success('The task was successfully created')\r\n                props.onClose()\r\n                setSaveStatus('')\r\n                onReset()\r\n                break\r\n            case 'error':\r\n                message.error('Error: ' + props.errorMessage)\r\n                setSaveStatus(props.taskSaveStatus)\r\n                break\r\n\r\n            default:\r\n                break\r\n        }\r\n    }, [props.taskSaveStatus])\r\n\r\n    type OnFinishType = {\r\n        taskName: string,\r\n        date: moment.Moment,\r\n        taskTime: moment.Moment,\r\n        description?: string\r\n    }\r\n    const onFinish = (values: OnFinishType) => {\r\n        const data = {\r\n            date: values.date.format('YYYY-MM-DD'),\r\n            taskTime: values.taskTime.format('HH:mm'),\r\n            taskName: values.taskName,\r\n            user_id: props.userId,\r\n            description: values.description\r\n        }\r\n\r\n        if (!moment(selectedDate.format('YYYY-MM-DD')).isBetween(\r\n            props.dateInterval.startDate.format('YYYY-MM-DD'),\r\n            props.dateInterval.endDate.format('YYYY-MM-DD'),\r\n            undefined, '[]'\r\n        )) {\r\n            props.createNewTask(data, false)\r\n        } else {\r\n            props.createNewTask(data, true)\r\n        }\r\n    }\r\n\r\n    const onReset = () => {\r\n        form.resetFields()\r\n    }\r\n\r\n    const onDateChange = (value: moment.Moment | null, dateString: string): void => {\r\n        if (value !== null) {\r\n            setSelectedDate(value)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Drawer\r\n            title={\"Create New Task for \" + selectedDate.format('DD MMM YYYY')}\r\n            placement=\"right\"\r\n            closable={true}\r\n            onClose={props.onClose}\r\n            visible={props.visible}\r\n            width=\"90%\"\r\n        >\r\n            <Form\r\n                {...layout}\r\n                form={form}\r\n                name=\"control-hooks\"\r\n                onFinish={onFinish}\r\n            >\r\n                <Form.Item\r\n                    label=\"Task name\"\r\n                    name=\"taskName\"\r\n                    rules={[{ required: true, message: 'Please input task name!' }]}\r\n                >\r\n                    <Input />\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    label=\"Task date\"\r\n                    name=\"date\"\r\n                    initialValue={selectedDate}\r\n                    rules={[{ required: true, message: 'Please input task date!' }]}\r\n                >\r\n                    <DatePicker\r\n                        onChange={onDateChange}\r\n                        format='DD-MM-YYYY'\r\n                        autoComplete=\"off\"\r\n                    />\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    label=\"Task time\"\r\n                    name=\"taskTime\"\r\n                    rules={[{ required: true, message: 'Please input task time!' }]}\r\n                >\r\n                    <TimePicker\r\n                        format={timeFormat}\r\n                    />\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    label=\"Description\"\r\n                    name=\"description\"\r\n                >\r\n                    <TextArea rows={2} />\r\n                </Form.Item>\r\n\r\n                <Form.Item {...tailLayout}>\r\n                    {saveStatus === 'inProgress' ?\r\n                        <Spin></Spin>\r\n                        :\r\n                        <>\r\n                            <Button type=\"primary\" htmlType=\"submit\">\r\n                                Create\r\n                            </Button>\r\n                            <Button className=\"ml-3\" type=\"primary\" onClick={onReset}>\r\n                                Reset\r\n                            </Button>\r\n                        </>\r\n                    }\r\n                </Form.Item>\r\n            </Form>\r\n\r\n        </Drawer>\r\n    )\r\n}\r\n\r\n\r\nexport default NewTaskForm","import { NewTaskDataType, TaskType } from '../Types/types'\r\nimport {instance} from './api'\r\n\r\nexport type TaskListType = {\r\n    Tasks: Array<TaskType>\r\n}\r\n\r\nexport const taskAPI = {\r\n    createNewTask(values: NewTaskDataType) {\r\n        return instance.post<TaskListType>(`tasks`, values)\r\n        .then(response => {\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                return err.response\r\n            } else if (err.request) {\r\n                //console.log('request', err.request)\r\n            } else {\r\n                //console.log('anything else: ', err)\r\n            }\r\n            return null\r\n        })\r\n    },\r\n\r\n    getTaskList(values: getTaskListValuesType) {\r\n        instance.defaults.headers.common['X-Auth-Token'] = localStorage.getItem('remember_token')\r\n        // .headers = {\r\n        //     'X-Auth-Token': localStorage.getItem('remember_token')\r\n        // }\r\n        return instance.post<TaskListType>(`tasks/part`, values)\r\n        .then(response => {\r\n            //console.log(response)\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                //console.log('request', err.request)\r\n                return err.response\r\n            } else if (err.request) {\r\n                //console.log('request', err.request)\r\n            } else {\r\n                //console.log('anything else: ', err)\r\n            }\r\n            return null\r\n        })\r\n    },\r\n\r\n    deleteTask(taskId: number) {\r\n        return instance.delete<TaskListType>(`tasks/${taskId}`).then(response => {\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                return err.response\r\n            } else if (err.request) {\r\n                //console.log('request', err.request)\r\n            } else {\r\n                //console.log('anything else: ', err)\r\n            }\r\n            return null\r\n        })\r\n    }\r\n}\r\n\r\nexport type getTaskListValuesType = {\r\n    start_date: string, \r\n    end_date: string\r\n}","import { Dispatch } from 'redux'\r\nimport { taskAPI, TaskListType } from '../api/taskApi'\r\nimport { NewTaskDataType, TaskType } from '../Types/types'\r\nimport {BaseThunkType, InferActionsTypes} from './store'\r\nimport moment from 'moment'\r\n\r\nexport type InitialStateType = {\r\n    taskList: null | Array<TaskType>,\r\n    taskListIsFetching: boolean,\r\n    taskSaveStatus: 'no' | 'inProgress' | 'success' | 'error'\r\n    errorMessage: null | string,\r\n    isInterval: boolean,\r\n    dateInterval: {\r\n        startDate: moment.Moment,\r\n        endDate: moment.Moment\r\n    }\r\n}\r\n\r\nlet initialState:InitialStateType = {\r\n    taskList: null,\r\n    taskListIsFetching: false,\r\n    taskSaveStatus: 'no',\r\n    errorMessage: null,\r\n    isInterval: false,\r\n    dateInterval: {\r\n        startDate: moment(),\r\n        endDate: moment()\r\n    }\r\n}\r\n\r\nconst taskReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n    \r\n    switch (action.type) {\r\n        case 'SN/TASK/SET_TASK_LIST':\r\n            return {...state, taskList: action.taskList.Tasks}\r\n\r\n        case 'SN/TASK/SET_TASK_SAVE_STATUS':\r\n            return {...state, taskSaveStatus: action.taskSaveStatus}\r\n\r\n        case 'SN/TASK/SET_ERROR_MESSAGE':\r\n            return {...state, errorMessage: action.message}\r\n\r\n        case 'SN/TASK/SET_TASK_LIST_IS_FETCHING':\r\n            return {...state, taskListIsFetching: action.isFetchingValue}\r\n\r\n        case 'SN/TASK/SET_IS_INTERVAL':\r\n            const dateInterval = {\r\n                startDate: action.date.startDate,\r\n                endDate: action.date.endDate\r\n            }\r\n            return {...state, isInterval: action.isInterval, dateInterval }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    setTaskList: (taskList: TaskListType) => ({ type: 'SN/TASK/SET_TASK_LIST', taskList } as const),\r\n    setTaskSaveStatus: (taskSaveStatus: 'no' | 'inProgress' | 'success' | 'error') => ({ type: 'SN/TASK/SET_TASK_SAVE_STATUS', taskSaveStatus } as const),\r\n    setErrorMessage: (message: string | null) => ({type: 'SN/TASK/SET_ERROR_MESSAGE', message} as const),\r\n    setTaskListIsFetching: (isFetchingValue: boolean) => ({type: 'SN/TASK/SET_TASK_LIST_IS_FETCHING', isFetchingValue} as const),\r\n    setIsInterval: (isInterval: boolean, date: {startDate: moment.Moment, endDate: moment.Moment}) => ({type: 'SN/TASK/SET_IS_INTERVAL', isInterval, date} as const)\r\n}\r\n\r\nexport const createNewTask = (values: NewTaskDataType, reload:boolean = true): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        dispatch(actions.setTaskSaveStatus('inProgress'))\r\n\r\n        let response = await taskAPI.createNewTask(values)\r\n\r\n        if (response && response.status && response.status === 200) {\r\n            if (reload) {\r\n                const state = getState()\r\n                const startDate = state.task.dateInterval.startDate.format('YYYY-MM-DD')\r\n                const endDate = state.task.dateInterval.endDate.format('YYYY-MM-DD')\r\n                dispatch(getTaskList(startDate, endDate))\r\n            }\r\n            dispatch(actions.setTaskSaveStatus('success'))\r\n            dispatch(actions.setTaskSaveStatus('no'))\r\n        } else {\r\n            if (response && response.data) {\r\n                dispatch(actions.setErrorMessage(response.data.message))\r\n                dispatch(actions.setTaskSaveStatus('error'))\r\n                dispatch(actions.setTaskSaveStatus('no'))\r\n                dispatch( actions.setErrorMessage(null) )\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport const getTaskList = (startDate: string, endDate:string): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        dispatch(actions.setTaskListIsFetching(true))\r\n\r\n        const values = {start_date: startDate, end_date: endDate}\r\n        let response = await taskAPI.getTaskList(values)\r\n\r\n        if (response !== undefined && response !== null) {\r\n            dispatch(actions.setTaskList(response.data))\r\n        } else {\r\n            // add error message\r\n        }\r\n        dispatch(actions.setTaskListIsFetching(false))\r\n    }\r\n}\r\n\r\nexport const deleteTask = (taskid: number, startDate: string, endDate:string): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        let response = await taskAPI.deleteTask(taskid)\r\n\r\n        if (response !== null) {\r\n            dispatch(actions.setErrorMessage('Task deletion was successful'))\r\n            dispatch(getTaskList(startDate, endDate))\r\n            dispatch( actions.setErrorMessage(null) )\r\n        }\r\n    }\r\n}\r\n\r\nexport default taskReducer\r\n\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsTypes>\r\nexport type DispatchType = Dispatch<ActionsTypes>\r\n","import {connect} from 'react-redux'\r\nimport NewTaskForm, { NewTaskFormOwnPropsType } from './NewTaskForm'\r\nimport {createNewTask} from '../../../redux/taskReducer'\r\nimport { AppStateType } from '../../../redux/store'\r\nimport {NewTaskDataType} from '../../../Types/types'\r\n\r\nexport type MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype DispatchPropsType = {\r\n    createNewTask: (values:NewTaskDataType, reload:boolean)=> void\r\n}\r\n\r\nexport type NewTaskFormPropsType = MapPropsType & DispatchPropsType & NewTaskFormOwnPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        taskList: state.task.taskList,\r\n        taskSaveStatus: state.task.taskSaveStatus,\r\n        errorMessage: state.task.errorMessage,\r\n        dateInterval: state.task.dateInterval,\r\n        userId: state.auth.user?.id\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, DispatchPropsType, NewTaskFormOwnPropsType, AppStateType>(mapStateToProps, \r\n    {createNewTask}) \r\n    (NewTaskForm)\r\n\r\n\r\n","import React, { useState, useEffect } from 'react'\r\nimport { DatePicker, Checkbox, Button } from 'antd'\r\nimport { FileAddOutlined, SettingOutlined } from '@ant-design/icons'\r\nimport { CheckboxChangeEvent } from 'antd/lib/checkbox'\r\nimport {RangeValue} from '../../../Types/types'\r\nimport { ToDoHeaderPropsType } from './ToDoHeaderContainer'\r\nimport moment from 'moment'\r\n\r\nconst { RangePicker } = DatePicker\r\n\r\nexport type OwnToDoHeaderPropsType = {\r\n    showDrawer: () => void,\r\n    showModal: () => void,\r\n}\r\n\r\nconst ToDoHeader: React.FC<ToDoHeaderPropsType> = (props) => {\r\n    const [isInterval, setIsInterval] = useState(false)\r\n    const [dates, setDates] = useState<{startDate: moment.Moment, endDate: moment.Moment}>({startDate: moment(), endDate: moment()})\r\n\r\n    useEffect(() => {\r\n        if ( \r\n            !props.dateInterval.startDate.isSame(dates.startDate.format('YYYY-MM-DD'), \"day\" ) ||\r\n            !props.dateInterval.endDate.isSame(dates.endDate.format('YYYY-MM-DD'), \"day\" )\r\n        ) {\r\n            props.setIsInterval(isInterval, dates)\r\n        }\r\n        \r\n    }, [isInterval, dates, props])\r\n\r\n\r\n    const onDateTypeChange = (e: CheckboxChangeEvent) => {\r\n        if (!e.target.checked) {\r\n            setDates({\r\n                startDate: dates.startDate,\r\n                endDate: dates.startDate\r\n            })\r\n        }\r\n        setIsInterval(e.target.checked)\r\n    }\r\n\r\n    const onDateRangeChange = (values: RangeValue<moment.Moment>, formatString: [string, string]): void => {\r\n        if (values !== null && values[0] !== null && values[1] !== null ) {\r\n            setDates({\r\n                startDate: values[0],\r\n                endDate: values[1],\r\n            })\r\n        }\r\n        \r\n    }\r\n\r\n    const onDateChange = (value: moment.Moment | null, dateString: string):void => {\r\n        if (value !== null) {\r\n            setDates({\r\n                startDate: value,\r\n                endDate: value,\r\n            })\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"row\" >\r\n            <div className=\"col-12 col-md-8 col-lg-6\">\r\n                <div className=\"d-none d-sm-inline\">\r\n                    <label >Select {isInterval ? \"date interval\" : \"date\"}:</label>\r\n                </div>\r\n\r\n                <div className=\"d-inline\">\r\n                    {isInterval ?\r\n                        <RangePicker\r\n                            onChange={onDateRangeChange}\r\n                            defaultValue={[props.dateInterval.startDate, props.dateInterval.endDate]}\r\n                            value = {[props.dateInterval.startDate, props.dateInterval.endDate]}\r\n                            format='DD-MM-YYYY'\r\n                            style={{ marginLeft: 10 }}\r\n                        />\r\n                        :\r\n                        <DatePicker\r\n                            onChange={onDateChange}\r\n                            defaultValue={props.dateInterval.startDate}\r\n                            format='DD-MM-YYYY'\r\n                            style={{ marginLeft: 10 }}\r\n                        />\r\n                    }\r\n                </div>\r\n            </div>\r\n            <div className=\"col-12 col-md-4 col-lg-2 m-2 m-md-0\" >\r\n                <Checkbox className=\"ml-3\" onChange={onDateTypeChange}>Date interval</Checkbox>\r\n            </div>\r\n            <div className=\"col-12 col-md-12 col-lg-4\">\r\n                <Button\r\n                    type=\"primary\"\r\n                    shape=\"round\"\r\n                    icon={\r\n                        <div className=\"d-flex flex-wrap align-content-start\">\r\n                            <FileAddOutlined style={{ fontSize: '18px' }} />\r\n                            <span className=\"ml-1\" style={{ fontSize: '14px' }}>Add</span>\r\n                        </div>}\r\n                    style={{ marginLeft: 10 }}\r\n                    onClick={props.showDrawer}\r\n                />\r\n\r\n                <Button className=\"\"\r\n                    type=\"primary\"\r\n                    shape=\"round\"\r\n                    style={{ marginLeft: 10 }}\r\n                    onClick={props.showModal}\r\n                    icon={\r\n                        <div className=\"d-flex flex-wrap align-content-start\">\r\n                            <SettingOutlined style={{ fontSize: '18px' }} />\r\n                            <span className=\"ml-1\" style={{ fontSize: '14px' }}>Settings</span>\r\n                        </div>} \r\n                    />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ToDoHeader","import {connect} from 'react-redux'\r\nimport ToDoHeader, { OwnToDoHeaderPropsType } from './ToDoHeader'\r\nimport {actions} from '../../../redux/taskReducer'\r\nimport { AppStateType } from '../../../redux/store'\r\n// import { Action } from 'redux'\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    setIsInterval: (isInterval: boolean, date: {startDate: moment.Moment, endDate: moment.Moment}) => {\r\n        type: \"SN/TASK/SET_IS_INTERVAL\",\r\n        isInterval: boolean,\r\n        date: {startDate: moment.Moment, endDate: moment.Moment}\r\n    }\r\n}\r\n\r\nexport type ToDoHeaderPropsType = MapPropsType & MapDispatchPropsType & OwnToDoHeaderPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        dateInterval: state.task.dateInterval\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnToDoHeaderPropsType, AppStateType>(mapStateToProps, \r\n    {setIsInterval: actions.setIsInterval}) \r\n    (ToDoHeader)\r\n    \r\n\r\n","import React, {useState} from 'react'\r\nimport { Card, Modal } from 'antd'\r\nimport { SettingsModalPropsType } from './SettingsModalContainer'\r\n\r\nconst settingasExample = {\r\n    ToDo: {\r\n        singlDateView: {\r\n            timeScale: true,\r\n            isCompletedVisible: true\r\n        },\r\n        intervalDateView: {\r\n            timeScale: false,\r\n            isCompletedVisible: true\r\n        }\r\n    }\r\n}\r\n\r\nexport type OwmSettingsModalPropsType = {\r\n    isModalVisible: boolean,\r\n    handleOk: () => void,\r\n    handleCancel: () => void\r\n}\r\n\r\n\r\n\r\nconst SettingsModal = (props:any) => {\r\n\r\n    // console.log( JSON.parse(props.viewSettings) )\r\n    const [settings, setSettings] = useState(props.viewSettings)\r\n\r\n    let settingsBlock: Array<any> = []\r\n\r\n    for (const propName in settings.ToDo) {\r\n        if (Object.prototype.hasOwnProperty.call(settings.ToDo, propName)) {\r\n            const element = settings.ToDo[propName]\r\n            console.log(propName, element)\r\n            settingsBlock.push(<FormItem title={propName} data={element}/>)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Modal title=\"Task display settings\" visible={props.isModalVisible} onOk={props.handleOk} onCancel={props.handleCancel}>\r\n            {settingsBlock}\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default SettingsModal\r\n\r\nconst FormItem: React.FC<any> = (props) => {\r\n    let settingsItem: Array<any> = []\r\n    for (const propName in props.data) {\r\n        if (Object.prototype.hasOwnProperty.call(props.data, propName)) {\r\n            const element = props.data[propName]\r\n            settingsItem.push(<div>{propName} = {element ? 'yes' : 'no'}</div>)\r\n        }\r\n    }\r\n\r\n    return(\r\n        <Card title={props.title} extra={<a href=\"#\">More</a>} >\r\n            {settingsItem}\r\n        </Card>\r\n    )\r\n}","import {connect} from 'react-redux'\r\nimport SettingsModal, { OwmSettingsModalPropsType } from './SettingsModal'\r\nimport { AppStateType } from '../../../redux/store'\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    // getTaskList: (start_date: string, end_date:string)=>void\r\n}\r\n\r\nexport type SettingsModalPropsType = MapPropsType & MapDispatchPropsType & OwmSettingsModalPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    console.log(state)\r\n    return {\r\n        viewSettings: state.auth.viewSettings\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwmSettingsModalPropsType, AppStateType>(mapStateToProps, \r\n    {}) \r\n    (SettingsModal)\r\n    \r\n\r\n","import React, { useState } from 'react'\r\nimport { Col, Row, Checkbox, Tooltip, Button, Spin } from 'antd'\r\nimport { CheckboxChangeEvent } from 'antd/lib/checkbox'\r\nimport { ListGroup } from 'react-bootstrap'\r\nimport { TaskType } from '../../../Types/types'\r\nimport { DeleteOutlined } from '@ant-design/icons'\r\nimport { TaskItemPropsType } from './TaskItemContainer'\r\n\r\nexport type OwnTaskItemPropsType = {\r\n    element: TaskType\r\n}\r\n\r\nconst TaskItem: React.FC<TaskItemPropsType> = (props) => {\r\n    type PropsElementType = typeof props.element.type\r\n    const [status, setStetus] = useState<PropsElementType>(props.element.type)\r\n    const [deleteingInProgess, setDeleteingInProgess] = useState(false)\r\n\r\n    const onStatusChange = (e: CheckboxChangeEvent) => {\r\n        if (e.target.checked) {\r\n            setStetus('completed')\r\n        } else {\r\n            setStetus('active')\r\n        }\r\n    }\r\n\r\n    const deleteTask: (taskid: number) => void = (taskid) => {\r\n        setDeleteingInProgess(true)\r\n        props.deleteTask(taskid, props.dateInterval.startDate.format('YYYY-MM-DD'), props.dateInterval.endDate.format('YYYY-MM-DD'))\r\n    }\r\n\r\n    return (\r\n        <ListGroup.Item action className=\"py-1\">\r\n            <Row className=\"px-0 ml-0 ml-sm-5\">\r\n                <Col className=\"mx-2\">\r\n                    <Checkbox onChange={onStatusChange} />\r\n                </Col>\r\n                <Col className=\"mx-2\">\r\n                    {props.element.time.split(':', 2).join(':')}\r\n                </Col>\r\n                <Col className=\"mx-2\">\r\n                    <Tooltip key={props.element.id} placement=\"topLeft\" title={props.element.descriptions}>\r\n                        <span\r\n                            style={{ textDecoration: status === 'completed' ? 'line-through' : '' }}\r\n                            className=\"text-break\"\r\n                        >\r\n                            {props.element.name}\r\n                        </span>\r\n                    </Tooltip>\r\n                </Col>\r\n                <Col className=\"mr-auto ml-0 mr-sm-2 ml-sm-auto\">\r\n                    {!deleteingInProgess ? \r\n                    <Button className=\"\"\r\n                        type=\"primary\"\r\n                        shape=\"circle\"\r\n                        size=\"small\"\r\n                        style={{ marginLeft: 10 }}\r\n                        onClick={() => { deleteTask(props.element.id) }}\r\n                        icon={\r\n                            <div className=\"d-flex flex-wrap align-content-start\">\r\n                                <DeleteOutlined className=\"ml-1\" style={{ fontSize: '14px' }} />\r\n                            </div>\r\n                        }\r\n                    />\r\n                    :\r\n                    <Spin key=\"spin\" size=\"small\" />\r\n                    }\r\n                </Col>\r\n            </Row>\r\n\r\n        </ListGroup.Item>\r\n    )\r\n}\r\n\r\nexport default TaskItem\r\n","import {connect} from 'react-redux'\r\nimport TaskItem, { OwnTaskItemPropsType } from './TaskItem'\r\nimport {deleteTask, getTaskList} from './../../../redux/taskReducer'\r\nimport {AppStateType} from '../../../redux/store'\r\n\r\nexport type MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype DispatchPropsType = {\r\n    deleteTask: (taskid: number, startDate: string, endDate: string) => void\r\n    getTaskList: (startDate: string, endDate: string) => void\r\n}\r\n\r\nexport type TaskItemPropsType = MapPropsType & DispatchPropsType & OwnTaskItemPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        dateInterval: state.task.dateInterval,\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, DispatchPropsType, OwnTaskItemPropsType, AppStateType>(mapStateToProps, \r\n    {deleteTask, getTaskList}) \r\n    (TaskItem)","import { TaskType } from \"../Types/types\"\r\n\r\nexport const sortTaskArrayByParams = (field: 'date' | 'time') => {\r\n    if (field === 'date') {\r\n        return (a: TaskType, b: TaskType) => a['date'] > b['date'] ? 1 : -1\r\n    } else {\r\n        return (a: TaskType, b: TaskType) => a['time'] > b['time'] ? -1 : 1\r\n    }\r\n}","import React, { useEffect, useState } from 'react'\r\nimport { TaskType } from '../../Types/types'\r\nimport moment from 'moment'\r\nimport { TimeScalePropsType } from './TimeScaleContainer'\r\nimport { Divider, Spin, Tooltip, message } from 'antd'\r\nimport TaskItem from './TaskItem/TaskItemContainer'\r\nimport { sortTaskArrayByParams } from '../../utils/array-helpers'\r\n\r\nexport type OwnTaskTimeScaleType = {}\r\nconst TimeScale: React.FC<TimeScalePropsType> = (props) => {\r\n    type SelestedDatesType = typeof props.dateInterval\r\n    const [selestedDates, setSelectedDates] = useState<SelestedDatesType>({ startDate: moment(null), endDate: moment() })\r\n    useEffect(() => {\r\n        if (\r\n            props.dateInterval.startDate.isSame(selestedDates.startDate.format('YYYY-MM-DD'), \"day\" ) &&\r\n            props.dateInterval.endDate.isSame(selestedDates.endDate.format('YYYY-MM-DD'), \"day\" )\r\n        ) { }\r\n        else {\r\n            if (props.dateInterval.startDate !== null) {\r\n                props.getTaskList(\r\n                    props.dateInterval.startDate.format('YYYY-MM-DD'),\r\n                    props.dateInterval.endDate.format('YYYY-MM-DD')\r\n                )\r\n                setSelectedDates(props.dateInterval)\r\n            }\r\n        }\r\n    }, [props.dateInterval])\r\n\r\n    useEffect(() => {\r\n        if (props.errorMessage !== null) {\r\n            message.success(props.errorMessage)\r\n        }\r\n    }, [props.errorMessage])\r\n\r\n    if (props.taskList !== undefined) {\r\n        if (props.taskList !== null) {\r\n            return (\r\n                <>\r\n                    {getTimeScaleArrey(props.taskList)}\r\n                </>\r\n            )\r\n        } else {\r\n            return (\r\n                <Spin key=\"spin\" size=\"large\" />\r\n            )\r\n        }\r\n    } else {\r\n        return <div>Authorization required to get a list of tasks</div>\r\n    }\r\n    \r\n}\r\n\r\nexport default TimeScale\r\n\r\n\r\nconst getTimeScaleArrey = (taskList: Array<TaskType>): Array<React.ReactElement<string>> => {\r\n    let timeScaleArrey: Array<React.ReactElement<string>> = []\r\n    let tomorowTasks: Array<TaskType> = []\r\n\r\n    taskList.sort(sortTaskArrayByParams('time')).sort(sortTaskArrayByParams('date'))\r\n\r\n    const getHeadlineLabel = (task: TaskType) => {\r\n        return moment(task.date).format('DD MMMM')\r\n    }\r\n\r\n    let headlineDate: string | null = null\r\n\r\n    if (taskList !== null && taskList.length > 0) {\r\n        headlineDate = getHeadlineLabel(taskList[0])\r\n        timeScaleArrey.push(\r\n            <h3 key={headlineDate + 'title'}>{headlineDate}:</h3>\r\n        )\r\n    }\r\n\r\n    for (let index: number = 0; index < 24; index++) {\r\n        if (taskList.length > 0) {\r\n            timeScaleArrey.push(\r\n                <Divider key={index + 'to' + headlineDate} orientation=\"left\">\r\n                    {index <= 9 ? '0' : null}{index}:00\r\n                </Divider>\r\n            )\r\n        } else {\r\n            timeScaleArrey.push(<h3 key=\"noTasks\">no tasks</h3>)\r\n            break\r\n        }\r\n\r\n        if (taskList !== null) {\r\n            for (let i = 0; i < taskList.length; i++) {\r\n                const element: TaskType = taskList[i]\r\n                const timeVal = Number(element.time.split(':', 1))\r\n                const nextHour = index + 1\r\n                if (timeVal >= index && timeVal < nextHour) {\r\n                    if (getHeadlineLabel(element) === headlineDate) {\r\n                        timeScaleArrey.push(\r\n                            <Tooltip key={index + '-' + element.id} placement=\"topLeft\" title={element.descriptions}>\r\n                                <TaskItem element={element} />\r\n                            </Tooltip>\r\n                        )\r\n                    }\r\n                    else {\r\n                        tomorowTasks.push(element)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (tomorowTasks.length > 0) {\r\n        timeScaleArrey = timeScaleArrey.concat(getTimeScaleArrey(tomorowTasks))\r\n    }\r\n\r\n    return timeScaleArrey\r\n}","import {connect} from 'react-redux'\r\nimport TimeScale from './TimeScale'\r\nimport {getTaskList} from './../../redux/taskReducer'\r\nimport { AppStateType } from '../../redux/store'\r\nimport { OwnTaskTimeScaleType } from './TimeScale'\r\n\r\nexport type MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype DispatchPropsType = {\r\n    getTaskList: (startDate: string, endDate: string) => void\r\n}\r\n\r\nexport type TimeScalePropsType = MapPropsType & DispatchPropsType & OwnTaskTimeScaleType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        taskList: state.task.taskList,\r\n        taskSaveStatus: state.task.taskSaveStatus,\r\n        taskListIsFetching: state.task.taskListIsFetching,\r\n        dateInterval: state.task.dateInterval,\r\n        errorMessage: state.task.errorMessage\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, DispatchPropsType, OwnTaskTimeScaleType, AppStateType>(mapStateToProps, \r\n    {getTaskList}) \r\n    (TimeScale)\r\n\r\n\r\n","import React, { useState } from 'react'\r\nimport { Card } from 'antd'\r\nimport NewTaskForm from './NewTaskForm/NewTaskFormContainer'\r\nimport ToDoHeader from './ToDoHeader/ToDoHeaderContainer'\r\nimport SettingsModal from './Settings/SettingsModalContainer'\r\nimport { ToDoListPropsType } from './ToDoListContainer'\r\nimport TimeScale from '../TimeScale/TimeScaleContainer'\r\n\r\nexport type OwnToDoListPropsType = {}\r\n\r\nconst ToDoList: React.FC<ToDoListPropsType> = (props) => {\r\n    const [visible, setVisible] = useState(false)\r\n    const [isModalVisible, setIsModalVisible] = useState(false)\r\n\r\n    const showDrawer = (): void => {\r\n        setVisible(true)\r\n    }\r\n\r\n    const onClose = (): void => {\r\n        setVisible(false)\r\n    }\r\n\r\n    const showModal = () => {\r\n        setIsModalVisible(true)\r\n    }\r\n\r\n    const handleOk = () => {\r\n        setIsModalVisible(false)\r\n    }\r\n\r\n    const handleCancel = () => {\r\n        setIsModalVisible(false)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"site-card-border-less-wrapper\">\r\n                <Card\r\n                    title={<ToDoHeader\r\n                        showDrawer={showDrawer}\r\n                        showModal={showModal}\r\n                    />}\r\n                    bordered={false}\r\n                >\r\n\r\n                    <SettingsModal \r\n                        isModalVisible={isModalVisible} \r\n                        handleOk={handleOk} \r\n                        handleCancel={handleCancel}\r\n                    />\r\n\r\n                    <TimeScale />\r\n\r\n                </Card>\r\n\r\n                <NewTaskForm\r\n                    onClose={onClose}\r\n                    visible={visible}\r\n                    setVisible={setVisible}\r\n                />\r\n\r\n            </div>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ToDoList","import {connect} from 'react-redux'\r\nimport ToDoList, { OwnToDoListPropsType } from './ToDoList'\r\nimport {getTaskList} from '../../redux/taskReducer'\r\nimport { AppStateType } from '../../redux/store'\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    getTaskList: (start_date: string, end_date:string)=>void\r\n}\r\n\r\nexport type ToDoListPropsType = MapPropsType & MapDispatchPropsType & OwnToDoListPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        taskList: state.task.taskList,\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnToDoListPropsType, AppStateType>(mapStateToProps, \r\n    {getTaskList}) \r\n    (ToDoList)\r\n    \r\n\r\n","import {instance, APIResponseType} from \"./api\";\r\n\r\ntype MeResponseDataType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n    // remember_token?: string,\r\n    // user?: any\r\n    // error?: boolean,\r\n    // message?: string\r\n}\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get(`authMe/`+localStorage.getItem('remember_token')).then( (response) => {\r\n            //console.log('login: ', response)\r\n            return response\r\n        })\r\n    },\r\n    login(data: any) {\r\n        return instance.post('login', data)\r\n        .then(response => {\r\n            //console.log('login: ', response)\r\n            if (response.data.remember_token !== null) {\r\n                localStorage.setItem('remember_token', response.data.remember_token);\r\n            } else {\r\n                localStorage.removeItem('remember_token');\r\n            }\r\n            return response.status === 200 ? response : null;\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                //console.log(err.response)\r\n                return err.response\r\n            } else if (err.request) {\r\n                //console.log('request', err.request)\r\n            } else {\r\n                //console.log('anything else: ', err)\r\n            }\r\n            return null\r\n        })\r\n    },\r\n    register(creds: any) {\r\n        return instance.post('register', creds)\r\n        .then(response => {\r\n            //console.log('login: ', response)\r\n            if (response.data.remember_token !== null) {\r\n                localStorage.setItem('remember_token', response.data.token);\r\n            } else {\r\n                localStorage.removeItem('remember_token');\r\n            }\r\n            return response.status === 200 ? response : null;\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                //console.log(err.response)\r\n                return err.response\r\n            } else if (err.request) {\r\n                //console.log('request', err.request)\r\n            } else {\r\n                //console.log('anything else: ', err)\r\n            }\r\n            return null\r\n        })\r\n    }\r\n}","import { authAPI } from \"../api/authAPI\";\r\nimport { BaseThunkType, InferActionsTypes } from \"./store\"\r\n// import {FormAction} from 'redux-form/lib/actions';\r\n\r\ntype InitialStateType = {\r\n    user: UserType | null,\r\n    remember_token: string | null,\r\n    isAuth: boolean\r\n    viewSettings: any\r\n}\r\nlet initialState: InitialStateType = {\r\n    user: null,\r\n    remember_token: null,\r\n    isAuth: false,\r\n    viewSettings: null\r\n}\r\n\r\nconst authReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/AUTH/SET_USER_DATA':\r\n            if (action.user !== null) {\r\n                //console.log('1')\r\n                return { ...state, \r\n                            user: action.user, \r\n                            remember_token: action.remember_token, \r\n                            isAuth: true, \r\n                            viewSettings: JSON.parse(action.user.view_settings)\r\n                        }\r\n            } else {\r\n                return initialState;\r\n            }\r\n            \r\n        case 'SN/AUTH/LOGOUT':\r\n            localStorage.removeItem('remember_token');\r\n            return initialState;\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport type UserType = {\r\n    created_at: string\r\n    email: string\r\n    email_verified_at: null | any\r\n    id: number\r\n    name: string\r\n    status: string\r\n    updated_at: string,\r\n    view_settings: any\r\n}\r\nexport const actions = {\r\n    setAuthUserData: (user: UserType | null, remember_token: string | null) => ({ type: 'SN/AUTH/SET_USER_DATA', user, remember_token } as const),\r\n    logout: () => ({type: 'SN/AUTH/LOGOUT'} as const),\r\n}\r\n\r\n// export const getAuthUserData = (): ThunkType => async (dispatch) => {\r\n//     let response = await authAPI.me()\r\n//     //console.log('getAuthUserData', response)\r\n// }\r\n\r\nexport const getAuthUserData = (): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        let response = await authAPI.me()\r\n\r\n        if (response !== null) {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(actions.setAuthUserData(response.data.user, response.data.remember_token))\r\n            } else {\r\n                //console.log(response.data.messages[0])\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport type credsType = {\r\n    email: string,\r\n    password: string,\r\n    remember: boolean\r\n}\r\n\r\nexport const login = (data: credsType): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        let response = await authAPI.login(data)\r\n        if (response) {\r\n            //console.log(response)\r\n            if (response.status === 200) {\r\n                dispatch(actions.setAuthUserData(response.data.user, response.data.remember_token))\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport const register = (creds: any): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        let response = await authAPI.register(creds)\r\n        //console.log(response)\r\n        const credsToLogin: credsType = {\r\n            email: creds.email,\r\n            password: creds.password,\r\n            remember: creds.remember\r\n        }\r\n        dispatch(login(credsToLogin))\r\n    }\r\n}\r\n\r\nexport default authReducer;\r\n\r\n// export type InitialStateType = typeof initialState;\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType< ActionsTypes>\r\n\r\n","import {getAuthUserData} from \"./authReducer\"\r\nimport {InferActionsTypes} from './store'\r\n\r\nlet initialState = {\r\n    initialized: false,\r\n    location: '/'\r\n}\r\n\r\n// export type InitialStateType = typeof initialState\r\nexport type InitialStateType ={\r\n    initialized: boolean,\r\n    location: string\r\n}\r\n\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\n\r\nconst appReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/APP/INITIALIZED_SUCCESS':\r\n            //console.log('INITIALIZED_SUCCESS: true')\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            }\r\n\r\n        case 'SN/APP/SET_LOCATION':\r\n            //console.log('location in appReducer:', action.location)\r\n            return  {\r\n                ...state,\r\n                location: action.location\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    initializedSuccess: () => ({type: 'SN/APP/INITIALIZED_SUCCESS'} as const),\r\n    setLocation: (location: string) => ({type: 'SN/APP/SET_LOCATION', location} as const),\r\n}\r\n\r\nexport const initializeApp = () => (dispatch: any) => {\r\n    let promise = dispatch(getAuthUserData());\r\n    Promise.all([promise])\r\n        .then(() => {\r\n            //console.log('dispatch(actions.initializedSuccess());')\r\n            dispatch(actions.initializedSuccess());\r\n        });\r\n}\r\n\r\nexport const addLocation = (location: string) => (dispatch: any) => {\r\n    dispatch(actions.setLocation(location));\r\n}\r\n\r\n\r\nexport default appReducer;","import {instance} from './api'\r\n\r\ninstance.defaults.headers.common['X-Auth-Token'] = localStorage.getItem('remember_token')\r\n\r\nexport const taskListAPI = {\r\n    getTaskList() {\r\n        return instance.get<any>(`taskList`)\r\n        .then(response => {\r\n            //console.log(response)\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                //console.log(err.response)\r\n                return err.response\r\n            } else if (err.request) {\r\n                //console.log('request', err.request)\r\n            } else {\r\n                //console.log('anything else: ', err)\r\n            }\r\n            return null\r\n        })\r\n    },\r\n    createNewTaskList(values: any) {\r\n        return instance.post<any>(`taskList`, values)\r\n        .then(response => {\r\n            console.log(response)\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                console.log(err.response)\r\n                return err.response\r\n            } else if (err.request) {\r\n                console.log('request', err.request)\r\n            } else {\r\n                console.log('anything else: ', err)\r\n            }\r\n            return null\r\n        })\r\n    },\r\n    deleteTask(taskId: number) {\r\n        return instance.delete<any>(`taskList/${taskId}`).then(response => {\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                return err.response\r\n            } else if (err.request) {\r\n                //console.log('request', err.request)\r\n            } else {\r\n                //console.log('anything else: ', err)\r\n            }\r\n            return null\r\n        })\r\n    },\r\n    updateTask(values: any, taskId: number) {\r\n        return instance.put<any>(`taskList/${taskId}`, values)\r\n        .then(response => {\r\n            console.log(response)\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                console.log(err.response)\r\n                return err.response\r\n            } else if (err.request) {\r\n                //console.log('request', err.request)\r\n            } else {\r\n                //console.log('anything else: ', err)\r\n            }\r\n            return null\r\n        })\r\n    }\r\n}\r\n//descriptions\r\n//descriptions","import { Dispatch } from \"react\";\r\nimport { BaseThunkType, InferActionsTypes } from \"./store\";\r\nimport { taskListAPI } from './../api/taskListAPI'\r\n\r\n\r\nexport type InitialStateType = {\r\n    taskList: Array<any>,\r\n    taskListIsFetching: boolean,\r\n    isTaskListLoaded: boolean,\r\n    // taskSaveStatus: 'no' | 'inProgress' | 'success' | 'error'\r\n    // errorMessage: null | string,\r\n    // isInterval: boolean,\r\n    // dateInterval: {\r\n    //     startDate: moment.Moment,\r\n    //     endDate: moment.Moment\r\n    // }\r\n}\r\n\r\nlet initialState:InitialStateType = {\r\n    taskList: [],\r\n    taskListIsFetching: false,\r\n    isTaskListLoaded: false\r\n    // taskSaveStatus: 'no',\r\n    // errorMessage: null,\r\n    // isInterval: false,\r\n    // dateInterval: {\r\n    //     startDate: moment(),\r\n    //     endDate: moment()\r\n    // }\r\n}\r\n\r\nconst taskListReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/TASK_LIST/SET_TASK_LIST':\r\n            return {...state, taskList: action.taskList, isTaskListLoaded: true}\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    setTaskList: (taskList: Array<any>) => ({ type: 'SN/TASK_LIST/SET_TASK_LIST', taskList } as const),\r\n    // setTaskSaveStatus: (taskSaveStatus: 'no' | 'inProgress' | 'success' | 'error') => ({ type: 'SN/TASK/SET_TASK_SAVE_STATUS', taskSaveStatus } as const),\r\n    // setErrorMessage: (message: string | null) => ({type: 'SN/TASK/SET_ERROR_MESSAGE', message} as const),\r\n    // setTaskListIsFetching: (isFetchingValue: boolean) => ({type: 'SN/TASK/SET_TASK_LIST_IS_FETCHING', isFetchingValue} as const),\r\n    // setIsInterval: (isInterval: boolean, date: {startDate: moment.Moment, endDate: moment.Moment}) => ({type: 'SN/TASK/SET_IS_INTERVAL', isInterval, date} as const)\r\n}\r\n\r\nexport const getTaskList = (): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        // dispatch(actions.setTaskListIsFetching(true))\r\n\r\n        let response = await taskListAPI.getTaskList()\r\n        //console.log(response)\r\n\r\n        if (response !== undefined && response !== null) {\r\n            dispatch(actions.setTaskList(response.data.Tasks))\r\n        } else {\r\n            // add error message\r\n        }\r\n        // dispatch(actions.setTaskListIsFetching(false))\r\n    }\r\n}\r\n\r\nexport const createNewTaskList = (values: any): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        let response = await taskListAPI.createNewTaskList(values)\r\n        //console.log(response)\r\n        dispatch(actions.setTaskList(response.data.Tasks))\r\n    }\r\n}\r\n\r\nexport const deleteTaskList = (taskId: number): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        let response = await taskListAPI.deleteTask(taskId)\r\n        //console.log(response)\r\n        dispatch(actions.setTaskList(response.data.Tasks))\r\n    }\r\n}\r\n\r\nexport const updateTaskList = (values: any, taskId: number): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        let response = await taskListAPI.updateTask(values, taskId)\r\n        //console.log(response)\r\n        dispatch(actions.setTaskList(response.data.Tasks))\r\n    }\r\n}\r\n\r\nexport default taskListReducer\r\n\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsTypes>\r\nexport type DispatchType = Dispatch<ActionsTypes>","import {Action, applyMiddleware, combineReducers, createStore} from \"redux\"\r\nimport thunkMiddleware, {ThunkAction} from \"redux-thunk\"\r\nimport appReducer from \"./appReducer\"\r\nimport authReducer from \"./authReducer\"\r\nimport taskListReducer from \"./TaskListReducer\"\r\nimport taskReducer from './taskReducer'\r\n\r\n\r\nlet rootReducer = combineReducers({\r\n    task: taskReducer,\r\n    app: appReducer,\r\n    auth: authReducer,\r\n    taskList: taskListReducer,\r\n})\r\n\r\ntype rootReducerType = typeof rootReducer\r\nexport type AppStateType = ReturnType<rootReducerType>\r\n\r\nexport type InferActionsTypes<T> = T extends { [keys: string]: (...args: any[]) => infer U } ? U : never\r\nexport type BaseThunkType<A extends Action = Action, R = Promise<void>> = ThunkAction<R, AppStateType, unknown, A>\r\n\r\nlet store = createStore(rootReducer, applyMiddleware(thunkMiddleware))\r\n\r\nexport default store","import React, {useState} from 'react'\r\nimport { Button, Menu } from 'antd';\r\nimport {Link, useHistory} from 'react-router-dom'\r\n// import { MailOutlined, AppstoreOutlined, SettingOutlined } from '@ant-design/icons';\r\nimport {LogoutOutlined} from '@ant-design/icons'\r\nimport {MenuBrowserPropsType} from './MenuBrowserConainer'\r\nimport { TaskListType } from '../../Types/types';\r\nimport { MenuDataType } from './Header';\r\n\r\nconst { SubMenu } = Menu;\r\n\r\nexport type OwnMenuBrowserPropsType = {\r\n    menuData: any,\r\n    // logout: any,\r\n    // appLocation: string | null\r\n}\r\n\r\nconst MenuBrowser: React.FC<MenuBrowserPropsType> = (props) => {\r\n    let history = useHistory();\r\n    const [state, setState] = useState<Array<string>>([])\r\n    const handleClick = (e: any | undefined) => {\r\n        // //console.log('click ', e);\r\n        // setState({ current: e.key });\r\n    }\r\n\r\n    const getMenuItem = (childs: any):any => {\r\n        // return <Menu.Item key=\"setting:1\">Option 1</Menu.Item>\r\n        const menuItems = childs.map( (item: any) => {\r\n            return (\r\n                <Menu.Item key={item.value}>\r\n                    <Link to={item.value}>{item.label}</Link>\r\n                </Menu.Item>\r\n            )\r\n        })\r\n        return menuItems\r\n    }\r\n\r\n    const getSubMenu = () => {\r\n        // //console.log(props.menuData)\r\n        const subMenu = props.menuData.map( (item: any) => {\r\n            // //console.log(item)\r\n            return (\r\n                <SubMenu \r\n                    key={item.value} \r\n                    // icon={<MailOutlined />}\r\n                    title={item.label}\r\n                >\r\n                    {getMenuItem(item.children)}\r\n                </SubMenu >\r\n            )\r\n        })\r\n        // subMenu.push(\r\n        //     <Menu.Item key=\"login\">\r\n        //         <Link to={props.appLocation +\"login\"} >Login</Link>\r\n        //     </Menu.Item>\r\n        // )\r\n        return subMenu\r\n    }\r\n\r\n    const onLogout = () => {\r\n        // onChange(['', ''])\r\n        history.replace(props.appLocation+'login')\r\n        props.logout()\r\n    }\r\n\r\n    //console.log(props)\r\n\r\n    return (\r\n        <Menu \r\n            onClick={handleClick} \r\n            // selectedKeys={[current]} \r\n            mode=\"horizontal\"\r\n            theme=\"dark\"\r\n        >\r\n            {getSubMenu()}\r\n\r\n            {!props.isAuth ? \r\n                <Menu.Item key=\"login\">\r\n                    <Link to={props.appLocation +\"login\"} >Login</Link>\r\n                </Menu.Item>\r\n            :\r\n                <SubMenu \r\n                    key={props.user?.name} \r\n                    title={props.user?.name}\r\n                >\r\n                    <Menu.Item key=\"login\" onClick={onLogout}>\r\n                        {/* <Link to={props.appLocation +\"login\"} > */}\r\n                            Logout\r\n                        {/* </Link> */}\r\n                    </Menu.Item>\r\n                </SubMenu >\r\n                \r\n            }\r\n        </Menu>\r\n    )\r\n}\r\n\r\nexport default MenuBrowser","import {connect} from 'react-redux'\r\nimport MenuBrowser, { OwnMenuBrowserPropsType } from './MenuBrowser'\r\nimport { AppStateType } from '../../redux/store'\r\nimport {actions} from './../../redux/authReducer'\r\n\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    logout: ()=>void\r\n}\r\n\r\nexport type MenuBrowserPropsType = MapPropsType & MapDispatchPropsType & OwnMenuBrowserPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n        user: state.auth.user,\r\n        appLocation: state.app.location\r\n        \r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnMenuBrowserPropsType, AppStateType>(mapStateToProps, \r\n    {logout: actions.logout}) \r\n    (MenuBrowser)\r\n    \r\n\r\n","import { Popover, Icon } from 'antd-mobile'\r\nimport React, { useState } from 'react'\r\n\r\nconst Item = Popover.Item\r\n\r\nconst MenuPopover: React.FC<any> = (props) => {\r\n    const [visible, setVisible] = useState(false)\r\n\r\n    const onSelect = (opt: any, index?: number) => {\r\n        // console.log(opt.props);\r\n        setVisible(false)\r\n        if(opt.props.children === \"Logout\") {\r\n            props.onLogout()\r\n        }\r\n    }\r\n\r\n    const handleVisibleChange = (visible: boolean) => {\r\n        setVisible(visible)\r\n    }\r\n\r\n    const fortest:String = \"fortest\"\r\n\r\n    return (\r\n        <div className=\"mr-3\">\r\n        <Popover \r\n            mask\r\n            visible={visible}\r\n            overlay={[\r\n                (<Item key=\"1\" >Logout</Item>),\r\n                (<Item key=\"2\" >Info</Item>),\r\n                (<Item key=\"3\" >Help</Item>),\r\n            ]}\r\n            onVisibleChange={handleVisibleChange}\r\n            onSelect={onSelect}\r\n        >\r\n            <div style={{\r\n                height: '100%',\r\n                padding: '0 15px',\r\n                marginRight: '-20px',\r\n                display: 'flex',\r\n                alignItems: 'center',\r\n            }}\r\n            >\r\n                <Icon type=\"ellipsis\" />\r\n            </div>\r\n        </Popover>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MenuPopover","import React, { useState } from 'react'\r\nimport { Menu, ActivityIndicator, NavBar, Button } from 'antd-mobile'\r\nimport { ValueType } from 'antd-mobile/lib/menu/PropsType'\r\nimport './MenuMobile.css'\r\nimport { useHistory, useLocation } from 'react-router-dom'\r\nimport { MenuDataType } from './Header'\r\nimport { MenuMobilePropsType } from './MenuMobileContainer'\r\nimport { Link } from 'react-router-dom'\r\nimport { LogoutOutlined } from '@ant-design/icons'\r\nimport MenuPopover from './MenuPopover'\r\n\r\nexport type OwnMenuMobilePropsType = {\r\n    menuData: MenuDataType,\r\n    logout: () => void\r\n}\r\n\r\nconst MenuMobile: React.FC<MenuMobilePropsType> = (props) => {\r\n    let history = useHistory();\r\n    const location = useLocation();\r\n    const [show, setShow] = useState(false)\r\n    type DataType = typeof props.menuData\r\n    const data = [...props.menuData]\r\n    const [initData, setInitData] = useState<DataType>(data)\r\n\r\n    const getSelectedMenuItem = (): ValueType => {\r\n        let response: ValueType = [data[0].value, '']\r\n        data.forEach((dataItem: any) => {\r\n            if (dataItem.children) {\r\n                dataItem.children.forEach((item: any) => {\r\n                    //console.log('/',item.value,'===',location.pathname)\r\n                    if (item.value === location.pathname) {\r\n                        response = [dataItem.value, item.value]\r\n                    }\r\n                })\r\n            }\r\n        })\r\n        //console.log('getSelectedMenuItem response: ', response)\r\n        return response\r\n    }\r\n\r\n    const [selectedMenuItem, setSelectedMenuItem] = useState<ValueType>(getSelectedMenuItem())\r\n\r\n    const handleClick = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\r\n        e.preventDefault(); // Fix event propagation on Android\r\n        setShow(!show)\r\n        // if (!initData) {\r\n        //     setInitData(data)\r\n        // }\r\n    }\r\n\r\n    const onChange = (value?: ValueType | undefined) => {\r\n        //console.log('input values: ', value)\r\n        if (value) {\r\n            let subMenu = value[0]\r\n\r\n            data.forEach((dataItem) => {\r\n                if (dataItem.value === value[0]) {\r\n                    subMenu = value[0]\r\n                    if (dataItem.children && value[1]) {\r\n                        dataItem.children.forEach((cItem: { value: string | string[]; label: any }) => {\r\n                            if (cItem.value === value[1]) {\r\n                                history.replace(`${cItem.value}`)\r\n                                setShow(false)\r\n                            }\r\n                        })\r\n                    }\r\n                }\r\n            })\r\n        \r\n            if (subMenu === '') {\r\n                subMenu = data[0].value\r\n            }\r\n            //console.log('set values: ', [subMenu, value[1]])\r\n            setSelectedMenuItem([subMenu, value[1]])\r\n        }\r\n        \r\n    }\r\n\r\n    const onMaskClick = () => {\r\n        setShow(false)\r\n    }\r\n\r\n    const menuEl = (\r\n        <Menu\r\n            className=\"foo-menu\"\r\n            data={initData}\r\n            value={selectedMenuItem}\r\n            onChange={onChange}\r\n            height={document.documentElement.clientHeight * 0.6}\r\n        />\r\n    );\r\n\r\n    const loadingEl = (\r\n        <div style={{ width: '100%', height: document.documentElement.clientHeight * 0.6, display: 'flex', justifyContent: 'center' }}>\r\n            <ActivityIndicator size=\"large\" />\r\n        </div>\r\n    );\r\n\r\n    //console.log(props)\r\n\r\n    const onLogout = () => {\r\n        onChange(['', ''])\r\n        history.replace(props.appLocation + 'login')\r\n        props.logout()\r\n    }\r\n\r\n    return (\r\n        <div className={show ? 'menu-active' : ''}>\r\n            <div>\r\n                <NavBar\r\n                    leftContent=\"\"\r\n                    mode=\"light\"\r\n                    icon={<img src=\"https://gw.alipayobjects.com/zos/rmsportal/iXVHARNNlmdCGnwWxQPH.svg\" className=\"am-icon am-icon-md\" alt=\"\" />}\r\n                    onLeftClick={handleClick}\r\n                    className=\"top-nav-bar\"\r\n                    rightContent={props.isAuth ? <MenuPopover onLogout={onLogout} /> : null}\r\n                >\r\n                    {!props.isAuth ?\r\n                        <Link\r\n                            to={props.appLocation + \"login\"}\r\n                            onClick={() => { onChange(['', '']) }}\r\n                        >\r\n                            <span className=\"text-white\">Login</span>\r\n                        </Link>\r\n                        :\r\n                        <>\r\n                        <div>\r\n                            {props.user?.name}\r\n                            {/* <Button className=\"ml-5\" size=\"small\" icon={<LogoutOutlined />} onClick={onLogout} inline >\r\n\r\n                            </Button> */}\r\n                        </div>\r\n                        {/* <div className=\"w-100\">\r\n                            \r\n                        </div> */}\r\n                        </>\r\n                    }\r\n                    \r\n\r\n                </NavBar>\r\n            </div>\r\n            {show ? initData ? menuEl : loadingEl : null}\r\n            {show ? <div className=\"menu-mask\" onClick={onMaskClick} /> : null}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default (MenuMobile)\r\n\r\n\r\n","import {connect} from 'react-redux'\r\nimport MenuMobile, { OwnMenuMobilePropsType } from './MenuMobile'\r\n// import {getTaskList} from '../../redux/taskReducer'\r\nimport { AppStateType } from '../../redux/store'\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    // getTaskList: (start_date: string, end_date:string)=>void\r\n}\r\n\r\nexport type MenuMobilePropsType = MapPropsType & MapDispatchPropsType & OwnMenuMobilePropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        appLocation: state.app.location,\r\n        isAuth: state.auth.isAuth,\r\n        user: state.auth.user\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnMenuMobilePropsType, AppStateType>(mapStateToProps, \r\n    {}) \r\n    (MenuMobile)\r\n    \r\n\r\n","import React from 'react'\r\nimport {\r\n    BrowserView,\r\n    MobileView,\r\n    isBrowser,\r\n    isMobile\r\n} from \"react-device-detect\"\r\nimport { HeaderPropsType } from './HeaderContainer'\r\nimport MenuBrowser from './MenuBrowserConainer'\r\nimport MenuMobile from './MenuMobileContainer'\r\n// import {useHistory, useLocation} from 'react-router-dom'\r\n\r\n// type MenuDataType = Array<any>\r\n\r\nexport type OwnHeaderPropsType = {}\r\n\r\nconst Header: React.FC<HeaderPropsType> = (props) => {\r\n    // const location = useLocation()\r\n    //console.log('Header')\r\n\r\n    if (isMobile) {\r\n        return <MenuMobile menuData={menuData(props.appLocation)} logout={props.logout}/>\r\n    } else {\r\n        return <MenuBrowser menuData={menuData(props.appLocation)}/>\r\n    }\r\n}\r\n\r\nexport default Header\r\n\r\n\r\nexport type MenuDataType = ReturnType<typeof menuData>\r\n\r\nconst menuData = (appLocation: string) => {\r\n    const data = [\r\n    {\r\n        value: 'planning',\r\n        label: 'Planning',\r\n        children: [\r\n            {\r\n                label: 'ToDo list',\r\n                // label: <Link to='/toDoList'>ToDo list</Link>,\r\n                value: appLocation + 'toDoList',\r\n                disabled: false,\r\n            },\r\n            {\r\n                label: 'Tasks tree',\r\n                value: appLocation + 'tasksTree',\r\n            },\r\n            {\r\n                label: 'Analysis',\r\n                value: appLocation + 'analysis',\r\n                disabled: true,\r\n            }\r\n        ],\r\n    }, {\r\n        value: 'catalog',\r\n        label: 'Catalog',\r\n        children: [\r\n            {\r\n                label: 'Products',\r\n                value: appLocation + 'products',\r\n            }\r\n            , {\r\n                label: 'Providers',\r\n                value: appLocation + 'providers',\r\n            }\r\n        ],\r\n    },\r\n    {\r\n        value: 'orders',\r\n        label: 'Orders',\r\n        // isLeaf: true,\r\n        children: [\r\n            {\r\n                label: 'Orders',\r\n                value: appLocation + 'orders',\r\n            },\r\n            {\r\n                label: 'Leads',\r\n                value: appLocation + 'leads',\r\n            },\r\n        ],\r\n    },\r\n    ]\r\n    return data\r\n}\r\n","import {connect} from 'react-redux'\r\nimport Header, { OwnHeaderPropsType } from './Header'\r\nimport {actions} from '../../redux/authReducer'\r\nimport { AppStateType } from '../../redux/store'\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    logout: ()=>void\r\n}\r\n\r\nexport type HeaderPropsType = MapPropsType & MapDispatchPropsType & OwnHeaderPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        appLocation: state.app.location,\r\n        user: state.auth.user\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnHeaderPropsType, AppStateType>(mapStateToProps, \r\n    {logout: actions.logout}) \r\n    (Header)\r\n    \r\n\r\n","import React, { useState, useEffect } from 'react'\r\nimport { isMobile } from \"react-device-detect\"\r\nimport {\r\n    DatePicker,\r\n    Form,\r\n    Input,\r\n    TimePicker,\r\n    Select,\r\n    Checkbox\r\n} from \"antd\"\r\nimport enUs from 'antd-mobile/lib/date-picker/locale/en_US';\r\nimport moment from \"moment\"\r\nimport {\r\n    List,\r\n    InputItem,\r\n    Checkbox as CheckboxMobile,\r\n    TextareaItem,\r\n    Picker,\r\n    DatePicker as DatePickerMobile,\r\n} from 'antd-mobile'\r\n\r\nconst FormItem = Form.Item\r\nconst Option: React.FC<any> = Select.Option\r\nconst CheckboxItem = CheckboxMobile.CheckboxItem\r\nconst { TextArea } = Input;\r\n\r\nconst CreateAntField = (AntComponent: any) => (\r\n    {\r\n        field,\r\n        form,\r\n        hasFeedback,\r\n        label,\r\n        selectOptions,\r\n        submitCount,\r\n        type,\r\n        ...props\r\n    }: any\r\n) => {\r\n\r\n    const touched = form.touched[field.name];\r\n    const submitted = submitCount > 0;\r\n    const hasError = form.errors[field.name];\r\n    const submittedError = hasError && submitted;\r\n    const touchedError = hasError && touched;\r\n\r\n    // type OnInputChangeValueType = React.ChangeEvent<HTMLInputElement> | moment.Moment | Date | string\r\n    // const onInputChange = (value: OnInputChangeValueType, field: any) => {\r\n    const onInputChange = (value: any) => {\r\n        // console.log('value: ', value)\r\n        // console.log('field: ', field)\r\n        // console.log('type: ', type)\r\n        if (value === undefined) {\r\n            if (type == 'select' || type == 'time') {\r\n                form.setFieldValue(field.name, null)\r\n            }\r\n        } else if(value === null) {\r\n            form.setFieldValue(field.name, null)\r\n        } else if (value.target) {\r\n            form.setFieldValue(field.name, value.target.value)\r\n        } else {\r\n            if (type === 'time') {\r\n                // if (value instanceof moment) {\r\n                //     console.log('moment')\r\n                //     form.setFieldValue(field.name, value)\r\n                // } else {\r\n                //     console.log('not moment')\r\n                //     // form.setFieldValue(field.name, moment(value.setSeconds(0)))\r\n                //     form.setFieldValue(field.name, value)\r\n                // }\r\n                form.setFieldValue(field.name, value)\r\n            } else if (Array.isArray(value)) {\r\n                // добавтить проверуку на пустой массив\r\n                form.setFieldValue(field.name, value[0])\r\n            } else {\r\n                form.setFieldValue(field.name, value)\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    const onChange = (value: string | React.ChangeEvent<HTMLInputElement>) => {\r\n        // console.log('onChange: ', value)\r\n        if (typeof value !== \"string\" && value.target.type === 'checkbox') {\r\n            form.setFieldValue(field.name, value.target.checked)\r\n        } else {\r\n            form.setFieldValue(field.name, value)\r\n        }\r\n    }\r\n\r\n    const onBlur = () => form.setFieldTouched(field.name, true);\r\n\r\n    return (\r\n        <FormItem\r\n            label={!isMobile ? label : null}\r\n            hasFeedback={\r\n                (hasFeedback && submitted) || (hasFeedback && touched) ? true : false\r\n            }\r\n            help={submittedError || touchedError ? hasError : false}\r\n            validateStatus={submittedError || touchedError ? \"error\" : \"success\"}\r\n        >\r\n            {isMobile ?\r\n                <MobileComponent\r\n                    AntComponent={AntComponent}\r\n                    onBlur={onBlur}\r\n                    type={type}\r\n                    onInputChange={onInputChange}\r\n                    onChange={onChange}\r\n                    label={label}\r\n                    selectOptions={selectOptions}\r\n                    value={field.value}\r\n                />\r\n                :\r\n                <AntComponent\r\n                    {...field}\r\n                    {...props}\r\n                    allowClear={selectOptions ? \"true\" : \"false\"}\r\n                    onBlur={onBlur}\r\n                    onChange={type ? onInputChange : onChange}\r\n                >\r\n                    {selectOptions &&\r\n                        selectOptions.map((item: any) => <Option title={item.name} value={item.value} key={item.name}>{item.name}</Option>)}\r\n\r\n\r\n                </AntComponent>\r\n            }\r\n\r\n        </FormItem>\r\n    )\r\n}\r\n\r\nexport const AntSelect = !isMobile ? CreateAntField(Select) : CreateAntField(Picker)\r\nexport const AntDatePicker = CreateAntField(DatePicker)\r\nexport const AntInput = !isMobile ? CreateAntField(Input) : CreateAntField(InputItem)\r\nexport const AntInputPassword = !isMobile ? CreateAntField(Input.Password) : CreateAntField(InputItem)\r\nexport const AntTimePicker = !isMobile ? CreateAntField(TimePicker) : CreateAntField(DatePickerMobile)\r\nexport const AntCheckbox = !isMobile ? CreateAntField(Checkbox) : CreateAntField(CheckboxItem)\r\nexport const AntTextArea = !isMobile ? CreateAntField(TextArea) : CreateAntField(TextareaItem)\r\n\r\ntype MobileComponentType = {\r\n    onInputChange: (value: any) => void,\r\n    selectOptions: Array<any>,\r\n    AntComponent: any,\r\n    onBlur: () => void,\r\n    type: 'select' | 'date' | 'text' | 'number' | 'password' | 'time' | 'checkbox' | 'textarea',\r\n    onChange: (value: any) => void,\r\n    label: string,\r\n    value: any\r\n}\r\n\r\n// const MobileComponent: React.FC<any> = (props) => {\r\nconst MobileComponent: React.FC<MobileComponentType> = (props) => {\r\n    const [defaultValue, setValue] = useState(props.value)\r\n\r\n    useEffect(() => {\r\n        if (props.type === 'select' && props.label === 'parent_id') {\r\n            console.log('useEffect parent_id: ',props.value)\r\n        }\r\n\r\n        setValue(props.value)\r\n\r\n    }, [props.value])\r\n\r\n    const onInputChange = (value: any) => {\r\n        setValue(value)\r\n        props.onInputChange(value)\r\n    }\r\n\r\n    const onPickerChange = (value:any) => {\r\n        console.log('onPickerChange: ',value)\r\n        setValue(value)\r\n    }\r\n\r\n    const onOk = (value:any) => {\r\n        console.log('onOk; ', value)\r\n        setValue(value)\r\n    }\r\n\r\n    type DataType = Array<\r\n        {\r\n            label: string,\r\n            value: string,\r\n            key: string\r\n        }\r\n    >\r\n\r\n    let data: DataType\r\n    if (props.selectOptions !== null && props.selectOptions !== undefined) {\r\n        data = props.selectOptions.map((item: any) => {\r\n            return (\r\n                {\r\n                    label: item.name,\r\n                    value: item.value,\r\n                    key: item.name\r\n                }\r\n            )\r\n        })\r\n    } else {\r\n        data = []\r\n    }\r\n\r\n    if (props.type === 'select' && props.label === 'parent_id') {\r\n        console.log('render: ',defaultValue)\r\n    }\r\n    \r\n    return (\r\n        <List>\r\n            <props.AntComponent\r\n                onBlur={props.onBlur}\r\n                type={props.type}\r\n                onChange={props.type ? onInputChange : props.onChange}\r\n                mode={props.type === 'time' ? \"time\" : null}\r\n                defaultValue={props.label === 'parent_id' ? [38] : defaultValue}\r\n                value={defaultValue}\r\n                key={props.label}\r\n                title={props.label}\r\n                locale={enUs}\r\n                autoHeight\r\n                className={props.type === 'text' ? 'pl-0' : null}\r\n                data={data}\r\n                cols={1}\r\n                onOk={(v:any) => setValue(v)}\r\n                onPickerChange={onPickerChange}\r\n            >\r\n                <List.Item\r\n                    className=\"pl-0\"\r\n                >\r\n                    {props.label}\r\n                </List.Item>\r\n            </props.AntComponent>\r\n        </List>\r\n    )\r\n}","// import { userAPI } from \"../../api/userAPI\";\r\n\r\nexport const validateRequired = (value: string) => {\r\n    let errors;\r\n    if (!value) {\r\n        errors = \"Required!\";\r\n    }\r\n    return errors;\r\n}\r\n\r\nexport const validateEmail = (value: string) => {\r\n    let errors;\r\n\r\n    if (!value) {\r\n        errors = \"Required!\";\r\n    } else if (!/^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/.test(value)) {\r\n        errors = \"Invalid email address!\";\r\n    }\r\n\r\n    return errors;\r\n};\r\n\r\nexport const validateAsync = (value: string) => {\r\n    const sleep = () => new Promise(resolve => setTimeout(resolve, 2000));\r\n    return sleep().then(() => {\r\n        if (['admin', 'null', 'god'].includes(value)) {\r\n            return 'Nice try'\r\n        }\r\n    })\r\n}\r\n\r\n// export const validateUserExistense = (value: string) => {\r\n//     //console.log(value)\r\n//     return userAPI.checkUserForExistence(value).then( (result) => {\r\n//         //console.log(result.status)\r\n//         if (result.status !== 404) {\r\n//             return 'Name is bisy'\r\n//         } \r\n//     })\r\n//     //console.log(test)\r\n\r\n// }","import React, { ReactNode } from 'react'\r\nimport { Form, Field, FormikProps } from \"formik\"\r\nimport { AntInput, AntCheckbox, AntInputPassword } from '../../utils/Formik/CreateAntField'\r\nimport { validateEmail, validateRequired } from '../../utils/Formik/ValidateFields'\r\n\r\nconst LoginForm: ((props: FormikProps<{}>) => ReactNode) = (props) => {\r\n    return (\r\n        <Form \r\n            className=\"form-container\" \r\n            onSubmit={props.handleSubmit}\r\n        >\r\n            <Field\r\n                component={AntInput}\r\n                name=\"email\"\r\n                type=\"email\"\r\n                label=\"Email\"\r\n                validate={validateEmail}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n            <Field\r\n                component={AntInputPassword}\r\n                name=\"password\"\r\n                type=\"password\"\r\n                label=\"Password\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n            <Field\r\n                component={AntCheckbox}\r\n                name=\"remember\"\r\n                label=\"Remember Me\"\r\n                submitCount={props.submitCount}\r\n            />\r\n            <div className=\"submit-container\">\r\n                <button className=\"ant-btn ant-btn-primary\" type=\"submit\">\r\n                    Login\r\n                </button>\r\n            </div>\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default LoginForm","import React from 'react'\r\nimport { LoginPropsType } from './LoginContainer'\r\nimport { List, InputItem, Checkbox } from 'antd-mobile'\r\nimport { Formik } from \"formik\"\r\nimport moment from \"moment\"\r\nimport LoginForm from './LoginForm'\r\nimport { propTypes } from 'react-bootstrap/esm/Image'\r\nimport { Button } from 'antd'\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst CheckboxItem = Checkbox.CheckboxItem;\r\n\r\nconst initialValues = {\r\n    // bookingClient: \"\",\r\n    // bookingDate: moment(Date.now()),\r\n    // bookingTime: moment(Date.now()),\r\n    // selectOptions: [\"Mark\", \"Bob\", \"Anthony\"]\r\n}\r\n\r\n// export const dateFormat = \"YYYY--MM-DD\";\r\n// export const timeFormat = \"h:mm A\";\r\n\r\nexport type OwnLoginPropsType = {}\r\n\r\nconst Login: React.FC<LoginPropsType> = (props) => {\r\n    const handleSubmit = (formProps: any) => {\r\n        //console.log('formProps: ', formProps)\r\n        if (!formProps.remember) {\r\n            formProps.remember = false\r\n        }\r\n        props.login(formProps)\r\n    }\r\n\r\n    //console.log(props)\r\n\r\n    return (\r\n        <>\r\n            <h1 className=\"mb-5 mx-auto\">Login Form</h1>\r\n            <Formik\r\n                initialValues={initialValues}\r\n                onSubmit={handleSubmit}\r\n                render={LoginForm}\r\n            />\r\n            <div className=\"mt-3\">\r\n                <Link to={props.location +\"register\"}><Button type=\"link\" block>Register</Button></Link>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Login","import {connect} from 'react-redux'\r\nimport Login, { OwnLoginPropsType } from './Login'\r\nimport { AppStateType } from '../../redux/store'\r\nimport {credsType, login} from './../../redux/authReducer'\r\n\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    login: (data: credsType)=>void\r\n}\r\n\r\nexport type LoginPropsType = MapPropsType & MapDispatchPropsType & OwnLoginPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        auth: state.auth,\r\n        location: state.app.location\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnLoginPropsType, AppStateType>(mapStateToProps, \r\n    {login}) \r\n    (Login)\r\n    \r\n\r\n","import { formatCountdown } from 'antd/lib/statistic/utils'\r\nimport React from 'react'\r\nimport { OrdersPropsType } from './OrdersContainer'\r\n\r\nexport type OwnOrdersPropsType = {}\r\nconst Orders: React.FC<OrdersPropsType> = (props) => {\r\n    return(\r\n        <div>Orders</div>\r\n    )\r\n}\r\n\r\nexport default Orders","import {connect} from 'react-redux'\r\nimport Orders, { OwnOrdersPropsType } from './Orders'\r\n// import {getTaskList} from '../../redux/taskReducer'\r\nimport { AppStateType } from '../../redux/store'\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    // getTaskList: (start_date: string, end_date:string)=>void\r\n}\r\n\r\nexport type OrdersPropsType = MapPropsType & MapDispatchPropsType & OwnOrdersPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        appLocation: state.app.location\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnOrdersPropsType, AppStateType>(mapStateToProps, \r\n    {}) \r\n    (Orders)\r\n    \r\n\r\n","import { Form, Field, FormikProps } from 'formik'\r\nimport React, { ReactNode, useState, useEffect } from 'react'\r\nimport { AntInput, AntSelect, AntTextArea, AntTimePicker } from '../../utils/Formik/CreateAntField'\r\nimport { validateRequired } from '../../utils/Formik/ValidateFields'\r\nimport { Select } from 'antd';\r\n\r\nconst { Option }: any = Select;\r\n\r\n\r\nconst NewTaskTreeForm: ((props: FormikProps<{}>) => ReactNode) = (props) => {\r\n    const values: any = props.values\r\n    //console.log(values)\r\n    const selectOptions = values.selectOptions\r\n    const taskTypes = values.taskTypes // ++++++\r\n\r\n    const [taskType, setTaskType] = useState(values.taskType)\r\n\r\n    useEffect(() => {\r\n        const values: any = props.values\r\n        const taskTypes = values.task_type\r\n        setTaskType(taskTypes)\r\n\r\n        // console.log('useEffect NewTaskTreeForm', props.initialValues)\r\n    }, [props.values])\r\n\r\n    //console.log('NewTaskTreeForm props: ', props)\r\n\r\n    // const handleSubmit = (formProps: any) => {\r\n    //     //console.log('formProps in NewTaskTreeForm: ',formProps)\r\n    //     props.handleSubmit(formProps)\r\n    // }\r\n\r\n    // console.log('NewTaskTreeForm', props)\r\n    // console.log('NewTaskTreeForm render', values)\r\n\r\n    return (\r\n        <Form\r\n            className=\"form-container\"\r\n            onSubmit={props.handleSubmit}\r\n        >\r\n            <Field\r\n                component={AntInput}\r\n                name=\"name\"\r\n                type=\"text\"\r\n                label=\"Name\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n\r\n            <Field\r\n                component={AntSelect}\r\n\r\n                selectOptions={selectOptions}\r\n\r\n                name=\"parent_id\"\r\n                type=\"select\"\r\n                label=\"Parent\"\r\n                // validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n            // hasFeedback\r\n            />\r\n\r\n            <Field\r\n                component={AntTextArea}\r\n                name=\"descriptions\"\r\n                type=\"text\"\r\n                label=\"Descriptions\"\r\n                // validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                // hasFeedback\r\n            />\r\n\r\n            <Field\r\n                component={AntTimePicker}\r\n                name=\"time_to_complete\"\r\n                type=\"time\"\r\n                label=\"Time to complete\"\r\n                // validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n            // hasFeedback\r\n            />\r\n\r\n            <Field\r\n                component={AntSelect}\r\n\r\n                selectOptions={taskTypes}\r\n\r\n                name=\"task_type\"\r\n                type=\"select\"\r\n                label=\"task Types\"\r\n                // validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                // hasFeedback\r\n            />\r\n\r\n\r\n            {taskType === 2 ?\r\n                <>\r\n                    <Field\r\n                        component={AntInput}\r\n                        name=\"context1\"\r\n                        type=\"text\"\r\n                        label=\"context1\"\r\n                        validate={validateRequired}\r\n                        submitCount={props.submitCount}\r\n                        hasFeedback\r\n                    />\r\n                    <Field\r\n                        component={AntInput}\r\n                        name=\"context2\"\r\n                        type=\"text\"\r\n                        label=\"context2\"\r\n                        validate={validateRequired}\r\n                        submitCount={props.submitCount}\r\n                        hasFeedback\r\n                    />\r\n                </>\r\n                :\r\n                null\r\n            }\r\n\r\n            <div className=\"submit-container\">\r\n                <button className=\"ant-btn ant-btn-primary\" type=\"submit\">\r\n                    Save\r\n                </button>\r\n            </div>\r\n\r\n        </Form>\r\n    )\r\n    // )\r\n}\r\nexport default NewTaskTreeForm","import { Button, Card, Drawer, List, Checkbox, Collapse } from 'antd'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { TasksTreePropsType } from './TasksTreeContainer'\r\nimport { FileAddOutlined, SettingOutlined } from '@ant-design/icons'\r\nimport NewTaskTreeForm from './NewTaskTreeForm'\r\nimport { Formik, FormikProps } from 'formik'\r\nimport moment from \"moment\"\r\nimport { DeleteOutlined, EditOutlined } from '@ant-design/icons'\r\n\r\nconst { Panel } = Collapse;\r\n\r\ntype InitialDrewerDataType = {\r\n    header: string,\r\n    taskId: false | number\r\n}\r\n\r\nconst initialDrewerData: InitialDrewerDataType = {\r\n    header: 'Create New Task',\r\n    taskId: false\r\n}\r\n\r\nconst TasksTreeBrowser: React.FC<TasksTreePropsType> = (props) => {\r\n    useEffect(() => {\r\n        if (props.taskList !== undefined && props.taskList.length === 0 && !props.isTaskListLoaded) {\r\n            props.getTaskList()\r\n        }\r\n        else if (props.taskList === undefined) {\r\n            props.getTaskList()\r\n        }\r\n        setVisible(false)\r\n        setInitialFormValues(initialValues)\r\n    }, [props.taskList])\r\n\r\n    const [visible, setVisible] = useState(false)\r\n    const [drawerData, setDrawerData] = useState(initialDrewerData)\r\n\r\n    const getSelectOptions = () => {\r\n        if (props.taskList !== undefined && props.taskList.length > 0) {\r\n            return props.taskList.map((item) => {\r\n                return ({\r\n                    name: item.name,\r\n                    value: item.id\r\n                })\r\n            })\r\n        } else {\r\n            return null\r\n        }\r\n    }\r\n\r\n    const initialValues: any = {\r\n        selectOptions: getSelectOptions(),\r\n        taskTypes: [\r\n            {\r\n                name: 'Простая задача',\r\n                value: 1\r\n            },\r\n            {\r\n                name: 'Задача с контектом',\r\n                value: 2\r\n            }\r\n        ],\r\n        task_type: 1,\r\n        name: '',\r\n        // new: true\r\n\r\n    }\r\n\r\n    const [initialFormValues, setInitialFormValues] = useState(initialValues)\r\n\r\n    const onClose = () => {\r\n        setVisible(false)\r\n    }\r\n\r\n    const showDrawer = () => {\r\n        setVisible(true)\r\n    }\r\n\r\n    const onAdd = () => {\r\n        setDrawerData(initialDrewerData)\r\n        setInitialFormValues(initialValues)\r\n        // console.log(initialValues)\r\n        showDrawer()\r\n    }\r\n\r\n    const handleSubmit = (formProps: any) => {\r\n        let formPropsCopy: any = { ...formProps }\r\n        delete formPropsCopy.selectOptions\r\n        delete formPropsCopy.taskTypes\r\n        if (formPropsCopy.time_to_complete !== undefined) {\r\n            formPropsCopy.time_to_complete = formPropsCopy.time_to_complete.format('HH:mm:ss')\r\n        }\r\n\r\n        formPropsCopy.user_id = props.userId\r\n        if (!drawerData.taskId) {\r\n            props.createNewTaskList(formPropsCopy)\r\n        } else {\r\n            // console.log(formPropsCopy)\r\n            props.updateTaskList(formPropsCopy, drawerData.taskId)\r\n        }\r\n\r\n    }\r\n\r\n    // console.log('initialFormValues: ', initialFormValues)\r\n\r\n    return (\r\n        <>\r\n            <div className=\"site-card-border-less-wrapper\">\r\n                <Card\r\n                    title={\r\n                        <div\r\n                            // className=\"col-12 col-md-12 col-lg-4\"\r\n                            className=\"inline\"\r\n                        >\r\n                            <div ><h2>Tasks Tree</h2></div>\r\n\r\n\r\n                        </div>\r\n                    }\r\n                    extra={\r\n                        <>\r\n                            <Button\r\n                                type=\"primary\"\r\n                                shape=\"round\"\r\n                                icon={\r\n                                    <div className=\"d-flex flex-wrap align-content-start\">\r\n                                        <FileAddOutlined style={{ fontSize: '18px' }} />\r\n                                        <span className=\"ml-1\" style={{ fontSize: '14px' }}>Add</span>\r\n                                    </div>}\r\n                                style={{ marginLeft: 10 }}\r\n                                onClick={onAdd}\r\n                            />\r\n\r\n                            <Button className=\"\"\r\n                                type=\"primary\"\r\n                                shape=\"round\"\r\n                                style={{ marginLeft: 10 }}\r\n                                // onClick={props.showModal}\r\n                                icon={\r\n                                    <div className=\"d-flex flex-wrap align-content-start\">\r\n                                        <SettingOutlined style={{ fontSize: '18px' }} />\r\n                                        <span className=\"ml-1\" style={{ fontSize: '14px' }}>Settings</span>\r\n                                    </div>}\r\n                            />\r\n                        </>\r\n                    }\r\n                    bordered={false}\r\n                >\r\n\r\n                    {/* { getTaskTreeItems(props.taskList) } */}\r\n                    <List\r\n                        size=\"small\"\r\n                        // header={<h2>Tasks Tree</h2>}\r\n                        // footer={<div>Footer</div>}\r\n                        bordered\r\n                        dataSource={getTaskTreeItems(\r\n                            props.taskList,\r\n                            props.deleteTaskList,\r\n                            showDrawer,\r\n                            setDrawerData,\r\n                            initialFormValues,\r\n                            setInitialFormValues\r\n                        )}\r\n\r\n                        renderItem={item => <List.Item draggable>{item}</List.Item>}\r\n                    />\r\n\r\n                    <Drawer\r\n                        title={drawerData.header}\r\n                        placement=\"right\"\r\n                        closable={true}\r\n                        onClose={onClose}\r\n                        visible={visible}\r\n                        width=\"90%\"\r\n                    >\r\n\r\n                        <Formik\r\n                            initialValues={initialFormValues}\r\n                            onSubmit={handleSubmit}\r\n                            render={NewTaskTreeForm}\r\n                            enableReinitialize={true}\r\n                        />\r\n\r\n                    </Drawer>\r\n\r\n                </Card>\r\n            </div>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default TasksTreeBrowser\r\n\r\nconst getTaskTreeItems = (\r\n    taskList: Array<any>,\r\n    deleteTask: (taskId: number) => void,\r\n    showDrawer: () => void,\r\n    setDrawerData: (drawerData: any) => void,\r\n    initialFormValues: any,\r\n    setInitialFormValues: (initialFormValues: any) => void\r\n) => {\r\n    const onEdit = (task: any) => {\r\n        setDrawerData({\r\n            header: 'Edit: \"' + task.name + '\"',\r\n            taskId: task.id\r\n        })\r\n\r\n\r\n        let day = moment().zone('GMT')\r\n        if (task.time_to_complete !== null) {\r\n            const splitTime = task.time_to_complete.split(/:/)\r\n            day.hours(parseInt(splitTime[0])).minutes(parseInt(splitTime[1])).seconds(0).milliseconds(0);\r\n        } else {\r\n            day.hours(0).minutes(0).seconds(0).milliseconds(0);\r\n        }\r\n\r\n        setInitialFormValues(\r\n            {\r\n                ...initialFormValues,\r\n                // new: false,\r\n                name: task.name,\r\n                time_to_complete: day,\r\n                descriptions: task.descriptions\r\n            }\r\n        )\r\n        showDrawer()\r\n    }\r\n    if (taskList !== undefined && taskList.length > 0) {\r\n        return taskList.map((item) => {\r\n            return (\r\n                <>\r\n                    <div><Checkbox></Checkbox></div>\r\n                    <div className=\"w-100 float-left\" key={item.id}>\r\n                        <div className=\"ml-3 float-left\">\r\n                            {item.name}\r\n                        </div>\r\n                        <div className=\"ml-3 float-right\">\r\n                            {item.time_to_complete}\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"d-flex flex-row\">\r\n                        <Button className=\"\"\r\n                            type=\"primary\"\r\n                            shape=\"circle\"\r\n                            size=\"small\"\r\n                            style={{ marginLeft: 10 }}\r\n                            onClick={() => { onEdit(item) }}\r\n                            icon={\r\n                                <div className=\"d-flex flex-wrap align-content-start\">\r\n                                    <EditOutlined className=\"ml-1\" style={{ fontSize: '14px' }} />\r\n                                </div>\r\n                            }\r\n                        />\r\n                        <Button className=\"\"\r\n                            type=\"primary\"\r\n                            danger\r\n                            shape=\"circle\"\r\n                            size=\"small\"\r\n                            style={{ marginLeft: 10 }}\r\n                            onClick={() => { deleteTask(item.id) }}\r\n                            icon={\r\n                                <div className=\"d-flex flex-wrap align-content-start\">\r\n                                    <DeleteOutlined className=\"ml-1\" style={{ fontSize: '14px' }} />\r\n                                </div>\r\n                            }\r\n                        />\r\n                    </div>\r\n                </>\r\n            )\r\n        })\r\n    } else {\r\n        return []\r\n    }\r\n}","import React, { useState, useEffect } from 'react'\r\nimport { TasksTreePropsType } from './TasksTreeContainer'\r\nimport { Drawer, List, SwipeAction, Icon, Button, Card, WingBlank, WhiteSpace } from 'antd-mobile'\r\nimport NewTaskTreeForm from './NewTaskTreeForm'\r\nimport './TasksTreeMobile.css'\r\nimport { Formik } from 'formik'\r\nimport { Spin, Empty } from 'antd'\r\nimport { propTypes } from 'react-bootstrap/esm/Image'\r\nimport moment from \"moment\"\r\n\r\nconst Item = List.Item\r\n\r\ntype InitialDrewerDataType = {\r\n    header: string,\r\n    taskId: false | number\r\n}\r\n\r\nconst initialDrewerData: InitialDrewerDataType = {\r\n    header: 'Create New Task',\r\n    taskId: false\r\n}\r\n\r\nconst TasksTreeMobile: React.FC<TasksTreePropsType> = (props) => {\r\n    useEffect(() => {\r\n        if (props.taskList && props.taskList.length === 0 && !props.isTaskListLoaded) {\r\n            props.getTaskList()\r\n        }else if (props.taskList === undefined) {\r\n            props.getTaskList()\r\n        }\r\n        setVisible(false)\r\n        // console.log('initialValues: ', initialValues)\r\n        setInitialFormValues(initialValues)\r\n    }, [props.taskList])\r\n\r\n    const getSelectOptions = () => {\r\n        if (props.taskList !== undefined && props.taskList.length > 0) {\r\n            return props.taskList.map((item) => {\r\n                return ({\r\n                    name: item.name,\r\n                    value: item.id\r\n                })\r\n            })\r\n        } else {\r\n            //console.log('вернули пыстой список', props.taskList)\r\n            return null\r\n        }\r\n    }\r\n\r\n    let initialTimeToComplete = new Date()\r\n    initialTimeToComplete.setHours(0)\r\n    initialTimeToComplete.setMinutes(0)\r\n    initialTimeToComplete.setSeconds(0)\r\n    initialTimeToComplete.setMilliseconds(0);\r\n\r\n    const initialValues: any = {\r\n        selectOptions: getSelectOptions(),\r\n        taskTypes: [\r\n            {\r\n                name: 'Простая задача',\r\n                value: 1\r\n            },\r\n            {\r\n                name: 'Задача с контектом',\r\n                value: 2\r\n            }\r\n        ],\r\n        task_type: 1,\r\n        time_to_complete: initialTimeToComplete\r\n        // parent_id:[]\r\n    }\r\n\r\n    const [visible, setVisible] = useState(false)\r\n    const [initialFormValues, setInitialFormValues] = useState(initialValues)\r\n    const [drawerData, setDrawerData] = useState(initialDrewerData)\r\n\r\n    const handleSubmit = (formProps: any) => {\r\n        // console.log('handleSubmit TasksTreeMobile: ', formProps.time_to_complete)\r\n        let formPropsCopy: any = { ...formProps }\r\n        delete formPropsCopy.selectOptions\r\n        delete formPropsCopy.taskTypes\r\n        if (formPropsCopy.time_to_complete !== undefined) {\r\n            // console.log(formPropsCopy.time_to_complete)\r\n            const time_to_complete = moment(formPropsCopy.time_to_complete)\r\n            formPropsCopy.time_to_complete = time_to_complete.format('HH:mm:ss')\r\n        }\r\n        if ( Array.isArray(formPropsCopy.parent_id) ){\r\n            formPropsCopy.parent_id = formPropsCopy.parent_id[0]\r\n        }\r\n        \r\n        //console.log('NewTaskMobile submit: ', formPropsCopy)\r\n\r\n        formPropsCopy.user_id = props.userId\r\n        // props.createNewTaskList(formPropsCopy)\r\n        // setInitialFormValues(initialValues)\r\n        if (!drawerData.taskId) {\r\n            // console.log('createNewTaskList: ', formPropsCopy)\r\n            props.createNewTaskList(formPropsCopy)\r\n        } else {\r\n            console.log('updateTaskList: ', formPropsCopy)\r\n            props.updateTaskList(formPropsCopy, drawerData.taskId)\r\n        }\r\n    }\r\n\r\n    const onOpenChange = (args: any) => {\r\n        setInitialFormValues(initialValues)\r\n        setVisible(!visible)\r\n    }\r\n\r\n    const showDrawer = () => {\r\n        setVisible(true)\r\n    }\r\n\r\n    // console.log('TasksTreeMobile props: ', props)\r\n    // console.log('TasksTreeMobile name: ', initialFormValues.name)\r\n\r\n    // if (props.taskList !== undefined) {\r\n        return (\r\n            <WingBlank size=\"lg\">\r\n            <WhiteSpace size=\"lg\" />\r\n            <Card>\r\n\r\n                <div \r\n                    // className=\"d-flex justify-content-end\"\r\n                >\r\n                <Card.Header\r\n                    title={<h4 className=\"w-100 text-center\">Tasks Tree</h4>}\r\n                    extra = {\r\n                                <Button\r\n                                    inline\r\n                                    size=\"small\"\r\n                                    className=\"mx-3 my-2\"\r\n                                    // style={{ marginRight: '4px' }} \r\n                                    onClick={onOpenChange}\r\n                                    type=\"primary\"\r\n                                >\r\n                                    Add\r\n                                </Button>\r\n                            }\r\n                >\r\n                    \r\n                </Card.Header>\r\n                </div>\r\n\r\n                <Drawer\r\n                    className=\"my-drawer\"\r\n                    style={{ minHeight: document.documentElement.clientHeight }}\r\n                    enableDragHandle\r\n                    contentStyle={{ color: '#A6A6A6', textAlign: 'center', paddingTop: 0, width: \"100%\" }}\r\n                    sidebar={\r\n                        <div className=\"mt-4\">\r\n                            <Formik\r\n                                initialValues={initialFormValues}\r\n                                onSubmit={handleSubmit}\r\n                                render={NewTaskTreeForm}\r\n                                enableReinitialize={true}\r\n                            />\r\n                        </div>\r\n                    }\r\n                    open={visible}\r\n                    onOpenChange={onOpenChange}\r\n                >\r\n                    <List\r\n                    // renderHeader={() => 'taskList'}\r\n                    >\r\n                        {getTaskTreeItems(\r\n                                            props.taskList, \r\n                                            props.deleteTaskList,\r\n                                            showDrawer,\r\n                                            setDrawerData,\r\n                                            initialFormValues,\r\n                                            setInitialFormValues\r\n                                        )\r\n                        }\r\n                    </List>\r\n                </Drawer>\r\n\r\n\r\n\r\n            </Card>\r\n            </WingBlank>\r\n        )\r\n    // } else {\r\n    //     return <Spin key=\"spin\" size=\"large\" />\r\n    // }\r\n}\r\n\r\nexport default TasksTreeMobile\r\n\r\nconst getTaskTreeItems = (\r\n        taskList: Array<any>, \r\n        deleteTaskList:(taskId:number)=>void,\r\n        showDrawer: () => void,\r\n        setDrawerData: (drawerData: any) => void,\r\n        initialFormValues: any,\r\n        setInitialFormValues: (initialFormValues: any) => void\r\n    ) => {\r\n    const onEdit = (task: any) => {\r\n        // console.log(task)\r\n\r\n        setDrawerData({\r\n            header: 'Edit: \"' + task.name + '\"',\r\n            taskId: task.id\r\n        })\r\n\r\n        let day = new Date()\r\n        if (task.time_to_complete !== null) {\r\n            const splitTime = task.time_to_complete.split(/:/)\r\n            day.setHours( parseInt(splitTime[0]) )\r\n            day.setMinutes( parseInt(splitTime[1]) )\r\n            day.setSeconds(0)\r\n            day.setMilliseconds(0)\r\n        } else {\r\n            day.setHours(0)\r\n            day.setMinutes(0)\r\n            day.setSeconds(0)\r\n            day.setMilliseconds(0)\r\n        }\r\n\r\n        setInitialFormValues(\r\n            {\r\n                ...initialFormValues,\r\n                // new: false,\r\n                name: task.name,\r\n                time_to_complete: day,\r\n                descriptions: task.descriptions,\r\n                parent_id: [task.parent_id]\r\n            }\r\n        )\r\n\r\n        showDrawer()\r\n    }\r\n\r\n    // console.log(taskList)\r\n\r\n    if (taskList && taskList.length > 0) {\r\n        return taskList.map((item) => {\r\n            //console.log('!!!!!!!')\r\n            return (\r\n                <SwipeAction\r\n                    style={{ backgroundColor: 'gray' }}\r\n                    autoClose\r\n                    right={[\r\n                        {\r\n                            text: 'Cancel',\r\n                            onPress: () => { \r\n                                //console.log('cancel') \r\n                            },\r\n                            style: { backgroundColor: '#ddd', color: 'white' },\r\n                        },\r\n                        {\r\n                            text: 'Delete',\r\n                            onPress: () => deleteTaskList(item.id),\r\n                            style: { backgroundColor: '#F4333C', color: 'white' },\r\n                        },\r\n                    ]}\r\n                    left={[\r\n                        {\r\n                            text: 'Edit',\r\n                            onPress: () => {onEdit(item)},\r\n                            style: { backgroundColor: '#108ee9', color: 'white' },\r\n                        },\r\n                        {\r\n                            text: 'Cancel',\r\n                            onPress: () => {\r\n                                // console.log('cancel')\r\n                            },\r\n                            style: { backgroundColor: '#ddd', color: 'white' },\r\n                        },\r\n                    ]}\r\n                    // onOpen={() => console.log('global open')}\r\n                    // onClose={() => console.log('global close')}\r\n                >\r\n                    <Item\r\n                        // className=\"my-3\"\r\n                        onClick={() => {\r\n                            // console.log('item is clicked')\r\n                        }}\r\n                        arrow=\"horizontal\"\r\n                        key={item.id}\r\n                    >\r\n                        {item.name}\r\n                    </Item>\r\n\r\n                </SwipeAction>\r\n            )\r\n        })\r\n    } else {\r\n        return(\r\n            <Empty />\r\n        )\r\n    }\r\n\r\n\r\n}","import {connect} from 'react-redux'\r\n// import TasksTree, { OwnTasksTreePropsType } from './TasksTree'\r\nimport { AppStateType } from '../../redux/store'\r\nimport {getTaskList, createNewTaskList, deleteTaskList, updateTaskList} from './../../redux/TaskListReducer'\r\nimport { isMobile } from 'react-device-detect'\r\nimport TasksTreeBrowser from './TasksTreeBrowser'\r\nimport TasksTreeMobile from './TasksTreeMobile'\r\n\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    getTaskList: ()=>void,\r\n    createNewTaskList: (values: any)=>void,\r\n    deleteTaskList: (taskId: number)=>void,\r\n    updateTaskList: (values: any, taskId: number)=> void\r\n}\r\n\r\ntype OwnTasksTreePropsType = {\r\n\r\n}\r\n\r\nexport type TasksTreePropsType = MapPropsType & MapDispatchPropsType & OwnTasksTreePropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        taskList: state.taskList.taskList,\r\n        userId: state.auth.user?.id,\r\n        isTaskListLoaded: state.taskList.isTaskListLoaded\r\n    }\r\n}\r\n\r\n// const TasksTree: React.FC<TasksTreePropsType> = (props) => {\r\n//     return {\r\n\r\n//     }\r\n// }\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnTasksTreePropsType, AppStateType>(mapStateToProps, \r\n    {getTaskList, createNewTaskList, deleteTaskList, updateTaskList}) \r\n    (isMobile ? TasksTreeMobile : TasksTreeBrowser)\r\n    \r\n\r\n","import React, { ReactNode } from 'react'\r\nimport { Form, Field, FormikProps } from \"formik\"\r\nimport { AntCheckbox, AntInput, AntInputPassword } from '../../utils/Formik/CreateAntField'\r\nimport { validateEmail, validateRequired } from '../../utils/Formik/ValidateFields'\r\n\r\nconst RegisterForm: ((props: FormikProps<{}>) => ReactNode) = (props) => {\r\n    return(\r\n        <Form\r\n            className=\"form-container\" \r\n            onSubmit={props.handleSubmit}\r\n        >\r\n            <Field\r\n                component={AntInput}\r\n                name=\"name\"\r\n                type=\"text\"\r\n                label=\"Name\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n            <Field\r\n                component={AntInput}\r\n                name=\"email\"\r\n                type=\"email\"\r\n                label=\"Email\"\r\n                validate={validateEmail}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n            <Field\r\n                component={AntInputPassword}\r\n                name=\"password\"\r\n                type=\"password\"\r\n                label=\"Password\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n\r\n            <Field\r\n                component={AntInputPassword}\r\n                name=\"c_password\"\r\n                type=\"password\"\r\n                label=\"Confirm\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n\r\n            <Field\r\n                component={AntCheckbox}\r\n                name=\"remember\"\r\n                label=\"Remember Me\"\r\n                submitCount={props.submitCount}\r\n            />\r\n            <div className=\"submit-container\">\r\n                <button className=\"ant-btn ant-btn-primary\" type=\"submit\">\r\n                    Register\r\n                </button>\r\n            </div>\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default RegisterForm","import { Formik } from 'formik'\r\nimport React, { useEffect } from 'react'\r\nimport RegisterForm from './RegisterForm'\r\nimport { RegisterPropsType } from './RegisterContainer'\r\nimport { propTypes } from 'react-bootstrap/esm/Image'\r\nimport { Redirect, Route, useHistory } from 'react-router-dom'\r\n\r\nconst initialValues = {\r\n    // parent_id :['1', '2', '3']\r\n}\r\n\r\nexport type OwnRegisterPropsType = {}\r\n\r\nconst Register: React.FC<RegisterPropsType> = (props) => {\r\n    let history = useHistory();\r\n    useEffect( () => {\r\n        //console.log('useEffect in Register: ', props.isAuth)\r\n        if(props.isAuth) {\r\n            history.replace(props.appLocation+'toDoList')\r\n        }\r\n    }, [props.isAuth])\r\n    const handleSubmit = (formProps: any) => {\r\n        //console.log(formProps)\r\n        formProps.status = 'guest'\r\n        props.register(formProps)\r\n    }\r\n\r\n    //console.log('Register', props)\r\n    return (\r\n        <>\r\n            <h1 className=\"mb-5 mx-auto\">Register Form</h1>\r\n            <Formik\r\n                initialValues={initialValues}\r\n                onSubmit={handleSubmit}\r\n                render={RegisterForm}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Register","import {connect} from 'react-redux'\r\nimport Register, { OwnRegisterPropsType } from './Register'\r\nimport { AppStateType } from '../../redux/store'\r\nimport {register} from './../../redux/authReducer'\r\n\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    register: (creds: any)=>void\r\n}\r\n\r\nexport type RegisterPropsType = MapPropsType & MapDispatchPropsType & OwnRegisterPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n        appLocation: state.app.location\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnRegisterPropsType, AppStateType>(mapStateToProps, \r\n    {register}) \r\n    (Register)\r\n    \r\n\r\n","import React, { useEffect, useState } from 'react'\r\nimport './App.css'\r\nimport ToDoList from './Components/ToDo/ToDoListContainer'\r\nimport { BrowserRouter, Redirect, Route, Switch, withRouter, useLocation } from 'react-router-dom'\r\nimport { connect, Provider } from 'react-redux'\r\nimport 'antd/dist/antd.css'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport 'antd-mobile/dist/antd-mobile.css'\r\nimport store, { AppStateType } from './redux/store'\r\nimport { Layout, Spin } from 'antd'\r\nimport { compose } from 'redux'\r\nimport { initializeApp, addLocation } from './redux/appReducer'\r\nimport {login} from './redux/authReducer'\r\nimport Header from './Components/Header/HeaderContainer'\r\nimport { isMobile } from \"react-device-detect\"\r\nimport Login from './Components/Login/LoginContainer'\r\nimport Orders from './Components/Orders/OrdersContainer'\r\nimport TasksTree from './Components/TasksTree/TasksTreeContainer'\r\nimport Register from './Components/Register/RegisterContainer'\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\ntype DispatchPropsType = {\r\n  initializeApp: () => void,\r\n  addLocation: (location: string) => void,\r\n  login: (data: any)=> void,\r\n}\r\n\r\nconst App = (props: MapPropsType & DispatchPropsType) => {\r\n  const [location, setLocation] = useState(useLocation().pathname)\r\n\r\n  useEffect(() => {\r\n    if (!props.initialized) {\r\n      // http://localhost:3000/?email=7383125@gmail.com&password=gfhjkm4501\r\n      let instanseCreds = parseQueryString()\r\n      if (instanseCreds.email && instanseCreds.password) {\r\n        instanseCreds.remember = true\r\n        props.login(instanseCreds)\r\n      }\r\n\r\n      if (location === '/front1/') {\r\n        props.addLocation(location)\r\n      }\r\n      //console.log('initialized FALSE', props)\r\n      props.initializeApp()\r\n    } else {\r\n      //console.log('initialized TRUE', props)\r\n    }\r\n  }, [props.initialized])\r\n\r\n\r\n  if (!props.initialized) {\r\n    return <Spin key=\"spin\" size=\"large\" />\r\n  }\r\n\r\n  return (\r\n    <Layout>\r\n      <Header />\r\n      <Switch>\r\n        {!props.isAuth ?\r\n          <Route exact path={props.appLocation}\r\n            render={() => <Redirect to={props.appLocation+'login'} />} />\r\n        :\r\n          <Route exact path={props.appLocation}\r\n            render={() => <Redirect to={props.appLocation+'toDoList'} />} />\r\n        }\r\n        \r\n        {props.isAuth ?\r\n            <Route exact path={props.appLocation+'login'}\r\n              render={ () => <Redirect to={props.appLocation+'toDoList'} /> } \r\n            />  \r\n          :\r\n            null\r\n        }\r\n\r\n        <Route path={props.appLocation+'login'}\r\n          render={() => <Login />} />\r\n        \r\n         <Route path={props.appLocation+'toDoList'}\r\n            render={() => <ToDoList />} />\r\n\r\n          <Route path={props.appLocation+'tasksTree'}\r\n            render={() => <TasksTree />} />\r\n\r\n          <Route path={props.appLocation+'orders'}\r\n            render={() => <Orders />} />\r\n\r\n          <Route path={props.appLocation+'register'}\r\n            render={() => <Register />} />\r\n\r\n          <Route path={props.appLocation+'*'}\r\n            render={() => <div>404 NOT FOUND</div>} />\r\n      </Switch>\r\n    </Layout>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n  initialized: state.app.initialized,\r\n  appLocation: state.app.location,\r\n  isAuth: state.auth.isAuth\r\n})\r\n\r\nlet AppContainer = compose<React.ComponentType>(\r\n  withRouter,\r\n  connect(mapStateToProps, { initializeApp, addLocation, login }))(App)\r\n\r\nconst MainApp = () => {\r\n  return (\r\n    <BrowserRouter>\r\n      <Provider store={store}>\r\n        <div className={isMobile ? \"\" : \"container\"}>\r\n          <AppContainer />\r\n        </div>\r\n      </Provider>\r\n    </BrowserRouter>\r\n  )\r\n}\r\n\r\nexport default MainApp\r\n\r\nconst parseQueryString = (): any => {\r\n  const params:  any = {}\r\n  document.location.search.substr(1).split('&').forEach( (pair) => {\r\n      const [key, value] = pair.split('=')\r\n      params[key] = value\r\n  })\r\n  return params;\r\n};\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './App'\r\nimport reportWebVitals from './reportWebVitals'\r\n\r\nReactDOM.render(\r\n  // <React.StrictMode>\r\n    <App />\r\n  // </React.StrictMode>\r\n  ,\r\n  document.getElementById('root')\r\n)\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(// //console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals()\r\n"],"sourceRoot":""}
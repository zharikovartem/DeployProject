{"version":3,"sources":["api/api.ts","Components/NewTaskForm.tsx","api/taskApi.ts","redux/taskReducer.ts","Components/NewTaskFormContainer.tsx","Components/ToDoHeader.tsx","Components/ToDoHeaderContainer.tsx","Components/Settings/SettingsModal.tsx","Components/TimeScale/TaskItem/TaskItem.tsx","Components/TimeScale/TaskItem/TaskItemContainer.tsx","utils/array-helpers.ts","Components/TimeScale/TimeScale.tsx","Components/TimeScale/TimeScaleContainer.tsx","Components/ToDoList.tsx","Components/ToDoListContainer.tsx","redux/store.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ResultCodesEnum","layout","labelCol","span","wrapperCol","tailLayout","offset","TextArea","Input","NewTaskForm","props","Form","useForm","form","useState","moment","selectedDate","setSelectedDate","taskSaveStatus","saveStatus","setSaveStatus","useEffect","message","success","onClose","onReset","error","errorMessage","resetFields","title","format","placement","closable","visible","width","name","onFinish","values","data","date","taskTime","taskName","user_id","description","isBetween","dateInterval","startDate","endDate","undefined","createNewTask","Item","label","rules","required","initialValue","onChange","value","dateString","rows","type","htmlType","className","onClick","instance","axios","create","withCredentials","baseURL","taskAPI","post","then","response","status","catch","err","request","console","log","taskId","delete","initialState","taskList","taskListIsFetching","isInterval","actions","setTaskList","setTaskSaveStatus","setErrorMessage","setTaskListIsFetching","isFetchingValue","setIsInterval","getTaskList","dispatch","getState","a","start_date","end_date","taskReducer","state","action","Tasks","connect","task","reload","RangePicker","DatePicker","ToDoHeader","dates","setDates","formatString","defaultValue","style","marginLeft","e","target","checked","shape","icon","FileAddOutlined","fontSize","showDrawer","showModal","SettingOutlined","SettingsModal","isModalVisible","onOk","handleOk","onCancel","handleCancel","TaskItem","element","setStetus","deleteingInProgess","setDeleteingInProgess","ListGroup","time","split","join","descriptions","textDecoration","id","size","taskid","deleteTask","DeleteOutlined","sortTaskArrayByParams","field","b","TimeScale","selestedDates","setSelectedDates","getTimeScaleArrey","timeScaleArrey","tomorowTasks","sort","getHeadlineLabel","headlineDate","length","push","index","orientation","i","timeVal","Number","concat","ToDoList","setVisible","setIsModalVisible","bordered","rootReducer","combineReducers","store","createStore","applyMiddleware","thunkMiddleware","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.eefb1962.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nexport const instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://crmapiserver.h1n.ru/api/',\r\n    // baseURL: 'https://81.90.181.175/api/',\r\n    // headers:     {\r\n    //     API-KEY: 'b1775b2f-c3a5-4509-8dc9-90b5629de7c3'\r\n    // }\r\n})\r\n\r\nexport enum ResultCodesEnum {\r\n    Success = 0,\r\n    Error = 1\r\n}\r\n\r\nexport type APIResponseType<D = {}, RC = ResultCodesEnum> = {\r\n    data: D\r\n    messages: Array<string>\r\n    resultCode: RC\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport moment from 'moment'\r\nimport { Form, Input, Button, TimePicker, DatePicker, Drawer, Spin, message } from 'antd'\r\nimport { NewTaskFormPropsType } from './NewTaskFormContainer'\r\n\r\nconst layout = {\r\n    labelCol: { span: 8 },\r\n    wrapperCol: { span: 16 },\r\n}\r\nconst tailLayout = {\r\n    wrapperCol: { offset: 8, span: 16 },\r\n}\r\n\r\nexport type NewTaskFormOwnPropsType = {\r\n    onClose: () => void\r\n    visible: boolean,\r\n    setVisible: (visible: boolean) => void\r\n}\r\n\r\nconst { TextArea } = Input\r\n\r\nconst timeFormat: string = 'HH:mm'\r\n\r\nconst NewTaskForm: React.FC<NewTaskFormPropsType> = (props) => {\r\n    const [form] = Form.useForm()\r\n    const [selectedDate, setSelectedDate] = useState<moment.Moment>(moment())\r\n    const [saveStatus, setSaveStatus] = useState<string>(props.taskSaveStatus)\r\n\r\n    useEffect(() => {\r\n        switch (props.taskSaveStatus) {\r\n            case 'inProgress':\r\n                setSaveStatus(props.taskSaveStatus)\r\n                break\r\n            case 'success':\r\n                message.success('The task was successfully created')\r\n                props.onClose()\r\n                setSaveStatus('')\r\n                onReset()\r\n                break\r\n            case 'error':\r\n                message.error('Error: ' + props.errorMessage)\r\n                setSaveStatus(props.taskSaveStatus)\r\n                break\r\n\r\n            default:\r\n                break\r\n        }\r\n    }, [props.taskSaveStatus])\r\n\r\n    type OnFinishType = {\r\n        taskName: string,\r\n        date: moment.Moment,\r\n        taskTime: moment.Moment,\r\n        description?: string\r\n    }\r\n    const onFinish = (values: OnFinishType) => {\r\n        const data = {\r\n            date: values.date.format('YYYY-MM-DD'),\r\n            taskTime: values.taskTime.format('HH:mm'),\r\n            taskName: values.taskName,\r\n            user_id: 1,\r\n            description: values.description\r\n        }\r\n\r\n        if (!moment(selectedDate.format('YYYY-MM-DD')).isBetween(\r\n            props.dateInterval.startDate.format('YYYY-MM-DD'),\r\n            props.dateInterval.endDate.format('YYYY-MM-DD'),\r\n            undefined, '[]'\r\n        )) {\r\n            props.createNewTask(data, false)\r\n        } else {\r\n\r\n            props.createNewTask(data, true)\r\n        }\r\n    }\r\n\r\n    const onReset = () => {\r\n        form.resetFields()\r\n    }\r\n\r\n    const onDateChange = (value: moment.Moment | null, dateString: string): void => {\r\n        if (value !== null) {\r\n            setSelectedDate(value)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Drawer\r\n            title={\"Create New Task for \" + selectedDate.format('DD MMM YYYY')}\r\n            placement=\"right\"\r\n            closable={true}\r\n            onClose={props.onClose}\r\n            visible={props.visible}\r\n            width=\"80%\"\r\n        >\r\n            <Form\r\n                {...layout}\r\n                form={form}\r\n                name=\"control-hooks\"\r\n                onFinish={onFinish}\r\n            >\r\n                <Form.Item\r\n                    label=\"Task name\"\r\n                    name=\"taskName\"\r\n                    rules={[{ required: true, message: 'Please input task name!' }]}\r\n                >\r\n                    <Input />\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    label=\"Task date\"\r\n                    name=\"date\"\r\n                    initialValue={selectedDate}\r\n                    rules={[{ required: true, message: 'Please input task date!' }]}\r\n                >\r\n                    <DatePicker\r\n                        onChange={onDateChange}\r\n                        format='DD-MM-YYYY'\r\n                    />\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    label=\"Task time\"\r\n                    name=\"taskTime\"\r\n                    rules={[{ required: true, message: 'Please input task time!' }]}\r\n                >\r\n                    <TimePicker\r\n                        format={timeFormat}\r\n                    />\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    label=\"Description\"\r\n                    name=\"description\"\r\n                >\r\n                    <TextArea rows={2} />\r\n                </Form.Item>\r\n\r\n                <Form.Item {...tailLayout}>\r\n                    {saveStatus === 'inProgress' ?\r\n                        <Spin></Spin>\r\n                        :\r\n                        <>\r\n                            <Button type=\"primary\" htmlType=\"submit\">\r\n                                Create\r\n                            </Button>\r\n                            <Button className=\"ml-3\" type=\"primary\" onClick={onReset}>\r\n                                Reset\r\n                            </Button>\r\n                        </>\r\n                    }\r\n                </Form.Item>\r\n            </Form>\r\n        </Drawer>\r\n    )\r\n}\r\n\r\nexport default NewTaskForm","import { NewTaskDataType, TaskType } from '../Types/types'\r\nimport {instance} from './api'\r\n\r\nexport type TaskListType = {\r\n    Tasks: Array<TaskType>\r\n}\r\n\r\nexport const taskAPI = {\r\n    createNewTask(values: NewTaskDataType) {\r\n        return instance.post<TaskListType>(`tasks`, values)\r\n        .then(response => {\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                return err.response\r\n            } else if (err.request) {\r\n                console.log('request', err.request)\r\n            } else {\r\n                console.log('anything else: ', err)\r\n            }\r\n            return null\r\n        })\r\n    },\r\n\r\n    getTaskList(values: getTaskListValuesType) {\r\n        return instance.post<TaskListType>(`tasks/part`, values)\r\n        .then(response => {\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                return err.response\r\n            } else if (err.request) {\r\n                console.log('request', err.request)\r\n            } else {\r\n                console.log('anything else: ', err)\r\n            }\r\n            return null\r\n        })\r\n    },\r\n\r\n    deleteTask(taskId: number) {\r\n        return instance.delete<TaskListType>(`tasks/${taskId}`).then(response => {\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                return err.response\r\n            } else if (err.request) {\r\n                console.log('request', err.request)\r\n            } else {\r\n                console.log('anything else: ', err)\r\n            }\r\n            return null\r\n        })\r\n    }\r\n}\r\n\r\nexport type getTaskListValuesType = {\r\n    start_date: string, \r\n    end_date: string\r\n}","import { Dispatch } from 'redux'\r\nimport { taskAPI, TaskListType } from '../api/taskApi'\r\nimport { NewTaskDataType, TaskType } from '../Types/types'\r\nimport {BaseThunkType, InferActionsTypes} from './store'\r\nimport moment from 'moment'\r\n\r\nexport type InitialStateType = {\r\n    taskList: null | Array<TaskType>,\r\n    taskListIsFetching: boolean,\r\n    taskSaveStatus: 'no' | 'inProgress' | 'success' | 'error'\r\n    errorMessage: null | string,\r\n    isInterval: boolean,\r\n    dateInterval: {\r\n        startDate: moment.Moment,\r\n        endDate: moment.Moment\r\n    }\r\n}\r\n\r\nlet initialState:InitialStateType = {\r\n    taskList: null,\r\n    taskListIsFetching: false,\r\n    taskSaveStatus: 'no',\r\n    errorMessage: null,\r\n    isInterval: false,\r\n    dateInterval: {\r\n        startDate: moment(),\r\n        endDate: moment()\r\n    }\r\n}\r\n\r\nconst taskReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n    \r\n    switch (action.type) {\r\n        case 'SN/TASK/SET_TASK_LIST':\r\n            return {...state, taskList: action.taskList.Tasks}\r\n\r\n        case 'SN/TASK/SET_TASK_SAVE_STATUS':\r\n            return {...state, taskSaveStatus: action.taskSaveStatus}\r\n\r\n        case 'SN/TASK/SET_ERROR_MESSAGE':\r\n            return {...state, errorMessage: action.message}\r\n\r\n        case 'SN/TASK/SET_TASK_LIST_IS_FETCHING':\r\n            return {...state, taskListIsFetching: action.isFetchingValue}\r\n\r\n        case 'SN/TASK/SET_IS_INTERVAL':\r\n            const dateInterval = {\r\n                startDate: action.date.startDate,\r\n                endDate: action.date.endDate\r\n            }\r\n            return {...state, isInterval: action.isInterval, dateInterval }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    setTaskList: (taskList: TaskListType) => ({ type: 'SN/TASK/SET_TASK_LIST', taskList } as const),\r\n    setTaskSaveStatus: (taskSaveStatus: 'no' | 'inProgress' | 'success' | 'error') => ({ type: 'SN/TASK/SET_TASK_SAVE_STATUS', taskSaveStatus } as const),\r\n    setErrorMessage: (message: string | null) => ({type: 'SN/TASK/SET_ERROR_MESSAGE', message} as const),\r\n    setTaskListIsFetching: (isFetchingValue: boolean) => ({type: 'SN/TASK/SET_TASK_LIST_IS_FETCHING', isFetchingValue} as const),\r\n    setIsInterval: (isInterval: boolean, date: {startDate: moment.Moment, endDate: moment.Moment}) => ({type: 'SN/TASK/SET_IS_INTERVAL', isInterval, date} as const)\r\n}\r\n\r\nexport const createNewTask = (values: NewTaskDataType, reload:boolean = true): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        dispatch(actions.setTaskSaveStatus('inProgress'))\r\n\r\n        let response = await taskAPI.createNewTask(values)\r\n\r\n        if (response && response.status && response.status === 200) {\r\n            if (reload) {\r\n                const state = getState()\r\n                const startDate = state.task.dateInterval.startDate.format('YYYY-MM-DD')\r\n                const endDate = state.task.dateInterval.endDate.format('YYYY-MM-DD')\r\n                dispatch(getTaskList(startDate, endDate))\r\n            }\r\n            dispatch(actions.setTaskSaveStatus('success'))\r\n            dispatch(actions.setTaskSaveStatus('no'))\r\n        } else {\r\n            if (response && response.data) {\r\n                dispatch(actions.setErrorMessage(response.data.message))\r\n                dispatch(actions.setTaskSaveStatus('error'))\r\n                dispatch(actions.setTaskSaveStatus('no'))\r\n                dispatch( actions.setErrorMessage(null) )\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport const getTaskList = (startDate: string, endDate:string): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        dispatch(actions.setTaskListIsFetching(true))\r\n\r\n        const values = {start_date: startDate, end_date: endDate}\r\n        let response = await taskAPI.getTaskList(values)\r\n\r\n        if (response !== undefined && response !== null) {\r\n            dispatch(actions.setTaskList(response.data))\r\n        } else {\r\n            // add error message\r\n        }\r\n        dispatch(actions.setTaskListIsFetching(false))\r\n    }\r\n}\r\n\r\nexport const deleteTask = (taskid: number, startDate: string, endDate:string): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        let response = await taskAPI.deleteTask(taskid)\r\n\r\n        if (response !== null) {\r\n            dispatch(actions.setErrorMessage('Task deletion was successful'))\r\n            dispatch(getTaskList(startDate, endDate))\r\n            dispatch( actions.setErrorMessage(null) )\r\n        }\r\n    }\r\n}\r\n\r\nexport default taskReducer\r\n\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsTypes>\r\nexport type DispatchType = Dispatch<ActionsTypes>\r\n","import {connect} from 'react-redux'\r\nimport NewTaskForm, { NewTaskFormOwnPropsType } from './NewTaskForm'\r\nimport {createNewTask} from './../redux/taskReducer'\r\nimport { AppStateType } from '../redux/store'\r\nimport {NewTaskDataType} from './../Types/types'\r\n\r\nexport type MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype DispatchPropsType = {\r\n    createNewTask: (values:NewTaskDataType, reload:boolean)=> void\r\n}\r\n\r\nexport type NewTaskFormPropsType = MapPropsType & DispatchPropsType & NewTaskFormOwnPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        taskList: state.task.taskList,\r\n        taskSaveStatus: state.task.taskSaveStatus,\r\n        errorMessage: state.task.errorMessage,\r\n        dateInterval: state.task.dateInterval\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, DispatchPropsType, NewTaskFormOwnPropsType, AppStateType>(mapStateToProps, \r\n    {createNewTask}) \r\n    (NewTaskForm)\r\n\r\n\r\n","import React, { useState, useEffect } from 'react'\r\nimport { DatePicker, Checkbox, Button } from 'antd'\r\nimport { FileAddOutlined, SettingOutlined } from '@ant-design/icons'\r\nimport { CheckboxChangeEvent } from 'antd/lib/checkbox'\r\nimport {RangeValue} from './../Types/types'\r\nimport { ToDoHeaderPropsType } from './ToDoHeaderContainer'\r\nimport moment from 'moment'\r\n\r\nconst { RangePicker } = DatePicker\r\n\r\nexport type OwnToDoHeaderPropsType = {\r\n    showDrawer: () => void,\r\n    showModal: () => void,\r\n}\r\n\r\nconst ToDoHeader: React.FC<ToDoHeaderPropsType> = (props) => {\r\n    const [isInterval, setIsInterval] = useState(false)\r\n    const [dates, setDates] = useState<{startDate: moment.Moment, endDate: moment.Moment}>({startDate: moment(), endDate: moment()})\r\n\r\n    useEffect(() => {\r\n        // console.log('useEffect ToDoHeader dates:', dates.startDate.format('YYYY-MM-DD'),' - ',dates.endDate.format('YYYY-MM-DD'))\r\n        // console.log('useEffect ToDoHeader props:', props.dateInterval.startDate.format('YYYY-MM-DD'),' - ',props.dateInterval.endDate.format('YYYY-MM-DD'))\r\n        if ( \r\n            props.dateInterval.startDate.format('YYYY-MM-DD') !== dates.startDate.format('YYYY-MM-DD') ||\r\n            props.dateInterval.endDate.format('YYYY-MM-DD') !== dates.endDate.format('YYYY-MM-DD') \r\n        ) {\r\n            props.setIsInterval(isInterval, dates)\r\n        }\r\n        \r\n    }, [isInterval, dates, props])\r\n\r\n\r\n    const onDateTypeChange = (e: CheckboxChangeEvent) => {\r\n        if (!e.target.checked) {\r\n            setDates({\r\n                startDate: dates.startDate,\r\n                endDate: dates.startDate\r\n            })\r\n        }\r\n        setIsInterval(e.target.checked)\r\n    }\r\n\r\n    const onDateRangeChange = (values: RangeValue<moment.Moment>, formatString: [string, string]): void => {\r\n        if (values !== null && values[0] !== null && values[1] !== null ) {\r\n            setDates({\r\n                startDate: values[0],\r\n                endDate: values[1],\r\n            })\r\n        }\r\n        \r\n    }\r\n\r\n    const onDateChange = (value: moment.Moment | null, dateString: string):void => {\r\n        if (value !== null) {\r\n            setDates({\r\n                startDate: value,\r\n                endDate: value,\r\n            })\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"row\" >\r\n            <div className=\"col-12 col-md-8 col-lg-6\">\r\n                <div className=\"d-none d-sm-inline\">\r\n                    <label >Select {isInterval ? \"date interval\" : \"date\"}:</label>\r\n                </div>\r\n\r\n                <div className=\"d-inline\">\r\n                    {isInterval ?\r\n                        <RangePicker\r\n                            onChange={onDateRangeChange}\r\n                            defaultValue={[props.dateInterval.startDate, props.dateInterval.endDate]}\r\n                            value = {[props.dateInterval.startDate, props.dateInterval.endDate]}\r\n                            format='DD-MM-YYYY'\r\n                            style={{ marginLeft: 10 }}\r\n                        />\r\n                        :\r\n                        <DatePicker\r\n                            onChange={onDateChange}\r\n                            defaultValue={props.dateInterval.startDate}\r\n                            format='DD-MM-YYYY'\r\n                            style={{ marginLeft: 10 }}\r\n                        />\r\n                    }\r\n                </div>\r\n            </div>\r\n            <div className=\"col-12 col-md-4 col-lg-2 m-2 m-md-0\" >\r\n                <Checkbox className=\"ml-3\" onChange={onDateTypeChange}>Date interval</Checkbox>\r\n            </div>\r\n            <div className=\"col-12 col-md-12 col-lg-4\">\r\n                <Button\r\n                    type=\"primary\"\r\n                    shape=\"round\"\r\n                    icon={\r\n                        <div className=\"d-flex flex-wrap align-content-start\">\r\n                            <FileAddOutlined style={{ fontSize: '18px' }} />\r\n                            <span className=\"ml-1\" style={{ fontSize: '14px' }}>Add</span>\r\n                        </div>}\r\n                    style={{ marginLeft: 10 }}\r\n                    onClick={props.showDrawer}\r\n                />\r\n\r\n                <Button className=\"\"\r\n                    type=\"primary\"\r\n                    shape=\"round\"\r\n                    style={{ marginLeft: 10 }}\r\n                    onClick={props.showModal}\r\n                    icon={\r\n                        <div className=\"d-flex flex-wrap align-content-start\">\r\n                            <SettingOutlined style={{ fontSize: '18px' }} />\r\n                            <span className=\"ml-1\" style={{ fontSize: '14px' }}>Settings</span>\r\n                        </div>} \r\n                    />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ToDoHeader","import {connect} from 'react-redux'\r\nimport ToDoHeader, { OwnToDoHeaderPropsType } from './ToDoHeader'\r\nimport {actions} from './../redux/taskReducer'\r\nimport { AppStateType } from '../redux/store'\r\n// import { Action } from 'redux'\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    setIsInterval: (isInterval: boolean, date: {startDate: moment.Moment, endDate: moment.Moment}) => {\r\n        type: \"SN/TASK/SET_IS_INTERVAL\",\r\n        isInterval: boolean,\r\n        date: {startDate: moment.Moment, endDate: moment.Moment}\r\n    }\r\n}\r\n\r\nexport type ToDoHeaderPropsType = MapPropsType & MapDispatchPropsType & OwnToDoHeaderPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        dateInterval: state.task.dateInterval\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnToDoHeaderPropsType, AppStateType>(mapStateToProps, \r\n    {setIsInterval: actions.setIsInterval}) \r\n    (ToDoHeader)\r\n    \r\n\r\n","import React from 'react'\r\nimport { Modal } from 'antd'\r\n\r\nexport type OwmSettingsModalPropsType = {\r\n    isModalVisible: boolean,\r\n    handleOk: () => void,\r\n    handleCancel: () => void\r\n}\r\n\r\nconst SettingsModal = (props:OwmSettingsModalPropsType) => {\r\n    return (\r\n        <Modal title=\"Task display settings\" visible={props.isModalVisible} onOk={props.handleOk} onCancel={props.handleCancel}>\r\n            <p>Some contents...</p>\r\n            <p>Some contents...</p>\r\n            <p>Some contents...</p>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default SettingsModal","import React, { useState } from 'react'\r\nimport { Col, Row, Checkbox, Tooltip, Button, Spin } from 'antd'\r\nimport { CheckboxChangeEvent } from 'antd/lib/checkbox'\r\nimport { ListGroup } from 'react-bootstrap'\r\nimport { TaskType } from '../../../Types/types'\r\nimport { DeleteOutlined } from '@ant-design/icons'\r\nimport { TaskItemPropsType } from './TaskItemContainer'\r\n\r\nexport type OwnTaskItemPropsType = {\r\n    element: TaskType\r\n}\r\n\r\nconst TaskItem: React.FC<TaskItemPropsType> = (props) => {\r\n    type PropsElementType = typeof props.element.type\r\n    const [status, setStetus] = useState<PropsElementType>(props.element.type)\r\n    const [deleteingInProgess, setDeleteingInProgess] = useState(false)\r\n\r\n    const onStatusChange = (e: CheckboxChangeEvent) => {\r\n        // console.log(e.target.checked)\r\n        if (e.target.checked) {\r\n            setStetus('completed')\r\n        } else {\r\n            setStetus('active')\r\n        }\r\n    }\r\n\r\n    const deleteTask: (taskid: number) => void = (taskid) => {\r\n        // console.log(taskid)\r\n        setDeleteingInProgess(true)\r\n        props.deleteTask(taskid, props.dateInterval.startDate.format('YYYY-MM-DD'), props.dateInterval.endDate.format('YYYY-MM-DD'))\r\n    }\r\n\r\n    return (\r\n        <ListGroup.Item action className=\"py-1\">\r\n            <Row className=\"px-0 ml-0 ml-sm-5\">\r\n                <Col className=\"mx-2\">\r\n                    <Checkbox onChange={onStatusChange} />\r\n                </Col>\r\n                <Col className=\"mx-2\">\r\n                    {props.element.time.split(':', 2).join(':')}\r\n                </Col>\r\n                <Col className=\"mx-2\">\r\n                    <Tooltip key={props.element.id} placement=\"topLeft\" title={props.element.descriptions}>\r\n                        <span\r\n                            style={{ textDecoration: status === 'completed' ? 'line-through' : '' }}\r\n                            className=\"text-break\"\r\n                        >\r\n                            {props.element.name}\r\n                        </span>\r\n                    </Tooltip>\r\n                </Col>\r\n                <Col className=\"mr-auto ml-0 mr-sm-2 ml-sm-auto\">\r\n                    {!deleteingInProgess ? \r\n                    <Button className=\"\"\r\n                        type=\"primary\"\r\n                        shape=\"circle\"\r\n                        size=\"small\"\r\n                        style={{ marginLeft: 10 }}\r\n                        onClick={() => { deleteTask(props.element.id) }}\r\n                        icon={\r\n                            <div className=\"d-flex flex-wrap align-content-start\">\r\n                                <DeleteOutlined className=\"ml-1\" style={{ fontSize: '14px' }} />\r\n                            </div>\r\n                        }\r\n                    />\r\n                    :\r\n                    <Spin key=\"spin\" size=\"small\" />\r\n                    }\r\n                </Col>\r\n            </Row>\r\n\r\n        </ListGroup.Item>\r\n    )\r\n}\r\n\r\nexport default TaskItem\r\n","import {connect} from 'react-redux'\r\nimport TaskItem, { OwnTaskItemPropsType } from './TaskItem'\r\nimport {deleteTask, getTaskList} from './../../../redux/taskReducer'\r\nimport {AppStateType} from '../../../redux/store'\r\n\r\nexport type MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype DispatchPropsType = {\r\n    deleteTask: (taskid: number, startDate: string, endDate: string) => void\r\n    getTaskList: (startDate: string, endDate: string) => void\r\n}\r\n\r\nexport type TaskItemPropsType = MapPropsType & DispatchPropsType & OwnTaskItemPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        dateInterval: state.task.dateInterval,\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, DispatchPropsType, OwnTaskItemPropsType, AppStateType>(mapStateToProps, \r\n    {deleteTask, getTaskList}) \r\n    (TaskItem)","import { TaskType } from \"../Types/types\"\r\n\r\nexport const sortTaskArrayByParams = (field: 'date' | 'time') => {\r\n    if (field === 'date') {\r\n        return (a: TaskType, b: TaskType) => a['date'] > b['date'] ? 1 : -1\r\n    } else {\r\n        return (a: TaskType, b: TaskType) => a['time'] > b['time'] ? -1 : 1\r\n    }\r\n}","import React, { useEffect, useState } from 'react'\r\nimport { TaskType } from '../../Types/types'\r\nimport moment from 'moment'\r\nimport { TimeScalePropsType } from './TimeScaleContainer'\r\nimport { Divider, Spin, Tooltip, message } from 'antd'\r\nimport TaskItem from './TaskItem/TaskItemContainer'\r\nimport { sortTaskArrayByParams } from '../../utils/array-helpers'\r\n\r\nexport type OwnTaskTimeScaleType = {}\r\nconst TimeScale: React.FC<TimeScalePropsType> = (props) => {\r\n    type SelestedDatesType = typeof props.dateInterval\r\n    const [selestedDates, setSelectedDates] = useState<SelestedDatesType>({ startDate: moment(null), endDate: moment() })\r\n    useEffect(() => {\r\n        if (\r\n            props.dateInterval.startDate.format('YYYY-MM-DD') === selestedDates.startDate.format('YYYY-MM-DD') &&\r\n            props.dateInterval.endDate.format('YYYY-MM-DD') === selestedDates.endDate.format('YYYY-MM-DD')\r\n        ) { }\r\n        else {\r\n            if (props.dateInterval.startDate !== null && props.dateInterval.startDate !== null) {\r\n                props.getTaskList(\r\n                    props.dateInterval.startDate.format('YYYY-MM-DD'),\r\n                    props.dateInterval.endDate.format('YYYY-MM-DD')\r\n                )\r\n                setSelectedDates(props.dateInterval)\r\n            }\r\n        }\r\n    }, [props.dateInterval])\r\n\r\n    useEffect(() => {\r\n        if (props.errorMessage !== null) {\r\n            message.success(props.errorMessage)\r\n        }\r\n    }, [props.errorMessage])\r\n\r\n    if (props.taskList !== null) {\r\n        return (\r\n            <>\r\n                {getTimeScaleArrey(props.taskList)}\r\n            </>\r\n        )\r\n    } else {\r\n        return (\r\n            <Spin key=\"spin\" size=\"large\" />\r\n        )\r\n    }\r\n}\r\n\r\nexport default TimeScale\r\n\r\n\r\nconst getTimeScaleArrey = (taskList: Array<TaskType>): Array<React.ReactElement<string>> => {\r\n    let timeScaleArrey: Array<React.ReactElement<string>> = []\r\n    let tomorowTasks: Array<TaskType> = []\r\n\r\n    taskList.sort(sortTaskArrayByParams('time')).sort(sortTaskArrayByParams('date'))\r\n\r\n    const getHeadlineLabel = (task: TaskType) => {\r\n        return moment(task.date).format('DD MMMM')\r\n    }\r\n\r\n    let headlineDate: string | null = null\r\n\r\n    if (taskList !== null && taskList.length > 0) {\r\n        headlineDate = getHeadlineLabel(taskList[0])\r\n        timeScaleArrey.push(\r\n            <h3 key={headlineDate + 'title'}>{headlineDate}:</h3>\r\n        )\r\n    }\r\n\r\n    for (let index: number = 0; index < 24; index++) {\r\n        if (taskList.length > 0) {\r\n            timeScaleArrey.push(\r\n                <Divider key={index + 'to' + headlineDate} orientation=\"left\">\r\n                    {index <= 9 ? '0' : null}{index}:00\r\n                </Divider>\r\n            )\r\n        } else {\r\n            timeScaleArrey.push(<h3>no tasks</h3>)\r\n            break\r\n        }\r\n\r\n        if (taskList !== null) {\r\n            for (let i = 0; i < taskList.length; i++) {\r\n                const element: TaskType = taskList[i]\r\n                const timeVal = Number(element.time.split(':', 1))\r\n                const nextHour = index + 1\r\n                if (timeVal >= index && timeVal < nextHour) {\r\n                    if (getHeadlineLabel(element) === headlineDate) {\r\n                        timeScaleArrey.push(\r\n                            <Tooltip key={index + '-' + element.id} placement=\"topLeft\" title={element.descriptions}>\r\n                                <TaskItem element={element} />\r\n                            </Tooltip>\r\n                        )\r\n                    }\r\n                    else {\r\n                        tomorowTasks.push(element)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (tomorowTasks.length > 0) {\r\n        timeScaleArrey = timeScaleArrey.concat(getTimeScaleArrey(tomorowTasks))\r\n    }\r\n\r\n    return timeScaleArrey\r\n}","import {connect} from 'react-redux'\r\nimport TimeScale from './TimeScale'\r\nimport {getTaskList} from './../../redux/taskReducer'\r\nimport { AppStateType } from '../../redux/store'\r\nimport { OwnTaskTimeScaleType } from './TimeScale'\r\n\r\nexport type MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype DispatchPropsType = {\r\n    getTaskList: (startDate: string, endDate: string) => void\r\n}\r\n\r\nexport type TimeScalePropsType = MapPropsType & DispatchPropsType & OwnTaskTimeScaleType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        taskList: state.task.taskList,\r\n        taskSaveStatus: state.task.taskSaveStatus,\r\n        taskListIsFetching: state.task.taskListIsFetching,\r\n        dateInterval: state.task.dateInterval,\r\n        errorMessage: state.task.errorMessage\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, DispatchPropsType, OwnTaskTimeScaleType, AppStateType>(mapStateToProps, \r\n    {getTaskList}) \r\n    (TimeScale)\r\n\r\n\r\n","import React, { useState } from 'react'\r\nimport { Card } from 'antd'\r\nimport NewTaskForm from './NewTaskFormContainer'\r\nimport ToDoHeader from './ToDoHeaderContainer'\r\nimport SettingsModal from './Settings/SettingsModal'\r\nimport { ToDoListPropsType } from './ToDoListContainer'\r\nimport TimeScale from './TimeScale/TimeScaleContainer'\r\n\r\nexport type OwnToDoListPropsType = {}\r\n\r\nconst ToDoList: React.FC<ToDoListPropsType> = (props) => {\r\n    const [visible, setVisible] = useState(false)\r\n    const [isModalVisible, setIsModalVisible] = useState(false)\r\n\r\n    const showDrawer = (): void => {\r\n        setVisible(true)\r\n    }\r\n\r\n    const onClose = (): void => {\r\n        setVisible(false)\r\n    }\r\n\r\n    const showModal = () => {\r\n        setIsModalVisible(true)\r\n    }\r\n\r\n    const handleOk = () => {\r\n        setIsModalVisible(false)\r\n    }\r\n\r\n    const handleCancel = () => {\r\n        setIsModalVisible(false)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"site-card-border-less-wrapper\">\r\n                <Card\r\n                    title={<ToDoHeader\r\n                        showDrawer={showDrawer}\r\n                        showModal={showModal}\r\n                    />}\r\n                    bordered={false}\r\n                >\r\n\r\n                    <SettingsModal \r\n                        isModalVisible={isModalVisible} \r\n                        handleOk={handleOk} \r\n                        handleCancel={handleCancel}\r\n                    />\r\n\r\n                    <TimeScale />\r\n\r\n                </Card>\r\n\r\n                <NewTaskForm\r\n                    onClose={onClose}\r\n                    visible={visible}\r\n                    setVisible={setVisible}\r\n                />\r\n\r\n            </div>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ToDoList","import {connect} from 'react-redux'\r\nimport ToDoList, { OwnToDoListPropsType } from './ToDoList'\r\nimport {getTaskList} from './../redux/taskReducer'\r\nimport { AppStateType } from '../redux/store'\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    getTaskList: (start_date: string, end_date:string)=>void\r\n}\r\n\r\nexport type ToDoListPropsType = MapPropsType & MapDispatchPropsType & OwnToDoListPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        taskList: state.task.taskList,\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnToDoListPropsType, AppStateType>(mapStateToProps, \r\n    {getTaskList}) \r\n    (ToDoList)\r\n    \r\n\r\n","import {Action, applyMiddleware, combineReducers, createStore} from \"redux\"\r\nimport thunkMiddleware, {ThunkAction} from \"redux-thunk\"\r\nimport taskReducer from './taskReducer'\r\n\r\n\r\nlet rootReducer = combineReducers({\r\n    task: taskReducer\r\n})\r\n\r\ntype rootReducerType = typeof rootReducer\r\nexport type AppStateType = ReturnType<rootReducerType>\r\n\r\nexport type InferActionsTypes<T> = T extends { [keys: string]: (...args: any[]) => infer U } ? U : never\r\nexport type BaseThunkType<A extends Action = Action, R = Promise<void>> = ThunkAction<R, AppStateType, unknown, A>\r\n\r\nlet store = createStore(rootReducer, applyMiddleware(thunkMiddleware))\r\n\r\nexport default store","import React from 'react'\r\nimport './App.css'\r\nimport ToDoList from './Components/ToDoListContainer'\r\nimport 'antd/dist/antd.css'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport { Provider } from 'react-redux'\r\nimport store from './redux/store'\r\n\r\nconst App = () => {\r\n\r\n  return (\r\n    <Provider store={store}>\r\n      <div className='container-fluid' >\r\n        <ToDoList />\r\n      </div>\r\n    </Provider>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './App'\r\nimport reportWebVitals from './reportWebVitals'\r\n\r\nReactDOM.render(\r\n  // <React.StrictMode>\r\n    <App />\r\n  // </React.StrictMode>\r\n  ,\r\n  document.getElementById('root')\r\n)\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(// console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals()\r\n"],"sourceRoot":""}
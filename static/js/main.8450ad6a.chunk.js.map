{"version":3,"sources":["api/api.ts","Components/ToDo/NewTaskForm/NewTaskForm.tsx","api/taskApi.ts","redux/taskReducer.ts","Components/ToDo/NewTaskForm/NewTaskFormContainer.tsx","Components/ToDo/ToDoHeader/ToDoHeader.tsx","Components/ToDo/ToDoHeader/ToDoHeaderContainer.tsx","Components/ToDo/Settings/SettingsModal.tsx","Components/TimeScale/TaskItem/TaskItem.tsx","Components/TimeScale/TaskItem/TaskItemContainer.tsx","utils/array-helpers.ts","Components/TimeScale/TimeScale.tsx","Components/TimeScale/TimeScaleContainer.tsx","Components/ToDo/ToDoList.tsx","Components/ToDo/ToDoListContainer.tsx","api/authAPI.ts","redux/authReducer.ts","redux/appReducer.ts","api/taskListAPI.ts","redux/TaskListReducer.ts","redux/store.ts","Components/Header/MenuBrowser.tsx","Components/Header/MenuBrowserConainer.tsx","Components/Header/MenuMobile.tsx","Components/Header/MenuMobileContainer.tsx","Components/Header/Header.tsx","Components/Header/HeaderContainer.tsx","utils/Formik/CreateAntField.tsx","utils/Formik/ValidateFields.ts","Components/Login/LoginForm.tsx","Components/Login/Login.tsx","Components/Login/LoginContainer.tsx","Components/Orders/Orders.tsx","Components/Orders/OrdersContainer.tsx","Components/TasksTree/NewTaskTreeForm.tsx","Components/TasksTree/TasksTreeBrowser.tsx","Components/TasksTree/TasksTreeMobile.tsx","Components/TasksTree/TasksTreeContainer.tsx","Components/Register/RegisterForm.tsx","Components/Register/Register.tsx","Components/Register/RegisterContainer.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ResultCodesEnum","layout","labelCol","span","wrapperCol","tailLayout","offset","TextArea","Input","NewTaskForm","props","Form","useForm","form","useState","moment","selectedDate","setSelectedDate","taskSaveStatus","saveStatus","setSaveStatus","useEffect","message","success","onClose","onReset","error","errorMessage","resetFields","title","format","placement","closable","visible","width","name","onFinish","values","data","date","taskTime","taskName","user_id","userId","description","isBetween","dateInterval","startDate","endDate","undefined","createNewTask","Item","label","rules","required","initialValue","onChange","value","dateString","autoComplete","rows","type","htmlType","className","onClick","instance","axios","create","withCredentials","baseURL","taskAPI","post","then","response","status","catch","err","request","defaults","headers","common","localStorage","getItem","console","log","taskId","delete","initialState","taskList","taskListIsFetching","isInterval","actions","setTaskList","setTaskSaveStatus","setErrorMessage","setTaskListIsFetching","isFetchingValue","setIsInterval","getTaskList","dispatch","getState","a","start_date","end_date","taskReducer","state","action","Tasks","connect","task","auth","user","id","reload","RangePicker","DatePicker","ToDoHeader","dates","setDates","isSame","formatString","defaultValue","style","marginLeft","e","target","checked","shape","icon","FileAddOutlined","fontSize","showDrawer","showModal","SettingOutlined","settingasExample","ToDo","singlDateView","timeScale","isCompletedVisible","intervalDateView","SettingsModal","isModalVisible","onOk","handleOk","onCancel","handleCancel","TaskItem","element","setStetus","deleteingInProgess","setDeleteingInProgess","ListGroup","time","split","join","descriptions","textDecoration","size","taskid","deleteTask","DeleteOutlined","sortTaskArrayByParams","field","b","TimeScale","selestedDates","setSelectedDates","getTimeScaleArrey","timeScaleArrey","tomorowTasks","sort","getHeadlineLabel","headlineDate","length","push","index","orientation","i","timeVal","Number","concat","ToDoList","setVisible","setIsModalVisible","bordered","authAPI","get","remember_token","setItem","removeItem","creds","token","isAuth","setAuthUserData","logout","login","authReducer","initialized","location","appReducer","taskListAPI","isTaskListLoaded","taskListReducer","rootReducer","combineReducers","app","store","createStore","applyMiddleware","thunkMiddleware","SubMenu","Menu","MenuBrowser","history","useHistory","mode","theme","menuData","map","item","childs","children","to","replace","appLocation","MenuMobile","useLocation","show","setShow","initData","forEach","dataItem","pathname","getSelectedMenuItem","selectedMenuItem","setSelectedMenuItem","subMenu","cItem","menuEl","height","document","documentElement","clientHeight","loadingEl","display","justifyContent","leftContent","src","alt","onLeftClick","preventDefault","LogoutOutlined","inline","Header","isMobile","disabled","FormItem","Option","Select","CheckboxItem","CheckboxMobile","CreateAntField","AntComponent","hasFeedback","selectOptions","submitCount","touched","submitted","hasError","errors","submittedError","touchedError","onInputChange","setFieldValue","setSeconds","Array","isArray","onBlur","setFieldTouched","help","validateStatus","allowClear","AntSelect","Picker","AntInput","InputItem","AntInputPassword","Password","AntTimePicker","DatePickerMobile","TimePicker","AntCheckbox","Checkbox","AntTextArea","TextareaItem","MobileComponent","setValue","key","locale","enUs","autoHeight","cols","validateRequired","validateEmail","test","LoginForm","onSubmit","handleSubmit","component","validate","initialValues","Login","formProps","remember","render","block","Orders","NewTaskTreeForm","taskTypes","taskType","setTaskType","task_type","TasksTreeBrowser","formPropsCopy","time_to_complete","createNewTaskList","List","TasksTreeMobile","setState","onOpenChange","args","minHeight","enableDragHandle","contentStyle","color","textAlign","paddingTop","sidebar","open","getTaskTreeItems","backgroundColor","autoClose","right","text","onPress","left","onOpen","arrow","RegisterForm","Register","register","credsToLogin","email","password","AppContainer","compose","withRouter","initializeApp","promise","resultCode","Promise","all","addLocation","instanseCreds","parseQueryString","exact","path","MainApp","params","search","substr","pair","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.8450ad6a.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nexport const instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://crmapiserver.h1n.ru/api/',\r\n    // baseURL: 'https://81.90.181.175/api/',\r\n    // headers:     {\r\n    //     'X-Auth-Token': localStorage.getItem('remember_token')\r\n    // }\r\n})\r\n\r\nexport enum ResultCodesEnum {\r\n    Success = 0,\r\n    Error = 1\r\n}\r\n\r\nexport type APIResponseType<D = {}, RC = ResultCodesEnum> = {\r\n    data: D\r\n    messages: Array<string>\r\n    resultCode: RC\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport moment from 'moment'\r\nimport { Form, Input, Button, TimePicker, DatePicker, Drawer, Spin, message } from 'antd'\r\nimport { NewTaskFormPropsType } from './NewTaskFormContainer'\r\nimport './../style.css'\r\n\r\nconst layout = {\r\n    labelCol: { span: 8 },\r\n    wrapperCol: { span: 16 },\r\n}\r\nconst tailLayout = {\r\n    wrapperCol: { offset: 8, span: 16 },\r\n}\r\n\r\nexport type NewTaskFormOwnPropsType = {\r\n    onClose: () => void\r\n    visible: boolean,\r\n    setVisible: (visible: boolean) => void\r\n}\r\n\r\nconst { TextArea } = Input\r\n\r\nconst timeFormat: string = 'HH:mm'\r\n\r\nconst NewTaskForm: React.FC<NewTaskFormPropsType> = (props) => {\r\n    const [form] = Form.useForm()\r\n    const [selectedDate, setSelectedDate] = useState<moment.Moment>(moment())\r\n    const [saveStatus, setSaveStatus] = useState<string>(props.taskSaveStatus)\r\n\r\n    useEffect(() => {\r\n        switch (props.taskSaveStatus) {\r\n            case 'inProgress':\r\n                setSaveStatus(props.taskSaveStatus)\r\n                break\r\n            case 'success':\r\n                message.success('The task was successfully created')\r\n                props.onClose()\r\n                setSaveStatus('')\r\n                onReset()\r\n                break\r\n            case 'error':\r\n                message.error('Error: ' + props.errorMessage)\r\n                setSaveStatus(props.taskSaveStatus)\r\n                break\r\n\r\n            default:\r\n                break\r\n        }\r\n    }, [props.taskSaveStatus])\r\n\r\n    type OnFinishType = {\r\n        taskName: string,\r\n        date: moment.Moment,\r\n        taskTime: moment.Moment,\r\n        description?: string\r\n    }\r\n    const onFinish = (values: OnFinishType) => {\r\n        const data = {\r\n            date: values.date.format('YYYY-MM-DD'),\r\n            taskTime: values.taskTime.format('HH:mm'),\r\n            taskName: values.taskName,\r\n            user_id: props.userId,\r\n            description: values.description\r\n        }\r\n\r\n        if (!moment(selectedDate.format('YYYY-MM-DD')).isBetween(\r\n            props.dateInterval.startDate.format('YYYY-MM-DD'),\r\n            props.dateInterval.endDate.format('YYYY-MM-DD'),\r\n            undefined, '[]'\r\n        )) {\r\n            props.createNewTask(data, false)\r\n        } else {\r\n            props.createNewTask(data, true)\r\n        }\r\n    }\r\n\r\n    const onReset = () => {\r\n        form.resetFields()\r\n    }\r\n\r\n    const onDateChange = (value: moment.Moment | null, dateString: string): void => {\r\n        if (value !== null) {\r\n            setSelectedDate(value)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Drawer\r\n            title={\"Create New Task for \" + selectedDate.format('DD MMM YYYY')}\r\n            placement=\"right\"\r\n            closable={true}\r\n            onClose={props.onClose}\r\n            visible={props.visible}\r\n            width=\"90%\"\r\n        >\r\n            <Form\r\n                {...layout}\r\n                form={form}\r\n                name=\"control-hooks\"\r\n                onFinish={onFinish}\r\n            >\r\n                <Form.Item\r\n                    label=\"Task name\"\r\n                    name=\"taskName\"\r\n                    rules={[{ required: true, message: 'Please input task name!' }]}\r\n                >\r\n                    <Input />\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    label=\"Task date\"\r\n                    name=\"date\"\r\n                    initialValue={selectedDate}\r\n                    rules={[{ required: true, message: 'Please input task date!' }]}\r\n                >\r\n                    <DatePicker\r\n                        onChange={onDateChange}\r\n                        format='DD-MM-YYYY'\r\n                        autoComplete=\"off\"\r\n                    />\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    label=\"Task time\"\r\n                    name=\"taskTime\"\r\n                    rules={[{ required: true, message: 'Please input task time!' }]}\r\n                >\r\n                    <TimePicker\r\n                        format={timeFormat}\r\n                    />\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    label=\"Description\"\r\n                    name=\"description\"\r\n                >\r\n                    <TextArea rows={2} />\r\n                </Form.Item>\r\n\r\n                <Form.Item {...tailLayout}>\r\n                    {saveStatus === 'inProgress' ?\r\n                        <Spin></Spin>\r\n                        :\r\n                        <>\r\n                            <Button type=\"primary\" htmlType=\"submit\">\r\n                                Create\r\n                            </Button>\r\n                            <Button className=\"ml-3\" type=\"primary\" onClick={onReset}>\r\n                                Reset\r\n                            </Button>\r\n                        </>\r\n                    }\r\n                </Form.Item>\r\n            </Form>\r\n\r\n        </Drawer>\r\n    )\r\n}\r\n\r\n\r\nexport default NewTaskForm","import { NewTaskDataType, TaskType } from '../Types/types'\r\nimport {instance} from './api'\r\n\r\nexport type TaskListType = {\r\n    Tasks: Array<TaskType>\r\n}\r\n\r\nexport const taskAPI = {\r\n    createNewTask(values: NewTaskDataType) {\r\n        return instance.post<TaskListType>(`tasks`, values)\r\n        .then(response => {\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                return err.response\r\n            } else if (err.request) {\r\n                //console.log('request', err.request)\r\n            } else {\r\n                //console.log('anything else: ', err)\r\n            }\r\n            return null\r\n        })\r\n    },\r\n\r\n    getTaskList(values: getTaskListValuesType) {\r\n        instance.defaults.headers.common['X-Auth-Token'] = localStorage.getItem('remember_token')\r\n        // .headers = {\r\n        //     'X-Auth-Token': localStorage.getItem('remember_token')\r\n        // }\r\n        return instance.post<TaskListType>(`tasks/part`, values)\r\n        .then(response => {\r\n            console.log(response)\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                console.log('request', err.request)\r\n                return err.response\r\n            } else if (err.request) {\r\n                console.log('request', err.request)\r\n            } else {\r\n                console.log('anything else: ', err)\r\n            }\r\n            return null\r\n        })\r\n    },\r\n\r\n    deleteTask(taskId: number) {\r\n        return instance.delete<TaskListType>(`tasks/${taskId}`).then(response => {\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                return err.response\r\n            } else if (err.request) {\r\n                //console.log('request', err.request)\r\n            } else {\r\n                //console.log('anything else: ', err)\r\n            }\r\n            return null\r\n        })\r\n    }\r\n}\r\n\r\nexport type getTaskListValuesType = {\r\n    start_date: string, \r\n    end_date: string\r\n}","import { Dispatch } from 'redux'\r\nimport { taskAPI, TaskListType } from '../api/taskApi'\r\nimport { NewTaskDataType, TaskType } from '../Types/types'\r\nimport {BaseThunkType, InferActionsTypes} from './store'\r\nimport moment from 'moment'\r\n\r\nexport type InitialStateType = {\r\n    taskList: null | Array<TaskType>,\r\n    taskListIsFetching: boolean,\r\n    taskSaveStatus: 'no' | 'inProgress' | 'success' | 'error'\r\n    errorMessage: null | string,\r\n    isInterval: boolean,\r\n    dateInterval: {\r\n        startDate: moment.Moment,\r\n        endDate: moment.Moment\r\n    }\r\n}\r\n\r\nlet initialState:InitialStateType = {\r\n    taskList: null,\r\n    taskListIsFetching: false,\r\n    taskSaveStatus: 'no',\r\n    errorMessage: null,\r\n    isInterval: false,\r\n    dateInterval: {\r\n        startDate: moment(),\r\n        endDate: moment()\r\n    }\r\n}\r\n\r\nconst taskReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n    \r\n    switch (action.type) {\r\n        case 'SN/TASK/SET_TASK_LIST':\r\n            return {...state, taskList: action.taskList.Tasks}\r\n\r\n        case 'SN/TASK/SET_TASK_SAVE_STATUS':\r\n            return {...state, taskSaveStatus: action.taskSaveStatus}\r\n\r\n        case 'SN/TASK/SET_ERROR_MESSAGE':\r\n            return {...state, errorMessage: action.message}\r\n\r\n        case 'SN/TASK/SET_TASK_LIST_IS_FETCHING':\r\n            return {...state, taskListIsFetching: action.isFetchingValue}\r\n\r\n        case 'SN/TASK/SET_IS_INTERVAL':\r\n            const dateInterval = {\r\n                startDate: action.date.startDate,\r\n                endDate: action.date.endDate\r\n            }\r\n            return {...state, isInterval: action.isInterval, dateInterval }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    setTaskList: (taskList: TaskListType) => ({ type: 'SN/TASK/SET_TASK_LIST', taskList } as const),\r\n    setTaskSaveStatus: (taskSaveStatus: 'no' | 'inProgress' | 'success' | 'error') => ({ type: 'SN/TASK/SET_TASK_SAVE_STATUS', taskSaveStatus } as const),\r\n    setErrorMessage: (message: string | null) => ({type: 'SN/TASK/SET_ERROR_MESSAGE', message} as const),\r\n    setTaskListIsFetching: (isFetchingValue: boolean) => ({type: 'SN/TASK/SET_TASK_LIST_IS_FETCHING', isFetchingValue} as const),\r\n    setIsInterval: (isInterval: boolean, date: {startDate: moment.Moment, endDate: moment.Moment}) => ({type: 'SN/TASK/SET_IS_INTERVAL', isInterval, date} as const)\r\n}\r\n\r\nexport const createNewTask = (values: NewTaskDataType, reload:boolean = true): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        dispatch(actions.setTaskSaveStatus('inProgress'))\r\n\r\n        let response = await taskAPI.createNewTask(values)\r\n\r\n        if (response && response.status && response.status === 200) {\r\n            if (reload) {\r\n                const state = getState()\r\n                const startDate = state.task.dateInterval.startDate.format('YYYY-MM-DD')\r\n                const endDate = state.task.dateInterval.endDate.format('YYYY-MM-DD')\r\n                dispatch(getTaskList(startDate, endDate))\r\n            }\r\n            dispatch(actions.setTaskSaveStatus('success'))\r\n            dispatch(actions.setTaskSaveStatus('no'))\r\n        } else {\r\n            if (response && response.data) {\r\n                dispatch(actions.setErrorMessage(response.data.message))\r\n                dispatch(actions.setTaskSaveStatus('error'))\r\n                dispatch(actions.setTaskSaveStatus('no'))\r\n                dispatch( actions.setErrorMessage(null) )\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport const getTaskList = (startDate: string, endDate:string): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        dispatch(actions.setTaskListIsFetching(true))\r\n\r\n        const values = {start_date: startDate, end_date: endDate}\r\n        let response = await taskAPI.getTaskList(values)\r\n\r\n        if (response !== undefined && response !== null) {\r\n            dispatch(actions.setTaskList(response.data))\r\n        } else {\r\n            // add error message\r\n        }\r\n        dispatch(actions.setTaskListIsFetching(false))\r\n    }\r\n}\r\n\r\nexport const deleteTask = (taskid: number, startDate: string, endDate:string): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        let response = await taskAPI.deleteTask(taskid)\r\n\r\n        if (response !== null) {\r\n            dispatch(actions.setErrorMessage('Task deletion was successful'))\r\n            dispatch(getTaskList(startDate, endDate))\r\n            dispatch( actions.setErrorMessage(null) )\r\n        }\r\n    }\r\n}\r\n\r\nexport default taskReducer\r\n\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsTypes>\r\nexport type DispatchType = Dispatch<ActionsTypes>\r\n","import {connect} from 'react-redux'\r\nimport NewTaskForm, { NewTaskFormOwnPropsType } from './NewTaskForm'\r\nimport {createNewTask} from '../../../redux/taskReducer'\r\nimport { AppStateType } from '../../../redux/store'\r\nimport {NewTaskDataType} from '../../../Types/types'\r\n\r\nexport type MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype DispatchPropsType = {\r\n    createNewTask: (values:NewTaskDataType, reload:boolean)=> void\r\n}\r\n\r\nexport type NewTaskFormPropsType = MapPropsType & DispatchPropsType & NewTaskFormOwnPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        taskList: state.task.taskList,\r\n        taskSaveStatus: state.task.taskSaveStatus,\r\n        errorMessage: state.task.errorMessage,\r\n        dateInterval: state.task.dateInterval,\r\n        userId: state.auth.user?.id\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, DispatchPropsType, NewTaskFormOwnPropsType, AppStateType>(mapStateToProps, \r\n    {createNewTask}) \r\n    (NewTaskForm)\r\n\r\n\r\n","import React, { useState, useEffect } from 'react'\r\nimport { DatePicker, Checkbox, Button } from 'antd'\r\nimport { FileAddOutlined, SettingOutlined } from '@ant-design/icons'\r\nimport { CheckboxChangeEvent } from 'antd/lib/checkbox'\r\nimport {RangeValue} from '../../../Types/types'\r\nimport { ToDoHeaderPropsType } from './ToDoHeaderContainer'\r\nimport moment from 'moment'\r\n\r\nconst { RangePicker } = DatePicker\r\n\r\nexport type OwnToDoHeaderPropsType = {\r\n    showDrawer: () => void,\r\n    showModal: () => void,\r\n}\r\n\r\nconst ToDoHeader: React.FC<ToDoHeaderPropsType> = (props) => {\r\n    const [isInterval, setIsInterval] = useState(false)\r\n    const [dates, setDates] = useState<{startDate: moment.Moment, endDate: moment.Moment}>({startDate: moment(), endDate: moment()})\r\n\r\n    useEffect(() => {\r\n        if ( \r\n            !props.dateInterval.startDate.isSame(dates.startDate.format('YYYY-MM-DD'), \"day\" ) ||\r\n            !props.dateInterval.endDate.isSame(dates.endDate.format('YYYY-MM-DD'), \"day\" )\r\n        ) {\r\n            props.setIsInterval(isInterval, dates)\r\n        }\r\n        \r\n    }, [isInterval, dates, props])\r\n\r\n\r\n    const onDateTypeChange = (e: CheckboxChangeEvent) => {\r\n        if (!e.target.checked) {\r\n            setDates({\r\n                startDate: dates.startDate,\r\n                endDate: dates.startDate\r\n            })\r\n        }\r\n        setIsInterval(e.target.checked)\r\n    }\r\n\r\n    const onDateRangeChange = (values: RangeValue<moment.Moment>, formatString: [string, string]): void => {\r\n        if (values !== null && values[0] !== null && values[1] !== null ) {\r\n            setDates({\r\n                startDate: values[0],\r\n                endDate: values[1],\r\n            })\r\n        }\r\n        \r\n    }\r\n\r\n    const onDateChange = (value: moment.Moment | null, dateString: string):void => {\r\n        if (value !== null) {\r\n            setDates({\r\n                startDate: value,\r\n                endDate: value,\r\n            })\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"row\" >\r\n            <div className=\"col-12 col-md-8 col-lg-6\">\r\n                <div className=\"d-none d-sm-inline\">\r\n                    <label >Select {isInterval ? \"date interval\" : \"date\"}:</label>\r\n                </div>\r\n\r\n                <div className=\"d-inline\">\r\n                    {isInterval ?\r\n                        <RangePicker\r\n                            onChange={onDateRangeChange}\r\n                            defaultValue={[props.dateInterval.startDate, props.dateInterval.endDate]}\r\n                            value = {[props.dateInterval.startDate, props.dateInterval.endDate]}\r\n                            format='DD-MM-YYYY'\r\n                            style={{ marginLeft: 10 }}\r\n                        />\r\n                        :\r\n                        <DatePicker\r\n                            onChange={onDateChange}\r\n                            defaultValue={props.dateInterval.startDate}\r\n                            format='DD-MM-YYYY'\r\n                            style={{ marginLeft: 10 }}\r\n                        />\r\n                    }\r\n                </div>\r\n            </div>\r\n            <div className=\"col-12 col-md-4 col-lg-2 m-2 m-md-0\" >\r\n                <Checkbox className=\"ml-3\" onChange={onDateTypeChange}>Date interval</Checkbox>\r\n            </div>\r\n            <div className=\"col-12 col-md-12 col-lg-4\">\r\n                <Button\r\n                    type=\"primary\"\r\n                    shape=\"round\"\r\n                    icon={\r\n                        <div className=\"d-flex flex-wrap align-content-start\">\r\n                            <FileAddOutlined style={{ fontSize: '18px' }} />\r\n                            <span className=\"ml-1\" style={{ fontSize: '14px' }}>Add</span>\r\n                        </div>}\r\n                    style={{ marginLeft: 10 }}\r\n                    onClick={props.showDrawer}\r\n                />\r\n\r\n                <Button className=\"\"\r\n                    type=\"primary\"\r\n                    shape=\"round\"\r\n                    style={{ marginLeft: 10 }}\r\n                    onClick={props.showModal}\r\n                    icon={\r\n                        <div className=\"d-flex flex-wrap align-content-start\">\r\n                            <SettingOutlined style={{ fontSize: '18px' }} />\r\n                            <span className=\"ml-1\" style={{ fontSize: '14px' }}>Settings</span>\r\n                        </div>} \r\n                    />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ToDoHeader","import {connect} from 'react-redux'\r\nimport ToDoHeader, { OwnToDoHeaderPropsType } from './ToDoHeader'\r\nimport {actions} from '../../../redux/taskReducer'\r\nimport { AppStateType } from '../../../redux/store'\r\n// import { Action } from 'redux'\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    setIsInterval: (isInterval: boolean, date: {startDate: moment.Moment, endDate: moment.Moment}) => {\r\n        type: \"SN/TASK/SET_IS_INTERVAL\",\r\n        isInterval: boolean,\r\n        date: {startDate: moment.Moment, endDate: moment.Moment}\r\n    }\r\n}\r\n\r\nexport type ToDoHeaderPropsType = MapPropsType & MapDispatchPropsType & OwnToDoHeaderPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        dateInterval: state.task.dateInterval\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnToDoHeaderPropsType, AppStateType>(mapStateToProps, \r\n    {setIsInterval: actions.setIsInterval}) \r\n    (ToDoHeader)\r\n    \r\n\r\n","import React from 'react'\r\nimport { Modal } from 'antd'\r\n\r\nexport type OwmSettingsModalPropsType = {\r\n    isModalVisible: boolean,\r\n    handleOk: () => void,\r\n    handleCancel: () => void\r\n}\r\n\r\nconst settingasExample = {\r\n    ToDo: {\r\n        singlDateView: {\r\n            timeScale: true,\r\n            isCompletedVisible: true\r\n        },\r\n        intervalDateView: {\r\n            timeScale: false,\r\n            isCompletedVisible: true\r\n        }\r\n    }\r\n}\r\n\r\nconst SettingsModal = (props:OwmSettingsModalPropsType) => {\r\n    console.log(settingasExample)\r\n    return (\r\n        <Modal title=\"Task display settings\" visible={props.isModalVisible} onOk={props.handleOk} onCancel={props.handleCancel}>\r\n            <p>Some contents...</p>\r\n            <p>Some contents...</p>\r\n            <p>Some contents...</p>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default SettingsModal","import React, { useState } from 'react'\r\nimport { Col, Row, Checkbox, Tooltip, Button, Spin } from 'antd'\r\nimport { CheckboxChangeEvent } from 'antd/lib/checkbox'\r\nimport { ListGroup } from 'react-bootstrap'\r\nimport { TaskType } from '../../../Types/types'\r\nimport { DeleteOutlined } from '@ant-design/icons'\r\nimport { TaskItemPropsType } from './TaskItemContainer'\r\n\r\nexport type OwnTaskItemPropsType = {\r\n    element: TaskType\r\n}\r\n\r\nconst TaskItem: React.FC<TaskItemPropsType> = (props) => {\r\n    type PropsElementType = typeof props.element.type\r\n    const [status, setStetus] = useState<PropsElementType>(props.element.type)\r\n    const [deleteingInProgess, setDeleteingInProgess] = useState(false)\r\n\r\n    const onStatusChange = (e: CheckboxChangeEvent) => {\r\n        if (e.target.checked) {\r\n            setStetus('completed')\r\n        } else {\r\n            setStetus('active')\r\n        }\r\n    }\r\n\r\n    const deleteTask: (taskid: number) => void = (taskid) => {\r\n        setDeleteingInProgess(true)\r\n        props.deleteTask(taskid, props.dateInterval.startDate.format('YYYY-MM-DD'), props.dateInterval.endDate.format('YYYY-MM-DD'))\r\n    }\r\n\r\n    return (\r\n        <ListGroup.Item action className=\"py-1\">\r\n            <Row className=\"px-0 ml-0 ml-sm-5\">\r\n                <Col className=\"mx-2\">\r\n                    <Checkbox onChange={onStatusChange} />\r\n                </Col>\r\n                <Col className=\"mx-2\">\r\n                    {props.element.time.split(':', 2).join(':')}\r\n                </Col>\r\n                <Col className=\"mx-2\">\r\n                    <Tooltip key={props.element.id} placement=\"topLeft\" title={props.element.descriptions}>\r\n                        <span\r\n                            style={{ textDecoration: status === 'completed' ? 'line-through' : '' }}\r\n                            className=\"text-break\"\r\n                        >\r\n                            {props.element.name}\r\n                        </span>\r\n                    </Tooltip>\r\n                </Col>\r\n                <Col className=\"mr-auto ml-0 mr-sm-2 ml-sm-auto\">\r\n                    {!deleteingInProgess ? \r\n                    <Button className=\"\"\r\n                        type=\"primary\"\r\n                        shape=\"circle\"\r\n                        size=\"small\"\r\n                        style={{ marginLeft: 10 }}\r\n                        onClick={() => { deleteTask(props.element.id) }}\r\n                        icon={\r\n                            <div className=\"d-flex flex-wrap align-content-start\">\r\n                                <DeleteOutlined className=\"ml-1\" style={{ fontSize: '14px' }} />\r\n                            </div>\r\n                        }\r\n                    />\r\n                    :\r\n                    <Spin key=\"spin\" size=\"small\" />\r\n                    }\r\n                </Col>\r\n            </Row>\r\n\r\n        </ListGroup.Item>\r\n    )\r\n}\r\n\r\nexport default TaskItem\r\n","import {connect} from 'react-redux'\r\nimport TaskItem, { OwnTaskItemPropsType } from './TaskItem'\r\nimport {deleteTask, getTaskList} from './../../../redux/taskReducer'\r\nimport {AppStateType} from '../../../redux/store'\r\n\r\nexport type MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype DispatchPropsType = {\r\n    deleteTask: (taskid: number, startDate: string, endDate: string) => void\r\n    getTaskList: (startDate: string, endDate: string) => void\r\n}\r\n\r\nexport type TaskItemPropsType = MapPropsType & DispatchPropsType & OwnTaskItemPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        dateInterval: state.task.dateInterval,\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, DispatchPropsType, OwnTaskItemPropsType, AppStateType>(mapStateToProps, \r\n    {deleteTask, getTaskList}) \r\n    (TaskItem)","import { TaskType } from \"../Types/types\"\r\n\r\nexport const sortTaskArrayByParams = (field: 'date' | 'time') => {\r\n    if (field === 'date') {\r\n        return (a: TaskType, b: TaskType) => a['date'] > b['date'] ? 1 : -1\r\n    } else {\r\n        return (a: TaskType, b: TaskType) => a['time'] > b['time'] ? -1 : 1\r\n    }\r\n}","import React, { useEffect, useState } from 'react'\r\nimport { TaskType } from '../../Types/types'\r\nimport moment from 'moment'\r\nimport { TimeScalePropsType } from './TimeScaleContainer'\r\nimport { Divider, Spin, Tooltip, message } from 'antd'\r\nimport TaskItem from './TaskItem/TaskItemContainer'\r\nimport { sortTaskArrayByParams } from '../../utils/array-helpers'\r\n\r\nexport type OwnTaskTimeScaleType = {}\r\nconst TimeScale: React.FC<TimeScalePropsType> = (props) => {\r\n    type SelestedDatesType = typeof props.dateInterval\r\n    const [selestedDates, setSelectedDates] = useState<SelestedDatesType>({ startDate: moment(null), endDate: moment() })\r\n    useEffect(() => {\r\n        if (\r\n            props.dateInterval.startDate.isSame(selestedDates.startDate.format('YYYY-MM-DD'), \"day\" ) &&\r\n            props.dateInterval.endDate.isSame(selestedDates.endDate.format('YYYY-MM-DD'), \"day\" )\r\n        ) { }\r\n        else {\r\n            if (props.dateInterval.startDate !== null) {\r\n                props.getTaskList(\r\n                    props.dateInterval.startDate.format('YYYY-MM-DD'),\r\n                    props.dateInterval.endDate.format('YYYY-MM-DD')\r\n                )\r\n                setSelectedDates(props.dateInterval)\r\n            }\r\n        }\r\n    }, [props.dateInterval])\r\n\r\n    useEffect(() => {\r\n        if (props.errorMessage !== null) {\r\n            message.success(props.errorMessage)\r\n        }\r\n    }, [props.errorMessage])\r\n\r\n    if (props.taskList !== undefined) {\r\n        if (props.taskList !== null) {\r\n            return (\r\n                <>\r\n                    {getTimeScaleArrey(props.taskList)}\r\n                </>\r\n            )\r\n        } else {\r\n            return (\r\n                <Spin key=\"spin\" size=\"large\" />\r\n            )\r\n        }\r\n    } else {\r\n        return <div>Authorization required to get a list of tasks</div>\r\n    }\r\n    \r\n}\r\n\r\nexport default TimeScale\r\n\r\n\r\nconst getTimeScaleArrey = (taskList: Array<TaskType>): Array<React.ReactElement<string>> => {\r\n    let timeScaleArrey: Array<React.ReactElement<string>> = []\r\n    let tomorowTasks: Array<TaskType> = []\r\n\r\n    taskList.sort(sortTaskArrayByParams('time')).sort(sortTaskArrayByParams('date'))\r\n\r\n    const getHeadlineLabel = (task: TaskType) => {\r\n        return moment(task.date).format('DD MMMM')\r\n    }\r\n\r\n    let headlineDate: string | null = null\r\n\r\n    if (taskList !== null && taskList.length > 0) {\r\n        headlineDate = getHeadlineLabel(taskList[0])\r\n        timeScaleArrey.push(\r\n            <h3 key={headlineDate + 'title'}>{headlineDate}:</h3>\r\n        )\r\n    }\r\n\r\n    for (let index: number = 0; index < 24; index++) {\r\n        if (taskList.length > 0) {\r\n            timeScaleArrey.push(\r\n                <Divider key={index + 'to' + headlineDate} orientation=\"left\">\r\n                    {index <= 9 ? '0' : null}{index}:00\r\n                </Divider>\r\n            )\r\n        } else {\r\n            timeScaleArrey.push(<h3 key=\"noTasks\">no tasks</h3>)\r\n            break\r\n        }\r\n\r\n        if (taskList !== null) {\r\n            for (let i = 0; i < taskList.length; i++) {\r\n                const element: TaskType = taskList[i]\r\n                const timeVal = Number(element.time.split(':', 1))\r\n                const nextHour = index + 1\r\n                if (timeVal >= index && timeVal < nextHour) {\r\n                    if (getHeadlineLabel(element) === headlineDate) {\r\n                        timeScaleArrey.push(\r\n                            <Tooltip key={index + '-' + element.id} placement=\"topLeft\" title={element.descriptions}>\r\n                                <TaskItem element={element} />\r\n                            </Tooltip>\r\n                        )\r\n                    }\r\n                    else {\r\n                        tomorowTasks.push(element)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (tomorowTasks.length > 0) {\r\n        timeScaleArrey = timeScaleArrey.concat(getTimeScaleArrey(tomorowTasks))\r\n    }\r\n\r\n    return timeScaleArrey\r\n}","import {connect} from 'react-redux'\r\nimport TimeScale from './TimeScale'\r\nimport {getTaskList} from './../../redux/taskReducer'\r\nimport { AppStateType } from '../../redux/store'\r\nimport { OwnTaskTimeScaleType } from './TimeScale'\r\n\r\nexport type MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype DispatchPropsType = {\r\n    getTaskList: (startDate: string, endDate: string) => void\r\n}\r\n\r\nexport type TimeScalePropsType = MapPropsType & DispatchPropsType & OwnTaskTimeScaleType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        taskList: state.task.taskList,\r\n        taskSaveStatus: state.task.taskSaveStatus,\r\n        taskListIsFetching: state.task.taskListIsFetching,\r\n        dateInterval: state.task.dateInterval,\r\n        errorMessage: state.task.errorMessage\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, DispatchPropsType, OwnTaskTimeScaleType, AppStateType>(mapStateToProps, \r\n    {getTaskList}) \r\n    (TimeScale)\r\n\r\n\r\n","import React, { useState } from 'react'\r\nimport { Card } from 'antd'\r\nimport NewTaskForm from './NewTaskForm/NewTaskFormContainer'\r\nimport ToDoHeader from './ToDoHeader/ToDoHeaderContainer'\r\nimport SettingsModal from './Settings/SettingsModal'\r\nimport { ToDoListPropsType } from './ToDoListContainer'\r\nimport TimeScale from '../TimeScale/TimeScaleContainer'\r\n\r\nexport type OwnToDoListPropsType = {}\r\n\r\nconst ToDoList: React.FC<ToDoListPropsType> = (props) => {\r\n    const [visible, setVisible] = useState(false)\r\n    const [isModalVisible, setIsModalVisible] = useState(false)\r\n\r\n    const showDrawer = (): void => {\r\n        setVisible(true)\r\n    }\r\n\r\n    const onClose = (): void => {\r\n        setVisible(false)\r\n    }\r\n\r\n    const showModal = () => {\r\n        setIsModalVisible(true)\r\n    }\r\n\r\n    const handleOk = () => {\r\n        setIsModalVisible(false)\r\n    }\r\n\r\n    const handleCancel = () => {\r\n        setIsModalVisible(false)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"site-card-border-less-wrapper\">\r\n                <Card\r\n                    title={<ToDoHeader\r\n                        showDrawer={showDrawer}\r\n                        showModal={showModal}\r\n                    />}\r\n                    bordered={false}\r\n                >\r\n\r\n                    <SettingsModal \r\n                        isModalVisible={isModalVisible} \r\n                        handleOk={handleOk} \r\n                        handleCancel={handleCancel}\r\n                    />\r\n\r\n                    <TimeScale />\r\n\r\n                </Card>\r\n\r\n                <NewTaskForm\r\n                    onClose={onClose}\r\n                    visible={visible}\r\n                    setVisible={setVisible}\r\n                />\r\n\r\n            </div>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ToDoList","import {connect} from 'react-redux'\r\nimport ToDoList, { OwnToDoListPropsType } from './ToDoList'\r\nimport {getTaskList} from '../../redux/taskReducer'\r\nimport { AppStateType } from '../../redux/store'\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    getTaskList: (start_date: string, end_date:string)=>void\r\n}\r\n\r\nexport type ToDoListPropsType = MapPropsType & MapDispatchPropsType & OwnToDoListPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        taskList: state.task.taskList,\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnToDoListPropsType, AppStateType>(mapStateToProps, \r\n    {getTaskList}) \r\n    (ToDoList)\r\n    \r\n\r\n","import {instance, APIResponseType} from \"./api\";\r\n\r\ntype MeResponseDataType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n    // remember_token?: string,\r\n    // user?: any\r\n    // error?: boolean,\r\n    // message?: string\r\n}\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get(`authMe/`+localStorage.getItem('remember_token')).then( (response) => {\r\n            console.log('login: ', response)\r\n            return response\r\n        })\r\n    },\r\n    login(data: any) {\r\n        return instance.post('login', data)\r\n        .then(response => {\r\n            console.log('login: ', response)\r\n            if (response.data.remember_token !== null) {\r\n                localStorage.setItem('remember_token', response.data.remember_token);\r\n            } else {\r\n                localStorage.removeItem('remember_token');\r\n            }\r\n            return response.status === 200 ? response : null;\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                console.log(err.response)\r\n                return err.response\r\n            } else if (err.request) {\r\n                console.log('request', err.request)\r\n            } else {\r\n                console.log('anything else: ', err)\r\n            }\r\n            return null\r\n        })\r\n    },\r\n    register(creds: any) {\r\n        return instance.post('register', creds)\r\n        .then(response => {\r\n            console.log('login: ', response)\r\n            if (response.data.remember_token !== null) {\r\n                localStorage.setItem('remember_token', response.data.token);\r\n            } else {\r\n                localStorage.removeItem('remember_token');\r\n            }\r\n            return response.status === 200 ? response : null;\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                console.log(err.response)\r\n                return err.response\r\n            } else if (err.request) {\r\n                console.log('request', err.request)\r\n            } else {\r\n                console.log('anything else: ', err)\r\n            }\r\n            return null\r\n        })\r\n    }\r\n}","import { authAPI } from \"../api/authAPI\";\r\nimport { BaseThunkType, InferActionsTypes } from \"./store\"\r\n// import {FormAction} from 'redux-form/lib/actions';\r\n\r\ntype InitialStateType = {\r\n    user: UserType | null,\r\n    remember_token: string | null,\r\n    isAuth: boolean\r\n}\r\nlet initialState: InitialStateType = {\r\n    user: null,\r\n    remember_token: null,\r\n    isAuth: false\r\n}\r\n\r\nconst authReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/AUTH/SET_USER_DATA':\r\n            if (action.user !== null) {\r\n                console.log('1')\r\n                return { ...state, user: action.user, remember_token: action.remember_token, isAuth: true}\r\n            } else {\r\n                return initialState;\r\n            }\r\n            \r\n        case 'SN/AUTH/LOGOUT':\r\n            localStorage.removeItem('remember_token');\r\n            return initialState;\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport type UserType = {\r\n    created_at: string\r\n    email: string\r\n    email_verified_at: null | any\r\n    id: number\r\n    name: string\r\n    status: string\r\n    updated_at: string\r\n}\r\nexport const actions = {\r\n    setAuthUserData: (user: UserType | null, remember_token: string | null) => ({ type: 'SN/AUTH/SET_USER_DATA', user, remember_token } as const),\r\n    logout: () => ({type: 'SN/AUTH/LOGOUT'} as const),\r\n}\r\n\r\n// export const getAuthUserData = (): ThunkType => async (dispatch) => {\r\n//     let response = await authAPI.me()\r\n//     //console.log('getAuthUserData', response)\r\n// }\r\n\r\nexport const getAuthUserData = (): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        let response = await authAPI.me()\r\n\r\n        if (response !== null) {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(actions.setAuthUserData(response.data.user, response.data.remember_token))\r\n            } else {\r\n                //console.log(response.data.messages[0])\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport type credsType = {\r\n    email: string,\r\n    password: string,\r\n    remember: boolean\r\n}\r\n\r\nexport const login = (data: credsType): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        let response = await authAPI.login(data)\r\n        if (response) {\r\n            console.log(response)\r\n            if (response.status === 200) {\r\n                dispatch(actions.setAuthUserData(response.data.user, response.data.remember_token))\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport const register = (creds: any): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        let response = await authAPI.register(creds)\r\n        console.log(response)\r\n        const credsToLogin: credsType = {\r\n            email: creds.email,\r\n            password: creds.password,\r\n            remember: creds.remember\r\n        }\r\n        dispatch(login(credsToLogin))\r\n    }\r\n}\r\n\r\nexport default authReducer;\r\n\r\n// export type InitialStateType = typeof initialState;\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType< ActionsTypes>\r\n\r\n","import {getAuthUserData} from \"./authReducer\"\r\nimport {InferActionsTypes} from './store'\r\n\r\nlet initialState = {\r\n    initialized: false,\r\n    location: '/'\r\n}\r\n\r\n// export type InitialStateType = typeof initialState\r\nexport type InitialStateType ={\r\n    initialized: boolean,\r\n    location: string\r\n}\r\n\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\n\r\nconst appReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/APP/INITIALIZED_SUCCESS':\r\n            //console.log('INITIALIZED_SUCCESS: true')\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            }\r\n\r\n        case 'SN/APP/SET_LOCATION':\r\n            //console.log('location in appReducer:', action.location)\r\n            return  {\r\n                ...state,\r\n                location: action.location\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    initializedSuccess: () => ({type: 'SN/APP/INITIALIZED_SUCCESS'} as const),\r\n    setLocation: (location: string) => ({type: 'SN/APP/SET_LOCATION', location} as const),\r\n}\r\n\r\nexport const initializeApp = () => (dispatch: any) => {\r\n    let promise = dispatch(getAuthUserData());\r\n    Promise.all([promise])\r\n        .then(() => {\r\n            //console.log('dispatch(actions.initializedSuccess());')\r\n            dispatch(actions.initializedSuccess());\r\n        });\r\n}\r\n\r\nexport const addLocation = (location: string) => (dispatch: any) => {\r\n    dispatch(actions.setLocation(location));\r\n}\r\n\r\n\r\nexport default appReducer;","import {instance} from './api'\r\n\r\ninstance.defaults.headers.common['X-Auth-Token'] = localStorage.getItem('remember_token')\r\n\r\nexport const taskListAPI = {\r\n    getTaskList() {\r\n        return instance.get<any>(`taskList`)\r\n        .then(response => {\r\n            console.log(response)\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                console.log(err.response)\r\n                return err.response\r\n            } else if (err.request) {\r\n                console.log('request', err.request)\r\n            } else {\r\n                console.log('anything else: ', err)\r\n            }\r\n            return null\r\n        })\r\n    },\r\n    createNewTaskList(values: any) {\r\n        return instance.post<any>(`taskList`, values)\r\n        .then(response => {\r\n            console.log(response)\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                return err.response\r\n            } else if (err.request) {\r\n                //console.log('request', err.request)\r\n            } else {\r\n                //console.log('anything else: ', err)\r\n            }\r\n            return null\r\n        })\r\n    },\r\n    deleteTask() {\r\n\r\n    },\r\n    updateTask() {\r\n\r\n    }\r\n}","import { Dispatch } from \"react\";\r\nimport { BaseThunkType, InferActionsTypes } from \"./store\";\r\nimport { taskListAPI } from './../api/taskListAPI'\r\n\r\n\r\nexport type InitialStateType = {\r\n    taskList: Array<any>,\r\n    taskListIsFetching: boolean,\r\n    isTaskListLoaded: boolean,\r\n    // taskSaveStatus: 'no' | 'inProgress' | 'success' | 'error'\r\n    // errorMessage: null | string,\r\n    // isInterval: boolean,\r\n    // dateInterval: {\r\n    //     startDate: moment.Moment,\r\n    //     endDate: moment.Moment\r\n    // }\r\n}\r\n\r\nlet initialState:InitialStateType = {\r\n    taskList: [],\r\n    taskListIsFetching: false,\r\n    isTaskListLoaded: false\r\n    // taskSaveStatus: 'no',\r\n    // errorMessage: null,\r\n    // isInterval: false,\r\n    // dateInterval: {\r\n    //     startDate: moment(),\r\n    //     endDate: moment()\r\n    // }\r\n}\r\n\r\nconst taskListReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/TASK_LIST/SET_TASK_LIST':\r\n            return {...state, taskList: action.taskList, isTaskListLoaded: true}\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    setTaskList: (taskList: Array<any>) => ({ type: 'SN/TASK_LIST/SET_TASK_LIST', taskList } as const),\r\n    // setTaskSaveStatus: (taskSaveStatus: 'no' | 'inProgress' | 'success' | 'error') => ({ type: 'SN/TASK/SET_TASK_SAVE_STATUS', taskSaveStatus } as const),\r\n    // setErrorMessage: (message: string | null) => ({type: 'SN/TASK/SET_ERROR_MESSAGE', message} as const),\r\n    // setTaskListIsFetching: (isFetchingValue: boolean) => ({type: 'SN/TASK/SET_TASK_LIST_IS_FETCHING', isFetchingValue} as const),\r\n    // setIsInterval: (isInterval: boolean, date: {startDate: moment.Moment, endDate: moment.Moment}) => ({type: 'SN/TASK/SET_IS_INTERVAL', isInterval, date} as const)\r\n}\r\n\r\nexport const getTaskList = (): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        // dispatch(actions.setTaskListIsFetching(true))\r\n\r\n        let response = await taskListAPI.getTaskList()\r\n        //console.log(response)\r\n\r\n        if (response !== undefined && response !== null) {\r\n            dispatch(actions.setTaskList(response.data.Tasks))\r\n        } else {\r\n            // add error message\r\n        }\r\n        // dispatch(actions.setTaskListIsFetching(false))\r\n    }\r\n}\r\n\r\nexport const createNewTaskList = (values: any): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        let response = await taskListAPI.createNewTaskList(values)\r\n        console.log(response)\r\n        dispatch(actions.setTaskList(response.data.Tasks))\r\n    }\r\n}\r\n\r\nexport default taskListReducer\r\n\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsTypes>\r\nexport type DispatchType = Dispatch<ActionsTypes>","import {Action, applyMiddleware, combineReducers, createStore} from \"redux\"\r\nimport thunkMiddleware, {ThunkAction} from \"redux-thunk\"\r\nimport appReducer from \"./appReducer\"\r\nimport authReducer from \"./authReducer\"\r\nimport taskListReducer from \"./TaskListReducer\"\r\nimport taskReducer from './taskReducer'\r\n\r\n\r\nlet rootReducer = combineReducers({\r\n    task: taskReducer,\r\n    app: appReducer,\r\n    auth: authReducer,\r\n    taskList: taskListReducer,\r\n})\r\n\r\ntype rootReducerType = typeof rootReducer\r\nexport type AppStateType = ReturnType<rootReducerType>\r\n\r\nexport type InferActionsTypes<T> = T extends { [keys: string]: (...args: any[]) => infer U } ? U : never\r\nexport type BaseThunkType<A extends Action = Action, R = Promise<void>> = ThunkAction<R, AppStateType, unknown, A>\r\n\r\nlet store = createStore(rootReducer, applyMiddleware(thunkMiddleware))\r\n\r\nexport default store","import React, {useState} from 'react'\r\nimport { Button, Menu } from 'antd';\r\nimport {Link, useHistory} from 'react-router-dom'\r\n// import { MailOutlined, AppstoreOutlined, SettingOutlined } from '@ant-design/icons';\r\nimport {LogoutOutlined} from '@ant-design/icons'\r\nimport {MenuBrowserPropsType} from './MenuBrowserConainer'\r\nimport { TaskListType } from '../../Types/types';\r\nimport { MenuDataType } from './Header';\r\n\r\nconst { SubMenu } = Menu;\r\n\r\nexport type OwnMenuBrowserPropsType = {\r\n    menuData: any,\r\n    // logout: any,\r\n    // appLocation: string | null\r\n}\r\n\r\nconst MenuBrowser: React.FC<MenuBrowserPropsType> = (props) => {\r\n    let history = useHistory();\r\n    const [state, setState] = useState<Array<string>>([])\r\n    const handleClick = (e: any | undefined) => {\r\n        // //console.log('click ', e);\r\n        // setState({ current: e.key });\r\n    }\r\n\r\n    const getMenuItem = (childs: any):any => {\r\n        // return <Menu.Item key=\"setting:1\">Option 1</Menu.Item>\r\n        const menuItems = childs.map( (item: any) => {\r\n            return (\r\n                <Menu.Item key={item.value}>\r\n                    <Link to={item.value}>{item.label}</Link>\r\n                </Menu.Item>\r\n            )\r\n        })\r\n        return menuItems\r\n    }\r\n\r\n    const getSubMenu = () => {\r\n        // //console.log(props.menuData)\r\n        const subMenu = props.menuData.map( (item: any) => {\r\n            // //console.log(item)\r\n            return (\r\n                <SubMenu \r\n                    key={item.value} \r\n                    // icon={<MailOutlined />}\r\n                    title={item.label}\r\n                >\r\n                    {getMenuItem(item.children)}\r\n                </SubMenu >\r\n            )\r\n        })\r\n        // subMenu.push(\r\n        //     <Menu.Item key=\"login\">\r\n        //         <Link to={props.appLocation +\"login\"} >Login</Link>\r\n        //     </Menu.Item>\r\n        // )\r\n        return subMenu\r\n    }\r\n\r\n    const onLogout = () => {\r\n        // onChange(['', ''])\r\n        history.replace(props.appLocation+'login')\r\n        props.logout()\r\n    }\r\n\r\n    console.log(props)\r\n\r\n    return (\r\n        <Menu \r\n            onClick={handleClick} \r\n            // selectedKeys={[current]} \r\n            mode=\"horizontal\"\r\n            theme=\"dark\"\r\n        >\r\n            {getSubMenu()}\r\n\r\n            {!props.isAuth ? \r\n                <Menu.Item key=\"login\">\r\n                    <Link to={props.appLocation +\"login\"} >Login</Link>\r\n                </Menu.Item>\r\n            :\r\n                <SubMenu \r\n                    key={props.user?.name} \r\n                    title={props.user?.name}\r\n                >\r\n                    <Menu.Item key=\"login\" onClick={onLogout}>\r\n                        {/* <Link to={props.appLocation +\"login\"} > */}\r\n                            Logout\r\n                        {/* </Link> */}\r\n                    </Menu.Item>\r\n                </SubMenu >\r\n                \r\n            }\r\n        </Menu>\r\n    )\r\n}\r\n\r\nexport default MenuBrowser","import {connect} from 'react-redux'\r\nimport MenuBrowser, { OwnMenuBrowserPropsType } from './MenuBrowser'\r\nimport { AppStateType } from '../../redux/store'\r\nimport {actions} from './../../redux/authReducer'\r\n\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    logout: ()=>void\r\n}\r\n\r\nexport type MenuBrowserPropsType = MapPropsType & MapDispatchPropsType & OwnMenuBrowserPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n        user: state.auth.user,\r\n        appLocation: state.app.location\r\n        \r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnMenuBrowserPropsType, AppStateType>(mapStateToProps, \r\n    {logout: actions.logout}) \r\n    (MenuBrowser)\r\n    \r\n\r\n","import React, { useState } from 'react'\r\nimport { Menu, ActivityIndicator, NavBar, Button } from 'antd-mobile'\r\nimport { ValueType } from 'antd-mobile/lib/menu/PropsType'\r\nimport './MenuMobile.css'\r\nimport { useHistory, useLocation } from 'react-router-dom'\r\nimport { MenuDataType } from './Header'\r\nimport { MenuMobilePropsType } from './MenuMobileContainer'\r\nimport { Link } from 'react-router-dom'\r\nimport { LogoutOutlined } from '@ant-design/icons'\r\n\r\nexport type OwnMenuMobilePropsType = {\r\n    menuData: MenuDataType,\r\n    logout: () => void\r\n}\r\n\r\nconst MenuMobile: React.FC<MenuMobilePropsType> = (props) => {\r\n    let history = useHistory();\r\n    const location = useLocation();\r\n    const [show, setShow] = useState(false)\r\n    type DataType = typeof props.menuData\r\n    const data = [...props.menuData]\r\n    const [initData, setInitData] = useState<DataType>(data)\r\n\r\n    const getSelectedMenuItem = (): ValueType => {\r\n        let response: ValueType = [data[0].value, '']\r\n        data.forEach((dataItem: any) => {\r\n            if (dataItem.children) {\r\n                dataItem.children.forEach((item: any) => {\r\n                    //console.log('/',item.value,'===',location.pathname)\r\n                    if (item.value === location.pathname) {\r\n                        response = [dataItem.value, item.value]\r\n                    }\r\n                })\r\n            }\r\n        })\r\n        //console.log('getSelectedMenuItem response: ', response)\r\n        return response\r\n    }\r\n\r\n    const [selectedMenuItem, setSelectedMenuItem] = useState<ValueType>(getSelectedMenuItem())\r\n\r\n    const handleClick = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\r\n        e.preventDefault(); // Fix event propagation on Android\r\n        setShow(!show)\r\n        // if (!initData) {\r\n        //     setInitData(data)\r\n        // }\r\n    }\r\n\r\n    const onChange = (value?: ValueType | undefined) => {\r\n        console.log('input values: ', value)\r\n        if (value) {\r\n            let subMenu = value[0]\r\n\r\n            data.forEach((dataItem) => {\r\n                if (dataItem.value === value[0]) {\r\n                    subMenu = value[0]\r\n                    if (dataItem.children && value[1]) {\r\n                        dataItem.children.forEach((cItem: { value: string | string[]; label: any }) => {\r\n                            if (cItem.value === value[1]) {\r\n                                history.replace(`${cItem.value}`)\r\n\r\n                            }\r\n                        })\r\n                    }\r\n                }\r\n            })\r\n        \r\n            if (subMenu === '') {\r\n                subMenu = data[0].value\r\n            }\r\n            console.log('set values: ', [subMenu, value[1]])\r\n            setSelectedMenuItem([subMenu, value[1]])\r\n        }\r\n        \r\n    }\r\n\r\n    const onMaskClick = () => {\r\n        setShow(false)\r\n    }\r\n\r\n    const menuEl = (\r\n        <Menu\r\n            className=\"foo-menu\"\r\n            data={initData}\r\n            value={selectedMenuItem}\r\n            onChange={onChange}\r\n            height={document.documentElement.clientHeight * 0.6}\r\n        />\r\n    );\r\n\r\n    const loadingEl = (\r\n        <div style={{ width: '100%', height: document.documentElement.clientHeight * 0.6, display: 'flex', justifyContent: 'center' }}>\r\n            <ActivityIndicator size=\"large\" />\r\n        </div>\r\n    );\r\n\r\n    // console.log(props)\r\n\r\n    const onLogout = () => {\r\n        onChange(['', ''])\r\n        history.replace(props.appLocation + 'login')\r\n        props.logout()\r\n    }\r\n\r\n    return (\r\n        <div className={show ? 'menu-active' : ''}>\r\n            <div>\r\n                <NavBar\r\n                    leftContent=\"\"\r\n                    mode=\"light\"\r\n                    icon={<img src=\"https://gw.alipayobjects.com/zos/rmsportal/iXVHARNNlmdCGnwWxQPH.svg\" className=\"am-icon am-icon-md\" alt=\"\" />}\r\n                    onLeftClick={handleClick}\r\n                    className=\"top-nav-bar\"\r\n                >\r\n                    {!props.isAuth ?\r\n                        <Link\r\n                            to={props.appLocation + \"login\"}\r\n                            onClick={() => { onChange(['', '']) }}\r\n                        >\r\n                            <span className=\"text-white\">Login</span>\r\n                        </Link>\r\n                        :\r\n                        <div>\r\n                            {props.user?.name}\r\n                            <Button className=\"ml-5\" size=\"small\" icon={<LogoutOutlined />} onClick={onLogout} inline >\r\n\r\n                            </Button>\r\n                        </div>\r\n                    }\r\n\r\n                </NavBar>\r\n            </div>\r\n            {show ? initData ? menuEl : loadingEl : null}\r\n            {show ? <div className=\"menu-mask\" onClick={onMaskClick} /> : null}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default (MenuMobile)\r\n\r\n\r\n","import {connect} from 'react-redux'\r\nimport MenuMobile, { OwnMenuMobilePropsType } from './MenuMobile'\r\n// import {getTaskList} from '../../redux/taskReducer'\r\nimport { AppStateType } from '../../redux/store'\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    // getTaskList: (start_date: string, end_date:string)=>void\r\n}\r\n\r\nexport type MenuMobilePropsType = MapPropsType & MapDispatchPropsType & OwnMenuMobilePropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        appLocation: state.app.location,\r\n        isAuth: state.auth.isAuth,\r\n        user: state.auth.user\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnMenuMobilePropsType, AppStateType>(mapStateToProps, \r\n    {}) \r\n    (MenuMobile)\r\n    \r\n\r\n","import React from 'react'\r\nimport {\r\n    BrowserView,\r\n    MobileView,\r\n    isBrowser,\r\n    isMobile\r\n} from \"react-device-detect\"\r\nimport { HeaderPropsType } from './HeaderContainer'\r\nimport MenuBrowser from './MenuBrowserConainer'\r\nimport MenuMobile from './MenuMobileContainer'\r\n// import {useHistory, useLocation} from 'react-router-dom'\r\n\r\n// type MenuDataType = Array<any>\r\n\r\nexport type OwnHeaderPropsType = {}\r\n\r\nconst Header: React.FC<HeaderPropsType> = (props) => {\r\n    // const location = useLocation()\r\n    console.log('Header')\r\n\r\n    if (isMobile) {\r\n        return <MenuMobile menuData={menuData(props.appLocation)} logout={props.logout}/>\r\n    } else {\r\n        return <MenuBrowser menuData={menuData(props.appLocation)}/>\r\n    }\r\n}\r\n\r\nexport default Header\r\n\r\n\r\nexport type MenuDataType = ReturnType<typeof menuData>\r\n\r\nconst menuData = (appLocation: string) => {\r\n    const data = [\r\n    {\r\n        value: 'planning',\r\n        label: 'Planning',\r\n        children: [\r\n            {\r\n                label: 'ToDo list',\r\n                // label: <Link to='/toDoList'>ToDo list</Link>,\r\n                value: appLocation + 'toDoList',\r\n                disabled: false,\r\n            },\r\n            {\r\n                label: 'Tasks tree',\r\n                value: appLocation + 'tasksTree',\r\n            },\r\n            {\r\n                label: 'Analysis',\r\n                value: appLocation + 'analysis',\r\n                disabled: true,\r\n            }\r\n        ],\r\n    }, {\r\n        value: 'catalog',\r\n        label: 'Catalog',\r\n        children: [\r\n            {\r\n                label: 'Products',\r\n                value: appLocation + 'products',\r\n            }\r\n            , {\r\n                label: 'Providers',\r\n                value: appLocation + 'providers',\r\n            }\r\n        ],\r\n    },\r\n    {\r\n        value: 'orders',\r\n        label: 'Orders',\r\n        // isLeaf: true,\r\n        children: [\r\n            {\r\n                label: 'Orders',\r\n                value: appLocation + 'orders',\r\n            },\r\n            {\r\n                label: 'Leads',\r\n                value: appLocation + 'leads',\r\n            },\r\n        ],\r\n    },\r\n    ]\r\n    return data\r\n}\r\n","import {connect} from 'react-redux'\r\nimport Header, { OwnHeaderPropsType } from './Header'\r\nimport {actions} from '../../redux/authReducer'\r\nimport { AppStateType } from '../../redux/store'\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    logout: ()=>void\r\n}\r\n\r\nexport type HeaderPropsType = MapPropsType & MapDispatchPropsType & OwnHeaderPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        appLocation: state.app.location,\r\n        user: state.auth.user\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnHeaderPropsType, AppStateType>(mapStateToProps, \r\n    {logout: actions.logout}) \r\n    (Header)\r\n    \r\n\r\n","import React, { useState } from 'react'\r\nimport { isMobile } from \"react-device-detect\"\r\nimport { DatePicker, Form, Input, TimePicker, Select, Checkbox } from \"antd\"\r\nimport enUs from 'antd-mobile/lib/date-picker/locale/en_US';\r\nimport moment from \"moment\"\r\nimport {\r\n    List, InputItem, Checkbox as CheckboxMobile, TextareaItem, Picker,\r\n    DatePicker as DatePickerMobile,\r\n    LocaleProvider\r\n} from 'antd-mobile'\r\n\r\nconst FormItem = Form.Item\r\nconst Option: React.FC<any> = Select.Option\r\nconst CheckboxItem = CheckboxMobile.CheckboxItem\r\nconst { TextArea } = Input;\r\n\r\n// const layout = {\r\n//     labelCol: { span: 8 },\r\n//     wrapperCol: { span: 16 },\r\n//   };\r\n\r\n\r\nconst CreateAntField = (AntComponent: any) => (\r\n    {\r\n        field,\r\n        form,\r\n        hasFeedback,\r\n        label,\r\n        selectOptions,\r\n        submitCount,\r\n        type,\r\n        ...props\r\n    }: any\r\n) => {\r\n    // //console.log('field: ', field)\r\n    // //console.log('form: ', form)\r\n\r\n    // const [state, setState] = useState(0);\r\n\r\n    // let timeValue = new Date().setTime(0)\r\n    let fieldValue: null | String | number | Date = null\r\n\r\n    const touched = form.touched[field.name];\r\n    const submitted = submitCount > 0;\r\n    const hasError = form.errors[field.name];\r\n    const submittedError = hasError && submitted;\r\n    const touchedError = hasError && touched;\r\n\r\n    // const onInputChange = ({ target: { value } }: any) => {\r\n    const onInputChange = (value: any) => {\r\n        console.log('onInputChange: ', value)\r\n        // //console.log(field.name)\r\n        if (value.target) {\r\n            // console.log(value)\r\n            form.setFieldValue(field.name, value.target.value)\r\n        } else {\r\n            console.log(field.name, \": \", value)\r\n            if (type === 'time') {\r\n                form.setFieldValue(field.name, moment(value.setSeconds(0)))//.from() )\r\n                // fieldValue = value.setSeconds(0)\r\n                console.log(props)\r\n            } else if (Array.isArray(value)) {\r\n                // добавтить проверуку на пустой массив\r\n                form.setFieldValue(field.name, value[0])\r\n            } else {\r\n                form.setFieldValue(field.name, value)\r\n                // fieldValue = value\r\n            }\r\n            // console.log('fieldValue: ', fieldValue)\r\n        }\r\n\r\n    }\r\n    const onChange = (value: any) => {\r\n        console.log(value)\r\n        //console.log(field.name,'=',value)\r\n        if (value.target.type === 'checkbox') {\r\n            form.setFieldValue(field.name, value.target.checked)\r\n        } else {\r\n            form.setFieldValue(field.name, value)\r\n        }\r\n    }\r\n    const onBlur = () => form.setFieldTouched(field.name, true);\r\n    return (\r\n        <FormItem\r\n            label={!isMobile ? label : null}\r\n            hasFeedback={\r\n                (hasFeedback && submitted) || (hasFeedback && touched) ? true : false\r\n            }\r\n            help={submittedError || touchedError ? hasError : false}\r\n            validateStatus={submittedError || touchedError ? \"error\" : \"success\"}\r\n        >\r\n            {isMobile ?\r\n                // <List>\r\n                //     <AntComponent\r\n                //         onBlur={onBlur}\r\n                //         onChange={type ? onInputChange : onChange}\r\n                //         mode={type === 'time' ? \"time\" : null}\r\n                //         // value = {fieldValue}\r\n                //         key={label}\r\n                //         // type={type}\r\n                //         title={label}\r\n                //         locale={enUs}\r\n                //         autoHeight\r\n                //         className={type === 'text' ? 'pl-0' : null}\r\n                //     >\r\n                //         {/* {label} */}\r\n                //         <List.Item\r\n                //             className=\"pl-0\"\r\n                //         // arrow=\"horizontal\"\r\n                //         >\r\n                //             {label}\r\n                //         </List.Item>\r\n                //     </AntComponent>\r\n                // </List>\r\n                <MobileComponent \r\n                    AntComponent={AntComponent}\r\n                    onBlur = {onBlur}\r\n                    type = {type}\r\n                    onInputChange = {onInputChange}\r\n                    onChange = {onChange}\r\n                    label = {label}\r\n                    selectOptions = {selectOptions}\r\n                />\r\n                :\r\n                <AntComponent\r\n                    {...field}\r\n                    {...props}\r\n                    allowClear={selectOptions ? \"true\" : \"false\"}\r\n                    onBlur={onBlur}\r\n                    onChange={type ? onInputChange : onChange}\r\n                >\r\n                    {selectOptions &&\r\n                        selectOptions.map((item: any) => <Option title={item.name} value={item.value} key={item.name}>{item.name}</Option>)}\r\n\r\n\r\n                </AntComponent>\r\n            }\r\n\r\n        </FormItem>\r\n    )\r\n}\r\n\r\nexport const AntSelect = !isMobile ? CreateAntField(Select) : CreateAntField(Picker)\r\nexport const AntDatePicker = CreateAntField(DatePicker)\r\n\r\n// export const AntInput = !isMobile ? CreateAntField(Input) : <List>CreateAntField(InputItem)</List>\r\nexport const AntInput = !isMobile ? CreateAntField(Input) : CreateAntField(InputItem)\r\n\r\nexport const AntInputPassword = !isMobile ? CreateAntField(Input.Password) : CreateAntField(InputItem)\r\n\r\nexport const AntTimePicker = !isMobile ? CreateAntField(TimePicker) : CreateAntField(DatePickerMobile)\r\nexport const AntCheckbox = !isMobile ? CreateAntField(Checkbox) : CreateAntField(CheckboxItem)\r\n// TextArea\r\nexport const AntTextArea = !isMobile ? CreateAntField(TextArea) : CreateAntField(TextareaItem)\r\n\r\n\r\nconst MobileComponent: React.FC<any> = (props) => {\r\n    const [value, setValue] = useState(null)\r\n\r\n    const onInputChange = (value: any) => {\r\n        props.onInputChange(value)\r\n        setValue(value)\r\n    }\r\n\r\n    let data\r\n    if (props.selectOptions !== null && props.selectOptions !== undefined) {\r\n        console.log(props.label, props.selectOptions)\r\n        data = props.selectOptions.map((item: any) => {\r\n            return (\r\n                {\r\n                    label: item.name, \r\n                    value: item.value, \r\n                    key: item.name\r\n                }\r\n            )\r\n        })\r\n    } else {\r\n        data = []\r\n    }\r\n    \r\n    console.log(data)\r\n\r\n    return (\r\n        <List>\r\n            <props.AntComponent\r\n                onBlur={props.onBlur}\r\n                onChange={props.type ? onInputChange : props.onChange}\r\n                mode={props.type === 'time' ? \"time\" : null}\r\n                value = {value}\r\n                key={props.label}\r\n                // type={type}\r\n                title={props.label}\r\n                locale={enUs}\r\n                autoHeight\r\n                className={props.type === 'text' ? 'pl-0' : null}\r\n                data={data}\r\n                cols={1}\r\n            >\r\n                {/* {label} */}\r\n                <List.Item\r\n                    className=\"pl-0\"\r\n                // arrow=\"horizontal\"\r\n                >\r\n                    {props.label}\r\n                </List.Item>\r\n            </props.AntComponent>\r\n        </List>\r\n    )\r\n}","// import { userAPI } from \"../../api/userAPI\";\r\n\r\nexport const validateRequired = (value: string) => {\r\n    let errors;\r\n    if (!value) {\r\n        errors = \"Required!\";\r\n    }\r\n    return errors;\r\n}\r\n\r\nexport const validateEmail = (value: string) => {\r\n    let errors;\r\n\r\n    if (!value) {\r\n        errors = \"Required!\";\r\n    } else if (!/^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/.test(value)) {\r\n        errors = \"Invalid email address!\";\r\n    }\r\n\r\n    return errors;\r\n};\r\n\r\nexport const validateAsync = (value: string) => {\r\n    const sleep = () => new Promise(resolve => setTimeout(resolve, 2000));\r\n    return sleep().then(() => {\r\n        if (['admin', 'null', 'god'].includes(value)) {\r\n            return 'Nice try'\r\n        }\r\n    })\r\n}\r\n\r\n// export const validateUserExistense = (value: string) => {\r\n//     //console.log(value)\r\n//     return userAPI.checkUserForExistence(value).then( (result) => {\r\n//         //console.log(result.status)\r\n//         if (result.status !== 404) {\r\n//             return 'Name is bisy'\r\n//         } \r\n//     })\r\n//     //console.log(test)\r\n\r\n// }","import React, { ReactNode } from 'react'\r\nimport { Form, Field, FormikProps } from \"formik\"\r\nimport { AntInput, AntCheckbox, AntInputPassword } from '../../utils/Formik/CreateAntField'\r\nimport { validateEmail, validateRequired } from '../../utils/Formik/ValidateFields'\r\n\r\nconst LoginForm: ((props: FormikProps<{}>) => ReactNode) = (props) => {\r\n    return (\r\n        <Form \r\n            className=\"form-container\" \r\n            onSubmit={props.handleSubmit}\r\n        >\r\n            <Field\r\n                component={AntInput}\r\n                name=\"email\"\r\n                type=\"email\"\r\n                label=\"Email\"\r\n                validate={validateEmail}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n            <Field\r\n                component={AntInputPassword}\r\n                name=\"password\"\r\n                type=\"password\"\r\n                label=\"Password\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n            <Field\r\n                component={AntCheckbox}\r\n                name=\"remember\"\r\n                label=\"Remember Me\"\r\n                submitCount={props.submitCount}\r\n            />\r\n            <div className=\"submit-container\">\r\n                <button className=\"ant-btn ant-btn-primary\" type=\"submit\">\r\n                    Login\r\n                </button>\r\n            </div>\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default LoginForm","import React from 'react'\r\nimport { LoginPropsType } from './LoginContainer'\r\nimport { List, InputItem, Checkbox } from 'antd-mobile'\r\nimport { Formik } from \"formik\"\r\nimport moment from \"moment\"\r\nimport LoginForm from './LoginForm'\r\nimport { propTypes } from 'react-bootstrap/esm/Image'\r\nimport { Button } from 'antd'\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst CheckboxItem = Checkbox.CheckboxItem;\r\n\r\nconst initialValues = {\r\n    // bookingClient: \"\",\r\n    // bookingDate: moment(Date.now()),\r\n    // bookingTime: moment(Date.now()),\r\n    // selectOptions: [\"Mark\", \"Bob\", \"Anthony\"]\r\n}\r\n\r\n// export const dateFormat = \"YYYY--MM-DD\";\r\n// export const timeFormat = \"h:mm A\";\r\n\r\nexport type OwnLoginPropsType = {}\r\n\r\nconst Login: React.FC<LoginPropsType> = (props) => {\r\n    const handleSubmit = (formProps: any) => {\r\n        console.log('formProps: ', formProps)\r\n        if (!formProps.remember) {\r\n            formProps.remember = false\r\n        }\r\n        props.login(formProps)\r\n    }\r\n\r\n    console.log(props)\r\n\r\n    return (\r\n        <>\r\n            <h1 className=\"mb-5 mx-auto\">Login Form</h1>\r\n            <Formik\r\n                initialValues={initialValues}\r\n                onSubmit={handleSubmit}\r\n                render={LoginForm}\r\n            />\r\n            <div className=\"mt-3\">\r\n                <Link to={props.location +\"register\"}><Button type=\"link\" block>Register</Button></Link>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Login","import {connect} from 'react-redux'\r\nimport Login, { OwnLoginPropsType } from './Login'\r\nimport { AppStateType } from '../../redux/store'\r\nimport {credsType, login} from './../../redux/authReducer'\r\n\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    login: (data: credsType)=>void\r\n}\r\n\r\nexport type LoginPropsType = MapPropsType & MapDispatchPropsType & OwnLoginPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        auth: state.auth,\r\n        location: state.app.location\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnLoginPropsType, AppStateType>(mapStateToProps, \r\n    {login}) \r\n    (Login)\r\n    \r\n\r\n","import { formatCountdown } from 'antd/lib/statistic/utils'\r\nimport React from 'react'\r\nimport { OrdersPropsType } from './OrdersContainer'\r\n\r\nexport type OwnOrdersPropsType = {}\r\nconst Orders: React.FC<OrdersPropsType> = (props) => {\r\n    return(\r\n        <div>Orders</div>\r\n    )\r\n}\r\n\r\nexport default Orders","import {connect} from 'react-redux'\r\nimport Orders, { OwnOrdersPropsType } from './Orders'\r\n// import {getTaskList} from '../../redux/taskReducer'\r\nimport { AppStateType } from '../../redux/store'\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    // getTaskList: (start_date: string, end_date:string)=>void\r\n}\r\n\r\nexport type OrdersPropsType = MapPropsType & MapDispatchPropsType & OwnOrdersPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        appLocation: state.app.location\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnOrdersPropsType, AppStateType>(mapStateToProps, \r\n    {}) \r\n    (Orders)\r\n    \r\n\r\n","import { Form, Field, FormikProps } from 'formik'\r\nimport React, { ReactNode, useState, useEffect } from 'react'\r\nimport { AntInput, AntSelect, AntTextArea, AntTimePicker } from '../../utils/Formik/CreateAntField'\r\nimport { validateRequired } from '../../utils/Formik/ValidateFields'\r\nimport { Select } from 'antd';\r\n\r\nconst { Option }: any = Select;\r\n\r\n\r\nconst NewTaskTreeForm: ((props: FormikProps<{}>) => ReactNode) = (props) => {\r\n    const values: any = props.values\r\n    console.log(values)\r\n    const selectOptions = values.selectOptions\r\n    const taskTypes = values.taskTypes // ++++++\r\n\r\n    const [taskType, setTaskType] = useState(values.taskType)\r\n\r\n    useEffect(() => {\r\n        // console.log(props.values)\r\n        const values: any = props.values\r\n        const taskTypes = values.task_type\r\n        setTaskType(taskTypes)\r\n    }, [props.values])\r\n\r\n    console.log('NewTaskTreeForm props: ', props)\r\n\r\n    const handleSubmit = (formProps: any) => {\r\n        console.log('formProps in NewTaskTreeForm: ',formProps)\r\n        props.handleSubmit(formProps)\r\n    }\r\n\r\n    return (\r\n        <Form\r\n            className=\"form-container\"\r\n            onSubmit={props.handleSubmit}\r\n        >\r\n            <Field\r\n                component={AntInput}\r\n                name=\"name\"\r\n                type=\"text\"\r\n                label=\"Name\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n\r\n            <Field\r\n                component={AntSelect}\r\n\r\n                selectOptions={selectOptions}\r\n\r\n                name=\"parent_id\"\r\n                type=\"select\"\r\n                label=\"Parent\"\r\n                // validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n            // hasFeedback\r\n            />\r\n\r\n            <Field\r\n                component={AntTextArea}\r\n                name=\"descriptions\"\r\n                type=\"text\"\r\n                label=\"Descriptions\"\r\n                // validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n\r\n            <Field\r\n                component={AntTimePicker}\r\n                name=\"time_to_complete\"\r\n                type=\"time\"\r\n                label=\"Time to complete\"\r\n                // validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n            // hasFeedback\r\n            />\r\n\r\n            <Field\r\n                component={AntSelect}\r\n\r\n                selectOptions={taskTypes}\r\n\r\n                name=\"task_type\"\r\n                type=\"select\"\r\n                label=\"task Types\"\r\n                // validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n\r\n\r\n            {taskType === 'context' ?\r\n                <>\r\n                    <Field\r\n                        component={AntInput}\r\n                        name=\"context1\"\r\n                        type=\"text\"\r\n                        label=\"context1\"\r\n                        validate={validateRequired}\r\n                        submitCount={props.submitCount}\r\n                        hasFeedback\r\n                    />\r\n                    <Field\r\n                        component={AntInput}\r\n                        name=\"context2\"\r\n                        type=\"text\"\r\n                        label=\"context2\"\r\n                        validate={validateRequired}\r\n                        submitCount={props.submitCount}\r\n                        hasFeedback\r\n                    />\r\n                </>\r\n                :\r\n                null\r\n            }\r\n\r\n            <div className=\"submit-container\">\r\n                <button className=\"ant-btn ant-btn-primary\" type=\"submit\">\r\n                    Save\r\n                </button>\r\n            </div>\r\n\r\n        </Form>\r\n    )\r\n    // )\r\n}\r\nexport default NewTaskTreeForm","import { Button, Card, Drawer } from 'antd'\r\nimport React, { useEffect, useState} from 'react'\r\nimport { TasksTreePropsType } from './TasksTreeContainer'\r\nimport { FileAddOutlined, SettingOutlined } from '@ant-design/icons'\r\nimport NewTaskTreeForm from './NewTaskTreeForm'\r\nimport { Formik, FormikProps } from 'formik'\r\nimport moment from \"moment\"\r\n\r\n\r\n\r\nconst TasksTreeBrowser: React.FC<TasksTreePropsType> = (props) => {\r\n    useEffect(() => {\r\n        if (props.taskList !== undefined && props.taskList.length === 0 && !props.isTaskListLoaded) {\r\n            props.getTaskList()\r\n        }\r\n        else if (props.taskList === undefined ) {\r\n            props.getTaskList()\r\n        }\r\n    }, [props.taskList])\r\n\r\n    const [visible, setVisible] = useState(false)\r\n\r\n    const getSelectOptions = () => {\r\n        if (props.taskList !== undefined && props.taskList.length > 0) {\r\n            return props.taskList.map( (item) => {\r\n                return ({\r\n                    name: item.name,\r\n                    value: item.id\r\n                })\r\n            })\r\n        } else {\r\n            return null\r\n        }\r\n    }\r\n\r\n    const initialValues: any = {\r\n        selectOptions: getSelectOptions(),\r\n        taskTypes: [\r\n            {\r\n                name: 'Простая задача',\r\n                value: 'soft'\r\n            },\r\n            {\r\n                name: 'Задача с контектом',\r\n                value: 'context'\r\n            }\r\n        ],\r\n        task_type: 'soft'\r\n\r\n    }\r\n\r\n    const getTaskTreeItems  = (taskList: Array<any>) => {\r\n        if (props.taskList !== undefined && props.taskList.length > 0) {\r\n            return taskList.map( (item) => {\r\n                return(\r\n                    <div key={item.id}>{item.name}</div>\r\n                )\r\n            })\r\n        } else {\r\n            return null\r\n        }\r\n    }\r\n\r\n    const onClose = () => {\r\n        setVisible(false)\r\n    }\r\n\r\n    const showDrawer = () => {\r\n        setVisible(true)\r\n    }\r\n\r\n    const handleSubmit = (formProps: any) => {\r\n        let formPropsCopy:any = {...formProps}\r\n        delete formPropsCopy.selectOptions\r\n        delete formPropsCopy.taskTypes\r\n        if (formPropsCopy.time_to_complete !== undefined) {\r\n            console.log(formPropsCopy.time_to_complete.format('HH:mm:ss'))\r\n            formPropsCopy.time_to_complete = formPropsCopy.time_to_complete.format('HH:mm:ss')\r\n        }\r\n        console.log('NewTaskTreeForm Props: ', formPropsCopy)\r\n\r\n        formPropsCopy.user_id = props.userId\r\n        props.createNewTaskList(formPropsCopy)\r\n    }\r\n    \r\n    return(\r\n        <>\r\n            <div className=\"site-card-border-less-wrapper\">\r\n                <Card\r\n                    title={\r\n                        <div className=\"col-12 col-md-12 col-lg-4\">\r\n                        <Button\r\n                            type=\"primary\"\r\n                            shape=\"round\"\r\n                            icon={\r\n                                <div className=\"d-flex flex-wrap align-content-start\">\r\n                                    <FileAddOutlined style={{ fontSize: '18px' }} />\r\n                                    <span className=\"ml-1\" style={{ fontSize: '14px' }}>Add</span>\r\n                                </div>}\r\n                            style={{ marginLeft: 10 }}\r\n                            onClick={showDrawer}\r\n                        />\r\n        \r\n                        <Button className=\"\"\r\n                            type=\"primary\"\r\n                            shape=\"round\"\r\n                            style={{ marginLeft: 10 }}\r\n                            // onClick={props.showModal}\r\n                            icon={\r\n                                <div className=\"d-flex flex-wrap align-content-start\">\r\n                                    <SettingOutlined style={{ fontSize: '18px' }} />\r\n                                    <span className=\"ml-1\" style={{ fontSize: '14px' }}>Settings</span>\r\n                                </div>} \r\n                        />\r\n                    </div>\r\n                    }\r\n                    bordered={false}\r\n                >\r\n\r\n                    { getTaskTreeItems(props.taskList) }\r\n\r\n                    <Drawer\r\n                        title={\"Create New Task\"}\r\n                        placement=\"right\"\r\n                        closable={true}\r\n                        onClose={onClose}\r\n                        visible={visible}\r\n                        width=\"90%\"\r\n                    >\r\n\r\n                        <Formik\r\n                            initialValues={initialValues}\r\n                            onSubmit={handleSubmit}\r\n                            render={NewTaskTreeForm}\r\n                        />\r\n\r\n                    </Drawer>\r\n                    \r\n                </Card>\r\n            </div>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default TasksTreeBrowser","import React, { useState, useEffect } from 'react'\r\nimport { TasksTreePropsType } from './TasksTreeContainer'\r\nimport { Drawer, List, SwipeAction, Icon, Button } from 'antd-mobile'\r\nimport NewTaskTreeForm from './NewTaskTreeForm'\r\nimport './TasksTreeMobile.css'\r\nimport { Formik } from 'formik'\r\nimport { Spin } from 'antd'\r\n\r\nconst Item = List.Item\r\n\r\nconst TasksTreeMobile: React.FC<TasksTreePropsType> = (props) => {\r\n    useEffect(() => {\r\n        if (props.taskList.length === 0 && !props.isTaskListLoaded) {\r\n            props.getTaskList()\r\n        }\r\n    }, [props.taskList])\r\n\r\n    const getSelectOptions = () => {\r\n        if (props.taskList !== undefined && props.taskList.length > 0) {\r\n            return props.taskList.map((item) => {\r\n                return ({\r\n                    name: item.name,\r\n                    value: item.id\r\n                })\r\n            })\r\n        } else {\r\n            console.log('вернули пыстой список', props.taskList)\r\n            return null\r\n        }\r\n    }\r\n\r\n    const initialValues: any = {\r\n        selectOptions: getSelectOptions(),\r\n        taskTypes: [\r\n            {\r\n                name: 'Простая задача',\r\n                value: 'soft'\r\n            },\r\n            {\r\n                name: 'Задача с контектом',\r\n                value: 'context'\r\n            }\r\n        ],\r\n        task_type: 'soft'\r\n\r\n    }\r\n    const [state, setState] = useState(false)\r\n\r\n    const handleSubmit = (formProps: any) => {\r\n        console.log('formProps submit: ', formProps)\r\n        let formPropsCopy: any = { ...formProps }\r\n        delete formPropsCopy.selectOptions\r\n        delete formPropsCopy.taskTypes\r\n        if (formPropsCopy.time_to_complete !== undefined) {\r\n            console.log(formPropsCopy.time_to_complete.format('HH:mm:ss'))\r\n            formPropsCopy.time_to_complete = formPropsCopy.time_to_complete.format('HH:mm:ss')\r\n        }\r\n        console.log('NewTaskMobile submit: ', formPropsCopy)\r\n\r\n        formPropsCopy.user_id = props.userId\r\n        props.createNewTaskList(formPropsCopy)\r\n    }\r\n\r\n    const onOpenChange = (args: any) => {\r\n        console.log(args);\r\n        setState(!state)\r\n    }\r\n\r\n    console.log('TTM props: ', props)\r\n\r\n    if (props.taskList.length > 0) {\r\n        return (\r\n            <div>\r\n                <div className=\"d-flex justify-content-end\">\r\n\r\n                    <Button\r\n                        inline\r\n                        size=\"small\"\r\n                        className=\"mx-3 my-2\"\r\n                        // style={{ marginRight: '4px' }} \r\n                        onClick={onOpenChange}\r\n                        type=\"primary\">\r\n                        Add\r\n                </Button>\r\n                </div>\r\n\r\n                <Drawer\r\n                    className=\"my-drawer\"\r\n                    style={{ minHeight: document.documentElement.clientHeight }}\r\n                    enableDragHandle\r\n                    contentStyle={{ color: '#A6A6A6', textAlign: 'center', paddingTop: 0, width: \"100%\" }}\r\n                    sidebar={\r\n                        <div className=\"mt-4\">\r\n                            <Formik\r\n                                initialValues={initialValues}\r\n                                onSubmit={handleSubmit}\r\n                                render={NewTaskTreeForm}\r\n                            />\r\n                        </div>\r\n                    }\r\n                    open={state}\r\n                    onOpenChange={onOpenChange}\r\n                >\r\n                    <List\r\n                    // renderHeader={() => 'taskList'}\r\n                    >\r\n                        {getTaskTreeItems(props.taskList)}\r\n                    </List>\r\n                </Drawer>\r\n\r\n\r\n\r\n            </div>\r\n        )\r\n    } else {\r\n        return <Spin key=\"spin\" size=\"large\" />\r\n    }\r\n}\r\n\r\nexport default TasksTreeMobile\r\n\r\nconst getTaskTreeItems = (taskList: Array<any>) => {\r\n    if (taskList.length > 0) {\r\n        return taskList.map((item) => {\r\n            console.log('!!!!!!!')\r\n            return (\r\n                <SwipeAction\r\n                    style={{ backgroundColor: 'gray' }}\r\n                    autoClose\r\n                    right={[\r\n                        {\r\n                            text: 'Cancel',\r\n                            onPress: () => console.log('cancel'),\r\n                            style: { backgroundColor: '#ddd', color: 'white' },\r\n                        },\r\n                        {\r\n                            text: 'Delete',\r\n                            onPress: () => console.log('delete'),\r\n                            style: { backgroundColor: '#F4333C', color: 'white' },\r\n                        },\r\n                    ]}\r\n                    left={[\r\n                        {\r\n                            text: 'Reply',\r\n                            onPress: () => console.log('reply'),\r\n                            style: { backgroundColor: '#108ee9', color: 'white' },\r\n                        },\r\n                        {\r\n                            text: 'Cancel',\r\n                            onPress: () => console.log('cancel'),\r\n                            style: { backgroundColor: '#ddd', color: 'white' },\r\n                        },\r\n                    ]}\r\n                    onOpen={() => console.log('global open')}\r\n                    onClose={() => console.log('global close')}\r\n                >\r\n                    <Item\r\n                        // className=\"my-3\"\r\n                        onClick={() => console.log('List.Item clicked!')}\r\n                        arrow=\"horizontal\"\r\n                        key={item.id}\r\n                    >\r\n                        {item.name}\r\n                    </Item>\r\n\r\n                </SwipeAction>\r\n            )\r\n        })\r\n    } else {\r\n        return <Spin key=\"spin\" size=\"large\" />\r\n    }\r\n\r\n\r\n}","import {connect} from 'react-redux'\r\n// import TasksTree, { OwnTasksTreePropsType } from './TasksTree'\r\nimport { AppStateType } from '../../redux/store'\r\nimport {getTaskList, createNewTaskList} from './../../redux/TaskListReducer'\r\nimport { isMobile } from 'react-device-detect'\r\nimport TasksTreeBrowser from './TasksTreeBrowser'\r\nimport TasksTreeMobile from './TasksTreeMobile'\r\n\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    getTaskList: ()=>void,\r\n    createNewTaskList: (values: any)=>void,\r\n}\r\n\r\ntype OwnTasksTreePropsType = {\r\n\r\n}\r\n\r\nexport type TasksTreePropsType = MapPropsType & MapDispatchPropsType & OwnTasksTreePropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        taskList: state.taskList.taskList,\r\n        userId: state.auth.user?.id,\r\n        isTaskListLoaded: state.taskList.isTaskListLoaded\r\n    }\r\n}\r\n\r\n// const TasksTree: React.FC<TasksTreePropsType> = (props) => {\r\n//     return {\r\n\r\n//     }\r\n// }\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnTasksTreePropsType, AppStateType>(mapStateToProps, \r\n    {getTaskList, createNewTaskList}) \r\n    (isMobile ? TasksTreeMobile : TasksTreeBrowser)\r\n    \r\n\r\n","import React, { ReactNode } from 'react'\r\nimport { Form, Field, FormikProps } from \"formik\"\r\nimport { AntCheckbox, AntInput, AntInputPassword } from '../../utils/Formik/CreateAntField'\r\nimport { validateEmail, validateRequired } from '../../utils/Formik/ValidateFields'\r\n\r\nconst RegisterForm: ((props: FormikProps<{}>) => ReactNode) = (props) => {\r\n    return(\r\n        <Form\r\n            className=\"form-container\" \r\n            onSubmit={props.handleSubmit}\r\n        >\r\n            <Field\r\n                component={AntInput}\r\n                name=\"name\"\r\n                type=\"text\"\r\n                label=\"Name\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n            <Field\r\n                component={AntInput}\r\n                name=\"email\"\r\n                type=\"email\"\r\n                label=\"Email\"\r\n                validate={validateEmail}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n            <Field\r\n                component={AntInputPassword}\r\n                name=\"password\"\r\n                type=\"password\"\r\n                label=\"Password\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n\r\n            <Field\r\n                component={AntInputPassword}\r\n                name=\"c_password\"\r\n                type=\"password\"\r\n                label=\"Confirm\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n\r\n            <Field\r\n                component={AntCheckbox}\r\n                name=\"remember\"\r\n                label=\"Remember Me\"\r\n                submitCount={props.submitCount}\r\n            />\r\n            <div className=\"submit-container\">\r\n                <button className=\"ant-btn ant-btn-primary\" type=\"submit\">\r\n                    Register\r\n                </button>\r\n            </div>\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default RegisterForm","import { Formik } from 'formik'\r\nimport React, { useEffect } from 'react'\r\nimport RegisterForm from './RegisterForm'\r\nimport { RegisterPropsType } from './RegisterContainer'\r\nimport { propTypes } from 'react-bootstrap/esm/Image'\r\nimport { Redirect, Route, useHistory } from 'react-router-dom'\r\n\r\nconst initialValues = {\r\n    // parent_id :['1', '2', '3']\r\n}\r\n\r\nexport type OwnRegisterPropsType = {}\r\n\r\nconst Register: React.FC<RegisterPropsType> = (props) => {\r\n    let history = useHistory();\r\n    useEffect( () => {\r\n        console.log('useEffect in Register: ', props.isAuth)\r\n        if(props.isAuth) {\r\n            history.replace(props.appLocation+'toDoList')\r\n        }\r\n    }, [props.isAuth])\r\n    const handleSubmit = (formProps: any) => {\r\n        console.log(formProps)\r\n        formProps.status = 'guest'\r\n        props.register(formProps)\r\n    }\r\n\r\n    console.log('Register', props)\r\n    return (\r\n        <>\r\n            <h1 className=\"mb-5 mx-auto\">Register Form</h1>\r\n            <Formik\r\n                initialValues={initialValues}\r\n                onSubmit={handleSubmit}\r\n                render={RegisterForm}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Register","import {connect} from 'react-redux'\r\nimport Register, { OwnRegisterPropsType } from './Register'\r\nimport { AppStateType } from '../../redux/store'\r\nimport {register} from './../../redux/authReducer'\r\n\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    register: (creds: any)=>void\r\n}\r\n\r\nexport type RegisterPropsType = MapPropsType & MapDispatchPropsType & OwnRegisterPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n        appLocation: state.app.location\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnRegisterPropsType, AppStateType>(mapStateToProps, \r\n    {register}) \r\n    (Register)\r\n    \r\n\r\n","import React, { useEffect, useState } from 'react'\r\nimport './App.css'\r\nimport ToDoList from './Components/ToDo/ToDoListContainer'\r\nimport { BrowserRouter, Redirect, Route, Switch, withRouter, useLocation } from 'react-router-dom'\r\nimport { connect, Provider } from 'react-redux'\r\nimport 'antd/dist/antd.css'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport 'antd-mobile/dist/antd-mobile.css'\r\nimport store, { AppStateType } from './redux/store'\r\nimport { Layout, Spin } from 'antd'\r\nimport { compose } from 'redux'\r\nimport { initializeApp, addLocation } from './redux/appReducer'\r\nimport {login} from './redux/authReducer'\r\nimport Header from './Components/Header/HeaderContainer'\r\nimport { isMobile } from \"react-device-detect\"\r\nimport Login from './Components/Login/LoginContainer'\r\nimport Orders from './Components/Orders/OrdersContainer'\r\nimport TasksTree from './Components/TasksTree/TasksTreeContainer'\r\nimport Register from './Components/Register/RegisterContainer'\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\ntype DispatchPropsType = {\r\n  initializeApp: () => void,\r\n  addLocation: (location: string) => void,\r\n  login: (data: any)=> void,\r\n}\r\n\r\nconst App = (props: MapPropsType & DispatchPropsType) => {\r\n  const [location, setLocation] = useState(useLocation().pathname)\r\n\r\n  useEffect(() => {\r\n    if (!props.initialized) {\r\n      // http://localhost:3000/?email=7383125@gmail.com&password=gfhjkm4501\r\n      let instanseCreds = parseQueryString()\r\n      if (instanseCreds.email && instanseCreds.password) {\r\n        instanseCreds.remember = true\r\n        props.login(instanseCreds)\r\n      }\r\n\r\n      if (location === '/front1/') {\r\n        props.addLocation(location)\r\n      }\r\n      //console.log('initialized FALSE', props)\r\n      props.initializeApp()\r\n    } else {\r\n      // console.log('initialized TRUE', props)\r\n    }\r\n  }, [props.initialized])\r\n\r\n\r\n  if (!props.initialized) {\r\n    return <Spin key=\"spin\" size=\"large\" />\r\n  }\r\n\r\n  return (\r\n    <Layout>\r\n      <Header />\r\n      <Switch>\r\n        {!props.isAuth ?\r\n          <Route exact path={props.appLocation}\r\n            render={() => <Redirect to={props.appLocation+'login'} />} />\r\n        :\r\n          <Route exact path={props.appLocation}\r\n            render={() => <Redirect to={props.appLocation+'toDoList'} />} />\r\n        }\r\n        \r\n        {props.isAuth ?\r\n            <Route exact path={props.appLocation+'login'}\r\n              render={ () => <Redirect to={props.appLocation+'toDoList'} /> } \r\n            />  \r\n          :\r\n            null\r\n        }\r\n\r\n        <Route path={props.appLocation+'login'}\r\n          render={() => <Login />} />\r\n        \r\n         <Route path={props.appLocation+'toDoList'}\r\n            render={() => <ToDoList />} />\r\n\r\n          <Route path={props.appLocation+'tasksTree'}\r\n            render={() => <TasksTree />} />\r\n\r\n          <Route path={props.appLocation+'orders'}\r\n            render={() => <Orders />} />\r\n\r\n          <Route path={props.appLocation+'register'}\r\n            render={() => <Register />} />\r\n\r\n          <Route path={props.appLocation+'*'}\r\n            render={() => <div>404 NOT FOUND</div>} />\r\n      </Switch>\r\n    </Layout>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n  initialized: state.app.initialized,\r\n  appLocation: state.app.location,\r\n  isAuth: state.auth.isAuth\r\n})\r\n\r\nlet AppContainer = compose<React.ComponentType>(\r\n  withRouter,\r\n  connect(mapStateToProps, { initializeApp, addLocation, login }))(App)\r\n\r\nconst MainApp = () => {\r\n  return (\r\n    <BrowserRouter>\r\n      <Provider store={store}>\r\n        <div className={isMobile ? \"\" : \"container\"}>\r\n          <AppContainer />\r\n        </div>\r\n      </Provider>\r\n    </BrowserRouter>\r\n  )\r\n}\r\n\r\nexport default MainApp\r\n\r\nconst parseQueryString = (): any => {\r\n  const params:  any = {}\r\n  document.location.search.substr(1).split('&').forEach( (pair) => {\r\n      const [key, value] = pair.split('=')\r\n      params[key] = value\r\n  })\r\n  return params;\r\n};\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './App'\r\nimport reportWebVitals from './reportWebVitals'\r\n\r\nReactDOM.render(\r\n  // <React.StrictMode>\r\n    <App />\r\n  // </React.StrictMode>\r\n  ,\r\n  document.getElementById('root')\r\n)\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(// //console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals()\r\n"],"sourceRoot":""}
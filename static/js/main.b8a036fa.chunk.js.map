{"version":3,"sources":["api/api.ts","Components/NewTaskForm.tsx","api/taskApi.ts","utils/array-helpers.ts","redux/taskReducer.ts","Components/NewTaskFormContainer.tsx","Components/ToDoHeader.tsx","Components/ToDoHeaderContainer.tsx","Components/Settings/SettingsModal.tsx","Components/TimeScale/TaskItem/TaskItem.tsx","Components/TimeScale/TaskItem/TaskItemContainer.tsx","Components/TimeScale/TimeScale.tsx","Components/TimeScale/TimeScaleContainer.tsx","Components/ToDoList.tsx","Components/ToDoListContainer.tsx","redux/store.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ResultCodesEnum","layout","labelCol","span","wrapperCol","tailLayout","offset","TextArea","Input","NewTaskForm","props","Form","useForm","form","useState","selectedDate","setSelectedDate","taskSaveStatus","saveStatus","setSaveStatus","useEffect","console","log","message","success","onClose","error","errorMessage","onReset","resetFields","title","format","placement","closable","visible","width","name","initialValues","remember","onFinish","values","data","date","taskTime","taskName","user_id","description","dateInterval","startDate","moment","isBetween","endDate","undefined","createNewTask","Item","label","rules","required","initialValue","onChange","value","dateString","rows","type","htmlType","onClick","setFieldsValue","instance","axios","create","withCredentials","baseURL","taskAPI","get","then","response","status","catch","err","request","post","taskId","delete","sortTaskArrayByParams","field","a","b","initialState","taskList","taskListIsFetching","isInterval","actions","setTaskList","setTaskSaveStatus","setErrorMessage","setTaskListIsFetching","isFetchingValue","setIsInterval","getTaskList","dispatch","getState","getTaskListForGap","start_date","end_date","taskReducer","state","action","Tasks","sort","connect","task","reload","RangePicker","DatePicker","ToDoHeader","dates","setDates","className","formatString","defaultValue","style","marginLeft","e","target","checked","shape","icon","FileAddOutlined","fontSize","showDrawer","disabled","isAddActive","showModal","SettingOutlined","setIsIntervalAC","SettingsModal","isModalVisible","onOk","handleOk","onCancel","handleCancel","TaskItem","element","setStetus","deleteingInProgess","setDeleteingInProgess","ListGroup","time","split","join","descriptions","textDecoration","id","size","taskid","deleteTask","DeleteOutlined","TimeScale","selestedDates","setSelectedDates","getTimeScaleArrey","sortByParams","timeScaleArrey","tomorowTasks","getHeadlineLabel","headlineDate","length","push","index","orientation","i","timeVal","Number","concat","ToDoList","setVisible","setIsAddActive","setIsModalVisible","onDateChange","onGapDateChange","bordered","rootReducer","combineReducers","store","createStore","applyMiddleware","thunkMiddleware","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b8a036fa.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nexport const instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://crmapiserver.h1n.ru/api/',\r\n    // baseURL: 'https://81.90.181.175/api/',\r\n    // headers:     {\r\n    //     \"API-KEY\": \"b1775b2f-c3a5-4509-8dc9-90b5629de7c3\"\r\n    // }\r\n});\r\n\r\nexport enum ResultCodesEnum {\r\n    Success = 0,\r\n    Error = 1\r\n}\r\n\r\nexport type APIResponseType<D = {}, RC = ResultCodesEnum> = {\r\n    data: D\r\n    messages: Array<string>\r\n    resultCode: RC\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport moment from 'moment'\r\nimport { Form, Input, Button, TimePicker, DatePicker, Drawer, Spin, message } from 'antd'\r\nimport { NewTaskFormPropsType } from './NewTaskFormContainer'\r\nimport { combineReducers } from 'redux'\r\n\r\nconst layout = {\r\n    labelCol: { span: 8 },\r\n    wrapperCol: { span: 16 },\r\n}\r\nconst tailLayout = {\r\n    wrapperCol: { offset: 8, span: 16 },\r\n}\r\n\r\nexport type NewTaskFormOwnPropsType = {\r\n    selectedDate: moment.Moment,\r\n    onClose: () => void\r\n    visible: boolean,\r\n    setVisible: (visible: boolean) => void\r\n}\r\n\r\nconst { TextArea } = Input;\r\n\r\nconst timeFormat: string = 'HH:mm';\r\n\r\ntype FormValuesType = {\r\n    taskName: string | number | readonly string[] | undefined,\r\n    taskTime: moment.Moment | null,\r\n    date: moment.Moment | null,\r\n    description: string | null,\r\n}\r\nconst initialFormValues: FormValuesType = {\r\n    taskName: undefined,\r\n    taskTime: null,\r\n    date: null,\r\n    description: null,\r\n}\r\n\r\nconst NewTaskForm: React.FC<NewTaskFormPropsType> = (props) => {\r\n    const [form] = Form.useForm()\r\n    const [selectedDate, setSelectedDate] = useState<moment.Moment>(props.selectedDate)\r\n    const [saveStatus, setSaveStatus] = useState<string>(props.taskSaveStatus)\r\n    // const [formValues, setFormValues] = useState<FormValuesType>(initialFormValues)\r\n\r\n    \r\n\r\n    useEffect(() => {\r\n        console.log('status changed: ', props.taskSaveStatus)\r\n        switch (props.taskSaveStatus) {\r\n            case 'inProgress':\r\n                setSaveStatus(props.taskSaveStatus)\r\n                break;\r\n            case 'success':\r\n                message.success('The task was successfully created');\r\n                props.onClose()\r\n                setSaveStatus('')\r\n                break;\r\n            case 'error':\r\n                message.error('Error: ' + props.errorMessage);\r\n                setSaveStatus(props.taskSaveStatus)\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n    }, [props.taskSaveStatus]);\r\n\r\n    type OnFinishType = {\r\n        taskName: string,\r\n        date: moment.Moment,\r\n        taskTime: moment.Moment,\r\n        description?: string\r\n    }\r\n    const onFinish = (values: OnFinishType) => {\r\n        console.log('onFinish, reload: ', selectedDate !== props.selectedDate)\r\n        const data = {\r\n            date: values.date.format('YYYY-MM-DD'),\r\n            taskTime: values.taskTime.format('HH:mm'),\r\n            taskName: values.taskName,\r\n            user_id: 1,\r\n            description: values.description\r\n        }\r\n        console.log(selectedDate.format('DD'),'<',props.dateInterval.startDate.format('DD'),'>'\r\n        , props.dateInterval.startDate.format('DD'))\r\n        console.log(\r\n            moment(selectedDate.format('YYYY-MM-DD')).isBetween(\r\n                props.dateInterval.startDate.format('YYYY-MM-DD'), \r\n                props.dateInterval.endDate.format('YYYY-MM-DD'),\r\n                undefined, '[]'\r\n            )\r\n        )\r\n        console.log('selectedDate',selectedDate.format('YYYY-MM-DD HH:MM:SS'))\r\n        console.log('startDate',props.dateInterval.startDate.format('YYYY-MM-DD HH:MM:SS'))\r\n        console.log('endDate',props.dateInterval.endDate.format('YYYY-MM-DD HH:MM:SS'))\r\n\r\n        if (!moment(selectedDate.format('YYYY-MM-DD')).isBetween(\r\n                props.dateInterval.startDate.format('YYYY-MM-DD'), \r\n                props.dateInterval.endDate.format('YYYY-MM-DD'),\r\n                undefined, '[]'\r\n            )) {\r\n            console.log('ПЕРЕРИСОВКИ НЕТ')\r\n            props.createNewTask(data, false)\r\n        } else {\r\n\r\n            props.createNewTask(data, true)\r\n            console.log('ПЕРЕРИСОВКА')\r\n        }\r\n        // setFormValues(initialFormValues)\r\n        form.resetFields(['taskName'])\r\n        onReset()\r\n    };\r\n\r\n    const onReset = () => {\r\n        form.resetFields(['description']);\r\n      }\r\n\r\n    const onFill = () => {\r\n        form.setFieldsValue({\r\n          taskName: 'Hello world!',\r\n          description: 'male',\r\n        });\r\n      };\r\n\r\n    type ErrorItem = {\r\n        errors: string\r\n        name: string\r\n    }\r\n\r\n    const onDateChange = (value: moment.Moment | null, dateString: string): void => {\r\n        // setFormValues({ ...formValues, date: value })\r\n        if (value !== null) {\r\n            setSelectedDate(value)\r\n        }\r\n    }\r\n\r\n    // const onTaskNameChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\r\n    //     setFormValues({ ...formValues, taskName: e.target.value })\r\n    // }\r\n    // const onDescriptionChange = (e: React.ChangeEvent<HTMLTextAreaElement>): void => {\r\n    //     setFormValues({ ...formValues, description: e.target.value })\r\n    // }\r\n    // const onTimrChange = (e: moment.Moment | null, dateString: string): void => {\r\n    //     setFormValues({ ...formValues, taskTime: e })\r\n    // }\r\n\r\n    // console.log('formValues',formValues)\r\n\r\n    return (\r\n        <Drawer\r\n            title={\"Create New Task for \" + selectedDate.format('DD MMM YYYY')}\r\n            placement=\"right\"\r\n            closable={true}\r\n            onClose={props.onClose}\r\n            visible={props.visible}\r\n            width=\"80%\"\r\n        >\r\n            <Form\r\n                {...layout}\r\n                form={form}\r\n                name=\"control-hooks\"\r\n                initialValues={{ remember: true }}\r\n                onFinish={onFinish}\r\n            >\r\n                <Form.Item\r\n                    label=\"Task name\"\r\n                    name=\"taskName\"\r\n                    rules={[{ required: true, message: 'Please input task name!' }]}\r\n                >\r\n                    <Input />\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    label=\"Task date\"\r\n                    name=\"date\"\r\n                    initialValue={props.selectedDate}\r\n                    rules={[{ required: true, message: 'Please input task date!' }]}\r\n                >\r\n                    <DatePicker\r\n                        // defaultValue={props.selectedDate}\r\n                        // value = {formValues.date}\r\n                        onChange={onDateChange}\r\n                        format='DD-MM-YYYY'\r\n                    />\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    label=\"Task time\"\r\n                    name=\"taskTime\"\r\n                    rules={[{ required: true, message: 'Please input task time!' }]}\r\n                >\r\n                    <TimePicker\r\n                        // onChange={onTimrChange}\r\n                        // defaultValue={moment('12:08', timeFormat)} \r\n                        format={timeFormat}\r\n                    />\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    label=\"Description\"\r\n                    name=\"description\"\r\n                >\r\n                    <TextArea rows={2} />\r\n                </Form.Item>\r\n\r\n                <Form.Item {...tailLayout}>\r\n                    {saveStatus === 'inProgress' ?\r\n                        <Spin></Spin>\r\n                        :\r\n                        <Button type=\"primary\" htmlType=\"submit\">\r\n                            Create\r\n                        </Button>\r\n\r\n                    }\r\n                </Form.Item>\r\n                <Button type=\"primary\" onClick={onFill}>\r\n                    clear\r\n                </Button>\r\n            </Form>\r\n        </Drawer>\r\n    )\r\n}\r\n\r\nexport default NewTaskForm","import { NewTaskDataType, TaskType } from '../Types/types'\r\nimport {instance, APIResponseType} from './api'\r\n\r\nexport type TaskListType = {\r\n    Tasks: Array<TaskType>\r\n}\r\n\r\nexport const taskAPI = {\r\n    getTaskList(date: string) {\r\n        return instance.get<TaskListType>(`tasks?date=${date}` ).then(response => {\r\n            return response.status === 200 ? response : null;\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                console.log('err', err.response)\r\n                return err.response\r\n            } else if (err.request) {\r\n                console.log('request', err.request)\r\n            } else {\r\n                console.log('anything else: ', err)\r\n            }\r\n            return null\r\n        })\r\n    },\r\n\r\n    createNewTask(values: NewTaskDataType) {\r\n        return instance.post<TaskListType>(`tasks`, values).then(response => {\r\n            return response.status === 200 ? response : null;\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                return err.response\r\n            } else if (err.request) {\r\n                console.log('request', err.request)\r\n            } else {\r\n                console.log('anything else: ', err)\r\n            }\r\n            return null\r\n        })\r\n    },\r\n\r\n    getTaskListForGap(values: getTaskListForGapValuesType) {\r\n        console.log('getTaskListForGap API', values)\r\n        return instance.post<TaskListType>(`tasks/part`, values).then(response => {\r\n            console.log('response', response)\r\n            return response.status === 200 ? response : null;\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                console.log('err')\r\n                return err.response\r\n            } else if (err.request) {\r\n                console.log('request', err.request)\r\n            } else {\r\n                console.log('anything else: ', err)\r\n            }\r\n            return null\r\n        })\r\n    },\r\n\r\n    deleteTask(taskId: number) {\r\n        return instance.delete<TaskListType>(`tasks/${taskId}`).then(response => {\r\n            return response.status === 200 ? response : null;\r\n        })\r\n    }\r\n}\r\n\r\nexport type getTaskListForGapValuesType = {\r\n    start_date: string, \r\n    end_date: string\r\n}","import { TaskType } from \"../Types/types\";\r\n\r\nexport const sortTaskArrayByParams = (field: 'date' | 'time') => {\r\n    if (field === 'date') {\r\n        return (a: TaskType, b: TaskType) => a['date'] > b['date'] ? 1 : -1;\r\n    } else {\r\n        return (a: TaskType, b: TaskType) => a['time'] > b['time'] ? -1 : 1;\r\n    }\r\n}","import { Dispatch } from 'redux'\r\nimport { taskAPI, TaskListType } from '../api/taskApi'\r\nimport { NewTaskDataType, TaskType } from '../Types/types'\r\nimport { sortTaskArrayByParams } from '../utils/array-helpers'\r\nimport {BaseThunkType, InferActionsTypes} from './store'\r\nimport moment from 'moment'\r\n\r\ntype initialStateType = {\r\n    taskList: null | Array<TaskType>,\r\n    taskListIsFetching: boolean,\r\n    taskSaveStatus: 'no' | 'inProgress' | 'success' | 'error'\r\n    errorMessage: null | string,\r\n    isInterval: boolean,\r\n    dateInterval: {\r\n        startDate: moment.Moment,\r\n        endDate: moment.Moment\r\n    }\r\n}\r\n\r\nlet initialState:initialStateType = {\r\n    taskList: null,\r\n    taskListIsFetching: false,\r\n    taskSaveStatus: 'no',\r\n    errorMessage: null,\r\n    isInterval: false,\r\n    dateInterval: {\r\n        startDate: moment(),\r\n        endDate: moment()\r\n    }\r\n}\r\n\r\nconst taskReducer = (state = initialState, action: ActionsTypes): initialStateType => {\r\n    \r\n    switch (action.type) {\r\n        case 'SN/TASK/SET_TASK_LIST':\r\n            return {...state, taskList: action.taskList.Tasks.sort(sortTaskArrayByParams('time')).sort(sortTaskArrayByParams('date'))}\r\n\r\n        case 'SN/TASK/SET_TASK_SAVE_STATUS':\r\n            return {...state, taskSaveStatus: action.taskSaveStatus}\r\n\r\n        case 'SN/TASK/SET_ERROR_MESSAGE':\r\n            return {...state, errorMessage: action.message}\r\n\r\n        case 'SN/TASK/SET_TASK_LIST_IS_FETCHING':\r\n            return {...state, taskListIsFetching: action.isFetchingValue}\r\n\r\n        case 'SN/TASK/SET_IS_INTERVAL':\r\n            const dateInterval = {\r\n                startDate: action.date.startDate,\r\n                endDate: action.date.endDate\r\n            }\r\n\r\n            console.log('in Reducer: ',dateInterval.startDate.format('DD'),'-',dateInterval.endDate.format('DD'))\r\n            // console.log({...state, isInterval: action.isInterval, dateInterval })\r\n            return {...state, isInterval: action.isInterval, dateInterval }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    setTaskList: (taskList: TaskListType) => ({ type: 'SN/TASK/SET_TASK_LIST', taskList } as const),\r\n    setTaskSaveStatus: (taskSaveStatus: 'no' | 'inProgress' | 'success' | 'error') => ({ type: 'SN/TASK/SET_TASK_SAVE_STATUS', taskSaveStatus } as const),\r\n    setErrorMessage: (message: string | null) => ({type: 'SN/TASK/SET_ERROR_MESSAGE', message} as const),\r\n    setTaskListIsFetching: (isFetchingValue: boolean) => ({type: 'SN/TASK/SET_TASK_LIST_IS_FETCHING', isFetchingValue} as const),\r\n    setIsInterval: (isInterval: boolean, date: {startDate: moment.Moment, endDate: moment.Moment}) => ({type: 'SN/TASK/SET_IS_INTERVAL', isInterval, date} as const)\r\n}\r\n\r\nexport const setIsIntervalAC = (isInterval: boolean): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        // dispatch(actions.setIsInterval(true))\r\n    }\r\n}\r\n\r\nexport const getTaskList = (date: string): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        // console.log(getState())\r\n        dispatch(actions.setTaskListIsFetching(true))\r\n        console.log('setTaskListIsFetching true')\r\n        let response = await taskAPI.getTaskList(date)\r\n        if (response !== null) {\r\n            dispatch(actions.setTaskList(response.data))\r\n            dispatch(actions.setTaskListIsFetching(false))\r\n            console.log('setTaskListIsFetching false')\r\n        } else {\r\n            // add error message\r\n        }\r\n    }\r\n}\r\nexport const createNewTask = (values: NewTaskDataType, reload:boolean = true): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        dispatch(actions.setTaskSaveStatus('inProgress'))\r\n\r\n        let response = await taskAPI.createNewTask(values)\r\n\r\n        if (response.status === 200) {\r\n            if (reload) {\r\n                dispatch(actions.setTaskList(response.data));\r\n            }\r\n            dispatch(actions.setTaskSaveStatus('success'))\r\n            dispatch(actions.setTaskSaveStatus('no'))\r\n        } else {\r\n            dispatch(actions.setErrorMessage(response.data.message))\r\n            dispatch(actions.setTaskSaveStatus('error'))\r\n            dispatch(actions.setTaskSaveStatus('no'))\r\n            dispatch( actions.setErrorMessage(null) )\r\n        }\r\n    }\r\n}\r\n\r\nexport const getTaskListForGap = (startDate: string, endDate:string): ThunkType => {\r\n    console.log('getTaskListForGap', startDate, '-', endDate)\r\n    return async (dispatch, getState) => {\r\n        dispatch(actions.setTaskListIsFetching(true))\r\n\r\n        const values = {start_date: startDate, end_date: endDate}\r\n        let response = await taskAPI.getTaskListForGap(values)\r\n        console.log(response)\r\n        if (response !== null) {\r\n            dispatch(actions.setTaskList(response.data))\r\n        } else {\r\n            // add error message\r\n        }\r\n        dispatch(actions.setTaskListIsFetching(false))\r\n    }\r\n}\r\n\r\nexport const deleteTask = (taskid: number, startDate: string, endDate:string): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        let response = await taskAPI.deleteTask(taskid)\r\n        console.log(response)\r\n        if (response !== null) {\r\n            dispatch(actions.setErrorMessage('Task deletion was successful'))\r\n            dispatch(getTaskListForGap(startDate, endDate))\r\n            dispatch( actions.setErrorMessage(null) )\r\n        }\r\n    }\r\n}\r\n\r\nexport default taskReducer\r\n\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsTypes>\r\nexport type DispatchType = Dispatch<ActionsTypes>\r\n","import {connect} from 'react-redux'\r\nimport NewTaskForm, { NewTaskFormOwnPropsType } from './NewTaskForm'\r\nimport {createNewTask} from './../redux/taskReducer'\r\nimport { AppStateType } from '../redux/store'\r\nimport {NewTaskDataType} from './../Types/types'\r\n\r\nexport type MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype DispatchPropsType = {\r\n    createNewTask: (values:NewTaskDataType, reload:boolean)=> void\r\n}\r\n\r\nexport type NewTaskFormPropsType = MapPropsType & DispatchPropsType & NewTaskFormOwnPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        taskList: state.task.taskList,\r\n        taskSaveStatus: state.task.taskSaveStatus,\r\n        errorMessage: state.task.errorMessage,\r\n        dateInterval: state.task.dateInterval\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, DispatchPropsType, NewTaskFormOwnPropsType, AppStateType>(mapStateToProps, \r\n    {createNewTask}) \r\n    (NewTaskForm);\r\n\r\n\r\n","import React, { useState, useEffect } from 'react'\r\nimport { DatePicker, Checkbox, Button } from 'antd'\r\nimport { FileAddOutlined, SettingOutlined } from '@ant-design/icons'\r\nimport { CheckboxChangeEvent } from 'antd/lib/checkbox'\r\nimport {RangeValue, EventValue} from './../Types/types'\r\nimport { ToDoHeaderPropsType } from './ToDoHeaderContainer'\r\nimport moment from 'moment'\r\n\r\nconst { RangePicker } = DatePicker\r\n\r\nexport type OwnToDoHeaderPropsType = {\r\n    onDateChange: (value: moment.Moment | null, dateString: string) => void,\r\n    getTaskList: (date: string) => void,\r\n    selectedDate: moment.Moment,\r\n    setSelectedDate: React.Dispatch<React.SetStateAction<moment.Moment>>,\r\n    showDrawer: () => void,\r\n    isAddActive: boolean,\r\n    onGapDateChange: (values: RangeValue<moment.Moment>, formatString: [string, string]) => void,\r\n    showModal: () => void,\r\n}\r\n\r\nconst ToDoHeader: React.FC<ToDoHeaderPropsType> = (props) => {\r\n    const [isInterval, setIsInterval] = useState(false)\r\n    const [dates, setDates] = useState<{startDate: moment.Moment, endDate: moment.Moment}>({startDate: moment(), endDate: moment()})\r\n\r\n    useEffect(() => {\r\n        console.log(\r\n            'useEffect setIsInterval in ToDoHeader: ', \r\n            'p-s',props.dateInterval.startDate.format('DD'),\r\n            'p-e',props.dateInterval.endDate.format('DD')\r\n        )\r\n        console.log()\r\n        props.setIsInterval(isInterval, dates)\r\n    }, [isInterval, dates]);\r\n\r\n\r\n    const onDateTypeChange = (e: CheckboxChangeEvent) => {\r\n        if (!e.target.checked) {\r\n            console.log('Необходимо вернуть одну дату если они разные startDate: ', dates.startDate.format('DD'), \r\n            ' ?== ',props.dateInterval.startDate.format('DD'))\r\n            console.log('Необходимо вернуть одну дату если они разные endDate: ', dates.endDate.format('DD'), \r\n            ' ?== ',props.dateInterval.endDate.format('DD'))\r\n            setDates({\r\n                startDate: dates.startDate,\r\n                endDate: dates.startDate\r\n            })\r\n            console.log('setDates runing')\r\n        }\r\n        setIsInterval(e.target.checked)\r\n    }\r\n\r\n    const onDateRangeChange = (values: RangeValue<moment.Moment>, formatString: [string, string]): void => {\r\n        // console.log(values)\r\n        if (values !== null && values[0] !== null && values[1] !== null ) {\r\n            setDates({\r\n                startDate: values[0],\r\n                endDate: values[1],\r\n            })\r\n        }\r\n        \r\n    }\r\n\r\n    const onDateChange = (value: moment.Moment | null, dateString: string):void => {\r\n        if (value !== null) {\r\n            setDates({\r\n                startDate: value,\r\n                endDate: value,\r\n            })\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"row\" >\r\n            <div className=\"col-12 col-md-8 col-lg-6\">\r\n                <div className=\"d-none d-sm-inline\">\r\n                    <label >Select {isInterval ? \"date interval\" : \"date\"}:</label>\r\n                </div>\r\n\r\n                <div className=\"d-inline\">\r\n                    {isInterval ?\r\n                        <RangePicker\r\n                            onChange={onDateRangeChange}\r\n                            defaultValue={[props.selectedDate, props.selectedDate]}\r\n                            value = {[props.dateInterval.startDate, props.dateInterval.endDate]}\r\n                            format='DD-MM-YYYY'\r\n                            style={{ marginLeft: 10 }}\r\n                        />\r\n                        :\r\n                        <DatePicker\r\n                            onChange={onDateChange}\r\n                            defaultValue={props.dateInterval.startDate}\r\n                            format='DD-MM-YYYY'\r\n                            style={{ marginLeft: 10 }}\r\n                        />\r\n                    }\r\n                </div>\r\n            </div>\r\n            <div className=\"col-12 col-md-4 col-lg-2 m-2 m-md-0\" >\r\n                <Checkbox className=\"ml-3\" onChange={onDateTypeChange}>Date interval</Checkbox>\r\n            </div>\r\n            <div className=\"col-12 col-md-12 col-lg-4\">\r\n                <Button\r\n                    type=\"primary\"\r\n                    shape=\"round\"\r\n                    icon={\r\n                        <div className=\"d-flex flex-wrap align-content-start\">\r\n                            <FileAddOutlined style={{ fontSize: '18px' }} />\r\n                            <span className=\"ml-1\" style={{ fontSize: '14px' }}>Add</span>\r\n                        </div>}\r\n                    style={{ marginLeft: 10 }}\r\n                    onClick={props.showDrawer}\r\n                    disabled={props.isAddActive}\r\n                />\r\n\r\n                <Button className=\"\"\r\n                    type=\"primary\"\r\n                    shape=\"round\"\r\n                    style={{ marginLeft: 10 }}\r\n                    onClick={props.showModal}\r\n                    icon={\r\n                        <div className=\"d-flex flex-wrap align-content-start\">\r\n                            <SettingOutlined style={{ fontSize: '18px' }} />\r\n                            <span className=\"ml-1\" style={{ fontSize: '14px' }}>Settings</span>\r\n                        </div>} \r\n                    />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ToDoHeader","import {connect} from 'react-redux'\r\nimport ToDoHeader, { OwnToDoHeaderPropsType } from './ToDoHeader'\r\nimport {setIsIntervalAC, getTaskList, actions} from './../redux/taskReducer'\r\nimport { AppStateType } from '../redux/store'\r\n// import { Action } from 'redux'\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    setIsIntervalAC: (isInterval: boolean) => void,\r\n    getTaskList: (date: string) => void\r\n    setIsInterval: (isInterval: boolean, date: {startDate: moment.Moment, endDate: moment.Moment}) => {\r\n        type: \"SN/TASK/SET_IS_INTERVAL\",\r\n        isInterval: boolean,\r\n        date: {startDate: moment.Moment, endDate: moment.Moment}\r\n    }\r\n}\r\n\r\nexport type ToDoHeaderPropsType = MapPropsType & MapDispatchPropsType & OwnToDoHeaderPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        dateInterval: state.task.dateInterval\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnToDoHeaderPropsType, AppStateType>(mapStateToProps, \r\n    {setIsIntervalAC, getTaskList, setIsInterval: actions.setIsInterval}) \r\n    (ToDoHeader);\r\n    \r\n\r\n","import React from 'react'\r\nimport { Modal } from 'antd'\r\n\r\nconst SettingsModal = (props:any) => {\r\n    // console.log('SettingsModal props', props)\r\n    return (\r\n        <Modal title=\"Basic Modal\" visible={props.isModalVisible} onOk={props.handleOk} onCancel={props.handleCancel}>\r\n            <p>Some contents...</p>\r\n            <p>Some contents...</p>\r\n            <p>Some contents...</p>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default SettingsModal","import React, { useState } from 'react'\r\nimport { Col, Row, Checkbox, Tooltip, Button, Spin } from 'antd'\r\nimport { CheckboxChangeEvent } from 'antd/lib/checkbox'\r\nimport { ListGroup } from 'react-bootstrap'\r\nimport { TaskType } from '../../../Types/types'\r\nimport { DeleteOutlined } from '@ant-design/icons'\r\nimport { TaskItemPropsType } from './TaskItemContainer'\r\n\r\nexport type OwnTaskItemPropsType = {\r\n    element: TaskType\r\n}\r\n\r\nconst TaskItem: React.FC<TaskItemPropsType> = (props) => {\r\n    type PropsElementType = typeof props.element.type\r\n    const [status, setStetus] = useState<PropsElementType>(props.element.type)\r\n    const [deleteingInProgess, setDeleteingInProgess] = useState(false)\r\n\r\n    const onStatusChange = (e: CheckboxChangeEvent) => {\r\n        console.log(e.target.checked)\r\n        if (e.target.checked) {\r\n            setStetus('completed')\r\n        } else {\r\n            setStetus('active')\r\n        }\r\n    }\r\n\r\n    const deleteTask: (taskid: number) => void = (taskid) => {\r\n        console.log(taskid)\r\n        setDeleteingInProgess(true)\r\n        props.deleteTask(taskid, props.dateInterval.startDate.format('YYYY-MM-DD'), props.dateInterval.endDate.format('YYYY-MM-DD'))\r\n    }\r\n\r\n    return (\r\n        <ListGroup.Item action className=\"py-1\">\r\n            <Row>\r\n                <Col className=\"mx-2\">\r\n                    <Checkbox onChange={onStatusChange} />\r\n                </Col>\r\n                <Col className=\"mx-2\">\r\n                    {props.element.time.split(':', 2).join(':')}\r\n                </Col>\r\n                <Col className=\"mx-2\">\r\n                    <Tooltip key={props.element.id} placement=\"topLeft\" title={props.element.descriptions}>\r\n                        <span\r\n                            style={{ textDecoration: status === 'completed' ? 'line-through' : '' }}\r\n                        >\r\n                            {props.element.name}\r\n                        </span>\r\n                    </Tooltip>\r\n                </Col>\r\n                <Col className=\"mr-0 ml-auto\">\r\n                    {!deleteingInProgess ? \r\n                    <Button className=\"\"\r\n                        type=\"primary\"\r\n                        shape=\"circle\"\r\n                        size=\"small\"\r\n                        style={{ marginLeft: 10 }}\r\n                        onClick={() => { deleteTask(props.element.id) }}\r\n                        icon={\r\n                            <div className=\"d-flex flex-wrap align-content-start\">\r\n                                <DeleteOutlined className=\"ml-1\" style={{ fontSize: '14px' }} />\r\n                            </div>\r\n                        }\r\n                    />\r\n                    :\r\n                    <Spin key=\"spin\" size=\"small\" />\r\n                    }\r\n                </Col>\r\n            </Row>\r\n\r\n        </ListGroup.Item>\r\n    )\r\n}\r\n\r\nexport default TaskItem\r\n","import {connect} from 'react-redux'\r\nimport TaskItem, { OwnTaskItemPropsType } from './TaskItem'\r\nimport {deleteTask, getTaskListForGap} from './../../../redux/taskReducer'\r\nimport {AppStateType} from '../../../redux/store'\r\nimport {NewTaskDataType} from './../../../Types/types'\r\n\r\nexport type MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype DispatchPropsType = {\r\n    deleteTask: (taskid: number, startDate: string, endDate: string) => void\r\n    getTaskListForGap: (startDate: string, endDate: string) => void\r\n}\r\n\r\nexport type TaskItemPropsType = MapPropsType & DispatchPropsType & OwnTaskItemPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        dateInterval: state.task.dateInterval,\r\n        // taskSaveStatus: state.task.taskSaveStatus,\r\n        // errorMessage: state.task.errorMessage\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, DispatchPropsType, OwnTaskItemPropsType, AppStateType>(mapStateToProps, \r\n    {deleteTask, getTaskListForGap}) \r\n    (TaskItem);","import React, { useEffect, useState } from 'react'\r\nimport { TaskType } from '../../Types/types'\r\nimport moment from 'moment'\r\nimport { TimeScalePropsType } from './TimeScaleContainer'\r\nimport { Divider, Spin, Tooltip, message } from 'antd'\r\nimport TaskItem from './TaskItem/TaskItemContainer'\r\n\r\n\r\n// const compareMoments\r\n\r\nexport type OwnTaskTimeScaleType = {}\r\nconst TimeScale: React.FC<TimeScalePropsType> = (props) => {\r\n    type SelestedDatesType = typeof props.dateInterval\r\n    const [selestedDates, setSelectedDates] = useState<SelestedDatesType>({ startDate: moment(null), endDate: moment() })\r\n    useEffect(() => {\r\n        // console.log('dateInterval in TimeScale: ', props)\r\n        if (\r\n            props.dateInterval.startDate.format('YYYY-MM-DD') === selestedDates.startDate.format('YYYY-MM-DD') &&\r\n            props.dateInterval.endDate.format('YYYY-MM-DD') === selestedDates.endDate.format('YYYY-MM-DD')\r\n        ) {\r\n            // console.log('startDate', props.dateInterval.startDate.format('DD'), ' === ', selestedDates.startDate.format('DD'))\r\n            // console.log('endDate', props.dateInterval.endDate.format('DD'), ' === ', selestedDates.endDate.format('DD'))\r\n        } else {\r\n            // console.log('startDate', props.dateInterval.startDate.format('DD'), ' !== ', selestedDates.startDate.format('DD'))\r\n            // console.log('endDate', props.dateInterval.endDate.format('DD'), ' !== ', selestedDates.endDate.format('DD'))\r\n            if (props.dateInterval.startDate !== null && props.dateInterval.startDate !== null) {\r\n                console.log(props.dateInterval.startDate.format('YYYY-MM-DD'),' - ', props.dateInterval.endDate.format('YYYY-MM-DD'))\r\n                props.getTaskListForGap(\r\n                    props.dateInterval.startDate.format('YYYY-MM-DD'), \r\n                    props.dateInterval.endDate.format('YYYY-MM-DD')\r\n                )\r\n                setSelectedDates(props.dateInterval)\r\n            }\r\n        }\r\n    }, [props.dateInterval]);\r\n\r\n    useEffect(() => {\r\n        if (props.errorMessage !== null) {\r\n            message.success(props.errorMessage);\r\n        }\r\n    }, [props.errorMessage])\r\n\r\n    if (props.taskList !== null) {\r\n        return (\r\n            <>\r\n                {props.taskListIsFetching ? <Spin key=\"spin\" size=\"large\" /> : null}\r\n                {getTimeScaleArrey(props.taskList)}\r\n            </>\r\n        )\r\n    } else {\r\n        return (\r\n            <Spin key=\"spin\" size=\"large\" />\r\n        )\r\n    }\r\n}\r\n\r\nexport default TimeScale\r\n\r\n\r\nconst getTimeScaleArrey = (taskList: Array<TaskType>): Array<React.ReactElement<string>> => {\r\n    const sortByParams = (field: 'date' | 'time') => {\r\n        if (field === 'date') {\r\n            return (a: TaskType, b: TaskType) => a['date'] > b['date'] ? 1 : -1;\r\n        } else {\r\n            return (a: TaskType, b: TaskType) => a['time'] > b['time'] ? -1 : 1;\r\n        }\r\n    }\r\n\r\n    taskList.sort(sortByParams('time')).sort(sortByParams('date'))\r\n\r\n    let timeScaleArrey: Array<React.ReactElement<string>> = []\r\n    let tomorowTasks: Array<TaskType> = []\r\n\r\n    const getHeadlineLabel = (task: TaskType) => {\r\n        return moment(task.date).format('DD MMMM')\r\n    }\r\n\r\n    let headlineDate: string | null = null;\r\n\r\n    if (taskList !== null && taskList.length > 0) {\r\n        headlineDate = getHeadlineLabel(taskList[0])\r\n        timeScaleArrey.push(\r\n            <h3 key={headlineDate + 'title'}>{headlineDate}:</h3>\r\n        )\r\n    }\r\n\r\n    for (let index: number = 0; index < 24; index++) {\r\n        if (taskList.length > 0) {\r\n            timeScaleArrey.push(\r\n                <Divider key={index + 'to' + headlineDate} orientation=\"left\">\r\n                    {index <= 9 ? '0' : null}{index}:00\r\n                </Divider>\r\n            )\r\n        } else {\r\n            timeScaleArrey.push(<h3>no tasks</h3>)\r\n            break\r\n        }\r\n\r\n        if (taskList !== null) {\r\n            for (let i = 0; i < taskList.length; i++) {\r\n                const element: TaskType = taskList[i];\r\n                const timeVal = Number(element.time.split(':', 1))\r\n                const nextHour = index + 1\r\n                if (timeVal >= index && timeVal < nextHour) {\r\n                    if (getHeadlineLabel(element) === headlineDate) {\r\n                        timeScaleArrey.push(\r\n                            <Tooltip key={index + '-' + element.id} placement=\"topLeft\" title={element.descriptions}>\r\n                                <TaskItem element={element} />\r\n                            </Tooltip>\r\n                        )\r\n                    }\r\n                    else {\r\n                        tomorowTasks.push(element)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (tomorowTasks.length > 0) {\r\n        timeScaleArrey = timeScaleArrey.concat(getTimeScaleArrey(tomorowTasks))\r\n    }\r\n\r\n    return timeScaleArrey\r\n}","import {connect} from 'react-redux'\r\nimport TimeScale from './TimeScale'\r\nimport {getTaskListForGap} from './../../redux/taskReducer'\r\nimport { AppStateType } from '../../redux/store'\r\nimport { OwnTaskTimeScaleType } from './TimeScale'\r\n\r\nexport type MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype DispatchPropsType = {\r\n    getTaskListForGap: (startDate: string, endDate: string) => void\r\n}\r\n\r\nexport type TimeScalePropsType = MapPropsType & DispatchPropsType & OwnTaskTimeScaleType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        taskList: state.task.taskList,\r\n        taskSaveStatus: state.task.taskSaveStatus,\r\n        taskListIsFetching: state.task.taskListIsFetching,\r\n        dateInterval: state.task.dateInterval,\r\n        errorMessage: state.task.errorMessage\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, DispatchPropsType, OwnTaskTimeScaleType, AppStateType>(mapStateToProps, \r\n    {getTaskListForGap}) \r\n    (TimeScale);\r\n\r\n\r\n","import React, { useState, useEffect } from 'react'\r\nimport { Spin, Card, Divider, Tooltip } from 'antd'\r\nimport moment from 'moment'\r\nimport NewTaskForm from './NewTaskFormContainer'\r\nimport ToDoHeader from './ToDoHeaderContainer'\r\nimport SettingsModal from './Settings/SettingsModal'\r\nimport { TaskType } from './../Types/types'\r\nimport { RangeValue, EventValue } from './../Types/types'\r\nimport { ToDoListPropsType } from './ToDoListContainer'\r\nimport TaskItem from './TimeScale/TaskItem/TaskItem'\r\nimport TimeScale from './TimeScale/TimeScaleContainer'\r\n\r\nexport type OwnToDoListPropsType = {}\r\n\r\nconst ToDoList: React.FC<ToDoListPropsType> = (props) => {\r\n    const [selectedDate, setSelectedDate] = useState<moment.Moment>(moment())\r\n    const [visible, setVisible] = useState(false)\r\n    const [isAddActive, setIsAddActive] = useState(false)\r\n    // const [timeScaleBlock, setTimeScaleBlock] = useState<Array<React.ReactElement<string>> | null>(null)\r\n    // const [showingMode, setShowingMode] = useState<'date' | 'interval'>('date')\r\n    const [isModalVisible, setIsModalVisible] = useState(false);\r\n\r\n    // useEffect(() => {\r\n    //     props.getTaskList(selectedDate.format('YYYY-MM-DD'))\r\n    // }, [selectedDate]);\r\n\r\n    const onDateChange = (value: moment.Moment | null, dateString: string): void => {\r\n        console.log('2) onDateChange value:', value)\r\n        if (value !== null) {\r\n            setSelectedDate(value)\r\n            setIsAddActive(false)\r\n        } else {\r\n            setSelectedDate(moment(null))\r\n            setIsAddActive(true)\r\n        }\r\n    }\r\n\r\n    const onGapDateChange = (values: RangeValue<moment.Moment>, formatString: [string, string]): void => {\r\n        console.log('onGapDateChange')\r\n        if (values !== null && values[0] !== null && values[1] !== null) {\r\n            props.getTaskListForGap(values[0].format('YYYY-MM-DD'), values[1].format('YYYY-MM-DD'))\r\n        }\r\n    }\r\n\r\n    const showDrawer = (): void => {\r\n        setVisible(true);\r\n    }\r\n\r\n    const onClose = (): void => {\r\n        setVisible(false);\r\n    }\r\n\r\n    const showModal = () => {\r\n        setIsModalVisible(true);\r\n    };\r\n\r\n    const handleOk = () => {\r\n        setIsModalVisible(false);\r\n    };\r\n\r\n    const handleCancel = () => {\r\n        setIsModalVisible(false);\r\n    };\r\n\r\n    // console.log('ToDoList props: ', props)\r\n    return (\r\n        <>\r\n            <div className=\"site-card-border-less-wrapper\">\r\n                <Card\r\n                    title={<ToDoHeader\r\n                        onDateChange={onDateChange}\r\n                        getTaskList={props.getTaskList}\r\n                        selectedDate={selectedDate}\r\n                        setSelectedDate={setSelectedDate}\r\n                        showDrawer={showDrawer}\r\n                        isAddActive={isAddActive}\r\n                        onGapDateChange={onGapDateChange}\r\n                        showModal={showModal}\r\n                    />}\r\n                    bordered={false}\r\n                >\r\n\r\n                    <SettingsModal isModalVisible={isModalVisible} handleOk={handleOk} handleCancel={handleCancel}>\r\n                        <p>Some contents...</p>\r\n                        <p>Some contents...</p>\r\n                        <p>Some contents...</p>\r\n                    </SettingsModal>\r\n\r\n                    <TimeScale />\r\n\r\n                </Card>\r\n\r\n                <NewTaskForm\r\n                    selectedDate={selectedDate}\r\n                    onClose={onClose}\r\n                    visible={visible}\r\n                    setVisible={setVisible}\r\n                // setSelectedDate={setSelectedDate}\r\n                />\r\n\r\n            </div>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ToDoList","import {connect} from 'react-redux'\r\nimport ToDoList, { OwnToDoListPropsType } from './ToDoList'\r\nimport {getTaskList, getTaskListForGap} from './../redux/taskReducer'\r\nimport { AppStateType } from '../redux/store'\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    getTaskList: (date: string)=>void,\r\n    getTaskListForGap: (start_date: string, end_date:string)=>void\r\n}\r\n\r\nexport type ToDoListPropsType = MapPropsType & MapDispatchPropsType & OwnToDoListPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        taskList: state.task.taskList,\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnToDoListPropsType, AppStateType>(mapStateToProps, \r\n    {getTaskList, getTaskListForGap}) \r\n    (ToDoList);\r\n    \r\n\r\n","import {Action, applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport thunkMiddleware, {ThunkAction} from \"redux-thunk\";\r\nimport taskReducer from './taskReducer';\r\n\r\n\r\nlet rootReducer = combineReducers({\r\n    task: taskReducer\r\n});\r\n\r\ntype rootReducerType = typeof rootReducer\r\nexport type AppStateType = ReturnType<rootReducerType>\r\n\r\nexport type InferActionsTypes<T> = T extends { [keys: string]: (...args: any[]) => infer U } ? U : never\r\nexport type BaseThunkType<A extends Action = Action, R = Promise<void>> = ThunkAction<R, AppStateType, unknown, A>\r\n\r\nlet store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n\r\nexport default store;","import React from 'react'\r\nimport './App.css'\r\nimport ToDoList from './Components/ToDoListContainer'\r\nimport 'antd/dist/antd.css'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport { Provider } from 'react-redux';\r\nimport store from './redux/store';\r\n\r\nconst App = () => {\r\n\r\n  return (\r\n    <Provider store={store}>\r\n      <div className=\"container-fluid\">\r\n        <ToDoList />\r\n      </div>\r\n    </Provider>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  // <React.StrictMode>\r\n    <App />\r\n  // </React.StrictMode>\r\n  ,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}
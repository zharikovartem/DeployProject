[{"C:\\OSPanel\\domains\\epam-app\\src\\index.tsx":"1","C:\\OSPanel\\domains\\epam-app\\src\\reportWebVitals.ts":"2","C:\\OSPanel\\domains\\epam-app\\src\\App.tsx":"3","C:\\OSPanel\\domains\\epam-app\\src\\Components\\ToDoList.tsx":"4","C:\\OSPanel\\domains\\epam-app\\src\\Components\\NewTaskForm.tsx":"5","C:\\OSPanel\\domains\\epam-app\\src\\Components\\NewTaskFormContainer.tsx":"6","C:\\OSPanel\\domains\\epam-app\\src\\redux\\store.js":"7","C:\\OSPanel\\domains\\epam-app\\src\\Components\\ToDoListContainer.tsx":"8","C:\\OSPanel\\domains\\epam-app\\src\\api\\api.ts":"9","C:\\OSPanel\\domains\\epam-app\\src\\redux\\taskReducer.ts":"10"},{"size":517,"mtime":1611045973904,"results":"11","hashOfConfig":"12"},{"size":440,"mtime":1611045973906,"results":"13","hashOfConfig":"12"},{"size":403,"mtime":1611049435370,"results":"14","hashOfConfig":"12"},{"size":3884,"mtime":1611142121243,"results":"15","hashOfConfig":"12"},{"size":2139,"mtime":1611144310838,"results":"16","hashOfConfig":"12"},{"size":316,"mtime":1611144516017,"results":"17","hashOfConfig":"12"},{"size":319,"mtime":1611144501679,"results":"18","hashOfConfig":"12"},{"size":319,"mtime":1611144510702,"results":"19","hashOfConfig":"12"},{"size":1292,"mtime":1611144425450,"results":"20","hashOfConfig":"12"},{"size":1844,"mtime":1611144661963,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"547qvp",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"24"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\OSPanel\\domains\\epam-app\\src\\index.tsx",[],["45","46"],"C:\\OSPanel\\domains\\epam-app\\src\\reportWebVitals.ts",[],"C:\\OSPanel\\domains\\epam-app\\src\\App.tsx",[],"C:\\OSPanel\\domains\\epam-app\\src\\Components\\ToDoList.tsx",["47"],"import React, { useState, useEffect } from 'react'\r\nimport { DatePicker, Card, Divider, Button, Drawer } from 'antd'\r\nimport { FileAddOutlined } from '@ant-design/icons'\r\nimport moment from 'moment'\r\nimport NewTaskForm from './NewTaskFormContainer'\r\n\r\nconst ToDoList: React.FC = (props: any) => {\r\n    const [selectedDate, setselectedDate] = useState<moment.Moment>(moment())\r\n    const [visible, setVisible] = useState(false)\r\n    const [isAddActive, setIsAddActive] = useState(false)\r\n\r\n    useEffect(() => {\r\n        console.log('useEffect', props)\r\n        if (props.taskList === null) {\r\n            // const requestOptions: RequestInit = {\r\n            //     method: 'GET',\r\n            //     headers: {\r\n            //         'Content-Type': 'application/json'\r\n            //     },\r\n            // }\r\n            // const url = 'https://81.90.181.175/api/tasks?date=' + selectedDate.format('YYYY-MM-DD')\r\n\r\n            // fetch(url, requestOptions)\r\n            //     .then( response => response.json() )\r\n            //     .then(data => console.log('response: ', data))\r\n            //     .catch((e) => console.log(\"Canâ€™t access  Error:.\", e))\r\n\r\n            props.getTaskList(selectedDate.format('YYYY-MM-DD'))\r\n        }\r\n\r\n    }, [props.taskList]);\r\n\r\n    const onDateChange = (value: moment.Moment | null, dateString: string): void => {\r\n        if (value !== null) {\r\n            setselectedDate(value)\r\n            setIsAddActive(false)\r\n        } else {\r\n            setselectedDate(moment(null))\r\n            setIsAddActive(true)\r\n        }\r\n    }\r\n\r\n    const showDrawer = (): void => {\r\n        setVisible(true);\r\n    }\r\n\r\n    const onClose = (): void => {\r\n        setVisible(false);\r\n    }\r\n\r\n    type timeScaleItemType = React.ReactElement<string>\r\n    const timeScale = (): Array<timeScaleItemType> => {\r\n        let timeScaleArrey: Array<timeScaleItemType> = []\r\n        for (let index: number = 0; index < 24; index++) {\r\n\r\n            timeScaleArrey.push(\r\n                <Divider key={index} orientation=\"left\">\r\n                    {index <= 9 ? '0' : null}{index}:00\r\n                </Divider>)\r\n        }\r\n        return timeScaleArrey\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"site-card-border-less-wrapper\">\r\n                <Card\r\n                    title={\r\n                        <>\r\n                            <label>Select date:</label>\r\n                            <DatePicker\r\n                                onChange={onDateChange}\r\n                                defaultValue={selectedDate}\r\n                                format='DD-MM-YYYY'\r\n                                style={{ marginLeft: 10 }}\r\n                            />\r\n                            <Button\r\n                                type=\"primary\"\r\n                                shape=\"round\"\r\n                                icon={<FileAddOutlined />}\r\n                                style={{ marginLeft: 10 }}\r\n                                size=\"small\"\r\n                                onClick={showDrawer}\r\n                                disabled={isAddActive}\r\n                            >\r\n                                Add\r\n                            </Button>\r\n                        </>\r\n                    }\r\n                    bordered={false}\r\n                >\r\n                    {timeScale()}\r\n                </Card>\r\n\r\n                <Drawer\r\n                    title={\"Create New Task for \" + selectedDate.format('DD MMM YYYY')}\r\n                    placement=\"right\"\r\n                    closable={false}\r\n                    onClose={onClose}\r\n                    visible={visible}\r\n                    width=\"80%\"\r\n                >\r\n                    <NewTaskForm selectedDate={selectedDate} />\r\n                </Drawer>\r\n            </div>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ToDoList","C:\\OSPanel\\domains\\epam-app\\src\\Components\\NewTaskForm.tsx",[],"C:\\OSPanel\\domains\\epam-app\\src\\Components\\NewTaskFormContainer.tsx",[],"C:\\OSPanel\\domains\\epam-app\\src\\redux\\store.js",[],["48","49"],"C:\\OSPanel\\domains\\epam-app\\src\\Components\\ToDoListContainer.tsx",[],"C:\\OSPanel\\domains\\epam-app\\src\\api\\api.ts",[],"C:\\OSPanel\\domains\\epam-app\\src\\redux\\taskReducer.ts",[],{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","severity":1,"message":"55","line":31,"column":8,"nodeType":"56","endLine":31,"endColumn":24,"suggestions":"57"},{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","replacedBy":"53"},"no-native-reassign",["58"],"no-negated-in-lhs",["59"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'props' and 'selectedDate'. Either include them or remove the dependency array.","ArrayExpression",["60"],"no-global-assign","no-unsafe-negation",{"desc":"61","fix":"62"},"Update the dependencies array to be: [props, props.taskList, selectedDate]",{"range":"63","text":"64"},[1249,1265],"[props, props.taskList, selectedDate]"]
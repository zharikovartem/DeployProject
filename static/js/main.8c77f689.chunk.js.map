{"version":3,"sources":["Components/NewTaskForm.tsx","redux/taskReducer.ts","Components/NewTaskFormContainer.tsx","Components/ToDoList.tsx","Components/ToDoListContainer.tsx","redux/store.js","App.tsx","reportWebVitals.ts","index.tsx"],"names":["layout","labelCol","span","wrapperCol","tailLayout","offset","TextArea","Input","NewTaskForm","props","console","log","name","initialValues","remember","onFinish","values","newTask","onFinishFailed","errorInfo","Item","label","rules","required","message","onChange","value","dateString","format","rows","type","htmlType","SET_TASK_LIST","initialState","taskList","taskReducer","state","action","stateCopy","connect","task","data","ToDoList","useState","moment","selectedDate","setselectedDate","visible","setVisible","isAddActive","setIsAddActive","useEffect","getTaskList","className","title","defaultValue","style","marginLeft","shape","icon","FileAddOutlined","size","onClick","disabled","bordered","timeScaleArrey","index","push","orientation","timeScale","placement","closable","onClose","width","date","dispatch","fetch","method","headers","then","response","json","catch","e","redusers","combineReducers","store","createStore","applyMiddleware","thunkMiddleware","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8c77f689.chunk.js","sourcesContent":["import * as React from 'react'\r\nimport moment from 'moment'\r\nimport { Form, Input, Button, TimePicker } from 'antd'\r\n\r\nconst layout = {\r\n    labelCol: { span: 8 },\r\n    wrapperCol: { span: 16 },\r\n}\r\nconst tailLayout = {\r\n    wrapperCol: { offset: 8, span: 16 },\r\n}\r\n\r\ntype PropsType = {\r\n    selectedDate: moment.Moment\r\n}\r\n\r\nconst { TextArea } = Input;\r\n\r\nconst timeFormat: string = 'HH:mm';\r\n\r\nconst NewTaskForm: React.FC<PropsType> = (props:any) => {\r\n    const onFinish = (values: any) => {\r\n        console.log('Success:', values);\r\n        props.newTask(values)\r\n    };\r\n\r\n    const onFinishFailed = (errorInfo: any) => {\r\n        console.log('Failed:', errorInfo);\r\n    };\r\n\r\n    const onTimeChange = (value: moment.Moment | null, dateString: string):void => {\r\n        console.log(value, dateString);\r\n    }\r\n\r\n    console.log(props)\r\n\r\n    return (\r\n        <Form\r\n            {...layout}\r\n            name=\"basic\"\r\n            initialValues={{ remember: true }}\r\n            onFinish={onFinish}\r\n            onFinishFailed={onFinishFailed}\r\n        >\r\n            <Form.Item\r\n                label=\"Task name\"\r\n                name=\"taskNime\"\r\n                rules={[{ required: true, message: 'Please input task name!' }]}\r\n            >\r\n                <Input />\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n                label=\"Task time\"\r\n                name=\"taskTime\"\r\n                rules={[{ required: true, message: 'Please input time!' }]}\r\n            >\r\n                <TimePicker \r\n                    onChange={onTimeChange} \r\n                    // defaultValue={moment('12:08', timeFormat)} \r\n                    format={timeFormat} \r\n                />\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n                label=\"Description\"\r\n                name=\"description\"\r\n            >\r\n                <TextArea rows={2} />\r\n            </Form.Item>\r\n\r\n            <Form.Item {...tailLayout}>\r\n                <Button type=\"primary\" htmlType=\"submit\">\r\n                    Create\r\n                </Button>\r\n            </Form.Item>\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default NewTaskForm","// import { taskAPI } from '../api/api'\r\n\r\nconst SET_TASK_LIST = \"SET_TASK_LIST\"\r\n\r\nlet initialState = {\r\n    taskList: null,\r\n}\r\n\r\nconst taskReducer = (state = initialState, action: any) => {\r\n    let stateCopy = { ...state }\r\n    switch (action.type) {\r\n        case SET_TASK_LIST:\r\n            stateCopy.taskList = action.taskList\r\n            console.log('taskList: ', action.taskList)\r\n            return stateCopy\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setTaskList = (taskList: any) => ({ type: SET_TASK_LIST, taskList })\r\n// export const setTest = (toDoData) => ({ type: TEST_CONSTANT, testData })\r\n// export const setTest = (toDoData) => ({ type: TEST_CONSTANT, testData })\r\n// export const setTest = (toDoData) => ({ type: TEST_CONSTANT, testData })\r\n\r\nexport const getTaskList = (date: any) => {\r\n    return (dispatch: any) => {\r\n        const requestOptions = {\r\n            method: 'GET',\r\n            headers: { 'Content-Type': 'application/json'},\r\n        }\r\n        const url = 'https://81.90.181.175/api/tasks?date=' + date\r\n        fetch(url, requestOptions)\r\n            .then( response => response.json() )\r\n            .then(data => {\r\n                console.log('response: ', data)\r\n                // return data\r\n                dispatch(setTaskList(data));\r\n            })\r\n            .catch((e) => console.log(\"Canâ€™t access  Error:.\", e))\r\n    }\r\n}\r\n\r\nexport const newTask = (data: any) => {\r\n    // console.log('data in reducer: ', data)\r\n    // return (dispatch: any) => {\r\n    //     taskAPI.newTask(data).then( (response: any) => {\r\n    //         // dispatch(setTaskList(response));\r\n    //         console.log(response)\r\n    //     })\r\n    // }\r\n}\r\n\r\nexport const editTask = (data: any) => {\r\n}\r\n\r\nexport const deleteTask = (data: any) => {\r\n}\r\n\r\nexport default taskReducer\r\n","import {connect} from 'react-redux'\r\nimport NewTaskForm from './NewTaskForm'\r\nimport {newTask} from './../redux/taskReducer'\r\n\r\nlet mapStateToProps = (state:any) => {\r\n    return {\r\n        taskList: state.task.taskList\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, \r\n    {newTask}) \r\n    (NewTaskForm);\r\n\r\n\r\n","import React, { useState, useEffect } from 'react'\r\nimport { DatePicker, Card, Divider, Button, Drawer } from 'antd'\r\nimport { FileAddOutlined } from '@ant-design/icons'\r\nimport moment from 'moment'\r\nimport NewTaskForm from './NewTaskFormContainer'\r\n\r\nconst ToDoList: React.FC = (props: any) => {\r\n    const [selectedDate, setselectedDate] = useState<moment.Moment>(moment())\r\n    const [visible, setVisible] = useState(false)\r\n    const [isAddActive, setIsAddActive] = useState(false)\r\n\r\n    useEffect(() => {\r\n        console.log('useEffect', props)\r\n        if (props.taskList === null) {\r\n            // const requestOptions: RequestInit = {\r\n            //     method: 'GET',\r\n            //     headers: {\r\n            //         'Content-Type': 'application/json'\r\n            //     },\r\n            // }\r\n            // const url = 'https://81.90.181.175/api/tasks?date=' + selectedDate.format('YYYY-MM-DD')\r\n\r\n            // fetch(url, requestOptions)\r\n            //     .then( response => response.json() )\r\n            //     .then(data => console.log('response: ', data))\r\n            //     .catch((e) => console.log(\"Canâ€™t access  Error:.\", e))\r\n\r\n            props.getTaskList(selectedDate.format('YYYY-MM-DD'))\r\n        }\r\n\r\n    }, [props.taskList]);\r\n\r\n    const onDateChange = (value: moment.Moment | null, dateString: string): void => {\r\n        if (value !== null) {\r\n            setselectedDate(value)\r\n            setIsAddActive(false)\r\n        } else {\r\n            setselectedDate(moment(null))\r\n            setIsAddActive(true)\r\n        }\r\n    }\r\n\r\n    const showDrawer = (): void => {\r\n        setVisible(true);\r\n    }\r\n\r\n    const onClose = (): void => {\r\n        setVisible(false);\r\n    }\r\n\r\n    type timeScaleItemType = React.ReactElement<string>\r\n    const timeScale = (): Array<timeScaleItemType> => {\r\n        let timeScaleArrey: Array<timeScaleItemType> = []\r\n        for (let index: number = 0; index < 24; index++) {\r\n\r\n            timeScaleArrey.push(\r\n                <Divider key={index} orientation=\"left\">\r\n                    {index <= 9 ? '0' : null}{index}:00\r\n                </Divider>)\r\n        }\r\n        return timeScaleArrey\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"site-card-border-less-wrapper\">\r\n                <Card\r\n                    title={\r\n                        <>\r\n                            <label>Select date:</label>\r\n                            <DatePicker\r\n                                onChange={onDateChange}\r\n                                defaultValue={selectedDate}\r\n                                format='DD-MM-YYYY'\r\n                                style={{ marginLeft: 10 }}\r\n                            />\r\n                            <Button\r\n                                type=\"primary\"\r\n                                shape=\"round\"\r\n                                icon={<FileAddOutlined />}\r\n                                style={{ marginLeft: 10 }}\r\n                                size=\"small\"\r\n                                onClick={showDrawer}\r\n                                disabled={isAddActive}\r\n                            >\r\n                                Add\r\n                            </Button>\r\n                        </>\r\n                    }\r\n                    bordered={false}\r\n                >\r\n                    {timeScale()}\r\n                </Card>\r\n\r\n                <Drawer\r\n                    title={\"Create New Task for \" + selectedDate.format('DD MMM YYYY')}\r\n                    placement=\"right\"\r\n                    closable={false}\r\n                    onClose={onClose}\r\n                    visible={visible}\r\n                    width=\"80%\"\r\n                >\r\n                    <NewTaskForm selectedDate={selectedDate} />\r\n                </Drawer>\r\n            </div>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ToDoList","import {connect} from 'react-redux'\r\nimport ToDoList from './ToDoList'\r\nimport {getTaskList} from './../redux/taskReducer'\r\n\r\nlet mapStateToProps = (state:any) => {\r\n    return {\r\n        taskList: state.task.taskList\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, \r\n    {getTaskList}) \r\n    (ToDoList);\r\n    \r\n\r\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport taskReducer from './taskReducer';\r\n\r\n\r\nlet redusers = combineReducers({\r\n    task: taskReducer\r\n});\r\n\r\nlet store = createStore(redusers, applyMiddleware(thunkMiddleware));\r\n\r\nexport default store;","import React from 'react'\r\nimport './App.css'\r\nimport ToDoList from './Components/ToDoListContainer'\r\nimport 'antd/dist/antd.css'\r\nimport { Provider } from 'react-redux';\r\nimport store from './redux/store';\r\n\r\nconst App = (props: any) => {\r\n\r\n  return (\r\n    <Provider store={store}>\r\n      <div className=\"container\">\r\n        <ToDoList />\r\n      </div>\r\n    </Provider>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}
{"version":3,"sources":["Components/NewTaskForm.tsx","redux/taskReducer.ts","Components/NewTaskFormContainer.tsx","Components/ToDoHeader.tsx","Components/ToDoList.tsx","Components/ToDoListContainer.tsx","redux/store.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["layout","labelCol","span","wrapperCol","tailLayout","offset","TextArea","Input","NewTaskForm","props","console","log","name","initialValues","remember","onFinish","values","user_id","taskTime","format","date","newTask","onFinishFailed","errorInfo","Item","label","rules","required","message","onChange","value","dateString","rows","type","htmlType","SET_TASK_LIST","initialState","taskList","setTaskList","taskReducer","state","action","stateCopy","Tasks","connect","task","data","dispatch","requestOptions","method","headers","body","JSON","stringify","fetch","then","response","json","catch","e","RangePicker","DatePicker","ToDoHeader","useState","isGap","setIsGap","setLabel","className","onGapDateChange","defaultValue","selectedDate","style","marginLeft","onDateChange","target","checked","shape","icon","FileAddOutlined","fontSize","onClick","showDrawer","disabled","isAddActive","SettingOutlined","ToDoList","moment","setselectedDate","visible","setVisible","setIsAddActive","timeScaleBlock","setTimeScaleBlock","useEffect","getTaskList","getTimeScaleArrey","timeScaleArrey","tomorowTasks","getHeadline","headlineDate","length","push","index","orientation","i","element","timeVal","Number","time","split","placement","title","descriptions","join","nextArr","concat","getTaskListForGap","bordered","closable","onClose","width","start_date","end_date","redusers","combineReducers","store","createStore","applyMiddleware","thunkMiddleware","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6b7ec34c.chunk.js","sourcesContent":["import * as React from 'react'\r\nimport moment from 'moment'\r\nimport { Form, Input, Button, TimePicker, DatePicker } from 'antd'\r\n\r\nconst layout = {\r\n    labelCol: { span: 8 },\r\n    wrapperCol: { span: 16 },\r\n}\r\nconst tailLayout = {\r\n    wrapperCol: { offset: 8, span: 16 },\r\n}\r\n\r\ntype PropsType = {\r\n    selectedDate: moment.Moment\r\n}\r\n\r\nconst { TextArea } = Input;\r\n\r\nconst timeFormat: string = 'HH:mm';\r\n\r\nconst NewTaskForm: React.FC<PropsType> = (props:any) => {\r\n    const onFinish = (values: any) => {\r\n        console.log('Success:', values);\r\n        values.user_id = '1'\r\n        values.taskTime = values.taskTime.format('HH:mm');\r\n        values.date = values.date.format('YYYY-MM-DD');\r\n        // props.createNewTask(values)\r\n        props.newTask(values)\r\n    };\r\n\r\n    const onFinishFailed = (errorInfo: any) => {\r\n        console.log('Failed:', errorInfo);\r\n        \r\n    };\r\n\r\n    const onTimeChange = (value: moment.Moment | null, dateString: string):void => {\r\n        console.log(value, dateString);\r\n    }\r\n\r\n    console.log(props)\r\n\r\n    return (\r\n        <Form\r\n            {...layout}\r\n            name=\"basic\"\r\n            initialValues={{ remember: true }}\r\n            onFinish={onFinish}\r\n            onFinishFailed={onFinishFailed}\r\n        >\r\n            <Form.Item\r\n                label=\"Task name\"\r\n                name=\"taskName\"\r\n                rules={[{ required: true, message: 'Please input task name!' }]}\r\n            >\r\n                <Input />\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n                label=\"Task date\"\r\n                name=\"date\"\r\n                // rules={[{ required: true, message: 'Please input time!' }]}\r\n            >\r\n                <DatePicker  />\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n                label=\"Task time\"\r\n                name=\"taskTime\"\r\n                rules={[{ required: true, message: 'Please input time!' }]}\r\n            >\r\n                <TimePicker \r\n                    onChange={onTimeChange} \r\n                    // defaultValue={moment('12:08', timeFormat)} \r\n                    format={timeFormat} \r\n                />\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n                label=\"Description\"\r\n                name=\"description\"\r\n            >\r\n                <TextArea rows={2} />\r\n            </Form.Item>\r\n\r\n            <Form.Item {...tailLayout}>\r\n                <Button type=\"primary\" htmlType=\"submit\">\r\n                    Create\r\n                </Button>\r\n            </Form.Item>\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default NewTaskForm","// import { taskAPI } from '../api/api'\r\n\r\nconst SET_TASK_LIST = \"SET_TASK_LIST\"\r\n\r\nlet initialState = {\r\n    taskList: null,\r\n}\r\n\r\nconst taskReducer = (state = initialState, action: any) => {\r\n    let stateCopy = { ...state }\r\n    switch (action.type) {\r\n        case SET_TASK_LIST:\r\n            stateCopy.taskList = action.taskList.Tasks\r\n            return stateCopy\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setTaskList = (taskList: any) => ({ type: SET_TASK_LIST, taskList })\r\n// export const setTest = (toDoData) => ({ type: TEST_CONSTANT, testData })\r\n// export const setTest = (toDoData) => ({ type: TEST_CONSTANT, testData })\r\n// export const setTest = (toDoData) => ({ type: TEST_CONSTANT, testData })\r\n\r\nexport const getTaskList = (date: string) => {\r\n    return (dispatch: any) => {\r\n        const requestOptions = {\r\n            method: 'GET',\r\n            headers: { 'Content-Type': 'application/json'},\r\n        }\r\n        const url = 'https://81.90.181.175/api/tasks?date=' + date\r\n        fetch(url, requestOptions)\r\n            .then( response => response.json() )\r\n            .then(data => {\r\n                console.log('response getTaskList: ', data)\r\n                dispatch(setTaskList(data));\r\n            })\r\n            .catch((e) => console.log(\"Can’t access  Error:.\", e))\r\n    }\r\n}\r\n\r\nexport const getTaskListForGap = (start_date: string, end_date:string) => {\r\n    return (dispatch: any) => {\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json'},\r\n            body: JSON.stringify({start_date, end_date})\r\n        }\r\n        const url = 'https://81.90.181.175/api/tasks/part'\r\n        fetch(url, requestOptions)\r\n            .then( response => response.json() )\r\n            .then(data => {\r\n                console.log('response getTaskListForGap: ', data)\r\n                dispatch(setTaskList(data));\r\n            })\r\n            .catch((e) => console.log(\"Can’t access  Error:.\", e))\r\n    }\r\n}\r\n\r\ntype newTaskDataType = {\r\n    task: string,\r\n    user_id: string,\r\n    taskTime: string,\r\n    date: string\r\n    description?: string\r\n}\r\nexport const newTask = (data: newTaskDataType) => {\r\n    return (dispatch: any) => {\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json'},\r\n            body: JSON.stringify(data)\r\n        }\r\n        const url = 'https://81.90.181.175/api/tasks'\r\n        console.log('requestOptions: ', requestOptions)\r\n        fetch(url, requestOptions)\r\n            .then( response => {\r\n                console.log('response: ',response)\r\n                return response.json()\r\n            } )\r\n            .then(data => {\r\n                console.log('response: ', data)\r\n                // return data\r\n                dispatch(setTaskList(data));\r\n            })\r\n            .catch((e) => console.log(\"Can’t access  Error:.\", e))\r\n    }\r\n}\r\n\r\nexport const editTask = (data: any) => {\r\n}\r\n\r\nexport const deleteTask = (data: any) => {\r\n}\r\n\r\nexport default taskReducer\r\n","import {connect} from 'react-redux'\r\nimport NewTaskForm from './NewTaskForm'\r\nimport {newTask} from './../redux/taskReducer'\r\n\r\nlet mapStateToProps = (state:any) => {\r\n    return {\r\n        taskList: state.task.taskList\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, \r\n    {newTask}) \r\n    (NewTaskForm);\r\n\r\n\r\n","import React, { useState, useEffect } from 'react'\r\nimport { DatePicker, Checkbox, Anchor, Button } from 'antd'\r\nimport { FileAddOutlined, SettingOutlined } from '@ant-design/icons'\r\n\r\nconst { RangePicker } = DatePicker\r\n\r\nconst ToDoHeader = (props: any) => {\r\n    const [isGap, setIsGap] = useState(false)\r\n    const [label, setLabel] = useState<'date' | 'interval'>('date')\r\n\r\n    const onChange = (e: any) => {\r\n        setIsGap(e.target.checked)\r\n        if (e.target.checked) {\r\n            setLabel('interval')\r\n        } else {\r\n            setLabel('date')\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"row\" >\r\n            {/* <Anchor> */}\r\n            <div className=\"col-12 col-md-8 col-lg-6\">\r\n                {/* d-inline */}\r\n                <div className=\"d-none d-sm-inline\">\r\n                    <label >Select {label}:</label>\r\n                </div>\r\n                {/* </div>\r\n            \r\n            <div className=\"col-md-8\"> */}\r\n                <div className=\"d-inline\">\r\n                    {isGap ?\r\n                        <RangePicker\r\n                            onChange={props.onGapDateChange}\r\n                            defaultValue={[props.selectedDate, props.selectedDate]}\r\n                            format='DD-MM-YYYY'\r\n                            style={{ marginLeft: 10 }}\r\n                        />\r\n                        :\r\n                        <DatePicker\r\n                            onChange={props.onDateChange}\r\n                            defaultValue={props.selectedDate}\r\n                            format='DD-MM-YYYY'\r\n                            style={{ marginLeft: 10 }}\r\n                        />\r\n                    }\r\n                </div>\r\n            </div>\r\n            <div className=\"col-12 col-md-4 col-lg-2 m-2 m-md-0\" >\r\n                <Checkbox className=\"ml-3\" onChange={onChange}>Date interval</Checkbox>\r\n            </div>\r\n            <div className=\"col-12 col-md-12 col-lg-4\">\r\n                <Button\r\n                    type=\"primary\"\r\n                    shape=\"round\"\r\n                    icon={\r\n                        <div className=\"d-flex flex-wrap align-content-start\">\r\n                            <FileAddOutlined style={{ fontSize: '18px' }}/> \r\n                            {/* d-none d-sm-inline */}\r\n                            <span className=\"ml-1\" style={{ fontSize: '14px' }}>Add</span>\r\n                        </div>}\r\n                    style={{ marginLeft: 10 }}\r\n                    // size=\"small\"\r\n                    onClick={props.showDrawer}\r\n                    disabled={props.isAddActive}\r\n                >\r\n                    \r\n                </Button>\r\n                \r\n                <Button className=\"\" \r\n                    type=\"primary\"  \r\n                    shape=\"round\" \r\n                    style={{ marginLeft: 10 }}\r\n                    icon={\r\n                    <div className=\"d-flex flex-wrap align-content-start\">\r\n                        <SettingOutlined style={{ fontSize: '18px' }} />\r\n                        <span className=\"ml-1\" style={{ fontSize: '14px' }}>Settings</span>\r\n                    </div>} />\r\n            </div>\r\n            {/* </Anchor> */}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ToDoHeader","import React, { useState, useEffect } from 'react'\r\nimport { DatePicker, Card, Divider, Button, Drawer, Tooltip } from 'antd'\r\nimport moment from 'moment'\r\nimport NewTaskForm from './NewTaskFormContainer'\r\nimport ToDoHeader from './ToDoHeader'\r\n\r\nexport type taskType = {\r\n    created_at: string,\r\n    date: string,\r\n    deleted_at: string | null,\r\n    descriptions: string | null,\r\n    id: number,\r\n    name: string,\r\n    order_id: number | null,\r\n    tado_id: number | null, //////////////////////////// Опечатка\r\n    time: string,\r\n    type: string | null,\r\n    updated_at: string | null,\r\n    user_id: number | null\r\n}\r\n\r\nconst ToDoList: React.FC = (props: any) => {\r\n    const [selectedDate, setselectedDate] = useState<moment.Moment>(moment())\r\n    const [visible, setVisible] = useState(false)\r\n    const [isAddActive, setIsAddActive] = useState(false)\r\n    const [timeScaleBlock, setTimeScaleBlock] = useState<Array<React.ReactElement<string>> | null>(null)\r\n\r\n    useEffect(() => {\r\n        props.getTaskList(selectedDate.format('YYYY-MM-DD'))\r\n    }, [selectedDate]);\r\n\r\n    useEffect(() => {\r\n        console.log('props in useEffect', props.taskList)\r\n        const getTimeScaleArrey = (taskList:Array<taskType>):Array<React.ReactElement<string>> => {\r\n            let timeScaleArrey: Array<React.ReactElement<string>> = []\r\n            let tomorowTasks: Array<taskType> = []\r\n\r\n            const getHeadline = (task:taskType) => {\r\n                return moment(task.date).format('DD-MMMM')\r\n            }\r\n\r\n            let headlineDate: string|null = null;\r\n\r\n            if (taskList !== null && taskList.length > 0) {\r\n                headlineDate = getHeadline(taskList[0])\r\n                timeScaleArrey.push(\r\n                    <h3>{headlineDate}:</h3>\r\n                )\r\n            }\r\n            console.log('headlineDate: ',headlineDate)\r\n\r\n            for (let index: number = 0; index < 24; index++) {\r\n                timeScaleArrey.push(\r\n                    <Divider key={index+'to'+headlineDate} orientation=\"left\">\r\n                        {index <= 9 ? '0' : null}{index}:00\r\n                    </Divider>\r\n                )\r\n\r\n                if (taskList !== null) {\r\n                    for (let i = 0; i < taskList.length; i++) {\r\n                        const element: taskType = taskList[i];\r\n                        const timeVal = Number(element.time.split(':', 1))\r\n                        const nextHour = index + 1\r\n                        if (timeVal >= index && timeVal < nextHour) {\r\n                            // console.log(headlineDate)\r\n                            // console.log(element.name,' for ',getHeadline(element.date))\r\n                            // console.log(element.name, getHeadline(element) === headlineDate)\r\n                            if (getHeadline(element) === headlineDate) {\r\n                                timeScaleArrey.push(\r\n                                    <Tooltip key={index+'-'+i} placement=\"topLeft\" title={element.descriptions}>\r\n                                        <p className=\"ml-5\">{element.time.split(':', 2).join(':')} - {element.name} date: {element.date}</p>\r\n                                    </Tooltip>\r\n                                )\r\n                            }\r\n                            else {\r\n                                // console.log('push')\r\n                                tomorowTasks.push(element)\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            console.log('tomorowTasks count: ',tomorowTasks.length)\r\n            if (tomorowTasks.length > 0) {\r\n                const nextArr = getTimeScaleArrey(tomorowTasks)\r\n                // console.log('nextArr', nextArr)\r\n                timeScaleArrey = timeScaleArrey.concat(nextArr)\r\n            }\r\n            // else {\r\n            //     return timeScaleArrey\r\n            // }\r\n            // console.log('timeScaleArrey', timeScaleArrey)\r\n            return timeScaleArrey\r\n        }\r\n\r\n        setTimeScaleBlock(getTimeScaleArrey(props.taskList));\r\n    }, [props.taskList]);\r\n\r\n    const onDateChange = (value: moment.Moment | null, dateString: string): void => {\r\n        console.log('onDateChange value:', value)\r\n        if (value !== null) {\r\n            setselectedDate(value)\r\n            setIsAddActive(false)\r\n        } else {\r\n            setselectedDate(moment(null))\r\n            setIsAddActive(true)\r\n        }\r\n    }\r\n\r\n    const onGapDateChange = (value: Array<moment.Moment> ): void => {\r\n        console.log('onGapDateChange value', value)\r\n        setselectedDate(value[0])\r\n        props.getTaskListForGap(value[0].format('YYYY-MM-DD'), value[1].format('YYYY-MM-DD'))\r\n    }\r\n\r\n    const showDrawer = (): void => {\r\n        setVisible(true);\r\n    }\r\n\r\n    const onClose = (): void => {\r\n        setVisible(false);\r\n    }\r\n\r\n    // console.log('ToDoList props: ', props)\r\n    return (\r\n        <>\r\n            <div className=\"site-card-border-less-wrapper\">\r\n                <Card\r\n                    title={ <ToDoHeader onDateChange={onDateChange} selectedDate={selectedDate} showDrawer={showDrawer} isAddActive={isAddActive} onGapDateChange={onGapDateChange} />}\r\n                    bordered={false}\r\n                >\r\n                    {timeScaleBlock}\r\n                </Card>\r\n\r\n                <Drawer\r\n                    title={\"Create New Task for \" + selectedDate.format('DD MMM YYYY')}\r\n                    placement=\"right\"\r\n                    closable={false}\r\n                    onClose={onClose}\r\n                    visible={visible}\r\n                    width=\"80%\"\r\n                >\r\n                    <NewTaskForm selectedDate={selectedDate} />\r\n                </Drawer>\r\n            </div>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ToDoList","import {connect} from 'react-redux'\r\nimport ToDoList from './ToDoList'\r\nimport {getTaskList, getTaskListForGap} from './../redux/taskReducer'\r\n\r\nlet mapStateToProps = (state:any) => {\r\n    return {\r\n        taskList: state.task.taskList\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, \r\n    {getTaskList, getTaskListForGap}) \r\n    (ToDoList);\r\n    \r\n\r\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport taskReducer from './taskReducer';\r\n\r\n\r\nlet redusers = combineReducers({\r\n    task: taskReducer\r\n});\r\n\r\nlet store = createStore(redusers, applyMiddleware(thunkMiddleware));\r\n\r\nexport default store;","import React from 'react'\r\nimport './App.css'\r\nimport ToDoList from './Components/ToDoListContainer'\r\nimport 'antd/dist/antd.css'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport { Provider } from 'react-redux';\r\nimport store from './redux/store';\r\n\r\nconst App = (props: any) => {\r\n\r\n  return (\r\n    <Provider store={store}>\r\n      <div className=\"container\">\r\n        <ToDoList />\r\n      </div>\r\n    </Provider>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
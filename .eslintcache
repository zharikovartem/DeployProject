[{"C:\\OSPanel\\domains\\epam-app\\src\\index.tsx":"1","C:\\OSPanel\\domains\\epam-app\\src\\reportWebVitals.ts":"2","C:\\OSPanel\\domains\\epam-app\\src\\App.tsx":"3","C:\\OSPanel\\domains\\epam-app\\src\\Components\\ToDoList.tsx":"4","C:\\OSPanel\\domains\\epam-app\\src\\Components\\NewTaskForm.tsx":"5","C:\\OSPanel\\domains\\epam-app\\src\\Components\\NewTaskFormContainer.tsx":"6","C:\\OSPanel\\domains\\epam-app\\src\\redux\\store.js":"7","C:\\OSPanel\\domains\\epam-app\\src\\Components\\ToDoListContainer.tsx":"8","C:\\OSPanel\\domains\\epam-app\\src\\api\\api.ts":"9","C:\\OSPanel\\domains\\epam-app\\src\\redux\\taskReducer.ts":"10"},{"size":517,"mtime":1611045973904,"results":"11","hashOfConfig":"12"},{"size":440,"mtime":1611045973906,"results":"13","hashOfConfig":"12"},{"size":403,"mtime":1611049435370,"results":"14","hashOfConfig":"12"},{"size":4054,"mtime":1611222476000,"results":"15","hashOfConfig":"12"},{"size":2592,"mtime":1611223374697,"results":"16","hashOfConfig":"12"},{"size":316,"mtime":1611144516017,"results":"17","hashOfConfig":"12"},{"size":319,"mtime":1611144501679,"results":"18","hashOfConfig":"12"},{"size":319,"mtime":1611144510702,"results":"19","hashOfConfig":"12"},{"size":1295,"mtime":1611222484347,"results":"20","hashOfConfig":"12"},{"size":2502,"mtime":1611232432990,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"547qvp",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"24"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"24"},"C:\\OSPanel\\domains\\epam-app\\src\\index.tsx",[],["46","47"],"C:\\OSPanel\\domains\\epam-app\\src\\reportWebVitals.ts",[],"C:\\OSPanel\\domains\\epam-app\\src\\App.tsx",[],"C:\\OSPanel\\domains\\epam-app\\src\\Components\\ToDoList.tsx",["48"],"import React, { useState, useEffect } from 'react'\r\nimport { DatePicker, Card, Divider, Button, Drawer, Tooltip } from 'antd'\r\nimport { FileAddOutlined } from '@ant-design/icons'\r\nimport moment from 'moment'\r\nimport NewTaskForm from './NewTaskFormContainer'\r\n\r\nconst ToDoList: React.FC = (props: any) => {\r\n    const [selectedDate, setselectedDate] = useState<moment.Moment>(moment())\r\n    const [visible, setVisible] = useState(false)\r\n    const [isAddActive, setIsAddActive] = useState(false)\r\n    const [timeScaleBlock, setTimeScaleBlock] = useState<Array<React.ReactElement<string>> | null>(null)\r\n\r\n    useEffect(() => {\r\n        props.getTaskList(selectedDate.format('YYYY-MM-DD'))\r\n    }, [selectedDate]);\r\n\r\n    useEffect(() => {\r\n        let timeScaleArrey: Array<React.ReactElement<string>> = []\r\n\r\n        for (let index: number = 0; index < 24; index++) {\r\n            timeScaleArrey.push(\r\n                <Divider key={index} orientation=\"left\">\r\n                    {index <= 9 ? '0' : null}{index}:00\r\n                </Divider>\r\n            )\r\n\r\n            if (props.taskList !== null) {\r\n                for (let i = 0; i < props.taskList.length; i++) {\r\n                    const element = props.taskList[i];\r\n                    const timeVal = Number(element.time.split(':', 1))\r\n                    const nextHour = index + 1\r\n                    if (timeVal >= index && timeVal < nextHour) {\r\n                        timeScaleArrey.push(\r\n                            <Tooltip placement=\"topLeft\" title={element.descriptions}>\r\n                                <p>{element.time.split(':', 2).join(':')} - {element.name}</p>\r\n                            </Tooltip>\r\n                        )\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        setTimeScaleBlock(timeScaleArrey);\r\n    }, [props.taskList]);\r\n\r\n    const onDateChange = (value: moment.Moment | null, dateString: string): void => {\r\n        if (value !== null) {\r\n            setselectedDate(value)\r\n            setIsAddActive(false)\r\n        } else {\r\n            setselectedDate(moment(null))\r\n            setIsAddActive(true)\r\n        }\r\n    }\r\n\r\n    const showDrawer = (): void => {\r\n        setVisible(true);\r\n    }\r\n\r\n    const onClose = (): void => {\r\n        setVisible(false);\r\n    }\r\n\r\n    // console.log('ToDoList props: ', props)\r\n    return (\r\n        <>\r\n            <div className=\"site-card-border-less-wrapper\">\r\n                <Card\r\n                    title={\r\n                        <>\r\n                            <label>Select date:</label>\r\n                            <DatePicker\r\n                                onChange={onDateChange}\r\n                                defaultValue={selectedDate}\r\n                                format='DD-MM-YYYY'\r\n                                style={{ marginLeft: 10 }}\r\n                            />\r\n                            <Button\r\n                                type=\"primary\"\r\n                                shape=\"round\"\r\n                                icon={<FileAddOutlined />}\r\n                                style={{ marginLeft: 10 }}\r\n                                size=\"small\"\r\n                                onClick={showDrawer}\r\n                                disabled={isAddActive}\r\n                            >\r\n                                Add\r\n                            </Button>\r\n                        </>\r\n                    }\r\n                    bordered={false}\r\n                >\r\n                    {timeScaleBlock}\r\n                </Card>\r\n\r\n                <Drawer\r\n                    title={\"Create New Task for \" + selectedDate.format('DD MMM YYYY')}\r\n                    placement=\"right\"\r\n                    closable={false}\r\n                    onClose={onClose}\r\n                    visible={visible}\r\n                    width=\"80%\"\r\n                >\r\n                    <NewTaskForm selectedDate={selectedDate} />\r\n                </Drawer>\r\n            </div>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ToDoList","C:\\OSPanel\\domains\\epam-app\\src\\Components\\NewTaskForm.tsx",[],"C:\\OSPanel\\domains\\epam-app\\src\\Components\\NewTaskFormContainer.tsx",[],"C:\\OSPanel\\domains\\epam-app\\src\\redux\\store.js",[],["49","50"],"C:\\OSPanel\\domains\\epam-app\\src\\Components\\ToDoListContainer.tsx",[],"C:\\OSPanel\\domains\\epam-app\\src\\api\\api.ts",[],"C:\\OSPanel\\domains\\epam-app\\src\\redux\\taskReducer.ts",["51"],"import { taskAPI } from '../api/api'\r\n\r\nconst SET_TASK_LIST = \"SET_TASK_LIST\"\r\n\r\nlet initialState = {\r\n    taskList: null,\r\n}\r\n\r\nconst taskReducer = (state = initialState, action: any) => {\r\n    let stateCopy = { ...state }\r\n    switch (action.type) {\r\n        case SET_TASK_LIST:\r\n            stateCopy.taskList = action.taskList.Tasks\r\n            return stateCopy\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setTaskList = (taskList: any) => ({ type: SET_TASK_LIST, taskList })\r\n// export const setTest = (toDoData) => ({ type: TEST_CONSTANT, testData })\r\n// export const setTest = (toDoData) => ({ type: TEST_CONSTANT, testData })\r\n// export const setTest = (toDoData) => ({ type: TEST_CONSTANT, testData })\r\n\r\nexport const getTaskList = (date: string) => {\r\n    return (dispatch: any) => {\r\n        const requestOptions = {\r\n            method: 'GET',\r\n            headers: { 'Content-Type': 'application/json'},\r\n        }\r\n        // const url = 'http://127.0.0.1:8000/api/tasks?date=' + date\r\n        const url = 'http://81.90.181.175/api/tasks?date=' + date\r\n        fetch(url, requestOptions)\r\n            .then( response => response.json() )\r\n            .then(data => {\r\n                console.log('response: ', data)\r\n                // return data\r\n                dispatch(setTaskList(data));\r\n            })\r\n            .catch((e) => console.log(\"Canâ€™t access  Error:.\", e))\r\n    }\r\n}\r\n\r\ntype newTaskDataType = {\r\n    task: string,\r\n    user_id: string,\r\n    taskTime: string,\r\n    date: string\r\n    description?: string\r\n}\r\nexport const newTask = (data: newTaskDataType) => {\r\n    return (dispatch: any) => {\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json'},\r\n            body: JSON.stringify(data)\r\n        }\r\n        const url = 'https://81.90.181.175/api/tasks'\r\n        console.log('requestOptions: ', requestOptions)\r\n        fetch(url, requestOptions)\r\n            .then( response => {\r\n                console.log('response: ',response)\r\n                return response.json()\r\n            } )\r\n            .then(data => {\r\n                console.log('response: ', data)\r\n                // return data\r\n                dispatch(setTaskList(data));\r\n            })\r\n            .catch((e) => console.log(\"Canâ€™t access  Error:.\", e))\r\n    }\r\n}\r\n\r\nexport const editTask = (data: any) => {\r\n}\r\n\r\nexport const deleteTask = (data: any) => {\r\n}\r\n\r\nexport default taskReducer\r\n",{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","severity":1,"message":"57","line":15,"column":8,"nodeType":"58","endLine":15,"endColumn":22,"suggestions":"59"},{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","replacedBy":"55"},{"ruleId":"60","severity":1,"message":"61","line":1,"column":10,"nodeType":"62","messageId":"63","endLine":1,"endColumn":17},"no-native-reassign",["64"],"no-negated-in-lhs",["65"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["66"],"@typescript-eslint/no-unused-vars","'taskAPI' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation",{"desc":"67","fix":"68"},"Update the dependencies array to be: [props, selectedDate]",{"range":"69","text":"70"},[696,710],"[props, selectedDate]"]
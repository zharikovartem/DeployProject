{"version":3,"sources":["utils/Formik/ValidateFields.ts","utils/Formik/CreateAntField.tsx","Components/ToDo/Settings/SettingsModal.tsx","api/api.ts","api/authAPI.ts","redux/authReducer.ts","Components/ToDo/Settings/SettingsModalContainer.tsx","Components/ToDo/ToDoHeader/ToDoHeader.tsx","api/taskApi.ts","redux/taskReducer.ts","Components/ToDo/ToDoHeader/ToDoHeaderMobile.tsx","Components/ToDo/ToDoHeader/ToDoHeaderContainer.tsx","Components/ToDo/ToDoForm/ToDoForm.tsx","Components/ToDo/ToDoMobile.tsx","Components/TimeScale/TaskItem/TaskItem.tsx","Components/TimeScale/TaskItem/TaskItemContainer.tsx","utils/array-helpers.ts","Components/TimeScale/TimeScale.tsx","Components/TimeScale/TimeScaleContainer.tsx","Components/ToDo/ToDoBrowser.tsx","Components/ToDo/ToDoContainer.tsx","redux/appReducer.ts","api/taskListAPI.ts","redux/TaskListReducer.ts","redux/store.ts","Components/Header/MenuBrowser.tsx","Components/Header/MenuBrowserConainer.tsx","Components/Header/MenuPopover.tsx","Components/Header/MenuMobile.tsx","Components/Header/MenuMobileContainer.tsx","Components/Header/Header.tsx","Components/Header/HeaderContainer.tsx","Components/Login/LoginForm.tsx","Components/Login/Login.tsx","Components/Login/LoginContainer.tsx","Components/Orders/Orders.tsx","Components/Orders/OrdersContainer.tsx","Components/TasksTree/NewTaskTreeForm.tsx","Components/TasksTree/TaskTreeBrowserItem.tsx","Components/TasksTree/TaskTreeBrowserItemContainer.tsx","Components/TasksTree/TasksTreeBrowser.tsx","Components/TasksTree/TaskTreeItem.tsx","Components/TasksTree/TasksTreeMobile.tsx","Components/TasksTree/TasksTreeContainer.tsx","Components/Register/RegisterForm.tsx","Components/Register/Register.tsx","Components/Register/RegisterContainer.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["validateRequired","value","errors","validateEmail","test","FormItem","Form","Item","Option","Select","CheckboxItem","CheckboxMobile","TextArea","Input","CreateAntField","AntComponent","field","form","hasFeedback","label","selectOptions","submitCount","type","props","touched","name","submitted","hasError","submittedError","touchedError","onInputChange","undefined","setFieldValue","target","Array","isArray","onChange","checked","onBlur","setFieldTouched","isMobile","help","validateStatus","allowClear","map","item","title","AntSelect","Picker","AntDatePicker","DatePickerMobile","DatePicker","AntInput","InputItem","AntInputPassword","Password","AntTimePicker","TimePicker","AntCheckbox","Checkbox","AntTextArea","TextareaItem","MobileComponent","useState","defaultValue","setValue","useEffect","data","key","mode","defaultChecked","locale","enUs","autoHeight","className","cols","onOk","v","onPickerChange","zeroTime","Date","setHours","setMinutes","setSeconds","setMilliseconds","maxTime","ResultCodesEnum","settingasInstanse","timeScaleInrerval","completeInrerval","timeScaleSingle","completeSingle","timeStart","timeEnd","SettingsModal","viewSettings","settings","propName","ToDo","Object","prototype","hasOwnProperty","call","visible","isModalVisible","handleOk","onCancel","handleCancel","initialValues","onSubmit","values","changeSettings","render","SettingsForm","handleSubmit","renderHeader","component","validate","instance","axios","create","withCredentials","baseURL","authAPI","remember_token","localStorage","getItem","sessionStorage","console","log","get","then","response","post","remember","setItem","removeItem","status","catch","err","request","creds","token","initialState","user","isAuth","authError","actions","setAuthUserData","logout","settingType","setAuthError","error","login","dispatch","getState","a","message","authReducer","state","action","JSON","parse","view_settings","connect","auth","RangePicker","ToDoHeader","isInterval","setIsInterval","startDate","moment","endDate","dates","setDates","dateInterval","isSame","format","formatString","style","marginLeft","dateString","e","shape","icon","FileAddOutlined","fontSize","onClick","showDrawer","showModal","SettingOutlined","getToken","defaults","headers","common","taskAPI","taskId","delete","put","taskList","taskListIsFetching","taskSaveStatus","errorMessage","setTaskList","setTaskSaveStatus","setErrorMessage","setTaskListIsFetching","isFetchingValue","date","editTaskList","task","getTaskList","start_date","end_date","deleteTask","taskid","updateTask","taskReducer","stateCopy","id","Tasks","ToDoHeaderMobile","toDate","extra","inline","size","isOpen","ToDoForm","initialDrewerData","header","time","descriptions","ToDoMobile","setIsTimeScaleVisible","setVisible","setIsModalVisible","drawerData","setDrawerData","isTimeScaleVisible","initialFormValues","setInitialFormValues","onComplete","isCompleted","Header","minHeight","document","documentElement","clientHeight","contentStyle","color","textAlign","paddingTop","width","sidebar","formPropsCopy","user_id","userId","createNewTask","enableReinitialize","open","onOpenChange","args","TaskItemMobile","useDispatch","backgroundColor","autoClose","right","text","onPress","element","left","splitTime","split","parseInt","splitDate","setFullYear","setDate","onEdit","wrap","TimeScale","dateArrey","isSameOrBefore","push","add","getTasksForHour","hour","tasksForHour","itemTime","hours","getHours","headlineDate","index","orientation","TasksOnly","TaskItem","setChecked","deleteingInProgess","setDeleteingInProgess","ListGroup","join","placement","textDecoration","EditOutlined","danger","DeleteOutlined","sortTaskArrayByParams","b","selestedDates","setSelectedDates","success","getTimeScaleArrey","timeScaleArrey","tomorowTasks","sort","getHeadlineLabel","length","i","timeVal","Number","concat","minutes","seconds","milliseconds","ToDoBrowser","onClose","ToDoHeaderContainer","bordered","closable","formProps","reload","initialized","location","appReducer","taskListAPI","isTaskListLoaded","selectedTasks","setSelectedTasks","backSelectedTasks","createNewTaskList","deleteTaskList","updateTaskList","taskListReducer","newSelectedTasks","pop","rootReducer","combineReducers","app","store","createStore","applyMiddleware","thunkMiddleware","SubMenu","Menu","MenuBrowser","history","useHistory","theme","menuData","childs","children","to","replace","appLocation","Popover","MenuPopover","mask","overlay","onVisibleChange","onSelect","opt","onLogout","height","padding","marginRight","display","alignItems","MenuMobile","useLocation","show","setShow","initData","forEach","dataItem","pathname","getSelectedMenuItem","selectedMenuItem","setSelectedMenuItem","subMenu","cItem","menuEl","loadingEl","justifyContent","leftContent","src","alt","onLeftClick","preventDefault","rightContent","disabled","LoginForm","Login","block","Orders","NewTaskTreeForm","taskTypes","taskType","setTaskType","task_type","Panel","Collapse","TaskTreeBrowserItem","parent_id","onAddSubtask","day","zone","time_to_complete","onStatusChange","String","ChildItem","childsTaslList","CollapseItem","getChildsList","isLast","draggable","defaultActiveKey","collapsible","ghost","LastItem","data-toggle","aria-controls","ButtonsBlock","PlusCircleOutlined","elem","TasksTreeBrowser","taskTreeTypes","dataSource","renderItem","List","TaskTreeItemMobile","taskItem","new_time_to_complete","getTime","onComplet","TasksTreeMobile","initialTimeToComplete","onAdd","parentId","isSubform","childTypes","RegisterForm","Register","register","credsToLogin","email","password","AppContainer","compose","withRouter","initializeApp","promise","resultCode","Promise","all","addLocation","instanseCreds","parseQueryString","exact","path","MainApp","params","search","substr","pair","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.0314c4a1.chunk.js","sourcesContent":["// import { userAPI } from \"../../api/userAPI\";\r\n\r\nexport const validateRequired = (value: string) => {\r\n    let errors;\r\n    if (!value) {\r\n        errors = \"Required!\";\r\n    }\r\n    return errors;\r\n}\r\n\r\nexport const validateEmail = (value: string) => {\r\n    let errors;\r\n\r\n    if (!value) {\r\n        errors = \"Required!\";\r\n    } else if (!/^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/.test(value)) {\r\n        errors = \"Invalid email address!\";\r\n    }\r\n\r\n    return errors;\r\n};\r\n\r\nexport const validateAsync = (value: string) => {\r\n    const sleep = () => new Promise(resolve => setTimeout(resolve, 2000));\r\n    return sleep().then(() => {\r\n        if (['admin', 'null', 'god'].includes(value)) {\r\n            return 'Nice try'\r\n        }\r\n    })\r\n}\r\n\r\n// export const validateUserExistense = (value: string) => {\r\n//     //console.log(value)\r\n//     return userAPI.checkUserForExistence(value).then( (result) => {\r\n//         //console.log(result.status)\r\n//         if (result.status !== 404) {\r\n//             return 'Name is bisy'\r\n//         } \r\n//     })\r\n//     //console.log(test)\r\n\r\n// }","import React, { useState, useEffect } from 'react'\r\nimport { isMobile } from \"react-device-detect\"\r\nimport {\r\n    DatePicker,\r\n    Form,\r\n    Input,\r\n    TimePicker,\r\n    Select,\r\n    Checkbox\r\n} from \"antd\"\r\nimport enUs from 'antd-mobile/lib/date-picker/locale/en_US'\r\nimport {\r\n    List,\r\n    InputItem,\r\n    Switch,\r\n    Checkbox as CheckboxMobile,\r\n    TextareaItem,\r\n    Picker,\r\n    DatePicker as DatePickerMobile,\r\n} from 'antd-mobile'\r\n\r\nconst FormItem = Form.Item\r\nconst Option: React.FC<any> = Select.Option\r\nconst CheckboxItem = CheckboxMobile.CheckboxItem\r\nconst { TextArea } = Input;\r\n\r\nconst CreateAntField = (AntComponent: any) => (\r\n    {\r\n        field,\r\n        form,\r\n        hasFeedback,\r\n        label,\r\n        selectOptions,\r\n        submitCount,\r\n        type,\r\n        ...props\r\n    }: any\r\n) => {\r\n\r\n    const touched = form.touched[field.name];\r\n    const submitted = submitCount > 0;\r\n    const hasError = form.errors[field.name];\r\n    const submittedError = hasError && submitted;\r\n    const touchedError = hasError && touched;\r\n\r\n    // type OnInputChangeValueType = React.ChangeEvent<HTMLInputElement> | moment.Moment | Date | string\r\n    // const onInputChange = (value: OnInputChangeValueType, field: any) => {\r\n    const onInputChange = (value: any) => {\r\n        //console.log('value: ', value)\r\n        //console.log('field: ', field)\r\n        //console.log('type: ', type)\r\n        if (value === undefined) {\r\n            if (type === 'select' || type === 'time') {\r\n                form.setFieldValue(field.name, null)\r\n            }\r\n        } else if(value === null) {\r\n            form.setFieldValue(field.name, null)\r\n        } else if (value.target) {\r\n            form.setFieldValue(field.name, value.target.value)\r\n        } else {\r\n            if (type === 'time') {\r\n                // if (value instanceof moment) {\r\n                //     //console.log('moment')\r\n                //     form.setFieldValue(field.name, value)\r\n                // } else {\r\n                //     //console.log('not moment')\r\n                //     // form.setFieldValue(field.name, moment(value.setSeconds(0)))\r\n                //     form.setFieldValue(field.name, value)\r\n                // }\r\n                form.setFieldValue(field.name, value)\r\n            } else if (Array.isArray(value)) {\r\n                // добавтить проверуку на пустой массив\r\n                form.setFieldValue(field.name, value[0])\r\n            } else {\r\n                form.setFieldValue(field.name, value)\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    const onChange = (value: string | React.ChangeEvent<HTMLInputElement>) => {\r\n        //console.log('onChange: ', value)\r\n        if (typeof value !== \"string\" && value.target.type === 'checkbox') {\r\n            form.setFieldValue(field.name, value.target.checked)\r\n        } else {\r\n            form.setFieldValue(field.name, value)\r\n        }\r\n    }\r\n\r\n    const onBlur = () => form.setFieldTouched(field.name, true);\r\n\r\n    return (\r\n        <FormItem\r\n            label={!isMobile ? label : null}\r\n            hasFeedback={\r\n                (hasFeedback && submitted) || (hasFeedback && touched) ? true : false\r\n            }\r\n            help={submittedError || touchedError ? hasError : false}\r\n            validateStatus={submittedError || touchedError ? \"error\" : \"success\"}\r\n        >\r\n            {isMobile ?\r\n                <MobileComponent\r\n                    AntComponent={AntComponent}\r\n                    onBlur={onBlur}\r\n                    type={type}\r\n                    onInputChange={onInputChange}\r\n                    onChange={onChange}\r\n                    label={label}\r\n                    selectOptions={selectOptions}\r\n                    value={field.value}\r\n                />\r\n                :\r\n                <AntComponent\r\n                    {...field}\r\n                    {...props}\r\n                    allowClear={selectOptions ? \"true\" : \"false\"}\r\n                    onBlur={onBlur}\r\n                    onChange={type ? onInputChange : onChange}\r\n                >\r\n                    {selectOptions &&\r\n                        selectOptions.map((item: any) => <Option title={item.name} value={item.value} key={item.name}>{item.name}</Option>)}\r\n\r\n\r\n                </AntComponent>\r\n            }\r\n\r\n        </FormItem>\r\n    )\r\n}\r\n\r\nexport const AntSelect = !isMobile ? CreateAntField(Select) : CreateAntField(Picker)\r\nexport const AntDatePicker = !isMobile ? CreateAntField(DatePicker) : CreateAntField(DatePickerMobile)\r\nexport const AntInput = !isMobile ? CreateAntField(Input) : CreateAntField(InputItem)\r\nexport const AntInputPassword = !isMobile ? CreateAntField(Input.Password) : CreateAntField(InputItem)\r\nexport const AntTimePicker = !isMobile ? CreateAntField(TimePicker) : CreateAntField(DatePickerMobile)\r\nexport const AntCheckbox = !isMobile ? CreateAntField(Checkbox) : CreateAntField(CheckboxItem)\r\n// export const AntCheckbox = !isMobile ? CreateAntField(Checkbox) : CreateAntField(Switch)\r\nexport const AntTextArea = !isMobile ? CreateAntField(TextArea) : CreateAntField(TextareaItem)\r\n\r\ntype MobileComponentType = {\r\n    onInputChange: (value: any) => void,\r\n    selectOptions: Array<any>,\r\n    AntComponent: any,\r\n    onBlur: () => void,\r\n    type: 'select' | 'date' | 'text' | 'number' | 'password' | 'time' | 'checkbox' | 'textarea',\r\n    onChange: (value: any) => void,\r\n    label: string,\r\n    value: any\r\n}\r\n\r\n// const MobileComponent: React.FC<any> = (props) => {\r\nconst MobileComponent: React.FC<MobileComponentType> = (props) => {\r\n    const [defaultValue, setValue] = useState(props.type === 'select' ? [props.value] : props.value)\r\n\r\n    useEffect(() => {\r\n        if (props.type === 'select' && props.label === 'task_type') {\r\n            //console.log('useEffect parent_id: ',props.value)\r\n        }\r\n\r\n        setValue(props.value)\r\n\r\n    }, [props.value])\r\n\r\n    const onInputChange = (value: any) => {\r\n        setValue(value)\r\n        props.onInputChange(value)\r\n    }\r\n\r\n    const onPickerChange = (value:any) => {\r\n        //console.log('onPickerChange: ',defaultValue)\r\n        setValue(value)\r\n    }\r\n\r\n    // const onOk = (value:any) => {\r\n    //     //console.log('onOk; ', value)\r\n    //     setValue(value)\r\n    // }\r\n\r\n    type DataType = Array<\r\n        {\r\n            label: string,\r\n            value: string,\r\n            key: string\r\n        }\r\n    >\r\n\r\n    let data: DataType\r\n    if (props.selectOptions !== null && props.selectOptions !== undefined) {\r\n        data = props.selectOptions.map((item: any) => {\r\n            return (\r\n                {\r\n                    label: item.name,\r\n                    value: item.value,\r\n                    key: item.name\r\n                }\r\n            )\r\n        })\r\n    } else {\r\n        data = []\r\n    }\r\n\r\n    // if (props.type === 'select' && props.label === 'task Types') {\r\n    //     //console.log('render: ',props.value)\r\n    // }\r\n\r\n    const mode = props.type\r\n    \r\n    return (\r\n        <List>\r\n            <props.AntComponent\r\n                onBlur={props.onBlur}\r\n                type={props.type}\r\n                onChange={props.type ? onInputChange : props.onChange}\r\n                mode={mode}\r\n                defaultValue={defaultValue}\r\n                defaultChecked={defaultValue}\r\n                value={defaultValue}\r\n                key={props.label}\r\n                title={props.label}\r\n                locale={enUs}\r\n                autoHeight\r\n                // autoHeight\r\n                // autoHeight ={props.type === 'textarea' ? true : false}\r\n                // {props.type === 'textarea' ? 'autoHeight' : null}\r\n                className={props.type === 'text' ? 'pl-0' : null}\r\n                data={data}\r\n                cols={1}\r\n                onOk={(v:any) => setValue(v)}\r\n                onPickerChange={onPickerChange}\r\n            >\r\n                <List.Item\r\n                    className=\"pl-0\"\r\n                >\r\n                    {props.label}\r\n                </List.Item>\r\n            </props.AntComponent>\r\n        </List>\r\n    )\r\n}","import React, { ReactNode, useState } from 'react'\r\nimport { Card, Modal } from 'antd'\r\nimport { SettingsModalPropsType } from './SettingsModalContainer'\r\nimport { Form, Field, FormikProps, Formik } from 'formik'\r\nimport { validateRequired } from '../../../utils/Formik/ValidateFields'\r\nimport { AntInput, AntSelect, AntTextArea, AntTimePicker, AntDatePicker, AntCheckbox } from '../../../utils/Formik/CreateAntField'\r\nimport { List } from 'antd-mobile'\r\n\r\nconst zeroTime = new Date()\r\nzeroTime.setHours(0)\r\nzeroTime.setMinutes(0)\r\nzeroTime.setSeconds(0)\r\nzeroTime.setMilliseconds(0)\r\n\r\nconst maxTime = new Date()\r\nmaxTime.setHours(23)\r\nmaxTime.setMinutes(59)\r\nmaxTime.setSeconds(0)\r\nmaxTime.setMilliseconds(0)\r\n\r\nconst settingasInstanse: any = {\r\n        timeScaleInrerval: false,\r\n        completeInrerval: true,\r\n        timeScaleSingle: true,\r\n        completeSingle: true,\r\n        timeStart: zeroTime,\r\n        timeEnd: maxTime,\r\n}\r\n\r\nexport type OwmSettingsModalPropsType = {\r\n    isModalVisible: boolean,\r\n    handleOk: () => void,\r\n    handleCancel: () => void\r\n}\r\n\r\n\r\nconst SettingsModal: React.FC< SettingsModalPropsType > = (props) => {\r\n    const [settings, setSettings] = useState(props.viewSettings !== null ? props.viewSettings : settingasInstanse)\r\n\r\n    const handleSubmit = (values: any) => {\r\n        //console.log(values)\r\n        props.changeSettings('ToDo', values)\r\n        props.handleOk()\r\n    }\r\n\r\n    let settingsBlock: Array<any> = []\r\n\r\n    for (const propName in settings.ToDo) {\r\n        if (Object.prototype.hasOwnProperty.call(settings.ToDo, propName)) {\r\n            const element = settings.ToDo[propName]\r\n            //console.log(propName, element)\r\n            // settingsBlock.push(<FormItem title={propName} data={element}/>)\r\n        }\r\n    }\r\n\r\n    //console.log('SettingsModal', props)\r\n\r\n    return (\r\n        <Modal\r\n            title=\"Task display settings\"\r\n            visible={props.isModalVisible}\r\n            // onOk={props.handleOk} \r\n            onOk={props.handleOk}\r\n            onCancel={props.handleCancel}\r\n        >\r\n            <Formik\r\n                initialValues={settingasInstanse}\r\n                // initialValues={{}}\r\n                onSubmit={handleSubmit}\r\n                render={SettingsForm}\r\n            />\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default SettingsModal\r\n\r\n\r\nconst SettingsForm: ((props: FormikProps<{}>) => ReactNode) = (props) => {\r\n    return (\r\n        <Form\r\n            className=\"form-container\"\r\n            onSubmit={props.handleSubmit}\r\n        >\r\n            <List renderHeader={() => 'Single date settings'}>\r\n                <Field\r\n                    component={AntCheckbox}\r\n                    name=\"timeScaleSingle\"\r\n                    label=\"is time scale visible\"\r\n                    submitCount={props.submitCount}\r\n                />\r\n\r\n                <Field\r\n                    component={AntCheckbox}\r\n                    name=\"completeSingle\"\r\n                    label=\"is complete visible\"\r\n                    submitCount={props.submitCount}\r\n                />\r\n            </List>\r\n\r\n            <List renderHeader={() => 'Inrerval date settings'}>\r\n                <Field\r\n                    component={AntCheckbox}\r\n                    name=\"timeScaleInrerval\"\r\n                    label=\"is time scale visible\"\r\n                    submitCount={props.submitCount}\r\n                />\r\n\r\n                <Field\r\n                    component={AntCheckbox}\r\n                    name=\"completeInrerval\"\r\n                    label=\"is complete visible\"\r\n                    submitCount={props.submitCount}\r\n                />\r\n            </List>\r\n            <List renderHeader={() => 'Work day info'}>\r\n                <Field\r\n                    component={AntDatePicker}\r\n                    name=\"timeStart\"\r\n                    type=\"time\"\r\n                    label=\"Start time\"\r\n                    validate={validateRequired}\r\n                    submitCount={props.submitCount}\r\n                    hasFeedback\r\n                />\r\n\r\n                <Field\r\n                    component={AntDatePicker}\r\n                    name=\"timeEnd\"\r\n                    type=\"time\"\r\n                    label=\"End time\"\r\n                    validate={validateRequired}\r\n                    submitCount={props.submitCount}\r\n                    hasFeedback\r\n                />\r\n            </List>\r\n\r\n            <div className=\"submit-container\">\r\n                <button className=\"ant-btn ant-btn-primary\" type=\"submit\">\r\n                    Save\r\n                </button>\r\n            </div>\r\n\r\n        </Form>\r\n    )\r\n}\r\n\r\n\r\n","import axios from 'axios'\r\n\r\nexport const instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://crmapiserver.h1n.ru/api/',\r\n    // baseURL: 'https://81.90.181.175/api/',\r\n    // headers:     {\r\n    //     'X-Auth-Token': localStorage.getItem('remember_token')\r\n    // }\r\n})\r\n\r\nexport enum ResultCodesEnum {\r\n    Success = 0,\r\n    Error = 1\r\n}\r\n\r\nexport type APIResponseType<D = {}, RC = ResultCodesEnum> = {\r\n    data: D\r\n    messages: Array<string>\r\n    resultCode: RC\r\n}\r\n","import {instance, APIResponseType} from \"./api\";\r\n\r\ntype MeResponseDataType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n    // remember_token?: string,\r\n    // user?: any\r\n    // error?: boolean,\r\n    // message?: string\r\n}\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        let remember_token: string | null = 'error'\r\n        if (localStorage.getItem('remember_token')) {\r\n            remember_token = localStorage.getItem('remember_token')\r\n        }\r\n        if (sessionStorage.getItem('remember_token')) {\r\n            remember_token = sessionStorage.getItem('remember_token')\r\n        }\r\n        console.log(remember_token)\r\n        return instance.get(`authMe/`+remember_token).then( (response) => {\r\n            console.log('ME: ', response)\r\n            return response\r\n        })\r\n    },\r\n    login(data: any) {\r\n        console.log(data)\r\n        return instance.post('login', data)\r\n        .then(response => {\r\n            console.log('login: ', response)\r\n            if (data.remember) {\r\n                if (response.data.remember_token !== null) {\r\n                    localStorage.setItem('remember_token', response.data.remember_token);\r\n                } else {\r\n                    localStorage.removeItem('remember_token');\r\n                }\r\n            } else {\r\n                if (response.data.remember_token !== null) {\r\n                    sessionStorage.setItem('remember_token', response.data.remember_token);\r\n                } else {\r\n                    sessionStorage.removeItem('remember_token');\r\n                }\r\n            }\r\n            \r\n\r\n            return response.status === 200 ? response : null;\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                //console.log(err.response)\r\n                return err.response\r\n            } else if (err.request) {\r\n                //console.log('request', err.request)\r\n            } else {\r\n                //console.log('anything else: ', err)\r\n            }\r\n            return null\r\n        })\r\n    },\r\n    register(creds: any) {\r\n        return instance.post('register', creds)\r\n        .then(response => {\r\n            console.log('register: ', response)\r\n            if (response.data.remember_token !== null) {\r\n                localStorage.setItem('remember_token', response.data.token);\r\n            } else {\r\n                localStorage.removeItem('remember_token');\r\n            }\r\n            return response.status === 200 ? response : null;\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                console.log(err.response)\r\n                return err.response\r\n            } else if (err.request) {\r\n                //console.log('request', err.request)\r\n            } else {\r\n                //console.log('anything else: ', err)\r\n            }\r\n            return null\r\n        })\r\n    }\r\n}","import { act } from \"@testing-library/react\";\r\nimport { authAPI } from \"../api/authAPI\";\r\nimport { BaseThunkType, InferActionsTypes } from \"./store\"\r\n// import {FormAction} from 'redux-form/lib/actions';\r\n\r\ntype InitialStateType = {\r\n    user: UserType | null,\r\n    remember_token: string | null,\r\n    isAuth: boolean\r\n    viewSettings: any\r\n    authError: null | string\r\n}\r\nlet initialState: InitialStateType = {\r\n    user: null,\r\n    remember_token: null,\r\n    isAuth: false,\r\n    viewSettings: {\r\n        ToDo: {}\r\n    },\r\n    authError: null\r\n}\r\n\r\nconst authReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/AUTH/SET_AUTH_ERROR':\r\n            return{...state, authError: action.error}\r\n        case 'SN/AUTH/SET_SETTINGS_DATA':\r\n            //console.log(action)\r\n            let viewSettings = {...state.viewSettings}\r\n            viewSettings[action.settingType] = action.settings\r\n            return {...state, viewSettings: viewSettings}\r\n        case 'SN/AUTH/SET_USER_DATA':\r\n            if (action.user !== null) {\r\n                //console.log('1')\r\n                return { ...state, \r\n                            user: action.user, \r\n                            remember_token: action.remember_token, \r\n                            isAuth: true, \r\n                            viewSettings: JSON.parse(action.user.view_settings),\r\n                            authError: null\r\n                        }\r\n            } else {\r\n                return initialState;\r\n            }\r\n            \r\n        case 'SN/AUTH/LOGOUT':\r\n            localStorage.removeItem('remember_token')\r\n            sessionStorage.removeItem('remember_token');\r\n            return initialState;\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport type UserType = {\r\n    created_at: string\r\n    email: string\r\n    email_verified_at: null | any\r\n    id: number\r\n    name: string\r\n    status: string\r\n    updated_at: string,\r\n    view_settings: any\r\n}\r\nexport const actions = {\r\n    setAuthUserData: (user: UserType | null, remember_token: string | null) => ({ type: 'SN/AUTH/SET_USER_DATA', user, remember_token } as const),\r\n    logout: () => ({type: 'SN/AUTH/LOGOUT'} as const),\r\n    changeSettings: (settingType: string, settings: any) => ({ type: 'SN/AUTH/SET_SETTINGS_DATA', settingType, settings } as const),\r\n    setAuthError: (error: string) => ({type: 'SN/AUTH/SET_AUTH_ERROR', error } as const),\r\n}\r\n\r\n// export const getAuthUserData = (): ThunkType => async (dispatch) => {\r\n//     let response = await authAPI.me()\r\n//     //console.log('getAuthUserData', response)\r\n// }\r\n\r\nexport const getAuthUserData = (): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        let response = await authAPI.me()\r\n\r\n        if (response !== null) {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(actions.setAuthUserData(response.data.user, response.data.remember_token))\r\n            } else {\r\n                //console.log(response.data.messages[0])\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport type credsType = {\r\n    email: string,\r\n    password: string,\r\n    remember: boolean\r\n}\r\n\r\nexport const login = (data: credsType): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        let response = await authAPI.login(data)\r\n        if (response) {\r\n            //console.log(response)\r\n            if (response.status === 200) {\r\n                dispatch(actions.setAuthUserData(response.data.user, response.data.remember_token))\r\n            } else {\r\n                console.log(response.data.message)\r\n                dispatch(actions.setAuthError(response.data.message))\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport const register = (creds: any): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        const response = await authAPI.register(creds)\r\n        console.log('register', response)\r\n        if (response.status === 200) {\r\n            const credsToLogin: credsType = {\r\n                email: creds.email,\r\n                password: creds.password,\r\n                remember: creds.remember ? creds.remember : false\r\n            }\r\n            dispatch(login(credsToLogin))\r\n        } else {\r\n            let message: string = ''\r\n            console.log(response.data)\r\n            for (const key in response.data) {\r\n                if (Object.prototype.hasOwnProperty.call(response.data, key)) {\r\n                    const element = response.data[key];\r\n                    message = message+key+': '+element[0]+';'\r\n                }\r\n            }\r\n            \r\n            dispatch(actions.setAuthError(message))\r\n        }\r\n        \r\n    }\r\n}\r\n\r\nexport default authReducer;\r\n\r\n// export type InitialStateType = typeof initialState;\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType< ActionsTypes>\r\n\r\n","import {connect} from 'react-redux'\r\nimport SettingsModal, { OwmSettingsModalPropsType } from './SettingsModal'\r\nimport { AppStateType } from '../../../redux/store'\r\nimport { actions } from './../../../redux/authReducer'\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    // getTaskList: (start_date: string, end_date:string)=>void\r\n    changeSettings: (settingType: string, settings: any)=> void\r\n    // actions: any\r\n}\r\n\r\nexport type SettingsModalPropsType = MapPropsType & MapDispatchPropsType & OwmSettingsModalPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    //console.log(state)\r\n    return {\r\n        viewSettings: state.auth.viewSettings\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwmSettingsModalPropsType, AppStateType>(mapStateToProps, \r\n    {changeSettings: actions.changeSettings} ) \r\n    ( SettingsModal )\r\n    \r\n\r\n","import React, { useState, useEffect } from 'react'\r\nimport { DatePicker, Checkbox, Button } from 'antd'\r\nimport { FileAddOutlined, SettingOutlined } from '@ant-design/icons'\r\nimport { CheckboxChangeEvent } from 'antd/lib/checkbox'\r\nimport {RangeValue} from '../../../Types/types'\r\nimport { ToDoHeaderPropsType } from './ToDoHeaderContainer'\r\nimport moment from 'moment'\r\n\r\nconst { RangePicker } = DatePicker\r\n\r\nexport type OwnToDoHeaderPropsType = {\r\n    showDrawer: () => void,\r\n    showModal: () => void,\r\n    isOpen?: boolean\r\n}\r\n\r\nconst ToDoHeader: React.FC<ToDoHeaderPropsType> = (props) => {\r\n    const [isInterval, setIsInterval] = useState(false)\r\n    const [dates, setDates] = useState<{startDate: moment.Moment, endDate: moment.Moment}>({startDate: moment(), endDate: moment()})\r\n\r\n    useEffect(() => {\r\n        if ( \r\n            !props.dateInterval.startDate.isSame(dates.startDate.format('YYYY-MM-DD'), \"day\" ) ||\r\n            !props.dateInterval.endDate.isSame(dates.endDate.format('YYYY-MM-DD'), \"day\" )\r\n        ) {\r\n            props.setIsInterval(isInterval, dates)\r\n        }\r\n        \r\n    }, [isInterval, dates, props])\r\n\r\n\r\n    const onDateTypeChange = (e: CheckboxChangeEvent) => {\r\n        if (!e.target.checked) {\r\n            setDates({\r\n                startDate: dates.startDate,\r\n                endDate: dates.startDate\r\n            })\r\n        }\r\n        setIsInterval(e.target.checked)\r\n    }\r\n\r\n    const onDateRangeChange = (values: RangeValue<moment.Moment>, formatString: [string, string]): void => {\r\n        if (values !== null && values[0] !== null && values[1] !== null ) {\r\n            setDates({\r\n                startDate: values[0],\r\n                endDate: values[1],\r\n            })\r\n        }\r\n        \r\n    }\r\n\r\n    const onDateChange = (value: moment.Moment | null, dateString: string):void => {\r\n        if (value !== null) {\r\n            setDates({\r\n                startDate: value,\r\n                endDate: value,\r\n            })\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"row w-100\" >\r\n            <div className=\"col-12 col-md-9 col-lg-9 col-xl-7 w-100\">\r\n                <div className=\"d-none d-sm-inline\">\r\n                    <label >{isInterval ? \"Date interval\" : \"Date\"}:</label>\r\n                </div>\r\n\r\n                <div className=\"d-none d-inline\">\r\n                    {isInterval ?\r\n                        <RangePicker\r\n                            onChange={onDateRangeChange}\r\n                            defaultValue={[props.dateInterval.startDate, props.dateInterval.endDate]}\r\n                            value = {[props.dateInterval.startDate, props.dateInterval.endDate]}\r\n                            format='DD-MM-YYYY'\r\n                            style={{ marginLeft: 10 }}\r\n                        />\r\n                        :\r\n                        <DatePicker\r\n                            onChange={onDateChange}\r\n                            defaultValue={props.dateInterval.startDate}\r\n                            format='DD-MM-YYYY'\r\n                            style={{ marginLeft: 10 }}\r\n                        />\r\n                    }\r\n                </div>\r\n            </div>\r\n            <div className=\"col-12 col-md-3 col-lg-3 col-xl-2 m-2 m-md-0\" >\r\n                <Checkbox className=\"ml-3\" onChange={onDateTypeChange}>Date interval</Checkbox>\r\n            </div>\r\n            <div className=\"col-12 col-md-12 col-lg-4 col-xl-3 mt-lg-2\">\r\n                <Button\r\n                    type=\"primary\"\r\n                    shape=\"round\"\r\n                    icon={\r\n                        <div className=\"d-flex flex-wrap align-content-start\">\r\n                            <FileAddOutlined style={{ fontSize: '18px' }} />\r\n                            <span className=\"ml-1\" style={{ fontSize: '14px' }}>Add</span>\r\n                        </div>}\r\n                    style={{ marginLeft: 10 }}\r\n                    onClick={props.showDrawer}\r\n                />\r\n\r\n                <Button className=\"\"\r\n                    type=\"primary\"\r\n                    shape=\"round\"\r\n                    style={{ marginLeft: 10 }}\r\n                    onClick={props.showModal}\r\n                    icon={\r\n                        <div className=\"d-flex flex-wrap align-content-start\">\r\n                            <SettingOutlined style={{ fontSize: '18px' }} />\r\n                            <span className=\"ml-1\" style={{ fontSize: '14px' }}>Settings</span>\r\n                        </div>} \r\n                    />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ToDoHeader","import { NewTaskDataType, TaskType } from '../Types/types'\r\nimport {instance} from './api'\r\n\r\nconst getToken = () => {\r\n    if (localStorage.getItem('remember_token')) {\r\n        instance.defaults.headers.common['X-Auth-Token'] = localStorage.getItem('remember_token')\r\n    }\r\n    if (sessionStorage.getItem('remember_token')) {\r\n        instance.defaults.headers.common['X-Auth-Token'] = sessionStorage.getItem('remember_token')\r\n    }\r\n}\r\n\r\n\r\nexport type TaskListType = {\r\n    Tasks: Array<TaskType>\r\n}\r\n\r\nexport const taskAPI = {\r\n    createNewTask(values: NewTaskDataType) {\r\n        return instance.post<TaskListType>(`tasks`, values)\r\n        .then(response => {\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                return err.response\r\n            } else if (err.request) {\r\n                //console.log('request', err.request)\r\n            } else {\r\n                //console.log('anything else: ', err)\r\n            }\r\n            return null\r\n        })\r\n    },\r\n\r\n    getTaskList(values: getTaskListValuesType) {\r\n        console.log(instance.defaults.headers.common['X-Auth-Token'])\r\n        getToken()\r\n        return instance.post<TaskListType>(`tasks/part`, values)\r\n        .then(response => {\r\n            //console.log(response)\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                //console.log('request', err.request)\r\n                return err.response\r\n            } else if (err.request) {\r\n                //console.log('request', err.request)\r\n            } else {\r\n                //console.log('anything else: ', err)\r\n            }\r\n            return null\r\n        })\r\n    },\r\n\r\n    deleteTask(taskId: number) {\r\n        getToken()\r\n        return instance.delete<TaskListType>(`tasks/${taskId}`).then(response => {\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                return err.response\r\n            } else if (err.request) {\r\n                //console.log('request', err.request)\r\n            } else {\r\n                //console.log('anything else: ', err)\r\n            }\r\n            return null\r\n        })\r\n    }, \r\n\r\n    updateTask(values: any, taskId: number) {\r\n        getToken()\r\n        return instance.put<any>(`tasks/${taskId}`, values)\r\n        .then(response => {\r\n            //console.log(response)\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                //console.log(err.response)\r\n                return err.response\r\n            } else if (err.request) {\r\n                //console.log('request', err.request)\r\n            } else {\r\n                //console.log('anything else: ', err)\r\n            }\r\n            return null\r\n        })\r\n    }\r\n}\r\n\r\nexport type getTaskListValuesType = {\r\n    start_date: string, \r\n    end_date: string\r\n}","import { Dispatch } from 'redux'\r\nimport { taskAPI, TaskListType } from '../api/taskApi'\r\nimport { NewTaskDataType, TaskType } from '../Types/types'\r\nimport {BaseThunkType, InferActionsTypes} from './store'\r\nimport moment from 'moment'\r\n\r\nexport type InitialStateType = {\r\n    taskList: null | Array<TaskType>,\r\n    taskListIsFetching: boolean,\r\n    taskSaveStatus: 'no' | 'inProgress' | 'success' | 'error'\r\n    errorMessage: null | string,\r\n    isInterval: boolean,\r\n    dateInterval: {\r\n        startDate: moment.Moment,\r\n        endDate: moment.Moment\r\n    }\r\n}\r\n\r\nlet initialState:InitialStateType = {\r\n    taskList: null,\r\n    taskListIsFetching: false,\r\n    taskSaveStatus: 'no',\r\n    errorMessage: null,\r\n    isInterval: false,\r\n    dateInterval: {\r\n        startDate: moment(),\r\n        endDate: moment()\r\n    }\r\n}\r\n\r\nconst taskReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n    \r\n    switch (action.type) {\r\n        case 'SN/TASK/EDIT_TASK_LIST':\r\n            if (state.taskList !== null) {\r\n            const stateCopy = state.taskList.map( item => {\r\n                if (action.task.id === item.id) {\r\n                    return action.task\r\n                } else {\r\n                    return item\r\n                }\r\n            })\r\n            return {...state, taskList: stateCopy}\r\n            } else {\r\n                return state\r\n            }\r\n\r\n        case 'SN/TASK/SET_TASK_LIST':\r\n            return {...state, taskList: action.taskList.Tasks}\r\n\r\n        case 'SN/TASK/SET_TASK_SAVE_STATUS':\r\n            return {...state, taskSaveStatus: action.taskSaveStatus}\r\n\r\n        case 'SN/TASK/SET_ERROR_MESSAGE':\r\n            return {...state, errorMessage: action.message}\r\n\r\n        case 'SN/TASK/SET_TASK_LIST_IS_FETCHING':\r\n            return {...state, taskListIsFetching: action.isFetchingValue}\r\n\r\n        case 'SN/TASK/SET_IS_INTERVAL':\r\n            //console.log('SET_IS_INTERVAL')\r\n            const dateInterval = {\r\n                startDate: action.date.startDate,\r\n                endDate: action.date.endDate\r\n            }\r\n            return {...state, isInterval: action.isInterval, dateInterval }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    setTaskList: (taskList: TaskListType) => ({ type: 'SN/TASK/SET_TASK_LIST', taskList } as const),\r\n    setTaskSaveStatus: (taskSaveStatus: 'no' | 'inProgress' | 'success' | 'error') => ({ type: 'SN/TASK/SET_TASK_SAVE_STATUS', taskSaveStatus } as const),\r\n    setErrorMessage: (message: string | null) => ({type: 'SN/TASK/SET_ERROR_MESSAGE', message} as const),\r\n    setTaskListIsFetching: (isFetchingValue: boolean) => ({type: 'SN/TASK/SET_TASK_LIST_IS_FETCHING', isFetchingValue} as const),\r\n    setIsInterval: (isInterval: boolean, date: {startDate: moment.Moment, endDate: moment.Moment}) => ({type: 'SN/TASK/SET_IS_INTERVAL', isInterval, date} as const),\r\n    editTaskList: (task: TaskType) => ({type: 'SN/TASK/EDIT_TASK_LIST', task} as const),\r\n}\r\n\r\nexport const createNewTask = (values: NewTaskDataType, reload:boolean = true): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        dispatch(actions.setTaskSaveStatus('inProgress'))\r\n\r\n        let response = await taskAPI.createNewTask(values)\r\n\r\n        if (response && response.status && response.status === 200) {\r\n            if (reload) {\r\n                const state = getState()\r\n                const startDate = state.task.dateInterval.startDate.format('YYYY-MM-DD')\r\n                const endDate = state.task.dateInterval.endDate.format('YYYY-MM-DD')\r\n                dispatch(getTaskList(startDate, endDate))\r\n            }\r\n            dispatch(actions.setTaskSaveStatus('success'))\r\n            dispatch(actions.setTaskSaveStatus('no'))\r\n        } else {\r\n            if (response && response.data) {\r\n                dispatch(actions.setErrorMessage(response.data.message))\r\n                dispatch(actions.setTaskSaveStatus('error'))\r\n                dispatch(actions.setTaskSaveStatus('no'))\r\n                dispatch( actions.setErrorMessage(null) )\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport const getTaskList = (startDate: string, endDate:string): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        dispatch(actions.setTaskListIsFetching(true))\r\n\r\n        const values = {start_date: startDate, end_date: endDate}\r\n        let response = await taskAPI.getTaskList(values)\r\n\r\n        if (response !== undefined && response !== null) {\r\n            //console.log(response)\r\n            dispatch(actions.setTaskList(response.data))\r\n        } else {\r\n            // add error message\r\n        }\r\n        dispatch(actions.setTaskListIsFetching(false))\r\n    }\r\n}\r\n\r\nexport const deleteTask = (taskid: number, startDate: string, endDate:string): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        let response = await taskAPI.deleteTask(taskid)\r\n\r\n        if (response !== null) {\r\n            dispatch(actions.setErrorMessage('Task deletion was successful'))\r\n            dispatch(getTaskList(startDate, endDate))\r\n            dispatch( actions.setErrorMessage(null) )\r\n        }\r\n    }\r\n}\r\n\r\nexport const updateTask = (values: any, taskId: number): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        let response = await taskAPI.updateTask(values, taskId)\r\n        //console.log(response)\r\n        dispatch(actions.editTaskList(response.data[0]))\r\n    }\r\n}\r\n\r\nexport default taskReducer\r\n\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsTypes>\r\nexport type DispatchType = Dispatch<ActionsTypes>\r\n","import React, { useState } from 'react'\r\nimport { ToDoHeaderPropsType } from './ToDoHeaderContainer'\r\nimport { Button, DatePicker, List, Switch } from 'antd-mobile'\r\nimport enUs from 'antd-mobile/lib/date-picker/locale/en_US'\r\nimport moment from \"moment\"\r\n\r\nexport type OwnToDoHeaderPropsType = {\r\n    showDrawer: () => void,\r\n    showModal: () => void,\r\n    isOpen: boolean\r\n}\r\n\r\nconst ToDoHeaderMobile: React.FC<ToDoHeaderPropsType> = (props) => {\r\n    const [isInterval, setIsInterval] = useState(false)\r\n    const [isFormOpen, setIsFormOpen] = useState(true)\r\n\r\n    const onIntervalChange = (e: boolean) => {\r\n        if (e) {\r\n            props.setIsInterval( !isInterval, {startDate: props.dateInterval.startDate, endDate: props.dateInterval.endDate })\r\n        } else {\r\n            props.setIsInterval( !isInterval, {startDate: props.dateInterval.startDate, endDate: props.dateInterval.startDate })\r\n        }\r\n        \r\n        setIsInterval(!isInterval)\r\n    }\r\n\r\n    const onStartChange = (value: Date) => {\r\n        //console.log(value)\r\n        //console.log(props)\r\n        if (!isInterval) {\r\n            props.setIsInterval(isInterval, {startDate: moment(value), endDate: moment(value) })\r\n        } else {\r\n            props.setIsInterval(isInterval, {startDate: moment(value), endDate: props.dateInterval.endDate })\r\n        }\r\n        \r\n    }\r\n\r\n    const onEndChange = (value: Date) => {\r\n        props.setIsInterval(isInterval, {startDate: props.dateInterval.startDate, endDate: moment(value) })\r\n    }\r\n\r\n    return (\r\n        <div className=\"w-100\">\r\n            <DatePicker\r\n                locale={enUs}\r\n                mode=\"date\"\r\n                value={props.dateInterval.startDate.toDate()}\r\n                onChange={onStartChange}\r\n            >\r\n                <List.Item className=\"w-100\">\r\n                {isInterval ? 'Start:' : 'Date:'}\r\n                </List.Item>\r\n            </DatePicker>\r\n\r\n            {isInterval ?\r\n                <DatePicker\r\n                    locale={enUs}\r\n                    mode=\"date\"\r\n                    value={props.dateInterval.endDate.toDate()}\r\n                    onChange={onEndChange}\r\n                >\r\n                    <List.Item >End:</List.Item>\r\n                </DatePicker>\r\n                :\r\n                null\r\n            }\r\n\r\n            <List.Item\r\n                extra={\r\n                        <Switch\r\n                            checked={isInterval}\r\n                            onChange={onIntervalChange}\r\n                        />\r\n                }\r\n                >\r\n                Date interval\r\n            </List.Item>\r\n\r\n            <Button\r\n                inline\r\n                size=\"small\"\r\n                className=\"ml-3\"\r\n                // style={{ marginRight: '4px' }} \r\n                onClick={()=>{props.showDrawer()}}\r\n                type=\"primary\"\r\n            >\r\n                {!props.isOpen ? 'Add' : 'Close'}\r\n            </Button>\r\n            <Button\r\n                inline\r\n                size=\"small\"\r\n                className=\"ml-3\"\r\n                // style={{ marginRight: '4px' }} \r\n                onClick={()=>{props.showModal()}}\r\n                type=\"primary\"\r\n            >\r\n                Settings\r\n            </Button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ToDoHeaderMobile","import {connect} from 'react-redux'\r\nimport ToDoHeader, { OwnToDoHeaderPropsType } from './ToDoHeader'\r\nimport {actions} from '../../../redux/taskReducer'\r\nimport { AppStateType } from '../../../redux/store'\r\nimport { isMobile } from 'react-device-detect'\r\nimport ToDoHeaderMobile from './ToDoHeaderMobile'\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    setIsInterval: (isInterval: boolean, date: {startDate: moment.Moment, endDate: moment.Moment}) => {\r\n        type: \"SN/TASK/SET_IS_INTERVAL\",\r\n        isInterval: boolean,\r\n        date: {startDate: moment.Moment, endDate: moment.Moment}\r\n    }\r\n}\r\n\r\nexport type ToDoHeaderPropsType = MapPropsType & MapDispatchPropsType & OwnToDoHeaderPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        dateInterval: state.task.dateInterval\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnToDoHeaderPropsType, AppStateType>(mapStateToProps, \r\n    {setIsInterval: actions.setIsInterval}) \r\n    (isMobile ? ToDoHeaderMobile : ToDoHeader)\r\n    \r\n\r\n","import { Form, Field, FormikProps } from 'formik'\r\nimport React, { ReactNode, useState, useEffect } from 'react'\r\nimport { AntInput, AntSelect, AntTextArea, AntTimePicker, AntDatePicker } from '../../../utils/Formik/CreateAntField'\r\nimport { validateRequired } from '../../../utils/Formik/ValidateFields'\r\n\r\n\r\nconst ToDoForm: ((props: FormikProps<{}>) => ReactNode) = (props) => {\r\n    //console.log('!!!!!!!!!! ToDoForm')\r\n    return (\r\n        <Form\r\n            className=\"form-container\"\r\n            onSubmit={props.handleSubmit}\r\n        >\r\n            <Field\r\n                component={AntInput}\r\n                name=\"name\"\r\n                type=\"text\"\r\n                label=\"Name\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n\r\n            <Field\r\n                component={AntDatePicker}\r\n                name=\"date\"\r\n                type=\"date\"\r\n                label=\"Task date\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                // hasFeedback\r\n            />\r\n\r\n            <Field\r\n                component={AntTimePicker}\r\n                name=\"time\"\r\n                type=\"time\"\r\n                label=\"Task time\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                // hasFeedback\r\n            />\r\n\r\n            <Field\r\n                component={AntTextArea}\r\n                name=\"descriptions\"\r\n                type=\"text\"\r\n                label=\"Descriptions\"\r\n                // validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n            // hasFeedback\r\n            />\r\n\r\n            <div className=\"submit-container\">\r\n                <button className=\"ant-btn ant-btn-primary\" type=\"submit\">\r\n                    Save\r\n                </button>\r\n            </div>\r\n\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default ToDoForm","import { List, Card, Drawer, WhiteSpace, WingBlank, SwipeAction } from 'antd-mobile'\r\nimport { Formik } from 'formik'\r\nimport React, { useEffect, useState } from 'react'\r\nimport SettingsModal from './Settings/SettingsModalContainer'\r\nimport ToDoHeader from './ToDoHeader/ToDoHeaderContainer'\r\nimport { ToDoListPropsType } from './ToDoContainer'\r\nimport ToDoForm from './ToDoForm/ToDoForm'\r\n// import TimeScale from './../TimeScale/TimeScaleContainer'\r\nimport TaskItem from './../TimeScale/TaskItem/TaskItemContainer'\r\nimport { useDispatch } from 'react-redux'\r\nimport moment from 'moment'\r\nimport { TaskType } from '../../Types/types'\r\nimport { Divider } from 'antd'\r\n\r\ntype InitialDrewerDataType = {\r\n    header: string,\r\n    taskId: false | number\r\n}\r\n\r\nconst initialDrewerData: InitialDrewerDataType = {\r\n    header: 'Create New Task',\r\n    taskId: false\r\n}\r\nconst zeroTime = new Date()\r\nzeroTime.setHours(0)\r\nzeroTime.setMinutes(0)\r\nzeroTime.setSeconds(0)\r\nzeroTime.setMilliseconds(0)\r\n\r\nconst initialValues: any = {\r\n    name: '',\r\n    time: zeroTime,\r\n    date: new Date(),\r\n    descriptions: ''\r\n}\r\n\r\nconst ToDoMobile: React.FC<ToDoListPropsType> = (props) => {\r\n    useEffect(() => {\r\n        if (props.taskList === null) {\r\n            props.getTaskList(props.dateInterval.startDate.format('YYYY-MM-DD'), props.dateInterval.endDate.format('YYYY-MM-DD'))\r\n        }\r\n    }, [props.taskList])\r\n\r\n    useEffect(() => {\r\n        props.getTaskList(props.dateInterval.startDate.format('YYYY-MM-DD'), props.dateInterval.endDate.format('YYYY-MM-DD'))\r\n    }, [props.dateInterval])\r\n\r\n    useEffect(() => {\r\n        if (props.isInterval) {\r\n            setIsTimeScaleVisible(props.viewSettings.ToDo.timeScaleInrerval)\r\n        } else {\r\n            setIsTimeScaleVisible(props.viewSettings.ToDo.timeScaleSingle)\r\n        }\r\n    }, [props.isInterval, props.viewSettings])\r\n\r\n    const [visible, setVisible] = useState<boolean>(false)\r\n    const [isModalVisible, setIsModalVisible] = useState(false)\r\n    const [drawerData, setDrawerData] = useState(initialDrewerData)\r\n    const [isTimeScaleVisible, setIsTimeScaleVisible] = useState(props.viewSettings.ToDo.timeScaleSingle)\r\n    const [initialFormValues, setInitialFormValues] = useState(initialValues)\r\n\r\n    const showDrawer = (): void => {\r\n        if (visible) {\r\n            setInitialFormValues(initialValues)\r\n        }\r\n        setVisible(!visible)\r\n    }\r\n\r\n    const showModal = () => {\r\n        setIsModalVisible(true)\r\n    }\r\n\r\n    const handleOk = () => {\r\n        setIsModalVisible(false)\r\n    }\r\n\r\n    const handleCancel = () => {\r\n        setIsModalVisible(false)\r\n    }\r\n\r\n    const handleSubmit = (values: any) => {\r\n        let formPropsCopy: any = { ...values }\r\n        //console.log('handleSubmit')\r\n        if (formPropsCopy.time !== undefined) {\r\n            formPropsCopy.time = moment(formPropsCopy.time).format('HH:mm:ss')\r\n        }\r\n        if (formPropsCopy.date !== undefined) {\r\n            formPropsCopy.date = moment(formPropsCopy.date).format('YYYY-MM-DD')\r\n        }\r\n\r\n        formPropsCopy.user_id = props.userId\r\n        //console.log('handleSubmit', formPropsCopy)\r\n        if (!drawerData.taskId) {\r\n            props.createNewTask(formPropsCopy, true)\r\n        } else {\r\n            props.updateTask(formPropsCopy, drawerData.taskId)\r\n        }\r\n        showDrawer()\r\n    }\r\n\r\n    const onAdd = (args: any) => {\r\n        //console.log('on add')\r\n        setVisible(!visible)\r\n    }\r\n\r\n    const onComplete = (task: any) => {\r\n        //console.log('onComplete', task)\r\n        task.isCompleted = !task.isCompleted\r\n        props.updateTask(task, task.id)\r\n    }\r\n\r\n    //console.log('ToDoMobile: ', props.taskList)\r\n\r\n    if (props.taskList !== null) {\r\n        return (\r\n            <WingBlank size=\"lg\">\r\n                <WhiteSpace size=\"lg\" />\r\n                <Card>\r\n                    <Card.Header\r\n                        title={<ToDoHeader\r\n                            showDrawer={showDrawer}\r\n                            showModal={showModal}\r\n                            isOpen={visible}\r\n                        />}\r\n                    >\r\n                    </Card.Header>\r\n\r\n                    <SettingsModal\r\n                        isModalVisible={isModalVisible}\r\n                        handleOk={handleOk}\r\n                        handleCancel={handleCancel}\r\n                    />\r\n\r\n                    <Drawer\r\n                        className=\"my-drawer\"\r\n                        style={{ minHeight: document.documentElement.clientHeight }}\r\n                        // enableDragHandle\r\n                        contentStyle={{ color: '#A6A6A6', textAlign: 'center', paddingTop: 0, width: \"100%\" }}\r\n                        sidebar={\r\n                            <div className=\"mt-4\">\r\n                                <Formik\r\n                                    initialValues={initialFormValues}\r\n                                    onSubmit={handleSubmit}\r\n                                    render={ToDoForm}\r\n                                    enableReinitialize={true}\r\n                                />\r\n                            </div>\r\n                        }\r\n                        open={visible}\r\n                        onOpenChange={onAdd}\r\n                    >\r\n                        <List>\r\n                            {\r\n                                isTimeScaleVisible ?\r\n                                    <TimeScale\r\n                                        taskList={props.taskList}\r\n                                        dateInterval={props.dateInterval}\r\n                                        deleteTask={props.deleteTask}\r\n                                        setDrawerData={setDrawerData}\r\n                                        setInitialFormValues={setInitialFormValues}\r\n                                        showDrawer={showDrawer}\r\n                                        onComplete={onComplete}\r\n                                    />\r\n                                    :\r\n                                    <TasksOnly\r\n                                        taskList={props.taskList}\r\n                                        dateInterval={props.dateInterval}\r\n                                        deleteTask={props.deleteTask}\r\n                                        setDrawerData={setDrawerData}\r\n                                        setInitialFormValues={setInitialFormValues}\r\n                                        showDrawer={showDrawer}\r\n                                        onComplete={onComplete}\r\n                                    />\r\n                            }\r\n                        </List>\r\n\r\n                    </Drawer>\r\n                </Card>\r\n            </WingBlank>\r\n        )\r\n    } else {\r\n        return <div>null</div>\r\n    }\r\n}\r\n\r\nexport default ToDoMobile\r\n\r\ntype TaskItemMobileType = {}\r\n\r\nconst TaskItemMobile: React.FC<any> = (props) => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const onSubTask = () => { }\r\n    const onEdit = (value: any) => {\r\n        //console.log('onEdit: ', value)\r\n        props.setDrawerData({\r\n            header: 'Edite \"' + value.name + '\"',\r\n            taskId: value.id\r\n        })\r\n\r\n        const splitTime = value.time.split(/:/)\r\n        let time = new Date()\r\n        time.setHours(parseInt(splitTime[0]))\r\n        time.setMinutes(parseInt(splitTime[1]))\r\n        time.setSeconds(parseInt(splitTime[2]))\r\n        time.setMilliseconds(0)\r\n\r\n        const splitDate = value.date.split(/-/)\r\n        let date = new Date()\r\n        date.setFullYear(parseInt(splitDate[0]))\r\n        date.setMinutes(parseInt(splitDate[1]))\r\n        date.setDate(parseInt(splitDate[2]))\r\n\r\n        props.setInitialFormValues({\r\n            name: value.name,\r\n            time: time,\r\n            date: date,\r\n            descriptions: value.descriptions ? value.descriptions : null\r\n        })\r\n\r\n        props.showDrawer()\r\n    }\r\n\r\n    const onItemOpen = () => {\r\n        // dispatch(actions.setSelectedTasks(props.element.id));\r\n    }\r\n\r\n    const onComplete = () => {\r\n        //console.log('onComplete')\r\n        props.onComplete(props.element)\r\n    }\r\n    //console.log(props)\r\n    return (\r\n        <SwipeAction\r\n            style={{ backgroundColor: 'gray' }}\r\n            autoClose\r\n            right={[\r\n                // {\r\n                //     text: 'SubTask',\r\n                //     onPress: () => { onSubTask() },\r\n                //     style: { backgroundColor: 'green', color: 'white' },\r\n                // },\r\n                {\r\n                    text: 'Delete',\r\n                    onPress: () => props.deleteTask(\r\n                        props.element.id,\r\n                        props.dateInterval.startDate.format('YYYY-MM-DD'),\r\n                        props.dateInterval.endDate.format('YYYY-MM-DD')\r\n                    ),\r\n                    style: { backgroundColor: '#F4333C', color: 'white' },\r\n                },\r\n            ]}\r\n            left={[\r\n                {\r\n                    text: 'Edit',\r\n                    onPress: () => { onEdit(props.element) },\r\n                    style: { backgroundColor: '#108ee9', color: 'white' },\r\n                },\r\n                {\r\n                    text: props.element.isCompleted ? 'Not Done' : 'Done',\r\n                    onPress: () => onComplete(),\r\n                    style: { backgroundColor: 'green', color: 'white' },\r\n                },\r\n            ]}\r\n        // onOpen={() => //console.log('global open')}\r\n        // onClose={() => //console.log('global close')}\r\n        >\r\n\r\n            <List.Item\r\n                onClick={onItemOpen}\r\n                key={props.element.id}\r\n                wrap\r\n            >\r\n                <div className=\"w-100 row \" key={props.element.id}>\r\n                    <div className=\"col-2 \">\r\n                        <span className=\"ml-3\">{props.element.time.split(/:/)[0] + ':' + props.element.time.split(/:/)[1]}</span>\r\n                    </div>\r\n                    <div className=\"col-10\">\r\n                        {props.element.isCompleted ?\r\n                            <span className=\"text-black-50 text-break ml-3\">{props.element.name}</span>\r\n                            :\r\n                            <span className=\"text-break ml-3\">{props.element.name}</span>\r\n                        }\r\n                    </div>\r\n                </div>\r\n\r\n            </List.Item>\r\n\r\n        </SwipeAction>\r\n    )\r\n}\r\n\r\ntype TimeScaleType = {\r\n    taskList: Array<TaskType> | null\r\n    dateInterval: {\r\n        startDate: moment.Moment,\r\n        endDate: moment.Moment,\r\n    },\r\n    deleteTask: (taskid: number, startDate: string, endDate: string) => void,\r\n    setDrawerData: (devarData: any) => void,\r\n    setInitialFormValues: (initialFormValues: any) => void,\r\n    showDrawer: any,\r\n    onComplete: (values: any) => void,\r\n}\r\nconst TimeScale: React.FC<TimeScaleType> = (props) => {\r\n    const [startHour, setStartHour] = useState<number>(0)\r\n\r\n    let startDate = moment(props.dateInterval.startDate)\r\n    // startDate.add(-2, 'days')\r\n\r\n    //console.log( moment(startDate.format('YYYY-MM-DD')).isSameOrBefore( moment(props.dateInterval.endDate.format('YYYY-MM-DD')) ) )\r\n    //console.log( startDate.isAfter(props.dateInterval.endDate) )\r\n\r\n    let dateArrey: any = []\r\n\r\n    //console.log('startDate: ', startDate.format('YYYY-MM-DD'))\r\n    //console.log('endDate: ', props.dateInterval.endDate.format('YYYY-MM-DD'))\r\n    //console.log('startDate props: ', props.dateInterval.startDate.format('YYYY-MM-DD'))\r\n\r\n\r\n\r\n    while (moment(startDate.format('YYYY-MM-DD')).isSameOrBefore(moment(props.dateInterval.endDate.format('YYYY-MM-DD')))) {\r\n        //console.log('1')\r\n        dateArrey.push(moment(startDate))\r\n        startDate.add(1, 'days')\r\n    }\r\n    //console.log(dateArrey)\r\n\r\n    const getTasksForHour = (date: string, hour: number) => {\r\n        let tasksForHour: Array<any> = []\r\n        if (props.taskList !== null) {\r\n            tasksForHour = props.taskList.map(item => {\r\n                if (item.date === date) {\r\n                    let itemTime = item.time.split(':')[0]\r\n                    //console.log(moment().hours(hour).format('HH'), ' === ', itemTime, moment().hours(hour).format('HH') === itemTime)\r\n                    if (moment().hours(hour).format('HH') === itemTime) {\r\n                        return <TaskItemMobile\r\n                            element={item}\r\n                            dateInterval={props.dateInterval}\r\n                            deleteTask={props.deleteTask}\r\n                            setDrawerData={props.setDrawerData}\r\n                            setInitialFormValues={props.setInitialFormValues}\r\n                            showDrawer={props.showDrawer}\r\n                            onComplete={props.onComplete}\r\n                        />\r\n                    }\r\n                }\r\n            })\r\n        }\r\n        //console.log(tasksForHour)\r\n        return tasksForHour\r\n\r\n    }\r\n\r\n    const getHours = (headlineDate: string) => {\r\n        let hours: any = []\r\n        for (let index = 0; index < 24; index++) {\r\n            hours.push(\r\n                <>\r\n                    <Divider key={index + 'to' + headlineDate} orientation=\"left\">\r\n                        {index <= 9 ? '0' : null}{index}:00\r\n                    </Divider>\r\n                    {getTasksForHour(headlineDate, index)}\r\n                </>\r\n            )\r\n        }\r\n        return hours\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {\r\n                dateArrey.map((date: moment.Moment) => {\r\n                    return (\r\n                        <>\r\n                            <h3 key={date.format('DD MMMM') + 'dateHeader'}>{date.format('DD MMMM')}</h3>\r\n                            {getHours(date.format('YYYY-MM-DD'))}\r\n                        </>\r\n                    )\r\n                })\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nconst TasksOnly: React.FC<TimeScaleType> = (props) => {\r\n\r\n    const startDate = moment(props.dateInterval.startDate)\r\n    let dateArrey: Array<moment.Moment> = []\r\n    while (moment(startDate.format('YYYY-MM-DD')).isSameOrBefore(moment(props.dateInterval.endDate.format('YYYY-MM-DD')))) {\r\n        dateArrey.push(moment(startDate))\r\n        startDate.add(1, 'days')\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {dateArrey.map((date: moment.Moment) => {\r\n                return (\r\n                    <>\r\n                        <h3>{date.format('DD MMMM')}</h3>\r\n                        {props.taskList?.map(task => {\r\n                            if (task.date === date.format('YYYY-MM-DD')) {\r\n                                return <TaskItemMobile\r\n                                    element={task}\r\n                                    dateInterval={props.dateInterval}\r\n                                    deleteTask={props.deleteTask}\r\n                                    setDrawerData={props.setDrawerData}\r\n                                    showDrawer={props.showDrawer}\r\n                                    setInitialFormValues={props.setInitialFormValues}\r\n                                    onComplete={props.onComplete}\r\n                                />\r\n                            }\r\n                        })}\r\n                    </>\r\n                )\r\n            })}\r\n        </>\r\n    )\r\n}","import React, { useState } from 'react'\r\nimport { Col, Row, Checkbox, Tooltip, Button, Spin } from 'antd'\r\nimport { CheckboxChangeEvent } from 'antd/lib/checkbox'\r\nimport { ListGroup } from 'react-bootstrap'\r\nimport { TaskType } from '../../../Types/types'\r\nimport { DeleteOutlined, EditOutlined } from '@ant-design/icons'\r\nimport { TaskItemPropsType } from './TaskItemContainer'\r\n\r\nexport type OwnTaskItemPropsType = {\r\n    element: TaskType,\r\n    onEdit: (value:any)=>void\r\n}\r\n\r\nconst TaskItem: React.FC<TaskItemPropsType> = (props) => {\r\n    // type PropsElementType = typeof props.element.isCompleted\r\n    const [checked, setChecked] = useState(props.element.isCompleted === 1 ? true : false)\r\n    const [deleteingInProgess, setDeleteingInProgess] = useState(false)\r\n\r\n    const onisCompletedChange = (e: CheckboxChangeEvent) => {\r\n        setChecked(!checked)\r\n        const values = { isCompleted: e.target.checked }\r\n        props.updateTask(values, props.element.id)\r\n    }\r\n\r\n    const onEdit = (e: any) => {\r\n        props.onEdit(e)\r\n    }\r\n\r\n    const deleteTask: (taskid: number) => void = (taskid) => {\r\n        setDeleteingInProgess(true)\r\n        props.deleteTask(taskid, props.dateInterval.startDate.format('YYYY-MM-DD'), props.dateInterval.endDate.format('YYYY-MM-DD'))\r\n    }\r\n\r\n    return (\r\n        <ListGroup.Item action className=\"\" key={props.element.id}>\r\n            <Row className=\"px-0 ml-0 ml-sm-5\">\r\n                <Col className=\"mx-2\">\r\n                    <Checkbox \r\n                        // checked={props.element.isCompleted === 1 ? true : false} \r\n                        onChange={onisCompletedChange} \r\n                        checked={checked}\r\n                        />\r\n                </Col>\r\n                <Col className=\"mx-2\">\r\n                    {props.element.time.split(':', 2).join(':')}\r\n                </Col>\r\n                <Col className=\"mx-2\">\r\n                    <Tooltip key={props.element.id} placement=\"topLeft\" title={props.element.descriptions}>\r\n                        <span\r\n                            style={{ textDecoration: checked ? 'line-through' : '' }}\r\n                            // className=\"text-break\"\r\n                        >\r\n                            {props.element.name}\r\n                        </span>\r\n                    </Tooltip>\r\n                </Col>\r\n                <Col className=\"mr-auto ml-0 mr-sm-2 ml-sm-auto\">\r\n                    <Button className=\"\"\r\n                        type=\"primary\"\r\n                        shape=\"circle\"\r\n                        size=\"small\"\r\n                        style={{ marginLeft: 10 }}\r\n                        onClick={()=>{onEdit(props.element)}}\r\n                        icon={\r\n                            <div className=\"d-flex flex-wrap align-content-start\">\r\n                                <EditOutlined className=\"ml-1\" style={{ fontSize: '14px' }} />\r\n                            </div>\r\n                        }\r\n                    />\r\n\r\n                    {!deleteingInProgess ? \r\n                    <Button \r\n                        danger\r\n                        type=\"primary\"\r\n                        shape=\"circle\"\r\n                        size=\"small\"\r\n                        style={{ marginLeft: 10 }}\r\n                        onClick={() => { deleteTask(props.element.id) }}\r\n                        icon={\r\n                            <div className=\"d-flex flex-wrap align-content-start\">\r\n                                <DeleteOutlined className=\"ml-1\" style={{ fontSize: '14px' }} />\r\n                            </div>\r\n                        }\r\n                    />\r\n                    :\r\n                    <Spin key=\"spin\" size=\"small\" />\r\n                    }\r\n                </Col>\r\n            </Row>\r\n\r\n        </ListGroup.Item>\r\n    )\r\n}\r\n\r\nexport default TaskItem\r\n","import {connect} from 'react-redux'\r\nimport TaskItem, { OwnTaskItemPropsType } from './TaskItem'\r\nimport {deleteTask, getTaskList, updateTask} from './../../../redux/taskReducer'\r\nimport {AppStateType} from '../../../redux/store'\r\n\r\nexport type MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype DispatchPropsType = {\r\n    deleteTask: (taskid: number, startDate: string, endDate: string) => void\r\n    getTaskList: (startDate: string, endDate: string) => void,\r\n    updateTask: (values: any, taskId: number) => void,\r\n}\r\n\r\nexport type TaskItemPropsType = MapPropsType & DispatchPropsType & OwnTaskItemPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        dateInterval: state.task.dateInterval,\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, DispatchPropsType, OwnTaskItemPropsType, AppStateType>(mapStateToProps, \r\n    {deleteTask, getTaskList, updateTask}) \r\n    (TaskItem)","import { TaskType } from \"../Types/types\"\r\n\r\nexport const sortTaskArrayByParams = (field: 'date' | 'time') => {\r\n    if (field === 'date') {\r\n        return (a: TaskType, b: TaskType) => a['date'] > b['date'] ? 1 : -1\r\n    } else {\r\n        return (a: TaskType, b: TaskType) => a['time'] > b['time'] ? -1 : 1\r\n    }\r\n}","import React, { useEffect, useState } from 'react'\r\nimport { TaskType } from '../../Types/types'\r\nimport moment from 'moment'\r\nimport { TimeScalePropsType } from './TimeScaleContainer'\r\nimport { Divider, Spin, Tooltip, message } from 'antd'\r\nimport TaskItem from './TaskItem/TaskItemContainer'\r\nimport { sortTaskArrayByParams } from '../../utils/array-helpers'\r\n\r\nexport type OwnTaskTimeScaleType = {\r\n    onEdit: (value:any)=>void\r\n}\r\nconst TimeScale: React.FC<TimeScalePropsType> = (props) => {\r\n    type SelestedDatesType = typeof props.dateInterval\r\n    const [selestedDates, setSelectedDates] = useState<SelestedDatesType>({ startDate: moment(null), endDate: moment() })\r\n    // const [isInterval, setIsInterval] = useState(\r\n    //     props.dateInterval.startDate.format('YYYY-MM-DD') === props.dateInterval.endDate.format('YYYY-MM-DD') ? false : true\r\n    //     )\r\n    useEffect(() => {\r\n        if (\r\n            props.dateInterval.startDate.isSame(selestedDates.startDate.format('YYYY-MM-DD'), \"day\" ) &&\r\n            props.dateInterval.endDate.isSame(selestedDates.endDate.format('YYYY-MM-DD'), \"day\" )\r\n        ) { }\r\n        else {\r\n            if (props.dateInterval.startDate !== null) {\r\n                props.getTaskList(\r\n                    props.dateInterval.startDate.format('YYYY-MM-DD'),\r\n                    props.dateInterval.endDate.format('YYYY-MM-DD')\r\n                )\r\n                setSelectedDates(props.dateInterval)\r\n            }\r\n        }\r\n    }, [props.dateInterval])\r\n\r\n    useEffect(() => {\r\n        if (props.errorMessage !== null) {\r\n            message.success(props.errorMessage)\r\n        }\r\n    }, [props.errorMessage])\r\n    \r\n    //console.log(props.dateInterval)\r\n\r\n    if (props.taskList !== undefined) {\r\n        if (props.taskList !== null) {\r\n            return (\r\n                <>\r\n                    {getTimeScaleArrey(props.taskList, props.isInterval, props.onEdit)}\r\n                </>\r\n            )\r\n        } else {\r\n            return (\r\n                <Spin key=\"spin\" size=\"large\" />\r\n            )\r\n        }\r\n    } else {\r\n        return <div>Authorization required to get a list of tasks</div>\r\n    }\r\n    \r\n}\r\n\r\nexport default TimeScale\r\n\r\n\r\nconst getTimeScaleArrey = (taskList: Array<TaskType>, isInterval:boolean, onEdit:(value:any)=>void): Array<React.ReactElement<string>> => {\r\n    let timeScaleArrey: Array<React.ReactElement<string>> = []\r\n    let tomorowTasks: Array<TaskType> = []\r\n\r\n    //console.log('isInterval: ', isInterval)\r\n\r\n    taskList.sort(sortTaskArrayByParams('time')).sort(sortTaskArrayByParams('date'))\r\n\r\n    const getHeadlineLabel = (task: TaskType) => {\r\n        return moment(task.date).format('D MMMM')\r\n    }\r\n\r\n    let headlineDate: string | null = null\r\n\r\n    if (taskList !== null && taskList.length > 0) {\r\n        headlineDate = getHeadlineLabel(taskList[0])\r\n        timeScaleArrey.push(\r\n            <h5 \r\n                key={headlineDate + 'title'}\r\n                className={isInterval ? \"text-left\" : \"\"}\r\n            >\r\n                {headlineDate}:\r\n            </h5>\r\n        )\r\n    }\r\n\r\n    for (let index: number = 0; index < 24; index++) {\r\n        if (taskList.length > 0) {\r\n            if (!isInterval && index > 7) {\r\n                timeScaleArrey.push(\r\n                    <Divider key={index + 'to' + headlineDate} orientation=\"left\">\r\n                        {index <= 9 ? '0' : null}{index}:00\r\n                    </Divider>\r\n                )\r\n            }\r\n        } else {\r\n            timeScaleArrey.push(<h3 key=\"noTasks\">no tasks</h3>)\r\n            break\r\n        }\r\n\r\n        if (taskList !== null) {\r\n            for (let i = 0; i < taskList.length; i++) {\r\n                const element: TaskType = taskList[i]\r\n                const timeVal = Number(element.time.split(':', 1))\r\n                const nextHour = index + 1\r\n                if (timeVal >= index && timeVal < nextHour) {\r\n                    if (getHeadlineLabel(element) === headlineDate) {\r\n                        timeScaleArrey.push(\r\n                            <Tooltip key={index + '-' + element.id} placement=\"topLeft\" title={element.descriptions}>\r\n                                <TaskItem element={element} onEdit={onEdit}/>\r\n                            </Tooltip>\r\n                        )\r\n                    }\r\n                    else {\r\n                        tomorowTasks.push(element)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (tomorowTasks.length > 0) {\r\n        timeScaleArrey = timeScaleArrey.concat(getTimeScaleArrey(tomorowTasks, isInterval, onEdit))\r\n    }\r\n\r\n    return timeScaleArrey\r\n}","import {connect} from 'react-redux'\r\nimport TimeScale from './TimeScale'\r\nimport {getTaskList} from './../../redux/taskReducer'\r\nimport { AppStateType } from '../../redux/store'\r\nimport { OwnTaskTimeScaleType } from './TimeScale'\r\n\r\nexport type MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype DispatchPropsType = {\r\n    getTaskList: (startDate: string, endDate: string) => void\r\n}\r\n\r\nexport type TimeScalePropsType = MapPropsType & DispatchPropsType & OwnTaskTimeScaleType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        taskList: state.task.taskList,\r\n        taskSaveStatus: state.task.taskSaveStatus,\r\n        taskListIsFetching: state.task.taskListIsFetching,\r\n        dateInterval: state.task.dateInterval,\r\n        errorMessage: state.task.errorMessage,\r\n        isInterval: state.task.isInterval\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, DispatchPropsType, OwnTaskTimeScaleType, AppStateType>(mapStateToProps, \r\n    {getTaskList}) \r\n    (TimeScale)\r\n\r\n\r\n","import { Card, Drawer } from 'antd'\r\nimport React, { useEffect, useState } from 'react'\r\nimport ToDoHeaderContainer from './ToDoHeader/ToDoHeaderContainer'\r\nimport TimeScale from '../TimeScale/TimeScaleContainer'\r\nimport { Formik } from 'formik'\r\nimport ToDoForm from './ToDoForm/ToDoForm'\r\nimport moment from \"moment\"\r\n\r\ntype InitialDrewerDataType = {\r\n    header: string,\r\n    taskId: false | number\r\n}\r\n\r\nconst initialDrewerData: InitialDrewerDataType = {\r\n    header: 'Create New Task',\r\n    taskId: false\r\n}\r\n\r\nconst zeroTime = moment()\r\nzeroTime.hours(0)\r\nzeroTime.minutes(0)\r\nzeroTime.seconds(0)\r\nzeroTime.milliseconds(0)\r\n\r\ntype InitialValuesType = {\r\n    name: string | null,\r\n    time: moment.Moment,\r\n    date: moment.Moment,\r\n    descriptions: string | null \r\n\r\n}\r\nconst initialValues: any = {\r\n    name: '',\r\n    time: zeroTime,\r\n    date: moment(),\r\n    descriptions: ''\r\n\r\n}\r\n\r\nconst ToDoBrowser: React.FC<any> = (props) => {\r\n    const [visible, setVisible] = useState(false)\r\n    const [isModalVisible, setIsModalVisible] = useState(false)\r\n    const [drawerData, setDrawerData] = useState(initialDrewerData)\r\n    const [initialFormValues, setInitialFormValues] = useState(initialValues)\r\n\r\n    useEffect(() => {\r\n        if (props.taskList === null) {\r\n            props.getTaskList(props.dateInterval.startDate.format('YYYY-MM-DD'), props.dateInterval.endDate.format('YYYY-MM-DD'))\r\n        }\r\n    }, [props.getTaskList])\r\n    useEffect(() => {\r\n        //console.log('useEffect')\r\n    }, [initialFormValues])\r\n\r\n    const onTaskEdit = (value:any) => {\r\n        //console.log('onTaskEdit: ', value)\r\n        setDrawerData({\r\n            header: 'Edite \"'+value.name+'\"',\r\n            taskId: value.id\r\n        })\r\n\r\n        const splitTime = value.time.split(/:/)\r\n\r\n        setInitialFormValues({\r\n            name: value.name,\r\n            time: moment().hours(splitTime[0]).minutes(splitTime[1]).seconds(0),\r\n            date: moment(value.date),\r\n            descriptions: value.descriptions ? value.descriptions : null\r\n        })\r\n        \r\n        showDrawer()\r\n    }\r\n\r\n    const showDrawer = (): void => {\r\n        //console.log('drawerData', drawerData)\r\n        if (!drawerData.taskId) {\r\n            //console.log('empty')\r\n        }\r\n        //console.log(initialFormValues)\r\n        setVisible(true)\r\n    }\r\n\r\n    const onClose = (): void => {\r\n        //console.log('onClose')\r\n\r\n        setInitialFormValues(null)\r\n        setInitialFormValues({...initialValues})\r\n\r\n        setDrawerData({...initialDrewerData})\r\n        setVisible(false)\r\n        //console.log('drawerData: ', drawerData)\r\n    }\r\n\r\n    const showModal = () => {\r\n        setIsModalVisible(true)\r\n    }\r\n    const onAdd = () => {\r\n        // setDrawerData(initialDrewerData)\r\n        // setInitialFormValues(initialValues)\r\n        // showDrawer()\r\n    }\r\n\r\n    const handleOk = () => {\r\n        setIsModalVisible(false)\r\n    }\r\n\r\n    const handleCancel = () => {\r\n        setIsModalVisible(false)\r\n    }\r\n\r\n    const handleSubmit = (formProps: any) => {\r\n        let formPropsCopy: any = { ...formProps }\r\n        // delete formPropsCopy.selectOptions\r\n        // delete formPropsCopy.taskTypes\r\n        if (formPropsCopy.time !== undefined) {\r\n            formPropsCopy.time = formPropsCopy.time.format('HH:mm:ss')\r\n        }\r\n        if (formPropsCopy.date !== undefined) {\r\n            formPropsCopy.date = formPropsCopy.date.format('YYYY-MM-DD')\r\n        }\r\n\r\n        formPropsCopy.user_id = props.userId\r\n        //console.log('handleSubmit', formPropsCopy)\r\n        if (!drawerData.taskId) {\r\n            props.createNewTask(formPropsCopy, true)\r\n        } else {\r\n        //     //console.log(formPropsCopy)\r\n            props.updateTask(formPropsCopy, drawerData.taskId)\r\n        }\r\n        // setInitialFormValues({...initialValues})\r\n        onClose()\r\n    }\r\n\r\n    //console.log('ToDoBrowser initialFormValues: ', initialFormValues)\r\n\r\n    return (\r\n        <Card\r\n            title={ <ToDoHeaderContainer \r\n                        showDrawer={showDrawer} \r\n                        showModal={showModal}\r\n                    />}\r\n            bordered={false}\r\n        >\r\n            <TimeScale onEdit={onTaskEdit}/>\r\n\r\n            <Drawer\r\n                title={drawerData.header}\r\n                placement=\"right\"\r\n                closable={true}\r\n                onClose={onClose}\r\n                visible={visible}\r\n                width=\"90%\"\r\n            >\r\n\r\n                <Formik\r\n                    initialValues={initialFormValues}\r\n                    // initialValues={{}}\r\n                    onSubmit={handleSubmit}\r\n                    render={ToDoForm}\r\n                    enableReinitialize={true}\r\n                />\r\n\r\n            </Drawer>\r\n\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default ToDoBrowser","import {connect} from 'react-redux'\r\nimport ToDoMobile from './ToDoMobile'\r\nimport { isMobile } from 'react-device-detect'\r\nimport {getTaskList, createNewTask, updateTask, deleteTask} from '../../redux/taskReducer'\r\nimport { AppStateType } from '../../redux/store'\r\nimport ToDoBrowser from './ToDoBrowser'\r\nimport { NewTaskDataType } from '../../Types/types'\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    getTaskList: (start_date: string, end_date:string)=>void,\r\n    createNewTask: (values: NewTaskDataType, reload:boolean)=>void,\r\n    updateTask: (values: any, taskId: number)=>void,\r\n    deleteTask: (taskid: number, startDate: string, endDate:string)=>void,\r\n}\r\n\r\nexport type ToDoListPropsType = MapPropsType & MapDispatchPropsType & OwnToDoListPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        taskList: state.task.taskList,\r\n        viewSettings: state.auth.viewSettings,\r\n        isInterval: state.task.isInterval,\r\n        dateInterval: state.task.dateInterval,\r\n        userId: state.auth.user?.id\r\n    }\r\n}\r\n\r\ntype OwnToDoListPropsType = {}\r\n\r\nconst component: any = isMobile ? ToDoMobile : ToDoBrowser\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnToDoListPropsType, AppStateType>(mapStateToProps, \r\n    {getTaskList, createNewTask, updateTask, deleteTask}) \r\n    ( component )\r\n    \r\n\r\n","import {getAuthUserData} from \"./authReducer\"\r\nimport {InferActionsTypes} from './store'\r\n\r\nlet initialState = {\r\n    initialized: false,\r\n    location: '/'\r\n}\r\n\r\n// export type InitialStateType = typeof initialState\r\nexport type InitialStateType ={\r\n    initialized: boolean,\r\n    location: string\r\n}\r\n\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\n\r\nconst appReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/APP/INITIALIZED_SUCCESS':\r\n            //console.log('INITIALIZED_SUCCESS: true')\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            }\r\n\r\n        case 'SN/APP/SET_LOCATION':\r\n            //console.log('location in appReducer:', action.location)\r\n            return  {\r\n                ...state,\r\n                location: action.location\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    initializedSuccess: () => ({type: 'SN/APP/INITIALIZED_SUCCESS'} as const),\r\n    setLocation: (location: string) => ({type: 'SN/APP/SET_LOCATION', location} as const),\r\n}\r\n\r\nexport const initializeApp = () => (dispatch: any) => {\r\n    let promise = dispatch(getAuthUserData());\r\n    Promise.all([promise])\r\n        .then(() => {\r\n            //console.log('dispatch(actions.initializedSuccess());')\r\n            dispatch(actions.initializedSuccess());\r\n        });\r\n}\r\n\r\nexport const addLocation = (location: string) => (dispatch: any) => {\r\n    dispatch(actions.setLocation(location));\r\n}\r\n\r\n\r\nexport default appReducer;","import { TaskListType } from '../Types/types'\r\nimport {instance} from './api'\r\n\r\n\r\nif (localStorage.getItem('remember_token')) {\r\n    instance.defaults.headers.common['X-Auth-Token'] = localStorage.getItem('remember_token')\r\n}\r\nif (sessionStorage.getItem('remember_token')) {\r\n    instance.defaults.headers.common['X-Auth-Token'] = sessionStorage.getItem('remember_token')\r\n}\r\n\r\nconst getToken = () => {\r\n    if (localStorage.getItem('remember_token')) {\r\n        instance.defaults.headers.common['X-Auth-Token'] = localStorage.getItem('remember_token')\r\n    }\r\n    if (sessionStorage.getItem('remember_token')) {\r\n        instance.defaults.headers.common['X-Auth-Token'] = sessionStorage.getItem('remember_token')\r\n    }\r\n}\r\n\r\nexport const taskListAPI = {\r\n    getTaskList() {\r\n        getToken()\r\n        return instance.get<TaskListType>(`taskList`)\r\n        .then(response => {\r\n            //console.log(response)\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                //console.log(err.response)\r\n                return err.response\r\n            } else if (err.request) {\r\n                //console.log('request', err.request)\r\n            } else {\r\n                //console.log('anything else: ', err)\r\n            }\r\n            return null\r\n        })\r\n    },\r\n    createNewTaskList(values: any) {\r\n        return instance.post<TaskListType>(`taskList`, values)\r\n        .then(response => {\r\n            console.log(response)\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                console.log(err.response)\r\n                return err.response\r\n            } else if (err.request) {\r\n                //console.log('request', err.request)\r\n            } else {\r\n                //console.log('anything else: ', err)\r\n            }\r\n            return null\r\n        })\r\n    },\r\n    deleteTask(taskId: number) {\r\n        return instance.delete<TaskListType>(`taskList/${taskId}`).then(response => {\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                return err.response\r\n            } else if (err.request) {\r\n                //console.log('request', err.request)\r\n            } else {\r\n                //console.log('anything else: ', err)\r\n            }\r\n            return null\r\n        })\r\n    },\r\n    updateTask(values: any, taskId: number) {\r\n        return instance.put<TaskListType>(`taskList/${taskId}`, values)\r\n        .then(response => {\r\n            console.log(response)\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                console.log(err.response)\r\n                return err.response\r\n            } else if (err.request) {\r\n                //console.log('request', err.request)\r\n            } else {\r\n                //console.log('anything else: ', err)\r\n            }\r\n            return null\r\n        })\r\n    }\r\n}\r\n//descriptions\r\n//descriptions","import { Dispatch } from \"react\";\r\nimport { BaseThunkType, InferActionsTypes } from \"./store\";\r\nimport { taskListAPI } from './../api/taskListAPI'\r\nimport { TaskListType } from \"../Types/types\";\r\n\r\n\r\nexport type InitialStateType = {\r\n    taskList: Array<TaskListType>,\r\n    taskListIsFetching: boolean,\r\n    isTaskListLoaded: boolean,\r\n    selectedTasks: Array<number>\r\n    // taskSaveStatus: 'no' | 'inProgress' | 'success' | 'error'\r\n    // errorMessage: null | string,\r\n    // isInterval: boolean,\r\n    // dateInterval: {\r\n    //     startDate: moment.Moment,\r\n    //     endDate: moment.Moment\r\n    // }\r\n}\r\n\r\nlet initialState:InitialStateType = {\r\n    taskList: [],\r\n    taskListIsFetching: false,\r\n    isTaskListLoaded: false,\r\n    selectedTasks:[]\r\n    // taskSaveStatus: 'no',\r\n    // errorMessage: null,\r\n    // isInterval: false,\r\n    // dateInterval: {\r\n    //     startDate: moment(),\r\n    //     endDate: moment()\r\n    // }\r\n}\r\n\r\nconst taskListReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/TASK_LIST/BACK_SELECTED_TASK':\r\n            let newSelectedTasks: Array<number> = [...state.selectedTasks]\r\n            if (newSelectedTasks.length > 0) {\r\n                newSelectedTasks.pop()\r\n            }              \r\n            return { ...state, selectedTasks: newSelectedTasks }\r\n        case 'SN/TASK_LIST/SET_SELECTED_TASK':\r\n            //console.log( { ...state, selectedTasks: [...state.selectedTasks, action.taskId] })\r\n            return { ...state, selectedTasks: [...state.selectedTasks, action.taskId] }\r\n        case 'SN/TASK_LIST/SET_TASK_LIST':\r\n            return { ...state, taskList: action.taskList, isTaskListLoaded: true}\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    setTaskList: (taskList: Array<any>) => ({ type: 'SN/TASK_LIST/SET_TASK_LIST', taskList } as const),\r\n    setSelectedTasks: (taskId: number) => ({ type: 'SN/TASK_LIST/SET_SELECTED_TASK', taskId } as const),\r\n    backSelectedTasks: () => ({type: 'SN/TASK_LIST/BACK_SELECTED_TASK'} as const),\r\n    // setTaskSaveStatus: (taskSaveStatus: 'no' | 'inProgress' | 'success' | 'error') => ({ type: 'SN/TASK/SET_TASK_SAVE_STATUS', taskSaveStatus } as const),\r\n    // setErrorMessage: (message: string | null) => ({type: 'SN/TASK/SET_ERROR_MESSAGE', message} as const),\r\n    // setTaskListIsFetching: (isFetchingValue: boolean) => ({type: 'SN/TASK/SET_TASK_LIST_IS_FETCHING', isFetchingValue} as const),\r\n    // setIsInterval: (isInterval: boolean, date: {startDate: moment.Moment, endDate: moment.Moment}) => ({type: 'SN/TASK/SET_IS_INTERVAL', isInterval, date} as const)\r\n}\r\n\r\nexport const getTaskList = (): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        // dispatch(actions.setTaskListIsFetching(true))\r\n\r\n        let response = await taskListAPI.getTaskList()\r\n        //console.log(response)\r\n\r\n        if (response !== undefined && response !== null) {\r\n            dispatch(actions.setTaskList(response.data.Tasks))\r\n        } else {\r\n            // add error message\r\n        }\r\n        // dispatch(actions.setTaskListIsFetching(false))\r\n    }\r\n}\r\n\r\nexport const createNewTaskList = (values: any): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        let response = await taskListAPI.createNewTaskList(values)\r\n        //console.log(response)\r\n        dispatch(actions.setTaskList(response.data.Tasks))\r\n    }\r\n}\r\n\r\nexport const deleteTaskList = (taskId: number): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        let response = await taskListAPI.deleteTask(taskId)\r\n        //console.log(response)\r\n        dispatch(actions.setTaskList(response.data.Tasks))\r\n    }\r\n}\r\n\r\nexport const updateTaskList = (values: any, taskId: number): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        let response = await taskListAPI.updateTask(values, taskId)\r\n        //console.log(response)\r\n        dispatch(actions.setTaskList(response.data.Tasks))\r\n    }\r\n}\r\n\r\nexport default taskListReducer\r\n\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsTypes>\r\nexport type DispatchType = Dispatch<ActionsTypes>","import {Action, applyMiddleware, combineReducers, createStore} from \"redux\"\r\nimport thunkMiddleware, {ThunkAction} from \"redux-thunk\"\r\nimport appReducer from \"./appReducer\"\r\nimport authReducer from \"./authReducer\"\r\nimport taskListReducer from \"./TaskListReducer\"\r\nimport taskReducer from './taskReducer'\r\n\r\n\r\nlet rootReducer = combineReducers({\r\n    task: taskReducer,\r\n    app: appReducer,\r\n    auth: authReducer,\r\n    taskList: taskListReducer,\r\n})\r\n\r\ntype rootReducerType = typeof rootReducer\r\nexport type AppStateType = ReturnType<rootReducerType>\r\n\r\nexport type InferActionsTypes<T> = T extends { [keys: string]: (...args: any[]) => infer U } ? U : never\r\nexport type BaseThunkType<A extends Action = Action, R = Promise<void>> = ThunkAction<R, AppStateType, unknown, A>\r\n\r\nlet store = createStore(rootReducer, applyMiddleware(thunkMiddleware))\r\n\r\n//console.log('global State:', store.getState())\r\n\r\nexport default store","import React, {useState} from 'react'\r\nimport { Button, Menu } from 'antd';\r\nimport {Link, useHistory} from 'react-router-dom'\r\n// import { MailOutlined, AppstoreOutlined, SettingOutlined } from '@ant-design/icons';\r\nimport {LogoutOutlined} from '@ant-design/icons'\r\nimport {MenuBrowserPropsType} from './MenuBrowserConainer'\r\nimport { TaskListType } from '../../Types/types';\r\nimport { MenuDataType } from './Header';\r\n\r\nconst { SubMenu } = Menu;\r\n\r\nexport type OwnMenuBrowserPropsType = {\r\n    menuData: any,\r\n    // logout: any,\r\n    // appLocation: string | null\r\n}\r\n\r\nconst MenuBrowser: React.FC<MenuBrowserPropsType> = (props) => {\r\n    let history = useHistory();\r\n    const [state, setState] = useState<Array<string>>([])\r\n    const handleClick = (e: any | undefined) => {\r\n        //console.log('click ', e);\r\n        // setState({ current: e.key });\r\n    }\r\n\r\n    const getMenuItem = (childs: any):any => {\r\n        // return <Menu.Item key=\"setting:1\">Option 1</Menu.Item>\r\n        const menuItems = childs.map( (item: any) => {\r\n            return (\r\n                <Menu.Item key={item.value}>\r\n                    <Link to={item.value}>{item.label}</Link>\r\n                </Menu.Item>\r\n            )\r\n        })\r\n        return menuItems\r\n    }\r\n\r\n    const getSubMenu = () => {\r\n        //console.log(props.menuData)\r\n        const subMenu = props.menuData.map( (item: any) => {\r\n            //console.log(item)\r\n            return (\r\n                <SubMenu \r\n                    key={item.value} \r\n                    // icon={<MailOutlined />}\r\n                    title={item.label}\r\n                >\r\n                    {getMenuItem(item.children)}\r\n                </SubMenu >\r\n            )\r\n        })\r\n        // subMenu.push(\r\n        //     <Menu.Item key=\"login\">\r\n        //         <Link to={props.appLocation +\"login\"} >Login</Link>\r\n        //     </Menu.Item>\r\n        // )\r\n        return subMenu\r\n    }\r\n\r\n    const onLogout = () => {\r\n        // onChange(['', ''])\r\n        history.replace(props.appLocation+'login')\r\n        props.logout()\r\n    }\r\n\r\n    //console.log(props)\r\n\r\n    return (\r\n        <Menu \r\n            onClick={handleClick} \r\n            // selectedKeys={[current]} \r\n            mode=\"horizontal\"\r\n            theme=\"dark\"\r\n        >\r\n            {getSubMenu()}\r\n\r\n            {!props.isAuth ? \r\n                <Menu.Item key=\"login\">\r\n                    <Link to={props.appLocation +\"login\"} >Login</Link>\r\n                </Menu.Item>\r\n            :\r\n                <SubMenu \r\n                    key={props.user?.name} \r\n                    title={props.user?.name}\r\n                >\r\n                    <Menu.Item key=\"login\" onClick={onLogout}>\r\n                        {/* <Link to={props.appLocation +\"login\"} > */}\r\n                            Logout\r\n                        {/* </Link> */}\r\n                    </Menu.Item>\r\n                </SubMenu >\r\n                \r\n            }\r\n        </Menu>\r\n    )\r\n}\r\n\r\nexport default MenuBrowser","import {connect} from 'react-redux'\r\nimport MenuBrowser, { OwnMenuBrowserPropsType } from './MenuBrowser'\r\nimport { AppStateType } from '../../redux/store'\r\nimport {actions} from './../../redux/authReducer'\r\n\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    logout: ()=>void\r\n}\r\n\r\nexport type MenuBrowserPropsType = MapPropsType & MapDispatchPropsType & OwnMenuBrowserPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n        user: state.auth.user,\r\n        appLocation: state.app.location\r\n        \r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnMenuBrowserPropsType, AppStateType>(mapStateToProps, \r\n    {logout: actions.logout}) \r\n    (MenuBrowser)\r\n    \r\n\r\n","import { Popover, Icon } from 'antd-mobile'\r\nimport React, { useState } from 'react'\r\n\r\nconst Item = Popover.Item\r\n\r\nconst MenuPopover: React.FC<any> = (props) => {\r\n    const [visible, setVisible] = useState(false)\r\n\r\n    const onSelect = (opt: any, index?: number) => {\r\n        //console.log(opt.props);\r\n        setVisible(false)\r\n        if(opt.props.children === \"Logout\") {\r\n            props.onLogout()\r\n        }\r\n    }\r\n\r\n    const handleVisibleChange = (visible: boolean) => {\r\n        setVisible(visible)\r\n    }\r\n\r\n    const fortest:String = \"fortest\"\r\n\r\n    return (\r\n        <div className=\"mr-3\">\r\n        <Popover \r\n            mask\r\n            visible={visible}\r\n            overlay={[\r\n                (<Item key=\"1\" >Logout</Item>),\r\n                (<Item key=\"2\" >Info</Item>),\r\n                (<Item key=\"3\" >Help</Item>),\r\n            ]}\r\n            onVisibleChange={handleVisibleChange}\r\n            onSelect={onSelect}\r\n        >\r\n            <div style={{\r\n                height: '100%',\r\n                padding: '0 15px',\r\n                marginRight: '-20px',\r\n                display: 'flex',\r\n                alignItems: 'center',\r\n            }}\r\n            >\r\n                <Icon type=\"ellipsis\" />\r\n            </div>\r\n        </Popover>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MenuPopover","import React, { useState } from 'react'\r\nimport { Menu, ActivityIndicator, NavBar, Button } from 'antd-mobile'\r\nimport { ValueType } from 'antd-mobile/lib/menu/PropsType'\r\nimport './MenuMobile.css'\r\nimport { useHistory, useLocation } from 'react-router-dom'\r\nimport { MenuDataType } from './Header'\r\nimport { MenuMobilePropsType } from './MenuMobileContainer'\r\nimport { Link } from 'react-router-dom'\r\nimport { LogoutOutlined } from '@ant-design/icons'\r\nimport MenuPopover from './MenuPopover'\r\n\r\nexport type OwnMenuMobilePropsType = {\r\n    menuData: MenuDataType,\r\n    logout: () => void\r\n}\r\n\r\nconst MenuMobile: React.FC<MenuMobilePropsType> = (props) => {\r\n    let history = useHistory();\r\n    const location = useLocation();\r\n    const [show, setShow] = useState(false)\r\n    type DataType = typeof props.menuData\r\n    const data = [...props.menuData]\r\n    const [initData, setInitData] = useState<DataType>(data)\r\n\r\n    const getSelectedMenuItem = (): ValueType => {\r\n        let response: ValueType = [data[0].value, '']\r\n        data.forEach((dataItem: any) => {\r\n            if (dataItem.children) {\r\n                dataItem.children.forEach((item: any) => {\r\n                    //console.log('/',item.value,'===',location.pathname)\r\n                    if (item.value === location.pathname) {\r\n                        response = [dataItem.value, item.value]\r\n                    }\r\n                })\r\n            }\r\n        })\r\n        //console.log('getSelectedMenuItem response: ', response)\r\n        return response\r\n    }\r\n\r\n    const [selectedMenuItem, setSelectedMenuItem] = useState<ValueType>(getSelectedMenuItem())\r\n\r\n    const handleClick = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\r\n        e.preventDefault(); // Fix event propagation on Android\r\n        setShow(!show)\r\n        // if (!initData) {\r\n        //     setInitData(data)\r\n        // }\r\n    }\r\n\r\n    const onChange = (value?: ValueType | undefined) => {\r\n        //console.log('input values: ', value)\r\n        if (value) {\r\n            let subMenu = value[0]\r\n\r\n            data.forEach((dataItem) => {\r\n                if (dataItem.value === value[0]) {\r\n                    subMenu = value[0]\r\n                    if (dataItem.children && value[1]) {\r\n                        dataItem.children.forEach((cItem: { value: string | string[]; label: any }) => {\r\n                            if (cItem.value === value[1]) {\r\n                                history.replace(`${cItem.value}`)\r\n                                setShow(false)\r\n                            }\r\n                        })\r\n                    }\r\n                }\r\n            })\r\n        \r\n            if (subMenu === '') {\r\n                subMenu = data[0].value\r\n            }\r\n            //console.log('set values: ', [subMenu, value[1]])\r\n            setSelectedMenuItem([subMenu, value[1]])\r\n        }\r\n        \r\n    }\r\n\r\n    const onMaskClick = () => {\r\n        setShow(false)\r\n    }\r\n\r\n    const menuEl = (\r\n        <Menu\r\n            className=\"foo-menu\"\r\n            data={initData}\r\n            value={selectedMenuItem}\r\n            onChange={onChange}\r\n            height={document.documentElement.clientHeight * 0.6}\r\n        />\r\n    );\r\n\r\n    const loadingEl = (\r\n        <div style={{ width: '100%', height: document.documentElement.clientHeight * 0.6, display: 'flex', justifyContent: 'center' }}>\r\n            <ActivityIndicator size=\"large\" />\r\n        </div>\r\n    );\r\n\r\n    //console.log(props)\r\n\r\n    const onLogout = () => {\r\n        onChange(['', ''])\r\n        history.replace(props.appLocation + 'login')\r\n        props.logout()\r\n    }\r\n\r\n    return (\r\n        <div className={show ? 'menu-active' : ''}>\r\n            <div>\r\n                <NavBar\r\n                    leftContent=\"\"\r\n                    mode=\"light\"\r\n                    icon={<img src=\"https://gw.alipayobjects.com/zos/rmsportal/iXVHARNNlmdCGnwWxQPH.svg\" className=\"am-icon am-icon-md\" alt=\"\" />}\r\n                    onLeftClick={handleClick}\r\n                    className=\"top-nav-bar\"\r\n                    rightContent={props.isAuth ? <MenuPopover onLogout={onLogout} /> : null}\r\n                >\r\n                    {!props.isAuth ?\r\n                        <Link\r\n                            to={props.appLocation + \"login\"}\r\n                            onClick={() => { onChange(['', '']) }}\r\n                        >\r\n                            <span className=\"text-white\">Login</span>\r\n                        </Link>\r\n                        :\r\n                        <>\r\n                        <div>\r\n                            {props.user?.name}\r\n                            {/* <Button className=\"ml-5\" size=\"small\" icon={<LogoutOutlined />} onClick={onLogout} inline >\r\n\r\n                            </Button> */}\r\n                        </div>\r\n                        {/* <div className=\"w-100\">\r\n                            \r\n                        </div> */}\r\n                        </>\r\n                    }\r\n                    \r\n\r\n                </NavBar>\r\n            </div>\r\n            {show ? initData ? menuEl : loadingEl : null}\r\n            {show ? <div className=\"menu-mask\" onClick={onMaskClick} /> : null}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default (MenuMobile)\r\n\r\n\r\n","import {connect} from 'react-redux'\r\nimport MenuMobile, { OwnMenuMobilePropsType } from './MenuMobile'\r\n// import {getTaskList} from '../../redux/taskReducer'\r\nimport { AppStateType } from '../../redux/store'\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    // getTaskList: (start_date: string, end_date:string)=>void\r\n}\r\n\r\nexport type MenuMobilePropsType = MapPropsType & MapDispatchPropsType & OwnMenuMobilePropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        appLocation: state.app.location,\r\n        isAuth: state.auth.isAuth,\r\n        user: state.auth.user\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnMenuMobilePropsType, AppStateType>(mapStateToProps, \r\n    {}) \r\n    (MenuMobile)\r\n    \r\n\r\n","import React from 'react'\r\nimport {\r\n    BrowserView,\r\n    MobileView,\r\n    isBrowser,\r\n    isMobile\r\n} from \"react-device-detect\"\r\nimport { HeaderPropsType } from './HeaderContainer'\r\nimport MenuBrowser from './MenuBrowserConainer'\r\nimport MenuMobile from './MenuMobileContainer'\r\n// import {useHistory, useLocation} from 'react-router-dom'\r\n\r\n// type MenuDataType = Array<any>\r\n\r\nexport type OwnHeaderPropsType = {}\r\n\r\nconst Header: React.FC<HeaderPropsType> = (props) => {\r\n    // const location = useLocation()\r\n    //console.log('Header')\r\n\r\n    if (isMobile) {\r\n        return <MenuMobile menuData={menuData(props.appLocation)} logout={props.logout}/>\r\n    } else {\r\n        return <MenuBrowser menuData={menuData(props.appLocation)}/>\r\n    }\r\n}\r\n\r\nexport default Header\r\n\r\n\r\nexport type MenuDataType = ReturnType<typeof menuData>\r\n\r\nconst menuData = (appLocation: string) => {\r\n    const data = [\r\n    {\r\n        value: 'planning',\r\n        label: 'Planning',\r\n        children: [\r\n            {\r\n                label: 'ToDo list',\r\n                // label: <Link to='/toDoList'>ToDo list</Link>,\r\n                value: appLocation + 'toDoList',\r\n                disabled: false,\r\n            },\r\n            {\r\n                label: 'Tasks tree',\r\n                value: appLocation + 'tasksTree',\r\n            },\r\n            {\r\n                label: 'Analysis',\r\n                value: appLocation + 'analysis',\r\n                disabled: true,\r\n            }\r\n        ],\r\n    }, {\r\n        value: 'catalog',\r\n        label: 'Catalog',\r\n        children: [\r\n            {\r\n                label: 'Products',\r\n                value: appLocation + 'products',\r\n            }\r\n            , {\r\n                label: 'Providers',\r\n                value: appLocation + 'providers',\r\n            }\r\n        ],\r\n    },\r\n    {\r\n        value: 'orders',\r\n        label: 'Orders',\r\n        // isLeaf: true,\r\n        children: [\r\n            {\r\n                label: 'Orders',\r\n                value: appLocation + 'orders',\r\n            },\r\n            {\r\n                label: 'Leads',\r\n                value: appLocation + 'leads',\r\n            },\r\n        ],\r\n    },\r\n    ]\r\n    return data\r\n}\r\n","import {connect} from 'react-redux'\r\nimport Header, { OwnHeaderPropsType } from './Header'\r\nimport {actions} from '../../redux/authReducer'\r\nimport { AppStateType } from '../../redux/store'\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    logout: ()=>void\r\n}\r\n\r\nexport type HeaderPropsType = MapPropsType & MapDispatchPropsType & OwnHeaderPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        appLocation: state.app.location,\r\n        user: state.auth.user\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnHeaderPropsType, AppStateType>(mapStateToProps, \r\n    {logout: actions.logout}) \r\n    (Header)\r\n    \r\n\r\n","import React, { ReactNode } from 'react'\r\nimport { Form, Field, FormikProps } from \"formik\"\r\nimport { AntInput, AntCheckbox, AntInputPassword } from '../../utils/Formik/CreateAntField'\r\nimport { validateEmail, validateRequired } from '../../utils/Formik/ValidateFields'\r\n\r\nconst LoginForm: ((props: FormikProps<{}>) => ReactNode) = (props) => {\r\n    return (\r\n        <Form \r\n            className=\"form-container\" \r\n            onSubmit={props.handleSubmit}\r\n        >\r\n            <Field\r\n                component={AntInput}\r\n                name=\"email\"\r\n                type=\"email\"\r\n                label=\"Email\"\r\n                validate={validateEmail}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n            <Field\r\n                component={AntInputPassword}\r\n                name=\"password\"\r\n                type=\"password\"\r\n                label=\"Password\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n            <Field\r\n                component={AntCheckbox}\r\n                name=\"remember\"\r\n                label=\"Remember Me\"\r\n                submitCount={props.submitCount}\r\n            />\r\n            <div className=\"submit-container\">\r\n                <button className=\"ant-btn ant-btn-primary\" type=\"submit\">\r\n                    Login\r\n                </button>\r\n            </div>\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default LoginForm","import React, {useEffect} from 'react'\r\nimport { LoginPropsType } from './LoginContainer'\r\nimport { List, InputItem, Checkbox } from 'antd-mobile'\r\nimport { Formik } from \"formik\"\r\nimport moment from \"moment\"\r\nimport LoginForm from './LoginForm'\r\nimport { propTypes } from 'react-bootstrap/esm/Image'\r\nimport { Button, message } from 'antd'\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst CheckboxItem = Checkbox.CheckboxItem;\r\n\r\nconst initialValues = {\r\n    // bookingClient: \"\",\r\n    // bookingDate: moment(Date.now()),\r\n    // bookingTime: moment(Date.now()),\r\n    // selectOptions: [\"Mark\", \"Bob\", \"Anthony\"]\r\n}\r\n\r\n// export const dateFormat = \"YYYY--MM-DD\";\r\n// export const timeFormat = \"h:mm A\";\r\n\r\nexport type OwnLoginPropsType = {}\r\n\r\nconst Login: React.FC<LoginPropsType> = (props) => {\r\n    useEffect(() => {\r\n        if (props.authError) {\r\n            message.error(props.authError)\r\n        }\r\n    }, [props.authError])\r\n\r\n    const handleSubmit = (formProps: any) => {\r\n        //console.log('formProps: ', formProps)\r\n        if (!formProps.remember) {\r\n            formProps.remember = false\r\n        }\r\n        props.login(formProps)\r\n    }\r\n\r\n    //console.log(props)\r\n\r\n    return (\r\n        <>\r\n            <h1 className=\"mb-5 mx-auto\">Login Form</h1>\r\n            <Formik\r\n                initialValues={initialValues}\r\n                onSubmit={handleSubmit}\r\n                render={LoginForm}\r\n            />\r\n            <div className=\"mt-3\">\r\n                <Link to={props.location +\"register\"}><Button type=\"link\" block>Register</Button></Link>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Login","import {connect} from 'react-redux'\r\nimport Login, { OwnLoginPropsType } from './Login'\r\nimport { AppStateType } from '../../redux/store'\r\nimport {credsType, login} from './../../redux/authReducer'\r\n\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    login: (data: credsType)=>void\r\n}\r\n\r\nexport type LoginPropsType = MapPropsType & MapDispatchPropsType & OwnLoginPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        auth: state.auth,\r\n        location: state.app.location,\r\n        authError: state.auth.authError\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnLoginPropsType, AppStateType>(mapStateToProps, \r\n    {login}) \r\n    (Login)\r\n    \r\n\r\n","import { formatCountdown } from 'antd/lib/statistic/utils'\r\nimport React from 'react'\r\nimport { OrdersPropsType } from './OrdersContainer'\r\n\r\nexport type OwnOrdersPropsType = {}\r\nconst Orders: React.FC<OrdersPropsType> = (props) => {\r\n    return(\r\n        <div>Orders</div>\r\n    )\r\n}\r\n\r\nexport default Orders","import {connect} from 'react-redux'\r\nimport Orders, { OwnOrdersPropsType } from './Orders'\r\n// import {getTaskList} from '../../redux/taskReducer'\r\nimport { AppStateType } from '../../redux/store'\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    // getTaskList: (start_date: string, end_date:string)=>void\r\n}\r\n\r\nexport type OrdersPropsType = MapPropsType & MapDispatchPropsType & OwnOrdersPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        appLocation: state.app.location\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnOrdersPropsType, AppStateType>(mapStateToProps, \r\n    {}) \r\n    (Orders)\r\n    \r\n\r\n","import { Form, Field, FormikProps } from 'formik'\r\nimport React, { ReactNode, useState, useEffect } from 'react'\r\nimport { AntInput, AntSelect, AntTextArea, AntTimePicker } from '../../utils/Formik/CreateAntField'\r\nimport { validateRequired } from '../../utils/Formik/ValidateFields'\r\n\r\n\r\nconst NewTaskTreeForm: ((props: FormikProps<{}>) => ReactNode) = (props) => {\r\n    const values: any = props.values\r\n    const selectOptions = values.selectOptions\r\n    const taskTypes = values.taskTypes // ++++++\r\n\r\n    const [taskType, setTaskType] = useState(values.taskType)\r\n\r\n    useEffect(() => {\r\n        const values: any = props.values\r\n        const taskTypes = values.task_type\r\n        setTaskType(taskTypes)\r\n    }, [props.values])\r\n\r\n    return (\r\n        <Form\r\n            className=\"form-container\"\r\n            onSubmit={props.handleSubmit}\r\n        >\r\n            <Field\r\n                component={AntInput}\r\n                name=\"name\"\r\n                type=\"text\"\r\n                label=\"Name\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n\r\n            <Field\r\n                component={AntSelect}\r\n\r\n                selectOptions={selectOptions}\r\n\r\n                name=\"parent_id\"\r\n                type=\"select\"\r\n                label=\"Parent\"\r\n                // validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n            // hasFeedback\r\n            />\r\n\r\n            <Field\r\n                component={AntTextArea}\r\n                name=\"descriptions\"\r\n                type=\"text\"\r\n                label=\"Descriptions\"\r\n                // validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                // hasFeedback\r\n            />\r\n\r\n            <Field\r\n                component={AntTimePicker}\r\n                name=\"time_to_complete\"\r\n                type=\"time\"\r\n                label=\"Time to complete\"\r\n                // validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n            // hasFeedback\r\n            />\r\n\r\n            <Field\r\n                component={AntSelect}\r\n                selectOptions={taskTypes}\r\n                name=\"task_type\"\r\n                type=\"select\"\r\n                label=\"task Types\"\r\n                submitCount={props.submitCount}\r\n            />\r\n\r\n\r\n            {taskType === 2 ?\r\n                <>\r\n                    <Field\r\n                        component={AntInput}\r\n                        name=\"phone_number\"\r\n                        type=\"text\"\r\n                        label=\"Номер телефона\"\r\n                        validate={validateRequired}\r\n                        submitCount={props.submitCount}\r\n                        hasFeedback\r\n                    />\r\n                    <Field\r\n                        component={AntInput}\r\n                        name=\"lead_name\"\r\n                        type=\"text\"\r\n                        label=\"Имя абонента\"\r\n                        validate={validateRequired}\r\n                        submitCount={props.submitCount}\r\n                        hasFeedback\r\n                    />\r\n                </>\r\n                :\r\n                null\r\n            }\r\n\r\n            <div className=\"submit-container\">\r\n                <button className=\"ant-btn ant-btn-primary\" type=\"submit\">\r\n                    Save\r\n                </button>\r\n            </div>\r\n\r\n        </Form>\r\n    )\r\n}\r\nexport default NewTaskTreeForm","import React, { useState } from 'react'\r\nimport { Button, Checkbox, Collapse, List } from 'antd'\r\nimport { PlusCircleOutlined , DeleteOutlined, EditOutlined } from '@ant-design/icons'\r\nimport { TaskListType } from '../../Types/types'\r\nimport {TaskTreeBrowserItemType} from './TaskTreeBrowserItemContainer'\r\nimport moment from \"moment\"\r\n\r\nconst { Panel } = Collapse\r\n\r\nexport type OwnTaskTreeBrowserItemType = {\r\n    // item: TaskListType,\r\n    item: any\r\n    showDrawer: () => void,\r\n    setDrawerData: (drawerData: any) => void,\r\n    initialFormValues: any,\r\n    setInitialFormValues: (initialFormValues: any) => void,\r\n    initialValues: any\r\n}\r\n\r\nconst TaskTreeBrowserItem: React.FC<TaskTreeBrowserItemType> = (props) => {\r\n\r\n    const onAddSubtask = (taskId: number) => {\r\n        console.log('onAddSubtask to: ', taskId)\r\n        props.setInitialFormValues({})\r\n        props.setInitialFormValues({...props.initialValues, parent_id: taskId})\r\n        props.showDrawer()\r\n    }\r\n\r\n    const onEdit = (values: any) => {\r\n        console.log('onEdit values: ',values)\r\n        props.setDrawerData({\r\n            header: 'Edit: \"' + values.name + '\"',\r\n            taskId: values.id\r\n        })\r\n        let day = moment().zone('GMT')\r\n        if (values.time_to_complete !== null) {\r\n            const splitTime = values.time_to_complete.split(/:/)\r\n            day.hours(parseInt(splitTime[0])).minutes(parseInt(splitTime)).seconds(0).milliseconds(0);\r\n        } else {\r\n            day.hours(0).minutes(0).seconds(0).milliseconds(0);\r\n        }\r\n        \r\n        props.setInitialFormValues({\r\n                ...props.initialFormValues,\r\n                ...JSON.parse(values.data), \r\n                name: values.name,\r\n                time_to_complete: day,\r\n                descriptions: values.descriptions,\r\n                parent_id: values.parent_id,\r\n                task_type: Number(values.task_type)\r\n            })\r\n\r\n        props.showDrawer()\r\n    }\r\n\r\n    const onStatusChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        console.log('onStatusChange', Number.parseInt(e.target.id))\r\n        const values = { isCompleted: e.target.checked }\r\n        props.updateTaskList(values, Number.parseInt(e.target.id))\r\n    }\r\n\r\n    const deleteTask = (taskId: number) => {\r\n        console.log('deleteTask: ', taskId)\r\n        props.deleteTaskList(taskId)\r\n    }\r\n\r\n    // console.log(props.item)\r\n    if (props.item.parent_id == null) {\r\n        return <CollapseItem\r\n            item={props.item}\r\n            taskList={props.taskList}\r\n            key={String(props.item.id)}\r\n            onAddSubtask={onAddSubtask}\r\n            onEdit={onEdit}\r\n            deleteTask={deleteTask}\r\n            onStatusChange={onStatusChange}\r\n        />\r\n    } else {\r\n        return null\r\n    }\r\n}\r\n\r\nexport default TaskTreeBrowserItem\r\n\r\ntype ChildItemType = {\r\n    childsTaslList: any\r\n    taskList: Array<TaskListType>,\r\n    onEdit: (task: TaskListType) => void,\r\n    deleteTask: (task: number) => void,\r\n    onAddSubtask: (taskId: number) => void,\r\n    onStatusChange: (e: any) => void,\r\n}\r\nconst ChildItem: React.FC<ChildItemType> = (props) => {\r\n    console.log(props.childsTaslList)\r\n    // let vals = Array.from( props.childsTaslList.values() )\r\n    // console.log(vals)\r\n    return (\r\n        <>\r\n            { props.childsTaslList.map((item: any) => {\r\n                // console.log(props.childsTaslList.get(item.id))\r\n            {/* { props.childsTaslList .map((item: TaskListType) => { */}\r\n                return (\r\n                    <CollapseItem\r\n                        item={item}\r\n                        taskList={props.taskList}\r\n                        key={String(item.id)}\r\n                        onAddSubtask={props.onAddSubtask}\r\n                        onEdit={props.onEdit}\r\n                        deleteTask={props.deleteTask}\r\n                        onStatusChange={props.onStatusChange}\r\n                    />\r\n                )\r\n            })\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\ntype CollapseItemType = {\r\n    key: any\r\n    item: any,\r\n    taskList: Array<TaskListType>,\r\n    onEdit: (task: TaskListType) => void,\r\n    deleteTask: (task: number) => void,\r\n    onAddSubtask: (taskId: number) => void,\r\n    onStatusChange: (e: any) => void,\r\n}\r\nconst CollapseItem: React.FC<CollapseItemType> = (props) => {\r\n    const [isLast, setIsLast] = useState( getChildsList(props.taskList, props.item).length === 0 ? true : false )\r\n    // console.log(props)\r\n    // console.log(isLast)\r\n\r\n    if (!isLast) {\r\n        return (\r\n            <List.Item className=\"py-0\" draggable key={props.item.id}>\r\n                <Collapse key={String(props.item.id)} className=\"w-100\" defaultActiveKey={[]} collapsible=\"header\" ghost>\r\n                    <Panel\r\n                        // header={props.item.name}\r\n                        header={<span key={String(props.item.id)} className=\"float-left pl-2\" >{props.item.name}</span>}\r\n                        key={props.item.id + 'Panel'}\r\n                        extra={<ButtonsBlock {...props}/>}\r\n                    >\r\n                        <ChildItem\r\n                            childsTaslList={getChildsList(props.taskList, props.item)}\r\n                            taskList={props.taskList}\r\n                            onEdit={props.onEdit}\r\n                            deleteTask={props.deleteTask}\r\n                            onAddSubtask={props.onAddSubtask}\r\n                            onStatusChange={props.onStatusChange}\r\n                        />\r\n\r\n                    </Panel>\r\n                </Collapse>\r\n            </List.Item>\r\n        )\r\n    } else {\r\n        return (<LastItem \r\n            item={props.item} \r\n            onEdit={props.onEdit} \r\n            deleteTask={props.deleteTask} \r\n            onAddSubtask={props.onAddSubtask} \r\n            onStatusChange={props.onStatusChange}\r\n            />)\r\n    }\r\n\r\n}\r\n\r\ntype LastItemType = {\r\n    item: any,\r\n    onEdit: (task: TaskListType) => void,\r\n    deleteTask: (task: number) => void,\r\n    onAddSubtask: (taskId: number) => void,\r\n    onStatusChange: (e: any) => void,\r\n}\r\n\r\nconst LastItem: React.FC<LastItemType> = (props) => {\r\n    const onStatusChange = (e: any) => {\r\n        const values = { ...props.item, isCompleted: e.target.checked }\r\n        props.onEdit(values)\r\n    }\r\n\r\n    // console.log(props.item.name,' checked: ', props.item.isCompleted)\r\n\r\n    return (\r\n        <List.Item className=\"py-0\" draggable key={String(props.item.id)}>\r\n        <>\r\n            <div className=\"py-2 pl-3\"><Checkbox checked={props.item.isCompleted} id={props.item.id} onClick={props.onStatusChange} /></div>\r\n            <div className=\"w-100 float-left\" key={String(props.item.id)}>\r\n                <div className=\"ml-3 float-left\">\r\n\r\n                    {props.item.isCompleted ? <span className=\"text-black-50\">{props.item.name}</span> : <a data-toggle=\"collapse\" aria-controls={props.item.id + 'collapseExample'} >{props.item.name}</a>}\r\n\r\n                </div>\r\n                <div className=\"ml-3 float-right\">\r\n                    {props.item.time_to_complete}\r\n                </div>\r\n            </div>\r\n            <div className=\"pr-3\">\r\n            <ButtonsBlock {...props} />\r\n            </div>\r\n        </>\r\n        </List.Item>\r\n    )\r\n}\r\n\r\ntype ButtonsBlockType = {\r\n    item: any,\r\n    onEdit: (task: TaskListType)=>void,\r\n    deleteTask: (task: number)=>void,\r\n    onAddSubtask: (parentId: number)=>void,\r\n}\r\n\r\nconst ButtonsBlock: React.FC<ButtonsBlockType> = (props) => {\r\n    return(\r\n        <div className=\"d-flex flex-row\">\r\n                <Button className=\"\"\r\n                    type=\"primary\"\r\n                    shape=\"circle\"\r\n                    size=\"small\"\r\n                    style={{ marginLeft: 10 }}\r\n                    onClick={() => { props.onAddSubtask(props.item.id) }}\r\n                    icon={\r\n                        <div className=\"d-flex flex-wrap align-content-start\">\r\n                            <PlusCircleOutlined className=\"ml-1\" style={{ fontSize: '14px' }} />\r\n                        </div>\r\n                    }\r\n                />\r\n                <Button className=\"\"\r\n                    type=\"primary\"\r\n                    shape=\"circle\"\r\n                    size=\"small\"\r\n                    style={{ marginLeft: 10 }}\r\n                    onClick={() => { props.onEdit(props.item) }}\r\n                    icon={\r\n                        <div className=\"d-flex flex-wrap align-content-start\">\r\n                            <EditOutlined className=\"ml-1\" style={{ fontSize: '14px' }} />\r\n                        </div>\r\n                    }\r\n                />\r\n                <Button className=\"\"\r\n                    type=\"primary\"\r\n                    danger\r\n                    shape=\"circle\"\r\n                    size=\"small\"\r\n                    style={{ marginLeft: 10 }}\r\n                    onClick={() => { props.deleteTask(props.item.id) }}\r\n                    icon={\r\n                        <div className=\"d-flex flex-wrap align-content-start\">\r\n                            <DeleteOutlined className=\"ml-1\" style={{ fontSize: '14px' }} />\r\n                        </div>\r\n                    }\r\n                />\r\n            </div>\r\n    )\r\n}\r\n\r\nconst getChildsList = (taskList: any, item: any ) => {\r\n    let childs: Array<TaskListType> = []\r\n    for (let index = 0; index < taskList.length; index++) {\r\n        const elem = taskList[index]\r\n        if (elem.parent_id === item.id) {\r\n            childs.push(elem)\r\n        }\r\n    }\r\n    return childs\r\n\r\n    // let childs = new Map()\r\n    // \r\n    // for (let pair of taskList.entries()) {\r\n    //     const elem = pair\r\n    //     if (elem.parent_id === item.id) {\r\n    //         childs.set(pair[0], pair)\r\n    //     }\r\n    // }\r\n    // return childs\r\n}","import {connect} from 'react-redux'\r\nimport TaskTreeBrowserItem, { OwnTaskTreeBrowserItemType } from './TaskTreeBrowserItem'\r\nimport { AppStateType } from '../../redux/store'\r\nimport {getTaskList, createNewTaskList, deleteTaskList, updateTaskList, actions} from './../../redux/TaskListReducer'\r\nimport { isMobile } from 'react-device-detect'\r\n// import TasksTreeBrowser from './TasksTreeBrowser'\r\nimport TasksTreeMobile from './TasksTreeMobile'\r\n\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    getTaskList: ()=>void,\r\n    createNewTaskList: (values: any)=>void,\r\n    deleteTaskList: (taskId: number)=>void,\r\n    updateTaskList: (values: any, taskId: number)=> void,\r\n    // backSelectedTasks: ()=>void,\r\n}\r\n\r\ntype OwnTasksTreePropsType = {\r\n\r\n}\r\n\r\nexport type TaskTreeBrowserItemType = MapPropsType & MapDispatchPropsType & OwnTaskTreeBrowserItemType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        taskList: state.taskList.taskList,\r\n        userId: state.auth.user?.id,\r\n        isTaskListLoaded: state.taskList.isTaskListLoaded,\r\n        selectedTasks: state.taskList.selectedTasks\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnTaskTreeBrowserItemType, AppStateType>(mapStateToProps, \r\n    {getTaskList, createNewTaskList, deleteTaskList, updateTaskList}) \r\n    (TaskTreeBrowserItem)\r\n    \r\n\r\n","import { Button, Card, Drawer, List, Checkbox, Collapse } from 'antd'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { TasksTreePropsType, taskTreeTypes } from './TasksTreeContainer'\r\nimport { FileAddOutlined, SettingOutlined, DeleteOutlined, EditOutlined } from '@ant-design/icons'\r\nimport NewTaskTreeForm from './NewTaskTreeForm'\r\nimport { Formik } from 'formik'\r\nimport moment from \"moment\"\r\nimport TaskTreeBrowserItem from './TaskTreeBrowserItemContainer'\r\n\r\nconst { Panel } = Collapse;\r\n\r\ntype InitialDrewerDataType = {\r\n    header: string,\r\n    taskId: false | number\r\n}\r\n\r\nconst initialDrewerData: InitialDrewerDataType = {\r\n    header: 'Create New Task',\r\n    taskId: false\r\n}\r\n\r\nconst TasksTreeBrowser: React.FC<TasksTreePropsType> = (props) => {\r\n    useEffect(() => {\r\n        if (props.taskList !== undefined && props.taskList.length === 0 && !props.isTaskListLoaded) {\r\n            props.getTaskList()\r\n        }\r\n        else if (props.taskList === undefined) {\r\n            props.getTaskList()\r\n        }\r\n        setVisible(false)\r\n        setInitialFormValues(initialValues)\r\n    }, [props.taskList])\r\n\r\n    const [visible, setVisible] = useState(false)\r\n    const [drawerData, setDrawerData] = useState(initialDrewerData)\r\n\r\n    const getSelectOptions = () => {\r\n        if (props.taskList !== undefined && props.taskList.length > 0) {\r\n            return props.taskList.map((item) => {\r\n                return ({\r\n                    name: item.name,\r\n                    value: item.id\r\n                })\r\n            })\r\n        } else {\r\n            return null\r\n        }\r\n    }\r\n\r\n    const initialValues: any = {\r\n        selectOptions: getSelectOptions(),\r\n        taskTypes: taskTreeTypes,\r\n        task_type: 1,\r\n        name: '',\r\n\r\n    }\r\n\r\n    const [initialFormValues, setInitialFormValues] = useState(initialValues)\r\n\r\n    const onClose = () => {\r\n        setInitialFormValues({...initialValues})\r\n        setVisible(false)\r\n    }\r\n\r\n    const showDrawer = () => {\r\n        setVisible(true)\r\n    }\r\n\r\n    const onAdd = () => {\r\n        setDrawerData(initialDrewerData)\r\n        setInitialFormValues(initialValues)\r\n        showDrawer()\r\n    }\r\n\r\n    const handleSubmit = (formProps: any) => {\r\n        \r\n        let formPropsCopy: any = { ...formProps }\r\n        delete formPropsCopy.selectOptions\r\n        delete formPropsCopy.taskTypes\r\n        if (formPropsCopy.time_to_complete !== undefined) {\r\n            formPropsCopy.time_to_complete = formPropsCopy.time_to_complete.format('HH:mm:ss')\r\n        }\r\n\r\n        formPropsCopy.user_id = props.userId\r\n        console.log('handleSubmit', formPropsCopy)\r\n        if (!drawerData.taskId) {\r\n            props.createNewTaskList(formPropsCopy)\r\n        } else {\r\n            props.updateTaskList(formPropsCopy, drawerData.taskId)\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"site-card-border-less-wrapper\">\r\n                <Card\r\n                    title={\r\n                        <div\r\n                            // className=\"col-12 col-md-12 col-lg-4\"\r\n                            className=\"inline\"\r\n                        >\r\n                            <div ><h2>Tasks Tree</h2></div>\r\n\r\n\r\n                        </div>\r\n                    }\r\n                    extra={\r\n                        <>\r\n                            <Button\r\n                                type=\"primary\"\r\n                                shape=\"round\"\r\n                                icon={\r\n                                    <div className=\"d-flex flex-wrap align-content-start\">\r\n                                        <FileAddOutlined style={{ fontSize: '18px' }} />\r\n                                        <span className=\"ml-1\" style={{ fontSize: '14px' }}>Add</span>\r\n                                    </div>}\r\n                                style={{ marginLeft: 10 }}\r\n                                onClick={onAdd}\r\n                            />\r\n\r\n                            <Button className=\"\"\r\n                                type=\"primary\"\r\n                                shape=\"round\"\r\n                                style={{ marginLeft: 10 }}\r\n                                // onClick={props.showModal}\r\n                                icon={\r\n                                    <div className=\"d-flex flex-wrap align-content-start\">\r\n                                        <SettingOutlined style={{ fontSize: '18px' }} />\r\n                                        <span className=\"ml-1\" style={{ fontSize: '14px' }}>Settings</span>\r\n                                    </div>}\r\n                            />\r\n                        </>\r\n                    }\r\n                    bordered={false}\r\n                >\r\n\r\n                    <List\r\n                        size=\"small\"\r\n                        bordered\r\n\r\n                        // dataSource={getTaskTreeItems(\r\n                        //     props.taskList,\r\n                        //     props.deleteTaskList,\r\n                        //     props.updateTaskList,\r\n                        //     showDrawer,\r\n                        //     setDrawerData,\r\n                        //     initialFormValues,\r\n                        //     setInitialFormValues,\r\n                        //     props.selectedTasks\r\n                        // )}\r\n                        // renderItem={item => <List.Item className=\"py-0\" draggable>{item}</List.Item>}\r\n\r\n                        dataSource={props.taskList}\r\n                        renderItem={item => {\r\n                            return (<TaskTreeBrowserItem\r\n                                item={item}\r\n                                showDrawer={showDrawer}\r\n                                setDrawerData={setDrawerData}\r\n                                initialFormValues={initialFormValues}\r\n                                setInitialFormValues={setInitialFormValues}\r\n                                initialValues={initialValues}\r\n                            />)\r\n                        }}\r\n                    />\r\n\r\n                    <Drawer\r\n                        title={drawerData.header}\r\n                        placement=\"right\"\r\n                        closable={true}\r\n                        onClose={onClose}\r\n                        visible={visible}\r\n                        width=\"90%\"\r\n                    >\r\n\r\n                        <Formik\r\n                            initialValues={initialFormValues}\r\n                            onSubmit={handleSubmit}\r\n                            render={NewTaskTreeForm}\r\n                            enableReinitialize={true}\r\n                        />\r\n\r\n                    </Drawer>\r\n\r\n                </Card>\r\n            </div>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default TasksTreeBrowser\r\n\r\nconst getTaskTreeItems = (\r\n    taskList: Array<any>,\r\n    deleteTask: (taskId: number) => void,\r\n    updateTaskList: (values: any, taskId: number) => void,\r\n    showDrawer: () => void,\r\n    setDrawerData: (drawerData: any) => void,\r\n    initialFormValues: any,\r\n    setInitialFormValues: (initialFormValues: any) => void,\r\n    selectedTasks: Array<number>\r\n) => {\r\n    const onEdit = (task: any) => {\r\n        setDrawerData({\r\n            header: 'Edit: \"' + task.name + '\"',\r\n            taskId: task.id\r\n        })\r\n\r\n\r\n        let day = moment().zone('GMT')\r\n        if (task.time_to_complete !== null) {\r\n            const splitTime = task.time_to_complete.split(/:/)\r\n            day.hours(parseInt(splitTime[0])).minutes(parseInt(splitTime[1])).seconds(0).milliseconds(0);\r\n        } else {\r\n            day.hours(0).minutes(0).seconds(0).milliseconds(0);\r\n        }\r\n\r\n        setInitialFormValues(\r\n            {\r\n                ...initialFormValues,\r\n                name: task.name,\r\n                time_to_complete: day,\r\n                descriptions: task.descriptions,\r\n                parent_id: task.parent_id,\r\n                task_type: Number(task.task_type)\r\n            }\r\n        )\r\n        showDrawer()\r\n    }\r\n\r\n    const onStatusChange = (e: any) => {\r\n        const values = { isCompleted: e.target.checked }\r\n        updateTaskList(values, e.target.id)\r\n    }\r\n\r\n    // let display: string = 'none'\r\n\r\n    // const changeDisplat = (key: any) => {\r\n    //     console.log(key);\r\n    //     display = \"block\"\r\n    //   }\r\n\r\n    if (taskList !== undefined && taskList.length > 0) {\r\n\r\n\r\n        let taskTreeItems: Array<any> = []\r\n        for (let index = 0; index < taskList.length; index++) {\r\n            const item = taskList[index];\r\n            if (item.parent_id === null) {\r\n                taskTreeItems.push(\r\n                    <>\r\n                        <div className=\"py-2\"><Checkbox checked={item.isCompleted} id={item.id} onClick={onStatusChange} /></div>\r\n                        <div className=\"w-100 float-left\" key={item.id}>\r\n                            <div className=\"ml-3 float-left\">\r\n\r\n                                {item.isCompleted ? <span className=\"text-black-50\">{item.name}</span> : <a data-toggle=\"collapse\" aria-controls={item.id + 'collapseExample'} >{item.name}</a>}\r\n\r\n                            </div>\r\n                            <div className=\"ml-3 float-right\">\r\n                                {item.time_to_complete}\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"d-flex flex-row\">\r\n                            <Button className=\"\"\r\n                                type=\"primary\"\r\n                                shape=\"circle\"\r\n                                size=\"small\"\r\n                                style={{ marginLeft: 10 }}\r\n                                onClick={() => { onEdit(item) }}\r\n                                icon={\r\n                                    <div className=\"d-flex flex-wrap align-content-start\">\r\n                                        <EditOutlined className=\"ml-1\" style={{ fontSize: '14px' }} />\r\n                                    </div>\r\n                                }\r\n                            />\r\n                            <Button className=\"\"\r\n                                type=\"primary\"\r\n                                danger\r\n                                shape=\"circle\"\r\n                                size=\"small\"\r\n                                style={{ marginLeft: 10 }}\r\n                                onClick={() => { deleteTask(item.id) }}\r\n                                icon={\r\n                                    <div className=\"d-flex flex-wrap align-content-start\">\r\n                                        <DeleteOutlined className=\"ml-1\" style={{ fontSize: '14px' }} />\r\n                                    </div>\r\n                                }\r\n                            />\r\n                        </div>\r\n                    </>\r\n                )\r\n                taskTreeItems.push(\r\n                    <>\r\n                        <div className=\"collapse\" id={item.id + 'collapseExample'}>\r\n                            <div className=\"card card-body\">\r\n                                Anim pariatur cliche reprehenderit, enim eiusmod high life accusamus terry richardson ad squid. Nihil anim keffiyeh helvetica, craft beer labore wes anderson cred nesciunt sapiente ea proident.\r\n                            </div>\r\n                        </div>\r\n                    </>\r\n                )\r\n            }\r\n\r\n        }\r\n        return taskTreeItems\r\n\r\n    } else {\r\n        return []\r\n    }\r\n}","import { SwipeAction, List } from 'antd-mobile'\r\nimport React from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { TaskListType } from '../../Types/types'\r\nimport { actions } from './../../redux/TaskListReducer'\r\n\r\nconst Item = List.Item\r\n\r\n\r\nconst time_to_complete = new Date()\r\ntime_to_complete.setHours(0)\r\ntime_to_complete.setMinutes(0)\r\ntime_to_complete.setSeconds(0)\r\ntime_to_complete.setMilliseconds(0)\r\n\r\nexport type OwnTaskTreeItemsType = {\r\n    taskItem: TaskListType,\r\n    deleteTaskList: (taskId: number) => void,\r\n    showDrawer: () => void,\r\n    setDrawerData: (drawerData: any) => void,\r\n    initialFormValues: any,\r\n    setInitialFormValues: (initialFormValues: any) => void\r\n    updateTaskList: (values: any, taskId: number) => void,\r\n}\r\nexport const TaskTreeItemMobile: React.FC<OwnTaskTreeItemsType> = (props) => {\r\n    const dispatch = useDispatch()\r\n\r\n    const onSubTask = () => {\r\n        //console.log(props.taskItem.id, ': onSubTask')\r\n        props.setDrawerData({\r\n            header: 'SubTask for: \"' + props.taskItem.name + '\"',\r\n            taskId: false\r\n        })\r\n        //console.log('parent_id:', props.taskItem.parent_id)\r\n\r\n        props.setInitialFormValues({\r\n            ...props.initialFormValues,\r\n            name: '',\r\n            time_to_complete: time_to_complete,\r\n            descriptions: '',\r\n            parent_id: [Number(props.taskItem.id)],\r\n            task_type: [0]\r\n        })\r\n        props.showDrawer()\r\n    }\r\n\r\n    const onEdit = (task: TaskListType) => {\r\n        props.setDrawerData({\r\n            header: 'Edit: \"' + task.name + '\"',\r\n            taskId: task.id\r\n        })\r\n\r\n        // let new_time_to_complete = {...time_to_complete}\r\n        let new_time_to_complete = new Date(time_to_complete.getTime())\r\n        if (task.time_to_complete !== null) {\r\n            const splitTime = task.time_to_complete.split(/:/)\r\n            new_time_to_complete.setHours(parseInt(splitTime[0]))\r\n            new_time_to_complete.setMinutes(parseInt(splitTime[1]))\r\n            new_time_to_complete.setSeconds(0)\r\n            new_time_to_complete.setMilliseconds(0)\r\n        } else {\r\n            \r\n        }\r\n\r\n        props.setInitialFormValues({\r\n            ...props.initialFormValues,\r\n            name: task.name,\r\n            time_to_complete: new_time_to_complete,\r\n            descriptions: task.descriptions,\r\n            parent_id: [task.parent_id],\r\n            task_type: [Number(task.task_type)]\r\n        })\r\n\r\n        props.showDrawer()\r\n    }\r\n\r\n    const onItemOpen = () => {\r\n        dispatch(actions.setSelectedTasks(props.taskItem.id));\r\n    }\r\n\r\n    const onComplet = () => {\r\n        //console.log('onComplet')\r\n        const values = { isCompleted: !props.taskItem.isCompleted }\r\n        props.updateTaskList(values, props.taskItem.id)\r\n    }\r\n\r\n    return (\r\n        <SwipeAction\r\n            style={{ backgroundColor: 'gray' }}\r\n            autoClose\r\n            right={[\r\n                {\r\n                    text: 'SubTask',\r\n                    onPress: () => { onSubTask() },\r\n                    style: { backgroundColor: 'green', color: 'white' },\r\n                },\r\n                {\r\n                    text: 'Delete',\r\n                    onPress: () => props.deleteTaskList(props.taskItem.id),\r\n                    style: { backgroundColor: '#F4333C', color: 'white' },\r\n                },\r\n            ]}\r\n            left={[\r\n                {\r\n                    text: 'Edit',\r\n                    onPress: () => { onEdit(props.taskItem) },\r\n                    style: { backgroundColor: '#108ee9', color: 'white' },\r\n                },\r\n                {\r\n                    text: props.taskItem.isCompleted ? 'Not Done' : 'Done',\r\n                    onPress: () => onComplet(),\r\n                    style: { backgroundColor: 'green', color: 'white' },\r\n                },\r\n            ]}\r\n        // onOpen={() => //console.log('global open')}\r\n        // onClose={() => //console.log('global close')}\r\n        >\r\n            <Item\r\n                // className=\"my-3\"\r\n                onClick={onItemOpen}\r\n                // arrow=\"horizontal\"\r\n                key={props.taskItem.id}\r\n                wrap\r\n            >\r\n                {/* {props.taskItem.isCompleted ? <span className=\"text-black-50\">{props.taskItem.name}</span> : <span>{props.taskItem.name}</span>} */}\r\n\r\n                <div className=\"w-100 row \" key={props.taskItem.id}>\r\n                    <div className=\"col-10\">\r\n                        {props.taskItem.isCompleted ? \r\n                        <span className=\"text-black-50 text-break\">{props.taskItem.name}</span> \r\n                        : \r\n                        <span className=\"text-break\">{props.taskItem.name}</span>}\r\n                    </div>\r\n                    <div className=\"col-2\">\r\n                        {props.taskItem.time_to_complete.split(/:/)[0]+':'+props.taskItem.time_to_complete.split(/:/)[1]}\r\n                    </div>\r\n                </div>\r\n\r\n            </Item>\r\n\r\n        </SwipeAction>\r\n    )\r\n}","import React, { useState, useEffect } from 'react'\r\nimport { TasksTreePropsType, taskTreeTypes } from './TasksTreeContainer'\r\nimport { Drawer, List, SwipeAction, Icon, Button, Card, WingBlank, WhiteSpace } from 'antd-mobile'\r\nimport NewTaskTreeForm from './NewTaskTreeForm'\r\nimport './TasksTreeMobile.css'\r\nimport { Formik } from 'formik'\r\nimport { Spin, Empty } from 'antd'\r\nimport { propTypes } from 'react-bootstrap/esm/Image'\r\nimport moment from \"moment\"\r\nimport { TaskListType } from '../../Types/types'\r\nimport { useDispatch } from 'react-redux'\r\nimport { TaskTreeItemMobile } from './TaskTreeItem'\r\n\r\nconst Item = List.Item\r\n\r\ntype InitialDrewerDataType = {\r\n    header: string,\r\n    taskId: false | number\r\n}\r\n\r\nconst initialDrewerData: InitialDrewerDataType = {\r\n    header: 'Create New Task',\r\n    taskId: false\r\n}\r\n\r\nconst TasksTreeMobile: React.FC<TasksTreePropsType> = (props) => {\r\n    useEffect(() => {\r\n        if (props.taskList && props.taskList.length === 0 && !props.isTaskListLoaded) {\r\n            props.getTaskList()\r\n        } else if (props.taskList === undefined) {\r\n            props.getTaskList()\r\n        }\r\n        setVisible(false)\r\n        //console.log('initialValues: ', initialValues)\r\n        setInitialFormValues(initialValues)\r\n    }, [props.taskList])\r\n\r\n    const getSelectOptions = () => {\r\n        if (props.taskList !== undefined && props.taskList.length > 0) {\r\n            return props.taskList.map((item) => {\r\n                return ({\r\n                    name: item.name,\r\n                    value: item.id\r\n                })\r\n            })\r\n        } else {\r\n            //console.log('вернули пыстой список', props.taskList)\r\n            return null\r\n        }\r\n    }\r\n\r\n    let initialTimeToComplete = new Date()\r\n    initialTimeToComplete.setHours(0)\r\n    initialTimeToComplete.setMinutes(0)\r\n    initialTimeToComplete.setSeconds(0)\r\n    initialTimeToComplete.setMilliseconds(0)\r\n\r\n    const initialValues: any = {\r\n        selectOptions: getSelectOptions(),\r\n        taskTypes: taskTreeTypes,\r\n        task_type: 1,\r\n        time_to_complete: initialTimeToComplete\r\n        // parent_id:[]\r\n    }\r\n\r\n    const [visible, setVisible] = useState(false)\r\n    const [initialFormValues, setInitialFormValues] = useState(initialValues)\r\n    const [drawerData, setDrawerData] = useState(initialDrewerData)\r\n\r\n    const handleSubmit = (formProps: any) => {\r\n        //console.log('handleSubmit TasksTreeMobile: ', formProps.time_to_complete)\r\n        let formPropsCopy: any = { ...formProps }\r\n        delete formPropsCopy.selectOptions\r\n        delete formPropsCopy.taskTypes\r\n        if (formPropsCopy.time_to_complete !== undefined) {\r\n            //console.log(formPropsCopy.time_to_complete)\r\n            const time_to_complete = moment(formPropsCopy.time_to_complete)\r\n            formPropsCopy.time_to_complete = time_to_complete.format('HH:mm:ss')\r\n        }\r\n        if (Array.isArray(formPropsCopy.parent_id)) {\r\n            formPropsCopy.parent_id = formPropsCopy.parent_id[0]\r\n        }\r\n\r\n        //console.log('NewTaskMobile submit: ', formPropsCopy)\r\n\r\n        formPropsCopy.user_id = props.userId\r\n        // props.createNewTaskList(formPropsCopy)\r\n        // setInitialFormValues(initialValues)\r\n        //console.log('taskId: ', drawerData.taskId)\r\n        if (!drawerData.taskId) {\r\n            //console.log('createNewTaskList: ', formPropsCopy)\r\n            props.createNewTaskList(formPropsCopy)\r\n        } else {\r\n            //console.log('updateTaskList: ', formPropsCopy)\r\n            props.updateTaskList(formPropsCopy, drawerData.taskId)\r\n        }\r\n    }\r\n\r\n    const onAdd = (args: any) => {\r\n        if (props.selectedTasks.length !== 0) {\r\n            setDrawerData({ ...drawerData, taskId: false })\r\n            //console.log('sub')\r\n            //console.log('initialValues', initialValues)\r\n            setInitialFormValues({ ...initialValues, parent_id: [Number(props.selectedTasks[props.selectedTasks.length - 1])] })\r\n        } else {\r\n            setInitialFormValues(initialValues)\r\n        }\r\n\r\n        setVisible(!visible)\r\n    }\r\n\r\n    const showDrawer = () => {\r\n        setVisible(true)\r\n    }\r\n\r\n    const onBack = () => {\r\n        props.backSelectedTasks()\r\n    }\r\n\r\n    //console.log('TasksTreeMobile props: ', props)\r\n    //console.log('TasksTreeMobile name: ', initialFormValues.name)\r\n\r\n    // if (props.taskList !== undefined) {\r\n    return (\r\n        <WingBlank size=\"lg\">\r\n            <WhiteSpace size=\"lg\" />\r\n            <Card>\r\n                <Card.Header\r\n                    title={<h4 className=\"w-100 text-center\">Tasks Tree</h4>}\r\n                    extra={\r\n                        <div className=\"d-flex flex-row\">\r\n                            {props.selectedTasks.length > 0 && !visible ?\r\n                                <Button\r\n                                    inline\r\n                                    size=\"small\"\r\n                                    className=\"mx-3 my-2\"\r\n                                    // style={{ marginRight: '4px' }} \r\n                                    onClick={onBack}\r\n                                    type=\"primary\"\r\n                                >\r\n                                    Back\r\n                                    </Button>\r\n                                :\r\n                                null\r\n                            }\r\n                            <Button\r\n                                inline\r\n                                size=\"small\"\r\n                                className=\"mx-3 my-2\"\r\n                                // style={{ marginRight: '4px' }} \r\n                                onClick={onAdd}\r\n                                type=\"primary\"\r\n                            >\r\n                                {visible ? 'Close' : 'Add'}\r\n                            </Button>\r\n                        </div>\r\n                    }\r\n                >\r\n\r\n                </Card.Header>\r\n\r\n                <Drawer\r\n                    className=\"my-drawer\"\r\n                    style={{ minHeight: document.documentElement.clientHeight }}\r\n                    // enableDragHandle\r\n                    contentStyle={{ color: '#A6A6A6', textAlign: 'center', paddingTop: 0, width: \"100%\" }}\r\n                    sidebar={\r\n                        <div className=\"mt-4\">\r\n                            <Formik\r\n                                initialValues={initialFormValues}\r\n                                onSubmit={handleSubmit}\r\n                                render={NewTaskTreeForm}\r\n                                enableReinitialize={true}\r\n                            />\r\n                        </div>\r\n                    }\r\n                    open={visible}\r\n                    onOpenChange={onAdd}\r\n                >\r\n                    <List>\r\n\r\n\r\n                        {props.taskList !== undefined ?\r\n                            props.taskList.map((item) => {\r\n                                let parentId: number\r\n                                if (props.selectedTasks.length !== 0) {\r\n                                    parentId = props.selectedTasks[props.selectedTasks.length - 1]\r\n                                    if (item.parent_id === parentId) {\r\n                                        return (\r\n                                            <TaskTreeItemMobile\r\n                                                taskItem={item}\r\n                                                deleteTaskList={props.deleteTaskList}\r\n                                                showDrawer={showDrawer}\r\n                                                setDrawerData={setDrawerData}\r\n                                                initialFormValues={initialFormValues}\r\n                                                setInitialFormValues={setInitialFormValues}\r\n                                                updateTaskList={props.updateTaskList}\r\n                                            />\r\n                                        )\r\n                                    }\r\n                                } else {\r\n                                    if (item.parent_id === null) {\r\n                                        return (\r\n                                            <TaskTreeItemMobile\r\n                                                taskItem={item}\r\n                                                deleteTaskList={props.deleteTaskList}\r\n                                                showDrawer={showDrawer}\r\n                                                setDrawerData={setDrawerData}\r\n                                                initialFormValues={initialFormValues}\r\n                                                setInitialFormValues={setInitialFormValues}\r\n                                                updateTaskList={props.updateTaskList}\r\n                                            />\r\n                                        )\r\n                                    }\r\n                                }\r\n\r\n                            })\r\n                            :\r\n                            null\r\n                        }\r\n\r\n                    </List>\r\n                </Drawer>\r\n\r\n\r\n\r\n            </Card>\r\n        </WingBlank>\r\n    )\r\n    // } else {\r\n    //     return <Spin key=\"spin\" size=\"large\" />\r\n    // }\r\n}\r\n\r\nexport default TasksTreeMobile\r\n\r\n// const getTaskTreeItems = (\r\n//     taskList: Array<any>,\r\n//     deleteTaskList: (taskId: number) => void,\r\n//     showDrawer: () => void,\r\n//     setDrawerData: (drawerData: any) => void,\r\n//     initialFormValues: any,\r\n//     setInitialFormValues: (initialFormValues: any) => void\r\n// ) => {\r\n//     const onEdit = (task: any) => {\r\n//         //console.log(task)\r\n\r\n//         setDrawerData({\r\n//             header: 'Edit: \"' + task.name + '\"',\r\n//             taskId: task.id\r\n//         })\r\n\r\n//         let day = new Date()\r\n//         if (task.time_to_complete !== null) {\r\n//             const splitTime = task.time_to_complete.split(/:/)\r\n//             day.setHours(parseInt(splitTime[0]))\r\n//             day.setMinutes(parseInt(splitTime[1]))\r\n//             day.setSeconds(0)\r\n//             day.setMilliseconds(0)\r\n//         } else {\r\n//             day.setHours(0)\r\n//             day.setMinutes(0)\r\n//             day.setSeconds(0)\r\n//             day.setMilliseconds(0)\r\n//         }\r\n\r\n//         setInitialFormValues(\r\n//             {\r\n//                 ...initialFormValues,\r\n//                 // new: false,\r\n//                 name: task.name,\r\n//                 time_to_complete: day,\r\n//                 descriptions: task.descriptions,\r\n//                 parent_id: [task.parent_id],\r\n//                 task_type: [Number(task.task_type)]\r\n//             }\r\n//         )\r\n\r\n//         showDrawer()\r\n//     }\r\n\r\n//     const onItemOpen = (itemId: number) => {\r\n//         //console.log(itemId, 'is open')\r\n//         // const dispatch = useDispatch()\r\n//         // dispatch( { type: 'SN/TASK_LIST/SET_SELECTED_TASK', itemId } )\r\n//     }\r\n\r\n//     //console.log(taskList)\r\n\r\n//     if (taskList && taskList.length > 0) {\r\n//         return taskList.map((item) => {\r\n//             //console.log('!!!!!!!')\r\n//             return (\r\n//                 <SwipeAction\r\n//                     style={{ backgroundColor: 'gray' }}\r\n//                     autoClose\r\n//                     right={[\r\n//                         {\r\n//                             text: 'Cancel',\r\n//                             onPress: () => {\r\n//                                 //console.log('cancel') \r\n//                             },\r\n//                             style: { backgroundColor: '#ddd', color: 'white' },\r\n//                         },\r\n//                         {\r\n//                             text: 'Delete',\r\n//                             onPress: () => deleteTaskList(item.id),\r\n//                             style: { backgroundColor: '#F4333C', color: 'white' },\r\n//                         },\r\n//                     ]}\r\n//                     left={[\r\n//                         {\r\n//                             text: 'Edit',\r\n//                             onPress: () => { onEdit(item) },\r\n//                             style: { backgroundColor: '#108ee9', color: 'white' },\r\n//                         },\r\n//                         {\r\n//                             text: 'Execute',\r\n//                             onPress: () => {\r\n//                                 //console.log('cancel')\r\n//                             },\r\n//                             style: { backgroundColor: 'green', color: 'white' },\r\n//                         },\r\n//                     ]}\r\n//                 // onOpen={() => //console.log('global open')}\r\n//                 // onClose={() => //console.log('global close')}\r\n//                 >\r\n//                     <Item\r\n//                         // className=\"my-3\"\r\n//                         onClick={() => { onItemOpen(item.id) }}\r\n//                         arrow=\"horizontal\"\r\n//                         key={item.id}\r\n//                     >\r\n//                         {item.name}\r\n//                     </Item>\r\n\r\n//                 </SwipeAction>\r\n//             )\r\n//         })\r\n//     } else {\r\n//         return (\r\n//             <Empty />\r\n//         )\r\n//     }\r\n\r\n\r\n// }\r\n\r\n","import {connect} from 'react-redux'\r\n// import TasksTree, { OwnTasksTreePropsType } from './TasksTree'\r\nimport { AppStateType } from '../../redux/store'\r\nimport {getTaskList, createNewTaskList, deleteTaskList, updateTaskList, actions} from './../../redux/TaskListReducer'\r\nimport { isMobile } from 'react-device-detect'\r\nimport TasksTreeBrowser from './TasksTreeBrowser'\r\nimport TasksTreeMobile from './TasksTreeMobile'\r\n\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    getTaskList: ()=>void,\r\n    createNewTaskList: (values: any)=>void,\r\n    deleteTaskList: (taskId: number)=>void,\r\n    updateTaskList: (values: any, taskId: number)=> void,\r\n    backSelectedTasks: ()=>void,\r\n}\r\n\r\ntype OwnTasksTreePropsType = {\r\n\r\n}\r\n\r\nexport type TasksTreePropsType = MapPropsType & MapDispatchPropsType & OwnTasksTreePropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        taskList: state.taskList.taskList,\r\n        userId: state.auth.user?.id,\r\n        isTaskListLoaded: state.taskList.isTaskListLoaded,\r\n        selectedTasks: state.taskList.selectedTasks\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnTasksTreePropsType, AppStateType>(mapStateToProps, \r\n    {getTaskList, createNewTaskList, deleteTaskList, updateTaskList, backSelectedTasks: actions.backSelectedTasks}) \r\n    (isMobile ? TasksTreeMobile : TasksTreeBrowser)\r\n    \r\ntype TaskTreeTypesItemType = {\r\n    name: string,\r\n    label?: string,\r\n    value: string | number | null,\r\n    isSubform: boolean,\r\n    childTypes?: Array<TaskTreeTypesItemType> \r\n    component?: string,\r\n    type?: string,\r\n    validate?: string,\r\n    hasFeedback?: true,\r\n\r\n}\r\ntype TaskTreeTypesType = Array<TaskTreeTypesItemType>\r\nexport const taskTreeTypes: TaskTreeTypesType = [\r\n    {\r\n        name: 'Простая задача',\r\n        value: 1,\r\n        isSubform: false,\r\n        childTypes: []\r\n    },\r\n    {\r\n        name: 'Звонок',\r\n        value: 2,\r\n        isSubform: true,\r\n        childTypes: [\r\n            {\r\n                label: 'телефонный номер',\r\n                value: null,\r\n                name: 'phone_number',\r\n                component: 'AntInput',\r\n                type: \"text\",\r\n                validate: 'validateRequired',\r\n                hasFeedback: true,\r\n                isSubform: false,\r\n            },\r\n            {\r\n                label: 'Имя абонента',\r\n                value: null,\r\n                name: 'lead_name',\r\n                component: 'AntInput',\r\n                type: \"text\",\r\n                validate: 'validateRequired',\r\n                hasFeedback: true,\r\n                isSubform: false,\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        name: 'Компонент',\r\n        value: 3,\r\n        isSubform: true,\r\n        childTypes: []\r\n    }\r\n]\r\n","import React, { ReactNode } from 'react'\r\nimport { Form, Field, FormikProps } from \"formik\"\r\nimport { AntCheckbox, AntInput, AntInputPassword } from '../../utils/Formik/CreateAntField'\r\nimport { validateEmail, validateRequired } from '../../utils/Formik/ValidateFields'\r\n\r\nconst RegisterForm: ((props: FormikProps<{}>) => ReactNode) = (props) => {\r\n    return(\r\n        <Form\r\n            className=\"form-container\" \r\n            onSubmit={props.handleSubmit}\r\n        >\r\n            <Field\r\n                component={AntInput}\r\n                name=\"name\"\r\n                type=\"text\"\r\n                label=\"Name\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n            <Field\r\n                component={AntInput}\r\n                name=\"email\"\r\n                type=\"email\"\r\n                label=\"Email\"\r\n                validate={validateEmail}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n            <Field\r\n                component={AntInputPassword}\r\n                name=\"password\"\r\n                type=\"password\"\r\n                label=\"Password\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n\r\n            <Field\r\n                component={AntInputPassword}\r\n                name=\"c_password\"\r\n                type=\"password\"\r\n                label=\"Confirm\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n\r\n            <Field\r\n                component={AntCheckbox}\r\n                name=\"remember\"\r\n                label=\"Remember Me\"\r\n                submitCount={props.submitCount}\r\n            />\r\n            <div className=\"submit-container\">\r\n                <button className=\"ant-btn ant-btn-primary\" type=\"submit\">\r\n                    Register\r\n                </button>\r\n            </div>\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default RegisterForm","import { Formik } from 'formik'\r\nimport React, { useEffect } from 'react'\r\nimport RegisterForm from './RegisterForm'\r\nimport { RegisterPropsType } from './RegisterContainer'\r\nimport { propTypes } from 'react-bootstrap/esm/Image'\r\nimport { Redirect, Route, useHistory } from 'react-router-dom'\r\nimport { message } from 'antd'\r\n\r\nconst initialValues = {\r\n    // parent_id :['1', '2', '3']\r\n}\r\n\r\nexport type OwnRegisterPropsType = {}\r\n\r\nconst Register: React.FC<RegisterPropsType> = (props) => {\r\n    let history = useHistory();\r\n    useEffect( () => {\r\n        if(props.isAuth) {\r\n            history.replace(props.appLocation+'toDoList')\r\n        }\r\n    }, [props.isAuth])\r\n\r\n    useEffect(() => {\r\n        if (props.authError) {\r\n            message.error(props.authError)\r\n        }\r\n    }, [props.authError])\r\n    \r\n    const handleSubmit = (formProps: any) => {\r\n        //console.log(formProps)\r\n        formProps.status = 'guest'\r\n        props.register(formProps)\r\n    }\r\n\r\n    //console.log('Register', props)\r\n    return (\r\n        <>\r\n            <h1 className=\"mb-5 mx-auto\">Register Form</h1>\r\n            <Formik\r\n                initialValues={initialValues}\r\n                onSubmit={handleSubmit}\r\n                render={RegisterForm}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Register","import {connect} from 'react-redux'\r\nimport Register, { OwnRegisterPropsType } from './Register'\r\nimport { AppStateType } from '../../redux/store'\r\nimport {register} from './../../redux/authReducer'\r\n\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    register: (creds: any)=>void\r\n}\r\n\r\nexport type RegisterPropsType = MapPropsType & MapDispatchPropsType & OwnRegisterPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n        appLocation: state.app.location,\r\n        authError: state.auth.authError\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnRegisterPropsType, AppStateType>(mapStateToProps, \r\n    {register}) \r\n    (Register)\r\n    \r\n\r\n","import React, { useEffect, useState } from 'react'\r\nimport './App.css'\r\nimport ToDoList from './Components/ToDo/ToDoContainer'\r\nimport { BrowserRouter, Redirect, Route, Switch, withRouter, useLocation } from 'react-router-dom'\r\nimport { connect, Provider } from 'react-redux'\r\nimport 'antd/dist/antd.css'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport 'antd-mobile/dist/antd-mobile.css'\r\nimport store, { AppStateType } from './redux/store'\r\nimport { Layout, Spin } from 'antd'\r\nimport { compose } from 'redux'\r\nimport { initializeApp, addLocation } from './redux/appReducer'\r\nimport {login} from './redux/authReducer'\r\nimport Header from './Components/Header/HeaderContainer'\r\nimport { isMobile } from \"react-device-detect\"\r\nimport Login from './Components/Login/LoginContainer'\r\nimport Orders from './Components/Orders/OrdersContainer'\r\nimport TasksTree from './Components/TasksTree/TasksTreeContainer'\r\nimport Register from './Components/Register/RegisterContainer'\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\ntype DispatchPropsType = {\r\n  initializeApp: () => void,\r\n  addLocation: (location: string) => void,\r\n  login: (data: any)=> void,\r\n}\r\n\r\nconst App = (props: MapPropsType & DispatchPropsType) => {\r\n  const [location, setLocation] = useState(useLocation().pathname)\r\n\r\n  useEffect(() => {\r\n    if (!props.initialized) {\r\n      // http://localhost:3000/?email=7383125@gmail.com&password=gfhjkm4501\r\n      let instanseCreds = parseQueryString()\r\n      if (instanseCreds.email && instanseCreds.password) {\r\n        instanseCreds.remember = true\r\n        props.login(instanseCreds)\r\n      }\r\n\r\n      if (location === '/front1/') {\r\n        props.addLocation(location)\r\n      }\r\n      //console.log('initialized FALSE', props)\r\n      props.initializeApp()\r\n    } else {\r\n      //console.log('initialized TRUE', props)\r\n    }\r\n  }, [props.initialized])\r\n\r\n\r\n  if (!props.initialized) {\r\n    return <Spin key=\"spin\" size=\"large\" />\r\n  }\r\n\r\n  return (\r\n    <Layout>\r\n      <Header />\r\n      <Switch>\r\n        {!props.isAuth ?\r\n          <Route exact path={props.appLocation}\r\n            render={() => <Redirect to={props.appLocation+'login'} />} />\r\n        :\r\n          <Route exact path={props.appLocation}\r\n            render={() => <Redirect to={props.appLocation+'toDoList'} />} />\r\n        }\r\n        \r\n        {props.isAuth ?\r\n            <Route exact path={props.appLocation+'login'}\r\n              render={ () => <Redirect to={props.appLocation+'toDoList'} /> } \r\n            />  \r\n          :\r\n            null\r\n        }\r\n\r\n        <Route path={props.appLocation+'login'}\r\n          render={() => <Login />} />\r\n        \r\n         <Route path={props.appLocation+'toDoList'}\r\n            render={() => <ToDoList />} />\r\n\r\n          <Route path={props.appLocation+'tasksTree'}\r\n            render={() => <TasksTree />} />\r\n\r\n          <Route path={props.appLocation+'orders'}\r\n            render={() => <Orders />} />\r\n\r\n          <Route path={props.appLocation+'register'}\r\n            render={() => <Register />} />\r\n\r\n          <Route path={props.appLocation+'*'}\r\n            render={() => <div>404 NOT FOUND</div>} />\r\n      </Switch>\r\n    </Layout>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n  initialized: state.app.initialized,\r\n  appLocation: state.app.location,\r\n  isAuth: state.auth.isAuth\r\n})\r\n\r\nlet AppContainer = compose<React.ComponentType>(\r\n  withRouter,\r\n  connect(mapStateToProps, { initializeApp, addLocation, login }))(App)\r\n\r\nconst MainApp = () => {\r\n  return (\r\n    <BrowserRouter>\r\n      <Provider store={store}>\r\n        <div className={isMobile ? \"\" : \"container\"}>\r\n          <AppContainer />\r\n        </div>\r\n      </Provider>\r\n    </BrowserRouter>\r\n  )\r\n}\r\n\r\nexport default MainApp\r\n\r\nconst parseQueryString = (): any => {\r\n  const params:  any = {}\r\n  document.location.search.substr(1).split('&').forEach( (pair) => {\r\n      const [key, value] = pair.split('=')\r\n      params[key] = value\r\n  })\r\n  return params;\r\n};\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './App'\r\nimport reportWebVitals from './reportWebVitals'\r\n\r\nReactDOM.render(\r\n  // <React.StrictMode>\r\n    <App />\r\n  // </React.StrictMode>\r\n  ,\r\n  document.getElementById('root')\r\n)\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(//console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals()\r\n"],"sourceRoot":""}
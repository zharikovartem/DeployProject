[{"C:\\OSPanel\\domains\\epam-app\\src\\index.tsx":"1","C:\\OSPanel\\domains\\epam-app\\src\\reportWebVitals.ts":"2","C:\\OSPanel\\domains\\epam-app\\src\\App.tsx":"3","C:\\OSPanel\\domains\\epam-app\\src\\Components\\ToDoList.tsx":"4","C:\\OSPanel\\domains\\epam-app\\src\\Components\\NewTaskForm.tsx":"5","C:\\OSPanel\\domains\\epam-app\\src\\Components\\NewTaskFormContainer.tsx":"6","C:\\OSPanel\\domains\\epam-app\\src\\Components\\ToDoListContainer.tsx":"7","C:\\OSPanel\\domains\\epam-app\\src\\api\\api.ts":"8","C:\\OSPanel\\domains\\epam-app\\src\\redux\\taskReducer.ts":"9","C:\\OSPanel\\domains\\epam-app\\src\\redux\\store.ts":"10","C:\\OSPanel\\domains\\epam-app\\src\\Components\\ToDoHeader.tsx":"11"},{"size":517,"mtime":1611045973904,"results":"12","hashOfConfig":"13"},{"size":440,"mtime":1611045973906,"results":"14","hashOfConfig":"13"},{"size":450,"mtime":1611240379938,"results":"15","hashOfConfig":"13"},{"size":3968,"mtime":1611242430421,"results":"16","hashOfConfig":"13"},{"size":2592,"mtime":1611223374697,"results":"17","hashOfConfig":"13"},{"size":316,"mtime":1611144516017,"results":"18","hashOfConfig":"13"},{"size":357,"mtime":1611241581077,"results":"19","hashOfConfig":"13"},{"size":1295,"mtime":1611222484347,"results":"20","hashOfConfig":"21"},{"size":3104,"mtime":1611241961636,"results":"22","hashOfConfig":"13"},{"size":319,"mtime":1611236128908,"results":"23","hashOfConfig":"13"},{"size":1704,"mtime":1611242704729,"results":"24","hashOfConfig":"13"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},"136sl52",{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"27"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"547qvp",{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"27"},"C:\\OSPanel\\domains\\epam-app\\src\\index.tsx",[],["50","51"],"C:\\OSPanel\\domains\\epam-app\\src\\reportWebVitals.ts",[],"C:\\OSPanel\\domains\\epam-app\\src\\App.tsx",[],"C:\\OSPanel\\domains\\epam-app\\src\\Components\\ToDoList.tsx",["52","53","54"],"import React, { useState, useEffect } from 'react'\r\nimport { DatePicker, Card, Divider, Button, Drawer, Tooltip } from 'antd'\r\nimport moment from 'moment'\r\nimport NewTaskForm from './NewTaskFormContainer'\r\nimport ToDoHeader from './ToDoHeader'\r\n\r\nconst ToDoList: React.FC = (props: any) => {\r\n    const [selectedDate, setselectedDate] = useState<moment.Moment>(moment())\r\n    const [visible, setVisible] = useState(false)\r\n    const [isAddActive, setIsAddActive] = useState(false)\r\n    const [timeScaleBlock, setTimeScaleBlock] = useState<Array<React.ReactElement<string>> | null>(null)\r\n\r\n    useEffect(() => {\r\n        props.getTaskList(selectedDate.format('YYYY-MM-DD'))\r\n    }, [selectedDate]);\r\n\r\n    useEffect(() => {\r\n        const getTimeScaleArrey = ():Array<React.ReactElement<string>> => {\r\n            let timeScaleArrey: Array<React.ReactElement<string>> = []\r\n            if (props.taskList !== null) {\r\n                timeScaleArrey.push(\r\n                    <h3>{moment(props.taskList[0].date).format('DD-MMMM')}:</h3>\r\n                )\r\n            }\r\n\r\n            for (let index: number = 0; index < 24; index++) {\r\n                timeScaleArrey.push(\r\n                    <Divider key={index} orientation=\"left\">\r\n                        {index <= 9 ? '0' : null}{index}:00\r\n                    </Divider>\r\n                )\r\n\r\n                if (props.taskList !== null) {\r\n                    for (let i = 0; i < props.taskList.length; i++) {\r\n                        const element = props.taskList[i];\r\n                        const timeVal = Number(element.time.split(':', 1))\r\n                        const nextHour = index + 1\r\n                        if (timeVal >= index && timeVal < nextHour) {\r\n                            timeScaleArrey.push(\r\n                                <Tooltip key={index+'-'+i} placement=\"topLeft\" title={element.descriptions}>\r\n                                    <p className=\"ml-5\">{element.time.split(':', 2).join(':')} - {element.name}</p>\r\n                                </Tooltip>\r\n                            )\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return timeScaleArrey\r\n        }\r\n\r\n        setTimeScaleBlock(getTimeScaleArrey());\r\n    }, [props.taskList]);\r\n\r\n    const onDateChange = (value: moment.Moment | null, dateString: string): void => {\r\n        console.log('onDateChange value:', value)\r\n        if (value !== null) {\r\n            setselectedDate(value)\r\n            setIsAddActive(false)\r\n        } else {\r\n            setselectedDate(moment(null))\r\n            setIsAddActive(true)\r\n        }\r\n    }\r\n\r\n    const onGapDateChange = (value: Array<moment.Moment> ): void => {\r\n        console.log('onGapDateChange value', value)\r\n        props.getTaskListForGap(value[0].format('YYYY-MM-DD'), value[1].format('YYYY-MM-DD'))\r\n    }\r\n\r\n    const showDrawer = (): void => {\r\n        setVisible(true);\r\n    }\r\n\r\n    const onClose = (): void => {\r\n        setVisible(false);\r\n    }\r\n\r\n    // console.log('ToDoList props: ', props)\r\n    return (\r\n        <>\r\n            <div className=\"site-card-border-less-wrapper\">\r\n                <Card\r\n                    title={ <ToDoHeader onDateChange={onDateChange} selectedDate={selectedDate} showDrawer={showDrawer} isAddActive={isAddActive} onGapDateChange={onGapDateChange} />}\r\n                    bordered={false}\r\n                >\r\n                    {timeScaleBlock}\r\n                </Card>\r\n\r\n                <Drawer\r\n                    title={\"Create New Task for \" + selectedDate.format('DD MMM YYYY')}\r\n                    placement=\"right\"\r\n                    closable={false}\r\n                    onClose={onClose}\r\n                    visible={visible}\r\n                    width=\"80%\"\r\n                >\r\n                    <NewTaskForm selectedDate={selectedDate} />\r\n                </Drawer>\r\n            </div>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ToDoList","C:\\OSPanel\\domains\\epam-app\\src\\Components\\NewTaskForm.tsx",[],"C:\\OSPanel\\domains\\epam-app\\src\\Components\\NewTaskFormContainer.tsx",[],"C:\\OSPanel\\domains\\epam-app\\src\\Components\\ToDoListContainer.tsx",[],"C:\\OSPanel\\domains\\epam-app\\src\\api\\api.ts",[],"C:\\OSPanel\\domains\\epam-app\\src\\redux\\taskReducer.ts",[],"C:\\OSPanel\\domains\\epam-app\\src\\redux\\store.ts",[],"C:\\OSPanel\\domains\\epam-app\\src\\Components\\ToDoHeader.tsx",["55"],"import React, { useState, useEffect } from 'react'\r\nimport { DatePicker, Button, Checkbox } from 'antd'\r\nimport { FileAddOutlined } from '@ant-design/icons'\r\n\r\nconst { RangePicker } = DatePicker\r\n\r\nconst ToDoHeader = (props: any) => {\r\n    const [isGap, setIsGap] = useState(false)\r\n    const [label, setLabel] = useState<'date'|'interval'>('date')\r\n\r\n    const onChange = (e: any) => {\r\n        setIsGap(e.target.checked)\r\n        if (e.target.checked) {\r\n            setLabel('interval')\r\n        } else {\r\n            setLabel('date')\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <label>Select {label}:</label>\r\n            \r\n\r\n            {isGap ?\r\n                <RangePicker \r\n                    onChange={props.onGapDateChange}\r\n                    defaultValue={[props.selectedDate, props.selectedDate]}\r\n                    format='DD-MM-YYYY'\r\n                    style={{ marginLeft: 10 }}\r\n                />\r\n                :\r\n                <DatePicker\r\n                    onChange={props.onDateChange}\r\n                    defaultValue={props.selectedDate}\r\n                    format='DD-MM-YYYY'\r\n                    style={{ marginLeft: 10 }}\r\n                />\r\n            }\r\n            <Checkbox className=\"ml-3\" onChange={onChange}>Date interval</Checkbox>\r\n            <Button\r\n                type=\"primary\"\r\n                shape=\"round\"\r\n                icon={<FileAddOutlined />}\r\n                style={{ marginLeft: 10 }}\r\n                size=\"small\"\r\n                onClick={props.showDrawer}\r\n                disabled={props.isAddActive}\r\n            >\r\n                Add\r\n            </Button>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ToDoHeader",{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","severity":1,"message":"61","line":2,"column":10,"nodeType":"62","messageId":"63","endLine":2,"endColumn":20},{"ruleId":"60","severity":1,"message":"64","line":2,"column":37,"nodeType":"62","messageId":"63","endLine":2,"endColumn":43},{"ruleId":"65","severity":1,"message":"66","line":15,"column":8,"nodeType":"67","endLine":15,"endColumn":22,"suggestions":"68"},{"ruleId":"60","severity":1,"message":"69","line":1,"column":27,"nodeType":"62","messageId":"63","endLine":1,"endColumn":36},"no-native-reassign",["70"],"no-negated-in-lhs",["71"],"@typescript-eslint/no-unused-vars","'DatePicker' is defined but never used.","Identifier","unusedVar","'Button' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["72"],"'useEffect' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"73","fix":"74"},"Update the dependencies array to be: [props, selectedDate]",{"range":"75","text":"76"},[682,696],"[props, selectedDate]"]
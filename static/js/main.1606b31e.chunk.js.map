{"version":3,"sources":["utils/Formik/ValidateFields.ts","utils/Formik/CreateAntField.tsx","Components/ToDo/Settings/SettingsModal.tsx","api/api.ts","api/authAPI.ts","redux/authReducer.ts","Components/ToDo/Settings/SettingsModalContainer.tsx","Components/ToDo/ToDoHeader/ToDoHeader.tsx","api/taskApi.ts","redux/taskReducer.ts","Components/ToDo/ToDoHeader/ToDoHeaderMobile.tsx","Components/ToDo/ToDoHeader/ToDoHeaderContainer.tsx","Components/ToDo/ToDoForm/ToDoForm.tsx","Components/ToDo/ToDoMobile.tsx","Components/TimeScale/TaskItem/TaskItem.tsx","Components/TimeScale/TaskItem/TaskItemContainer.tsx","utils/array-helpers.ts","Components/TimeScale/TimeScale.tsx","Components/TimeScale/TimeScaleContainer.tsx","Components/ToDo/ToDoBrowser.tsx","Components/ToDo/ToDoContainer.tsx","redux/appReducer.ts","api/taskListAPI.ts","redux/TaskListReducer.ts","redux/store.ts","Components/Header/MenuBrowser.tsx","Components/Header/MenuBrowserConainer.tsx","Components/Header/MenuPopover.tsx","Components/Header/MenuMobile.tsx","Components/Header/MenuMobileContainer.tsx","Components/Header/Header.tsx","Components/Header/HeaderContainer.tsx","Components/Login/LoginForm.tsx","Components/Login/Login.tsx","Components/Login/LoginContainer.tsx","Components/Orders/Orders.tsx","Components/Orders/OrdersContainer.tsx","Components/TasksTree/NewTaskTreeForm.tsx","Components/TasksTree/TasksTreeBrowser.tsx","Components/TasksTree/TaskTreeItem.tsx","Components/TasksTree/TasksTreeMobile.tsx","Components/TasksTree/TasksTreeContainer.tsx","Components/Register/RegisterForm.tsx","Components/Register/Register.tsx","Components/Register/RegisterContainer.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["validateRequired","value","errors","validateEmail","test","FormItem","Form","Item","Option","Select","CheckboxItem","CheckboxMobile","TextArea","Input","CreateAntField","AntComponent","field","form","hasFeedback","label","selectOptions","submitCount","type","props","touched","name","submitted","hasError","submittedError","touchedError","onInputChange","undefined","setFieldValue","target","Array","isArray","onChange","checked","onBlur","setFieldTouched","isMobile","help","validateStatus","allowClear","map","item","title","AntSelect","Picker","AntDatePicker","DatePickerMobile","DatePicker","AntInput","InputItem","AntInputPassword","Password","AntTimePicker","TimePicker","AntCheckbox","Checkbox","AntTextArea","TextareaItem","MobileComponent","useState","defaultValue","setValue","useEffect","data","key","mode","defaultChecked","locale","enUs","autoHeight","className","cols","onOk","v","onPickerChange","zeroTime","Date","setHours","setMinutes","setSeconds","setMilliseconds","maxTime","ResultCodesEnum","settingasInstanse","timeScaleInrerval","completeInrerval","timeScaleSingle","completeSingle","timeStart","timeEnd","SettingsModal","viewSettings","settings","propName","ToDo","Object","prototype","hasOwnProperty","call","visible","isModalVisible","handleOk","onCancel","handleCancel","initialValues","onSubmit","values","changeSettings","render","SettingsForm","handleSubmit","renderHeader","component","validate","instance","axios","create","withCredentials","baseURL","authAPI","remember_token","localStorage","getItem","sessionStorage","console","log","get","then","response","post","remember","setItem","removeItem","status","catch","err","request","creds","token","initialState","user","isAuth","authError","actions","setAuthUserData","logout","settingType","setAuthError","error","login","dispatch","getState","a","message","authReducer","state","action","JSON","parse","view_settings","connect","auth","RangePicker","ToDoHeader","isInterval","setIsInterval","startDate","moment","endDate","dates","setDates","dateInterval","isSame","format","formatString","style","marginLeft","dateString","e","shape","icon","FileAddOutlined","fontSize","onClick","showDrawer","showModal","SettingOutlined","taskAPI","defaults","headers","common","taskId","delete","put","taskList","taskListIsFetching","taskSaveStatus","errorMessage","setTaskList","setTaskSaveStatus","setErrorMessage","setTaskListIsFetching","isFetchingValue","date","editTaskList","task","getTaskList","start_date","end_date","deleteTask","taskid","updateTask","taskReducer","stateCopy","id","Tasks","ToDoHeaderMobile","toDate","extra","inline","size","isOpen","ToDoForm","initialDrewerData","header","time","descriptions","ToDoMobile","setIsTimeScaleVisible","setVisible","setIsModalVisible","drawerData","setDrawerData","isTimeScaleVisible","initialFormValues","setInitialFormValues","onComplete","isCompleted","Header","minHeight","document","documentElement","clientHeight","contentStyle","color","textAlign","paddingTop","width","sidebar","formPropsCopy","user_id","userId","createNewTask","enableReinitialize","open","onOpenChange","args","TaskItemMobile","useDispatch","backgroundColor","autoClose","right","text","onPress","element","left","splitTime","split","parseInt","splitDate","setFullYear","setDate","onEdit","wrap","TimeScale","dateArrey","isSameOrBefore","push","add","getTasksForHour","hour","tasksForHour","itemTime","hours","getHours","headlineDate","index","orientation","TasksOnly","TaskItem","setChecked","deleteingInProgess","setDeleteingInProgess","ListGroup","join","placement","textDecoration","EditOutlined","danger","DeleteOutlined","sortTaskArrayByParams","b","selestedDates","setSelectedDates","success","getTimeScaleArrey","timeScaleArrey","tomorowTasks","sort","getHeadlineLabel","length","i","timeVal","Number","concat","minutes","seconds","milliseconds","ToDoBrowser","onClose","ToDoHeaderContainer","bordered","closable","formProps","reload","initialized","location","appReducer","taskListAPI","isTaskListLoaded","selectedTasks","setSelectedTasks","backSelectedTasks","taskListReducer","newSelectedTasks","pop","rootReducer","combineReducers","app","store","createStore","applyMiddleware","thunkMiddleware","SubMenu","Menu","MenuBrowser","history","useHistory","theme","menuData","childs","children","to","replace","appLocation","Popover","MenuPopover","mask","overlay","onVisibleChange","onSelect","opt","onLogout","height","padding","marginRight","display","alignItems","MenuMobile","useLocation","show","setShow","initData","forEach","dataItem","pathname","getSelectedMenuItem","selectedMenuItem","setSelectedMenuItem","subMenu","cItem","menuEl","loadingEl","justifyContent","leftContent","src","alt","onLeftClick","preventDefault","rightContent","disabled","LoginForm","Login","block","Orders","NewTaskTreeForm","taskTypes","taskType","setTaskType","task_type","Collapse","Panel","TasksTreeBrowser","dataSource","getTaskTreeItems","deleteTaskList","updateTaskList","renderItem","draggable","time_to_complete","createNewTaskList","onStatusChange","taskTreeItems","parent_id","day","zone","List","TaskTreeItemMobile","taskItem","new_time_to_complete","getTime","onComplet","TasksTreeMobile","initialTimeToComplete","onAdd","parentId","RegisterForm","Register","register","credsToLogin","email","password","AppContainer","compose","withRouter","initializeApp","promise","resultCode","Promise","all","addLocation","instanseCreds","parseQueryString","exact","path","MainApp","params","search","substr","pair","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.1606b31e.chunk.js","sourcesContent":["// import { userAPI } from \"../../api/userAPI\";\r\n\r\nexport const validateRequired = (value: string) => {\r\n    let errors;\r\n    if (!value) {\r\n        errors = \"Required!\";\r\n    }\r\n    return errors;\r\n}\r\n\r\nexport const validateEmail = (value: string) => {\r\n    let errors;\r\n\r\n    if (!value) {\r\n        errors = \"Required!\";\r\n    } else if (!/^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/.test(value)) {\r\n        errors = \"Invalid email address!\";\r\n    }\r\n\r\n    return errors;\r\n};\r\n\r\nexport const validateAsync = (value: string) => {\r\n    const sleep = () => new Promise(resolve => setTimeout(resolve, 2000));\r\n    return sleep().then(() => {\r\n        if (['admin', 'null', 'god'].includes(value)) {\r\n            return 'Nice try'\r\n        }\r\n    })\r\n}\r\n\r\n// export const validateUserExistense = (value: string) => {\r\n//     //console.log(value)\r\n//     return userAPI.checkUserForExistence(value).then( (result) => {\r\n//         //console.log(result.status)\r\n//         if (result.status !== 404) {\r\n//             return 'Name is bisy'\r\n//         } \r\n//     })\r\n//     //console.log(test)\r\n\r\n// }","import React, { useState, useEffect } from 'react'\r\nimport { isMobile } from \"react-device-detect\"\r\nimport {\r\n    DatePicker,\r\n    Form,\r\n    Input,\r\n    TimePicker,\r\n    Select,\r\n    Checkbox\r\n} from \"antd\"\r\nimport enUs from 'antd-mobile/lib/date-picker/locale/en_US'\r\nimport {\r\n    List,\r\n    InputItem,\r\n    Switch,\r\n    Checkbox as CheckboxMobile,\r\n    TextareaItem,\r\n    Picker,\r\n    DatePicker as DatePickerMobile,\r\n} from 'antd-mobile'\r\n\r\nconst FormItem = Form.Item\r\nconst Option: React.FC<any> = Select.Option\r\nconst CheckboxItem = CheckboxMobile.CheckboxItem\r\nconst { TextArea } = Input;\r\n\r\nconst CreateAntField = (AntComponent: any) => (\r\n    {\r\n        field,\r\n        form,\r\n        hasFeedback,\r\n        label,\r\n        selectOptions,\r\n        submitCount,\r\n        type,\r\n        ...props\r\n    }: any\r\n) => {\r\n\r\n    const touched = form.touched[field.name];\r\n    const submitted = submitCount > 0;\r\n    const hasError = form.errors[field.name];\r\n    const submittedError = hasError && submitted;\r\n    const touchedError = hasError && touched;\r\n\r\n    // type OnInputChangeValueType = React.ChangeEvent<HTMLInputElement> | moment.Moment | Date | string\r\n    // const onInputChange = (value: OnInputChangeValueType, field: any) => {\r\n    const onInputChange = (value: any) => {\r\n        //console.log('value: ', value)\r\n        //console.log('field: ', field)\r\n        //console.log('type: ', type)\r\n        if (value === undefined) {\r\n            if (type === 'select' || type === 'time') {\r\n                form.setFieldValue(field.name, null)\r\n            }\r\n        } else if(value === null) {\r\n            form.setFieldValue(field.name, null)\r\n        } else if (value.target) {\r\n            form.setFieldValue(field.name, value.target.value)\r\n        } else {\r\n            if (type === 'time') {\r\n                // if (value instanceof moment) {\r\n                //     //console.log('moment')\r\n                //     form.setFieldValue(field.name, value)\r\n                // } else {\r\n                //     //console.log('not moment')\r\n                //     // form.setFieldValue(field.name, moment(value.setSeconds(0)))\r\n                //     form.setFieldValue(field.name, value)\r\n                // }\r\n                form.setFieldValue(field.name, value)\r\n            } else if (Array.isArray(value)) {\r\n                // добавтить проверуку на пустой массив\r\n                form.setFieldValue(field.name, value[0])\r\n            } else {\r\n                form.setFieldValue(field.name, value)\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    const onChange = (value: string | React.ChangeEvent<HTMLInputElement>) => {\r\n        //console.log('onChange: ', value)\r\n        if (typeof value !== \"string\" && value.target.type === 'checkbox') {\r\n            form.setFieldValue(field.name, value.target.checked)\r\n        } else {\r\n            form.setFieldValue(field.name, value)\r\n        }\r\n    }\r\n\r\n    const onBlur = () => form.setFieldTouched(field.name, true);\r\n\r\n    return (\r\n        <FormItem\r\n            label={!isMobile ? label : null}\r\n            hasFeedback={\r\n                (hasFeedback && submitted) || (hasFeedback && touched) ? true : false\r\n            }\r\n            help={submittedError || touchedError ? hasError : false}\r\n            validateStatus={submittedError || touchedError ? \"error\" : \"success\"}\r\n        >\r\n            {isMobile ?\r\n                <MobileComponent\r\n                    AntComponent={AntComponent}\r\n                    onBlur={onBlur}\r\n                    type={type}\r\n                    onInputChange={onInputChange}\r\n                    onChange={onChange}\r\n                    label={label}\r\n                    selectOptions={selectOptions}\r\n                    value={field.value}\r\n                />\r\n                :\r\n                <AntComponent\r\n                    {...field}\r\n                    {...props}\r\n                    allowClear={selectOptions ? \"true\" : \"false\"}\r\n                    onBlur={onBlur}\r\n                    onChange={type ? onInputChange : onChange}\r\n                >\r\n                    {selectOptions &&\r\n                        selectOptions.map((item: any) => <Option title={item.name} value={item.value} key={item.name}>{item.name}</Option>)}\r\n\r\n\r\n                </AntComponent>\r\n            }\r\n\r\n        </FormItem>\r\n    )\r\n}\r\n\r\nexport const AntSelect = !isMobile ? CreateAntField(Select) : CreateAntField(Picker)\r\nexport const AntDatePicker = !isMobile ? CreateAntField(DatePicker) : CreateAntField(DatePickerMobile)\r\nexport const AntInput = !isMobile ? CreateAntField(Input) : CreateAntField(InputItem)\r\nexport const AntInputPassword = !isMobile ? CreateAntField(Input.Password) : CreateAntField(InputItem)\r\nexport const AntTimePicker = !isMobile ? CreateAntField(TimePicker) : CreateAntField(DatePickerMobile)\r\nexport const AntCheckbox = !isMobile ? CreateAntField(Checkbox) : CreateAntField(CheckboxItem)\r\n// export const AntCheckbox = !isMobile ? CreateAntField(Checkbox) : CreateAntField(Switch)\r\nexport const AntTextArea = !isMobile ? CreateAntField(TextArea) : CreateAntField(TextareaItem)\r\n\r\ntype MobileComponentType = {\r\n    onInputChange: (value: any) => void,\r\n    selectOptions: Array<any>,\r\n    AntComponent: any,\r\n    onBlur: () => void,\r\n    type: 'select' | 'date' | 'text' | 'number' | 'password' | 'time' | 'checkbox' | 'textarea',\r\n    onChange: (value: any) => void,\r\n    label: string,\r\n    value: any\r\n}\r\n\r\n// const MobileComponent: React.FC<any> = (props) => {\r\nconst MobileComponent: React.FC<MobileComponentType> = (props) => {\r\n    const [defaultValue, setValue] = useState(props.type === 'select' ? [props.value] : props.value)\r\n\r\n    useEffect(() => {\r\n        if (props.type === 'select' && props.label === 'task_type') {\r\n            //console.log('useEffect parent_id: ',props.value)\r\n        }\r\n\r\n        setValue(props.value)\r\n\r\n    }, [props.value])\r\n\r\n    const onInputChange = (value: any) => {\r\n        setValue(value)\r\n        props.onInputChange(value)\r\n    }\r\n\r\n    const onPickerChange = (value:any) => {\r\n        //console.log('onPickerChange: ',defaultValue)\r\n        setValue(value)\r\n    }\r\n\r\n    // const onOk = (value:any) => {\r\n    //     //console.log('onOk; ', value)\r\n    //     setValue(value)\r\n    // }\r\n\r\n    type DataType = Array<\r\n        {\r\n            label: string,\r\n            value: string,\r\n            key: string\r\n        }\r\n    >\r\n\r\n    let data: DataType\r\n    if (props.selectOptions !== null && props.selectOptions !== undefined) {\r\n        data = props.selectOptions.map((item: any) => {\r\n            return (\r\n                {\r\n                    label: item.name,\r\n                    value: item.value,\r\n                    key: item.name\r\n                }\r\n            )\r\n        })\r\n    } else {\r\n        data = []\r\n    }\r\n\r\n    // if (props.type === 'select' && props.label === 'task Types') {\r\n    //     //console.log('render: ',props.value)\r\n    // }\r\n\r\n    const mode = props.type\r\n    \r\n    return (\r\n        <List>\r\n            <props.AntComponent\r\n                onBlur={props.onBlur}\r\n                type={props.type}\r\n                onChange={props.type ? onInputChange : props.onChange}\r\n                mode={mode}\r\n                defaultValue={defaultValue}\r\n                defaultChecked={defaultValue}\r\n                value={defaultValue}\r\n                key={props.label}\r\n                title={props.label}\r\n                locale={enUs}\r\n                autoHeight\r\n                // autoHeight\r\n                // autoHeight ={props.type === 'textarea' ? true : false}\r\n                // {props.type === 'textarea' ? 'autoHeight' : null}\r\n                className={props.type === 'text' ? 'pl-0' : null}\r\n                data={data}\r\n                cols={1}\r\n                onOk={(v:any) => setValue(v)}\r\n                onPickerChange={onPickerChange}\r\n            >\r\n                <List.Item\r\n                    className=\"pl-0\"\r\n                >\r\n                    {props.label}\r\n                </List.Item>\r\n            </props.AntComponent>\r\n        </List>\r\n    )\r\n}","import React, { ReactNode, useState } from 'react'\r\nimport { Card, Modal } from 'antd'\r\nimport { SettingsModalPropsType } from './SettingsModalContainer'\r\nimport { Form, Field, FormikProps, Formik } from 'formik'\r\nimport { validateRequired } from '../../../utils/Formik/ValidateFields'\r\nimport { AntInput, AntSelect, AntTextArea, AntTimePicker, AntDatePicker, AntCheckbox } from '../../../utils/Formik/CreateAntField'\r\nimport { List } from 'antd-mobile'\r\n\r\nconst zeroTime = new Date()\r\nzeroTime.setHours(0)\r\nzeroTime.setMinutes(0)\r\nzeroTime.setSeconds(0)\r\nzeroTime.setMilliseconds(0)\r\n\r\nconst maxTime = new Date()\r\nmaxTime.setHours(23)\r\nmaxTime.setMinutes(59)\r\nmaxTime.setSeconds(0)\r\nmaxTime.setMilliseconds(0)\r\n\r\nconst settingasInstanse: any = {\r\n        timeScaleInrerval: false,\r\n        completeInrerval: true,\r\n        timeScaleSingle: true,\r\n        completeSingle: true,\r\n        timeStart: zeroTime,\r\n        timeEnd: maxTime,\r\n}\r\n\r\nexport type OwmSettingsModalPropsType = {\r\n    isModalVisible: boolean,\r\n    handleOk: () => void,\r\n    handleCancel: () => void\r\n}\r\n\r\n\r\nconst SettingsModal: React.FC< SettingsModalPropsType > = (props) => {\r\n    const [settings, setSettings] = useState(props.viewSettings !== null ? props.viewSettings : settingasInstanse)\r\n\r\n    const handleSubmit = (values: any) => {\r\n        //console.log(values)\r\n        props.changeSettings('ToDo', values)\r\n        props.handleOk()\r\n    }\r\n\r\n    let settingsBlock: Array<any> = []\r\n\r\n    for (const propName in settings.ToDo) {\r\n        if (Object.prototype.hasOwnProperty.call(settings.ToDo, propName)) {\r\n            const element = settings.ToDo[propName]\r\n            //console.log(propName, element)\r\n            // settingsBlock.push(<FormItem title={propName} data={element}/>)\r\n        }\r\n    }\r\n\r\n    //console.log('SettingsModal', props)\r\n\r\n    return (\r\n        <Modal\r\n            title=\"Task display settings\"\r\n            visible={props.isModalVisible}\r\n            // onOk={props.handleOk} \r\n            onOk={props.handleOk}\r\n            onCancel={props.handleCancel}\r\n        >\r\n            <Formik\r\n                initialValues={settingasInstanse}\r\n                // initialValues={{}}\r\n                onSubmit={handleSubmit}\r\n                render={SettingsForm}\r\n            />\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default SettingsModal\r\n\r\n\r\nconst SettingsForm: ((props: FormikProps<{}>) => ReactNode) = (props) => {\r\n    return (\r\n        <Form\r\n            className=\"form-container\"\r\n            onSubmit={props.handleSubmit}\r\n        >\r\n            <List renderHeader={() => 'Single date settings'}>\r\n                <Field\r\n                    component={AntCheckbox}\r\n                    name=\"timeScaleSingle\"\r\n                    label=\"is time scale visible\"\r\n                    submitCount={props.submitCount}\r\n                />\r\n\r\n                <Field\r\n                    component={AntCheckbox}\r\n                    name=\"completeSingle\"\r\n                    label=\"is complete visible\"\r\n                    submitCount={props.submitCount}\r\n                />\r\n            </List>\r\n\r\n            <List renderHeader={() => 'Inrerval date settings'}>\r\n                <Field\r\n                    component={AntCheckbox}\r\n                    name=\"timeScaleInrerval\"\r\n                    label=\"is time scale visible\"\r\n                    submitCount={props.submitCount}\r\n                />\r\n\r\n                <Field\r\n                    component={AntCheckbox}\r\n                    name=\"completeInrerval\"\r\n                    label=\"is complete visible\"\r\n                    submitCount={props.submitCount}\r\n                />\r\n            </List>\r\n            <List renderHeader={() => 'Work day info'}>\r\n                <Field\r\n                    component={AntDatePicker}\r\n                    name=\"timeStart\"\r\n                    type=\"time\"\r\n                    label=\"Start time\"\r\n                    validate={validateRequired}\r\n                    submitCount={props.submitCount}\r\n                    hasFeedback\r\n                />\r\n\r\n                <Field\r\n                    component={AntDatePicker}\r\n                    name=\"timeEnd\"\r\n                    type=\"time\"\r\n                    label=\"End time\"\r\n                    validate={validateRequired}\r\n                    submitCount={props.submitCount}\r\n                    hasFeedback\r\n                />\r\n            </List>\r\n\r\n            <div className=\"submit-container\">\r\n                <button className=\"ant-btn ant-btn-primary\" type=\"submit\">\r\n                    Save\r\n                </button>\r\n            </div>\r\n\r\n        </Form>\r\n    )\r\n}\r\n\r\n\r\n","import axios from 'axios'\r\n\r\nexport const instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://crmapiserver.h1n.ru/api/',\r\n    // baseURL: 'https://81.90.181.175/api/',\r\n    // headers:     {\r\n    //     'X-Auth-Token': localStorage.getItem('remember_token')\r\n    // }\r\n})\r\n\r\nexport enum ResultCodesEnum {\r\n    Success = 0,\r\n    Error = 1\r\n}\r\n\r\nexport type APIResponseType<D = {}, RC = ResultCodesEnum> = {\r\n    data: D\r\n    messages: Array<string>\r\n    resultCode: RC\r\n}\r\n","import {instance, APIResponseType} from \"./api\";\r\n\r\ntype MeResponseDataType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n    // remember_token?: string,\r\n    // user?: any\r\n    // error?: boolean,\r\n    // message?: string\r\n}\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        let remember_token: string | null = 'error'\r\n        if (localStorage.getItem('remember_token')) {\r\n            remember_token = localStorage.getItem('remember_token')\r\n        }\r\n        if (sessionStorage.getItem('remember_token')) {\r\n            remember_token = sessionStorage.getItem('remember_token')\r\n        }\r\n        console.log(remember_token)\r\n        return instance.get(`authMe/`+remember_token).then( (response) => {\r\n            console.log('ME: ', response)\r\n            return response\r\n        })\r\n    },\r\n    login(data: any) {\r\n        return instance.post('login', data)\r\n        .then(response => {\r\n            console.log('login: ', response)\r\n            if (data.remember) {\r\n                if (response.data.remember_token !== null) {\r\n                    localStorage.setItem('remember_token', response.data.remember_token);\r\n                } else {\r\n                    localStorage.removeItem('remember_token');\r\n                }\r\n            } else {\r\n                if (response.data.remember_token !== null) {\r\n                    sessionStorage.setItem('remember_token', response.data.remember_token);\r\n                } else {\r\n                    sessionStorage.removeItem('remember_token');\r\n                }\r\n            }\r\n            \r\n\r\n            return response.status === 200 ? response : null;\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                //console.log(err.response)\r\n                return err.response\r\n            } else if (err.request) {\r\n                //console.log('request', err.request)\r\n            } else {\r\n                //console.log('anything else: ', err)\r\n            }\r\n            return null\r\n        })\r\n    },\r\n    register(creds: any) {\r\n        return instance.post('register', creds)\r\n        .then(response => {\r\n            //console.log('login: ', response)\r\n            if (response.data.remember_token !== null) {\r\n                localStorage.setItem('remember_token', response.data.token);\r\n            } else {\r\n                localStorage.removeItem('remember_token');\r\n            }\r\n            return response.status === 200 ? response : null;\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                //console.log(err.response)\r\n                return err.response\r\n            } else if (err.request) {\r\n                //console.log('request', err.request)\r\n            } else {\r\n                //console.log('anything else: ', err)\r\n            }\r\n            return null\r\n        })\r\n    }\r\n}","import { act } from \"@testing-library/react\";\r\nimport { authAPI } from \"../api/authAPI\";\r\nimport { BaseThunkType, InferActionsTypes } from \"./store\"\r\n// import {FormAction} from 'redux-form/lib/actions';\r\n\r\ntype InitialStateType = {\r\n    user: UserType | null,\r\n    remember_token: string | null,\r\n    isAuth: boolean\r\n    viewSettings: any\r\n    authError: null | string\r\n}\r\nlet initialState: InitialStateType = {\r\n    user: null,\r\n    remember_token: null,\r\n    isAuth: false,\r\n    viewSettings: {\r\n        ToDo: {}\r\n    },\r\n    authError: null\r\n}\r\n\r\nconst authReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/AUTH/SET_AUTH_ERROR':\r\n            return{...state, authError: action.error}\r\n        case 'SN/AUTH/SET_SETTINGS_DATA':\r\n            //console.log(action)\r\n            let viewSettings = {...state.viewSettings}\r\n            viewSettings[action.settingType] = action.settings\r\n            return {...state, viewSettings: viewSettings}\r\n        case 'SN/AUTH/SET_USER_DATA':\r\n            if (action.user !== null) {\r\n                //console.log('1')\r\n                return { ...state, \r\n                            user: action.user, \r\n                            remember_token: action.remember_token, \r\n                            isAuth: true, \r\n                            viewSettings: JSON.parse(action.user.view_settings),\r\n                            authError: null\r\n                        }\r\n            } else {\r\n                return initialState;\r\n            }\r\n            \r\n        case 'SN/AUTH/LOGOUT':\r\n            localStorage.removeItem('remember_token')\r\n            sessionStorage.removeItem('remember_token');\r\n            return initialState;\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport type UserType = {\r\n    created_at: string\r\n    email: string\r\n    email_verified_at: null | any\r\n    id: number\r\n    name: string\r\n    status: string\r\n    updated_at: string,\r\n    view_settings: any\r\n}\r\nexport const actions = {\r\n    setAuthUserData: (user: UserType | null, remember_token: string | null) => ({ type: 'SN/AUTH/SET_USER_DATA', user, remember_token } as const),\r\n    logout: () => ({type: 'SN/AUTH/LOGOUT'} as const),\r\n    changeSettings: (settingType: string, settings: any) => ({ type: 'SN/AUTH/SET_SETTINGS_DATA', settingType, settings } as const),\r\n    setAuthError: (error: string) => ({type: 'SN/AUTH/SET_AUTH_ERROR', error } as const),\r\n}\r\n\r\n// export const getAuthUserData = (): ThunkType => async (dispatch) => {\r\n//     let response = await authAPI.me()\r\n//     //console.log('getAuthUserData', response)\r\n// }\r\n\r\nexport const getAuthUserData = (): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        let response = await authAPI.me()\r\n\r\n        if (response !== null) {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(actions.setAuthUserData(response.data.user, response.data.remember_token))\r\n            } else {\r\n                //console.log(response.data.messages[0])\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport type credsType = {\r\n    email: string,\r\n    password: string,\r\n    remember: boolean\r\n}\r\n\r\nexport const login = (data: credsType): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        let response = await authAPI.login(data)\r\n        if (response) {\r\n            //console.log(response)\r\n            if (response.status === 200) {\r\n                dispatch(actions.setAuthUserData(response.data.user, response.data.remember_token))\r\n            } else {\r\n                console.log(response.data.message)\r\n                dispatch(actions.setAuthError(response.data.message))\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport const register = (creds: any): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        await authAPI.register(creds)\r\n        //console.log(response)\r\n        const credsToLogin: credsType = {\r\n            email: creds.email,\r\n            password: creds.password,\r\n            remember: creds.remember\r\n        }\r\n        dispatch(login(credsToLogin))\r\n    }\r\n}\r\n\r\nexport default authReducer;\r\n\r\n// export type InitialStateType = typeof initialState;\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType< ActionsTypes>\r\n\r\n","import {connect} from 'react-redux'\r\nimport SettingsModal, { OwmSettingsModalPropsType } from './SettingsModal'\r\nimport { AppStateType } from '../../../redux/store'\r\nimport { actions } from './../../../redux/authReducer'\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    // getTaskList: (start_date: string, end_date:string)=>void\r\n    changeSettings: (settingType: string, settings: any)=> void\r\n    // actions: any\r\n}\r\n\r\nexport type SettingsModalPropsType = MapPropsType & MapDispatchPropsType & OwmSettingsModalPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    //console.log(state)\r\n    return {\r\n        viewSettings: state.auth.viewSettings\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwmSettingsModalPropsType, AppStateType>(mapStateToProps, \r\n    {changeSettings: actions.changeSettings} ) \r\n    ( SettingsModal )\r\n    \r\n\r\n","import React, { useState, useEffect } from 'react'\r\nimport { DatePicker, Checkbox, Button } from 'antd'\r\nimport { FileAddOutlined, SettingOutlined } from '@ant-design/icons'\r\nimport { CheckboxChangeEvent } from 'antd/lib/checkbox'\r\nimport {RangeValue} from '../../../Types/types'\r\nimport { ToDoHeaderPropsType } from './ToDoHeaderContainer'\r\nimport moment from 'moment'\r\n\r\nconst { RangePicker } = DatePicker\r\n\r\nexport type OwnToDoHeaderPropsType = {\r\n    showDrawer: () => void,\r\n    showModal: () => void,\r\n    isOpen?: boolean\r\n}\r\n\r\nconst ToDoHeader: React.FC<ToDoHeaderPropsType> = (props) => {\r\n    const [isInterval, setIsInterval] = useState(false)\r\n    const [dates, setDates] = useState<{startDate: moment.Moment, endDate: moment.Moment}>({startDate: moment(), endDate: moment()})\r\n\r\n    useEffect(() => {\r\n        if ( \r\n            !props.dateInterval.startDate.isSame(dates.startDate.format('YYYY-MM-DD'), \"day\" ) ||\r\n            !props.dateInterval.endDate.isSame(dates.endDate.format('YYYY-MM-DD'), \"day\" )\r\n        ) {\r\n            props.setIsInterval(isInterval, dates)\r\n        }\r\n        \r\n    }, [isInterval, dates, props])\r\n\r\n\r\n    const onDateTypeChange = (e: CheckboxChangeEvent) => {\r\n        if (!e.target.checked) {\r\n            setDates({\r\n                startDate: dates.startDate,\r\n                endDate: dates.startDate\r\n            })\r\n        }\r\n        setIsInterval(e.target.checked)\r\n    }\r\n\r\n    const onDateRangeChange = (values: RangeValue<moment.Moment>, formatString: [string, string]): void => {\r\n        if (values !== null && values[0] !== null && values[1] !== null ) {\r\n            setDates({\r\n                startDate: values[0],\r\n                endDate: values[1],\r\n            })\r\n        }\r\n        \r\n    }\r\n\r\n    const onDateChange = (value: moment.Moment | null, dateString: string):void => {\r\n        if (value !== null) {\r\n            setDates({\r\n                startDate: value,\r\n                endDate: value,\r\n            })\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"row w-100\" >\r\n            <div className=\"col-12 col-md-9 col-lg-9 col-xl-7 w-100\">\r\n                <div className=\"d-none d-sm-inline\">\r\n                    <label >{isInterval ? \"Date interval\" : \"Date\"}:</label>\r\n                </div>\r\n\r\n                <div className=\"d-none d-inline\">\r\n                    {isInterval ?\r\n                        <RangePicker\r\n                            onChange={onDateRangeChange}\r\n                            defaultValue={[props.dateInterval.startDate, props.dateInterval.endDate]}\r\n                            value = {[props.dateInterval.startDate, props.dateInterval.endDate]}\r\n                            format='DD-MM-YYYY'\r\n                            style={{ marginLeft: 10 }}\r\n                        />\r\n                        :\r\n                        <DatePicker\r\n                            onChange={onDateChange}\r\n                            defaultValue={props.dateInterval.startDate}\r\n                            format='DD-MM-YYYY'\r\n                            style={{ marginLeft: 10 }}\r\n                        />\r\n                    }\r\n                </div>\r\n            </div>\r\n            <div className=\"col-12 col-md-3 col-lg-3 col-xl-2 m-2 m-md-0\" >\r\n                <Checkbox className=\"ml-3\" onChange={onDateTypeChange}>Date interval</Checkbox>\r\n            </div>\r\n            <div className=\"col-12 col-md-12 col-lg-4 col-xl-3 mt-lg-2\">\r\n                <Button\r\n                    type=\"primary\"\r\n                    shape=\"round\"\r\n                    icon={\r\n                        <div className=\"d-flex flex-wrap align-content-start\">\r\n                            <FileAddOutlined style={{ fontSize: '18px' }} />\r\n                            <span className=\"ml-1\" style={{ fontSize: '14px' }}>Add</span>\r\n                        </div>}\r\n                    style={{ marginLeft: 10 }}\r\n                    onClick={props.showDrawer}\r\n                />\r\n\r\n                <Button className=\"\"\r\n                    type=\"primary\"\r\n                    shape=\"round\"\r\n                    style={{ marginLeft: 10 }}\r\n                    onClick={props.showModal}\r\n                    icon={\r\n                        <div className=\"d-flex flex-wrap align-content-start\">\r\n                            <SettingOutlined style={{ fontSize: '18px' }} />\r\n                            <span className=\"ml-1\" style={{ fontSize: '14px' }}>Settings</span>\r\n                        </div>} \r\n                    />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ToDoHeader","import { NewTaskDataType, TaskType } from '../Types/types'\r\nimport {instance} from './api'\r\n\r\nconst getToken = () => {\r\n    if (localStorage.getItem('remember_token')) {\r\n        instance.defaults.headers.common['X-Auth-Token'] = localStorage.getItem('remember_token')\r\n    }\r\n    if (sessionStorage.getItem('remember_token')) {\r\n        instance.defaults.headers.common['X-Auth-Token'] = sessionStorage.getItem('remember_token')\r\n    }\r\n}\r\n\r\n\r\nexport type TaskListType = {\r\n    Tasks: Array<TaskType>\r\n}\r\n\r\nexport const taskAPI = {\r\n    createNewTask(values: NewTaskDataType) {\r\n        return instance.post<TaskListType>(`tasks`, values)\r\n        .then(response => {\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                return err.response\r\n            } else if (err.request) {\r\n                //console.log('request', err.request)\r\n            } else {\r\n                //console.log('anything else: ', err)\r\n            }\r\n            return null\r\n        })\r\n    },\r\n\r\n    getTaskList(values: getTaskListValuesType) {\r\n        console.log(instance.defaults.headers.common['X-Auth-Token'])\r\n        getToken()\r\n        return instance.post<TaskListType>(`tasks/part`, values)\r\n        .then(response => {\r\n            //console.log(response)\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                //console.log('request', err.request)\r\n                return err.response\r\n            } else if (err.request) {\r\n                //console.log('request', err.request)\r\n            } else {\r\n                //console.log('anything else: ', err)\r\n            }\r\n            return null\r\n        })\r\n    },\r\n\r\n    deleteTask(taskId: number) {\r\n        return instance.delete<TaskListType>(`tasks/${taskId}`).then(response => {\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                return err.response\r\n            } else if (err.request) {\r\n                //console.log('request', err.request)\r\n            } else {\r\n                //console.log('anything else: ', err)\r\n            }\r\n            return null\r\n        })\r\n    }, \r\n\r\n    updateTask(values: any, taskId: number) {\r\n        return instance.put<any>(`tasks/${taskId}`, values)\r\n        .then(response => {\r\n            //console.log(response)\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                //console.log(err.response)\r\n                return err.response\r\n            } else if (err.request) {\r\n                //console.log('request', err.request)\r\n            } else {\r\n                //console.log('anything else: ', err)\r\n            }\r\n            return null\r\n        })\r\n    }\r\n}\r\n\r\nexport type getTaskListValuesType = {\r\n    start_date: string, \r\n    end_date: string\r\n}","import { Dispatch } from 'redux'\r\nimport { taskAPI, TaskListType } from '../api/taskApi'\r\nimport { NewTaskDataType, TaskType } from '../Types/types'\r\nimport {BaseThunkType, InferActionsTypes} from './store'\r\nimport moment from 'moment'\r\n\r\nexport type InitialStateType = {\r\n    taskList: null | Array<TaskType>,\r\n    taskListIsFetching: boolean,\r\n    taskSaveStatus: 'no' | 'inProgress' | 'success' | 'error'\r\n    errorMessage: null | string,\r\n    isInterval: boolean,\r\n    dateInterval: {\r\n        startDate: moment.Moment,\r\n        endDate: moment.Moment\r\n    }\r\n}\r\n\r\nlet initialState:InitialStateType = {\r\n    taskList: null,\r\n    taskListIsFetching: false,\r\n    taskSaveStatus: 'no',\r\n    errorMessage: null,\r\n    isInterval: false,\r\n    dateInterval: {\r\n        startDate: moment(),\r\n        endDate: moment()\r\n    }\r\n}\r\n\r\nconst taskReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n    \r\n    switch (action.type) {\r\n        case 'SN/TASK/EDIT_TASK_LIST':\r\n            if (state.taskList !== null) {\r\n            const stateCopy = state.taskList.map( item => {\r\n                if (action.task.id === item.id) {\r\n                    return action.task\r\n                } else {\r\n                    return item\r\n                }\r\n            })\r\n            return {...state, taskList: stateCopy}\r\n            } else {\r\n                return state\r\n            }\r\n\r\n        case 'SN/TASK/SET_TASK_LIST':\r\n            return {...state, taskList: action.taskList.Tasks}\r\n\r\n        case 'SN/TASK/SET_TASK_SAVE_STATUS':\r\n            return {...state, taskSaveStatus: action.taskSaveStatus}\r\n\r\n        case 'SN/TASK/SET_ERROR_MESSAGE':\r\n            return {...state, errorMessage: action.message}\r\n\r\n        case 'SN/TASK/SET_TASK_LIST_IS_FETCHING':\r\n            return {...state, taskListIsFetching: action.isFetchingValue}\r\n\r\n        case 'SN/TASK/SET_IS_INTERVAL':\r\n            //console.log('SET_IS_INTERVAL')\r\n            const dateInterval = {\r\n                startDate: action.date.startDate,\r\n                endDate: action.date.endDate\r\n            }\r\n            return {...state, isInterval: action.isInterval, dateInterval }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    setTaskList: (taskList: TaskListType) => ({ type: 'SN/TASK/SET_TASK_LIST', taskList } as const),\r\n    setTaskSaveStatus: (taskSaveStatus: 'no' | 'inProgress' | 'success' | 'error') => ({ type: 'SN/TASK/SET_TASK_SAVE_STATUS', taskSaveStatus } as const),\r\n    setErrorMessage: (message: string | null) => ({type: 'SN/TASK/SET_ERROR_MESSAGE', message} as const),\r\n    setTaskListIsFetching: (isFetchingValue: boolean) => ({type: 'SN/TASK/SET_TASK_LIST_IS_FETCHING', isFetchingValue} as const),\r\n    setIsInterval: (isInterval: boolean, date: {startDate: moment.Moment, endDate: moment.Moment}) => ({type: 'SN/TASK/SET_IS_INTERVAL', isInterval, date} as const),\r\n    editTaskList: (task: TaskType) => ({type: 'SN/TASK/EDIT_TASK_LIST', task} as const),\r\n}\r\n\r\nexport const createNewTask = (values: NewTaskDataType, reload:boolean = true): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        dispatch(actions.setTaskSaveStatus('inProgress'))\r\n\r\n        let response = await taskAPI.createNewTask(values)\r\n\r\n        if (response && response.status && response.status === 200) {\r\n            if (reload) {\r\n                const state = getState()\r\n                const startDate = state.task.dateInterval.startDate.format('YYYY-MM-DD')\r\n                const endDate = state.task.dateInterval.endDate.format('YYYY-MM-DD')\r\n                dispatch(getTaskList(startDate, endDate))\r\n            }\r\n            dispatch(actions.setTaskSaveStatus('success'))\r\n            dispatch(actions.setTaskSaveStatus('no'))\r\n        } else {\r\n            if (response && response.data) {\r\n                dispatch(actions.setErrorMessage(response.data.message))\r\n                dispatch(actions.setTaskSaveStatus('error'))\r\n                dispatch(actions.setTaskSaveStatus('no'))\r\n                dispatch( actions.setErrorMessage(null) )\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport const getTaskList = (startDate: string, endDate:string): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        dispatch(actions.setTaskListIsFetching(true))\r\n\r\n        const values = {start_date: startDate, end_date: endDate}\r\n        let response = await taskAPI.getTaskList(values)\r\n\r\n        if (response !== undefined && response !== null) {\r\n            //console.log(response)\r\n            dispatch(actions.setTaskList(response.data))\r\n        } else {\r\n            // add error message\r\n        }\r\n        dispatch(actions.setTaskListIsFetching(false))\r\n    }\r\n}\r\n\r\nexport const deleteTask = (taskid: number, startDate: string, endDate:string): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        let response = await taskAPI.deleteTask(taskid)\r\n\r\n        if (response !== null) {\r\n            dispatch(actions.setErrorMessage('Task deletion was successful'))\r\n            dispatch(getTaskList(startDate, endDate))\r\n            dispatch( actions.setErrorMessage(null) )\r\n        }\r\n    }\r\n}\r\n\r\nexport const updateTask = (values: any, taskId: number): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        let response = await taskAPI.updateTask(values, taskId)\r\n        //console.log(response)\r\n        dispatch(actions.editTaskList(response.data[0]))\r\n    }\r\n}\r\n\r\nexport default taskReducer\r\n\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsTypes>\r\nexport type DispatchType = Dispatch<ActionsTypes>\r\n","import React, { useState } from 'react'\r\nimport { ToDoHeaderPropsType } from './ToDoHeaderContainer'\r\nimport { Button, DatePicker, List, Switch } from 'antd-mobile'\r\nimport enUs from 'antd-mobile/lib/date-picker/locale/en_US'\r\nimport moment from \"moment\"\r\n\r\nexport type OwnToDoHeaderPropsType = {\r\n    showDrawer: () => void,\r\n    showModal: () => void,\r\n    isOpen: boolean\r\n}\r\n\r\nconst ToDoHeaderMobile: React.FC<ToDoHeaderPropsType> = (props) => {\r\n    const [isInterval, setIsInterval] = useState(false)\r\n    const [isFormOpen, setIsFormOpen] = useState(true)\r\n\r\n    const onIntervalChange = (e: boolean) => {\r\n        if (e) {\r\n            props.setIsInterval( !isInterval, {startDate: props.dateInterval.startDate, endDate: props.dateInterval.endDate })\r\n        } else {\r\n            props.setIsInterval( !isInterval, {startDate: props.dateInterval.startDate, endDate: props.dateInterval.startDate })\r\n        }\r\n        \r\n        setIsInterval(!isInterval)\r\n    }\r\n\r\n    const onStartChange = (value: Date) => {\r\n        //console.log(value)\r\n        //console.log(props)\r\n        if (!isInterval) {\r\n            props.setIsInterval(isInterval, {startDate: moment(value), endDate: moment(value) })\r\n        } else {\r\n            props.setIsInterval(isInterval, {startDate: moment(value), endDate: props.dateInterval.endDate })\r\n        }\r\n        \r\n    }\r\n\r\n    const onEndChange = (value: Date) => {\r\n        props.setIsInterval(isInterval, {startDate: props.dateInterval.startDate, endDate: moment(value) })\r\n    }\r\n\r\n    return (\r\n        <div className=\"w-100\">\r\n            <DatePicker\r\n                locale={enUs}\r\n                mode=\"date\"\r\n                value={props.dateInterval.startDate.toDate()}\r\n                onChange={onStartChange}\r\n            >\r\n                <List.Item className=\"w-100\">\r\n                {isInterval ? 'Start:' : 'Date:'}\r\n                </List.Item>\r\n            </DatePicker>\r\n\r\n            {isInterval ?\r\n                <DatePicker\r\n                    locale={enUs}\r\n                    mode=\"date\"\r\n                    value={props.dateInterval.endDate.toDate()}\r\n                    onChange={onEndChange}\r\n                >\r\n                    <List.Item >End:</List.Item>\r\n                </DatePicker>\r\n                :\r\n                null\r\n            }\r\n\r\n            <List.Item\r\n                extra={\r\n                        <Switch\r\n                            checked={isInterval}\r\n                            onChange={onIntervalChange}\r\n                        />\r\n                }\r\n                >\r\n                Date interval\r\n            </List.Item>\r\n\r\n            <Button\r\n                inline\r\n                size=\"small\"\r\n                className=\"ml-3\"\r\n                // style={{ marginRight: '4px' }} \r\n                onClick={()=>{props.showDrawer()}}\r\n                type=\"primary\"\r\n            >\r\n                {!props.isOpen ? 'Add' : 'Close'}\r\n            </Button>\r\n            <Button\r\n                inline\r\n                size=\"small\"\r\n                className=\"ml-3\"\r\n                // style={{ marginRight: '4px' }} \r\n                onClick={()=>{props.showModal()}}\r\n                type=\"primary\"\r\n            >\r\n                Settings\r\n            </Button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ToDoHeaderMobile","import {connect} from 'react-redux'\r\nimport ToDoHeader, { OwnToDoHeaderPropsType } from './ToDoHeader'\r\nimport {actions} from '../../../redux/taskReducer'\r\nimport { AppStateType } from '../../../redux/store'\r\nimport { isMobile } from 'react-device-detect'\r\nimport ToDoHeaderMobile from './ToDoHeaderMobile'\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    setIsInterval: (isInterval: boolean, date: {startDate: moment.Moment, endDate: moment.Moment}) => {\r\n        type: \"SN/TASK/SET_IS_INTERVAL\",\r\n        isInterval: boolean,\r\n        date: {startDate: moment.Moment, endDate: moment.Moment}\r\n    }\r\n}\r\n\r\nexport type ToDoHeaderPropsType = MapPropsType & MapDispatchPropsType & OwnToDoHeaderPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        dateInterval: state.task.dateInterval\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnToDoHeaderPropsType, AppStateType>(mapStateToProps, \r\n    {setIsInterval: actions.setIsInterval}) \r\n    (isMobile ? ToDoHeaderMobile : ToDoHeader)\r\n    \r\n\r\n","import { Form, Field, FormikProps } from 'formik'\r\nimport React, { ReactNode, useState, useEffect } from 'react'\r\nimport { AntInput, AntSelect, AntTextArea, AntTimePicker, AntDatePicker } from '../../../utils/Formik/CreateAntField'\r\nimport { validateRequired } from '../../../utils/Formik/ValidateFields'\r\n\r\n\r\nconst ToDoForm: ((props: FormikProps<{}>) => ReactNode) = (props) => {\r\n    //console.log('!!!!!!!!!! ToDoForm')\r\n    return (\r\n        <Form\r\n            className=\"form-container\"\r\n            onSubmit={props.handleSubmit}\r\n        >\r\n            <Field\r\n                component={AntInput}\r\n                name=\"name\"\r\n                type=\"text\"\r\n                label=\"Name\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n\r\n            <Field\r\n                component={AntDatePicker}\r\n                name=\"date\"\r\n                type=\"date\"\r\n                label=\"Task date\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                // hasFeedback\r\n            />\r\n\r\n            <Field\r\n                component={AntTimePicker}\r\n                name=\"time\"\r\n                type=\"time\"\r\n                label=\"Task time\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                // hasFeedback\r\n            />\r\n\r\n            <Field\r\n                component={AntTextArea}\r\n                name=\"descriptions\"\r\n                type=\"text\"\r\n                label=\"Descriptions\"\r\n                // validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n            // hasFeedback\r\n            />\r\n\r\n            <div className=\"submit-container\">\r\n                <button className=\"ant-btn ant-btn-primary\" type=\"submit\">\r\n                    Save\r\n                </button>\r\n            </div>\r\n\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default ToDoForm","import { List, Card, Drawer, WhiteSpace, WingBlank, SwipeAction } from 'antd-mobile'\r\nimport { Formik } from 'formik'\r\nimport React, { useEffect, useState } from 'react'\r\nimport SettingsModal from './Settings/SettingsModalContainer'\r\nimport ToDoHeader from './ToDoHeader/ToDoHeaderContainer'\r\nimport { ToDoListPropsType } from './ToDoContainer'\r\nimport ToDoForm from './ToDoForm/ToDoForm'\r\n// import TimeScale from './../TimeScale/TimeScaleContainer'\r\nimport TaskItem from './../TimeScale/TaskItem/TaskItemContainer'\r\nimport { useDispatch } from 'react-redux'\r\nimport moment from 'moment'\r\nimport { TaskType } from '../../Types/types'\r\nimport { Divider } from 'antd'\r\n\r\ntype InitialDrewerDataType = {\r\n    header: string,\r\n    taskId: false | number\r\n}\r\n\r\nconst initialDrewerData: InitialDrewerDataType = {\r\n    header: 'Create New Task',\r\n    taskId: false\r\n}\r\nconst zeroTime = new Date()\r\nzeroTime.setHours(0)\r\nzeroTime.setMinutes(0)\r\nzeroTime.setSeconds(0)\r\nzeroTime.setMilliseconds(0)\r\n\r\nconst initialValues: any = {\r\n    name: '',\r\n    time: zeroTime,\r\n    date: new Date(),\r\n    descriptions: ''\r\n}\r\n\r\nconst ToDoMobile: React.FC<ToDoListPropsType> = (props) => {\r\n    useEffect(() => {\r\n        if (props.taskList === null) {\r\n            props.getTaskList(props.dateInterval.startDate.format('YYYY-MM-DD'), props.dateInterval.endDate.format('YYYY-MM-DD'))\r\n        }\r\n    }, [props.taskList])\r\n\r\n    useEffect(() => {\r\n        props.getTaskList(props.dateInterval.startDate.format('YYYY-MM-DD'), props.dateInterval.endDate.format('YYYY-MM-DD'))\r\n    }, [props.dateInterval])\r\n\r\n    useEffect(() => {\r\n        if (props.isInterval) {\r\n            setIsTimeScaleVisible(props.viewSettings.ToDo.timeScaleInrerval)\r\n        } else {\r\n            setIsTimeScaleVisible(props.viewSettings.ToDo.timeScaleSingle)\r\n        }\r\n    }, [props.isInterval, props.viewSettings])\r\n\r\n    const [visible, setVisible] = useState<boolean>(false)\r\n    const [isModalVisible, setIsModalVisible] = useState(false)\r\n    const [drawerData, setDrawerData] = useState(initialDrewerData)\r\n    const [isTimeScaleVisible, setIsTimeScaleVisible] = useState(props.viewSettings.ToDo.timeScaleSingle)\r\n    const [initialFormValues, setInitialFormValues] = useState(initialValues)\r\n\r\n    const showDrawer = (): void => {\r\n        if (visible) {\r\n            setInitialFormValues(initialValues)\r\n        }\r\n        setVisible(!visible)\r\n    }\r\n\r\n    const showModal = () => {\r\n        setIsModalVisible(true)\r\n    }\r\n\r\n    const handleOk = () => {\r\n        setIsModalVisible(false)\r\n    }\r\n\r\n    const handleCancel = () => {\r\n        setIsModalVisible(false)\r\n    }\r\n\r\n    const handleSubmit = (values: any) => {\r\n        let formPropsCopy: any = { ...values }\r\n        //console.log('handleSubmit')\r\n        if (formPropsCopy.time !== undefined) {\r\n            formPropsCopy.time = moment(formPropsCopy.time).format('HH:mm:ss')\r\n        }\r\n        if (formPropsCopy.date !== undefined) {\r\n            formPropsCopy.date = moment(formPropsCopy.date).format('YYYY-MM-DD')\r\n        }\r\n\r\n        formPropsCopy.user_id = props.userId\r\n        //console.log('handleSubmit', formPropsCopy)\r\n        if (!drawerData.taskId) {\r\n            props.createNewTask(formPropsCopy, true)\r\n        } else {\r\n            props.updateTask(formPropsCopy, drawerData.taskId)\r\n        }\r\n        showDrawer()\r\n    }\r\n\r\n    const onAdd = (args: any) => {\r\n        //console.log('on add')\r\n        setVisible(!visible)\r\n    }\r\n\r\n    const onComplete = (task: any) => {\r\n        //console.log('onComplete', task)\r\n        task.isCompleted = !task.isCompleted\r\n        props.updateTask(task, task.id)\r\n    }\r\n\r\n    //console.log('ToDoMobile: ', props.taskList)\r\n\r\n    if (props.taskList !== null) {\r\n        return (\r\n            <WingBlank size=\"lg\">\r\n                <WhiteSpace size=\"lg\" />\r\n                <Card>\r\n                    <Card.Header\r\n                        title={<ToDoHeader\r\n                            showDrawer={showDrawer}\r\n                            showModal={showModal}\r\n                            isOpen={visible}\r\n                        />}\r\n                    >\r\n                    </Card.Header>\r\n\r\n                    <SettingsModal\r\n                        isModalVisible={isModalVisible}\r\n                        handleOk={handleOk}\r\n                        handleCancel={handleCancel}\r\n                    />\r\n\r\n                    <Drawer\r\n                        className=\"my-drawer\"\r\n                        style={{ minHeight: document.documentElement.clientHeight }}\r\n                        // enableDragHandle\r\n                        contentStyle={{ color: '#A6A6A6', textAlign: 'center', paddingTop: 0, width: \"100%\" }}\r\n                        sidebar={\r\n                            <div className=\"mt-4\">\r\n                                <Formik\r\n                                    initialValues={initialFormValues}\r\n                                    onSubmit={handleSubmit}\r\n                                    render={ToDoForm}\r\n                                    enableReinitialize={true}\r\n                                />\r\n                            </div>\r\n                        }\r\n                        open={visible}\r\n                        onOpenChange={onAdd}\r\n                    >\r\n                        <List>\r\n                            {\r\n                                isTimeScaleVisible ?\r\n                                    <TimeScale\r\n                                        taskList={props.taskList}\r\n                                        dateInterval={props.dateInterval}\r\n                                        deleteTask={props.deleteTask}\r\n                                        setDrawerData={setDrawerData}\r\n                                        setInitialFormValues={setInitialFormValues}\r\n                                        showDrawer={showDrawer}\r\n                                        onComplete={onComplete}\r\n                                    />\r\n                                    :\r\n                                    <TasksOnly\r\n                                        taskList={props.taskList}\r\n                                        dateInterval={props.dateInterval}\r\n                                        deleteTask={props.deleteTask}\r\n                                        setDrawerData={setDrawerData}\r\n                                        setInitialFormValues={setInitialFormValues}\r\n                                        showDrawer={showDrawer}\r\n                                        onComplete={onComplete}\r\n                                    />\r\n                            }\r\n                        </List>\r\n\r\n                    </Drawer>\r\n                </Card>\r\n            </WingBlank>\r\n        )\r\n    } else {\r\n        return <div>null</div>\r\n    }\r\n}\r\n\r\nexport default ToDoMobile\r\n\r\ntype TaskItemMobileType = {}\r\n\r\nconst TaskItemMobile: React.FC<any> = (props) => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const onSubTask = () => { }\r\n    const onEdit = (value: any) => {\r\n        //console.log('onEdit: ', value)\r\n        props.setDrawerData({\r\n            header: 'Edite \"' + value.name + '\"',\r\n            taskId: value.id\r\n        })\r\n\r\n        const splitTime = value.time.split(/:/)\r\n        let time = new Date()\r\n        time.setHours(parseInt(splitTime[0]))\r\n        time.setMinutes(parseInt(splitTime[1]))\r\n        time.setSeconds(parseInt(splitTime[2]))\r\n        time.setMilliseconds(0)\r\n\r\n        const splitDate = value.date.split(/-/)\r\n        let date = new Date()\r\n        date.setFullYear(parseInt(splitDate[0]))\r\n        date.setMinutes(parseInt(splitDate[1]))\r\n        date.setDate(parseInt(splitDate[2]))\r\n\r\n        props.setInitialFormValues({\r\n            name: value.name,\r\n            time: time,\r\n            date: date,\r\n            descriptions: value.descriptions ? value.descriptions : null\r\n        })\r\n\r\n        props.showDrawer()\r\n    }\r\n\r\n    const onItemOpen = () => {\r\n        // dispatch(actions.setSelectedTasks(props.element.id));\r\n    }\r\n\r\n    const onComplete = () => {\r\n        //console.log('onComplete')\r\n        props.onComplete(props.element)\r\n    }\r\n    //console.log(props)\r\n    return (\r\n        <SwipeAction\r\n            style={{ backgroundColor: 'gray' }}\r\n            autoClose\r\n            right={[\r\n                // {\r\n                //     text: 'SubTask',\r\n                //     onPress: () => { onSubTask() },\r\n                //     style: { backgroundColor: 'green', color: 'white' },\r\n                // },\r\n                {\r\n                    text: 'Delete',\r\n                    onPress: () => props.deleteTask(\r\n                        props.element.id,\r\n                        props.dateInterval.startDate.format('YYYY-MM-DD'),\r\n                        props.dateInterval.endDate.format('YYYY-MM-DD')\r\n                    ),\r\n                    style: { backgroundColor: '#F4333C', color: 'white' },\r\n                },\r\n            ]}\r\n            left={[\r\n                {\r\n                    text: 'Edit',\r\n                    onPress: () => { onEdit(props.element) },\r\n                    style: { backgroundColor: '#108ee9', color: 'white' },\r\n                },\r\n                {\r\n                    text: props.element.isCompleted ? 'Not Done' : 'Done',\r\n                    onPress: () => onComplete(),\r\n                    style: { backgroundColor: 'green', color: 'white' },\r\n                },\r\n            ]}\r\n        // onOpen={() => //console.log('global open')}\r\n        // onClose={() => //console.log('global close')}\r\n        >\r\n\r\n            <List.Item\r\n                onClick={onItemOpen}\r\n                key={props.element.id}\r\n                wrap\r\n            >\r\n                <div className=\"w-100 row \" key={props.element.id}>\r\n                    <div className=\"col-2 \">\r\n                        <span className=\"ml-3\">{props.element.time.split(/:/)[0] + ':' + props.element.time.split(/:/)[1]}</span>\r\n                    </div>\r\n                    <div className=\"col-10\">\r\n                        {props.element.isCompleted ?\r\n                            <span className=\"text-black-50 text-break ml-3\">{props.element.name}</span>\r\n                            :\r\n                            <span className=\"text-break ml-3\">{props.element.name}</span>\r\n                        }\r\n                    </div>\r\n                </div>\r\n\r\n            </List.Item>\r\n\r\n        </SwipeAction>\r\n    )\r\n}\r\n\r\ntype TimeScaleType = {\r\n    taskList: Array<TaskType> | null\r\n    dateInterval: {\r\n        startDate: moment.Moment,\r\n        endDate: moment.Moment,\r\n    },\r\n    deleteTask: (taskid: number, startDate: string, endDate: string) => void,\r\n    setDrawerData: (devarData: any) => void,\r\n    setInitialFormValues: (initialFormValues: any) => void,\r\n    showDrawer: any,\r\n    onComplete: (values: any) => void,\r\n}\r\nconst TimeScale: React.FC<TimeScaleType> = (props) => {\r\n    const [startHour, setStartHour] = useState<number>(0)\r\n\r\n    let startDate = moment(props.dateInterval.startDate)\r\n    // startDate.add(-2, 'days')\r\n\r\n    //console.log( moment(startDate.format('YYYY-MM-DD')).isSameOrBefore( moment(props.dateInterval.endDate.format('YYYY-MM-DD')) ) )\r\n    //console.log( startDate.isAfter(props.dateInterval.endDate) )\r\n\r\n    let dateArrey: any = []\r\n\r\n    //console.log('startDate: ', startDate.format('YYYY-MM-DD'))\r\n    //console.log('endDate: ', props.dateInterval.endDate.format('YYYY-MM-DD'))\r\n    //console.log('startDate props: ', props.dateInterval.startDate.format('YYYY-MM-DD'))\r\n\r\n\r\n\r\n    while (moment(startDate.format('YYYY-MM-DD')).isSameOrBefore(moment(props.dateInterval.endDate.format('YYYY-MM-DD')))) {\r\n        //console.log('1')\r\n        dateArrey.push(moment(startDate))\r\n        startDate.add(1, 'days')\r\n    }\r\n    //console.log(dateArrey)\r\n\r\n    const getTasksForHour = (date: string, hour: number) => {\r\n        let tasksForHour: Array<any> = []\r\n        if (props.taskList !== null) {\r\n            tasksForHour = props.taskList.map(item => {\r\n                if (item.date === date) {\r\n                    let itemTime = item.time.split(':')[0]\r\n                    //console.log(moment().hours(hour).format('HH'), ' === ', itemTime, moment().hours(hour).format('HH') === itemTime)\r\n                    if (moment().hours(hour).format('HH') === itemTime) {\r\n                        return <TaskItemMobile\r\n                            element={item}\r\n                            dateInterval={props.dateInterval}\r\n                            deleteTask={props.deleteTask}\r\n                            setDrawerData={props.setDrawerData}\r\n                            setInitialFormValues={props.setInitialFormValues}\r\n                            showDrawer={props.showDrawer}\r\n                            onComplete={props.onComplete}\r\n                        />\r\n                    }\r\n                }\r\n            })\r\n        }\r\n        //console.log(tasksForHour)\r\n        return tasksForHour\r\n\r\n    }\r\n\r\n    const getHours = (headlineDate: string) => {\r\n        let hours: any = []\r\n        for (let index = 0; index < 24; index++) {\r\n            hours.push(\r\n                <>\r\n                    <Divider key={index + 'to' + headlineDate} orientation=\"left\">\r\n                        {index <= 9 ? '0' : null}{index}:00\r\n                    </Divider>\r\n                    {getTasksForHour(headlineDate, index)}\r\n                </>\r\n            )\r\n        }\r\n        return hours\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {\r\n                dateArrey.map((date: moment.Moment) => {\r\n                    return (\r\n                        <>\r\n                            <h3 key={date.format('DD MMMM') + 'dateHeader'}>{date.format('DD MMMM')}</h3>\r\n                            {getHours(date.format('YYYY-MM-DD'))}\r\n                        </>\r\n                    )\r\n                })\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nconst TasksOnly: React.FC<TimeScaleType> = (props) => {\r\n\r\n    const startDate = moment(props.dateInterval.startDate)\r\n    let dateArrey: Array<moment.Moment> = []\r\n    while (moment(startDate.format('YYYY-MM-DD')).isSameOrBefore(moment(props.dateInterval.endDate.format('YYYY-MM-DD')))) {\r\n        dateArrey.push(moment(startDate))\r\n        startDate.add(1, 'days')\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {dateArrey.map((date: moment.Moment) => {\r\n                return (\r\n                    <>\r\n                        <h3>{date.format('DD MMMM')}</h3>\r\n                        {props.taskList?.map(task => {\r\n                            if (task.date === date.format('YYYY-MM-DD')) {\r\n                                return <TaskItemMobile\r\n                                    element={task}\r\n                                    dateInterval={props.dateInterval}\r\n                                    deleteTask={props.deleteTask}\r\n                                    setDrawerData={props.setDrawerData}\r\n                                    showDrawer={props.showDrawer}\r\n                                    setInitialFormValues={props.setInitialFormValues}\r\n                                    onComplete={props.onComplete}\r\n                                />\r\n                            }\r\n                        })}\r\n                    </>\r\n                )\r\n            })}\r\n        </>\r\n    )\r\n}","import React, { useState } from 'react'\r\nimport { Col, Row, Checkbox, Tooltip, Button, Spin } from 'antd'\r\nimport { CheckboxChangeEvent } from 'antd/lib/checkbox'\r\nimport { ListGroup } from 'react-bootstrap'\r\nimport { TaskType } from '../../../Types/types'\r\nimport { DeleteOutlined, EditOutlined } from '@ant-design/icons'\r\nimport { TaskItemPropsType } from './TaskItemContainer'\r\n\r\nexport type OwnTaskItemPropsType = {\r\n    element: TaskType,\r\n    onEdit: (value:any)=>void\r\n}\r\n\r\nconst TaskItem: React.FC<TaskItemPropsType> = (props) => {\r\n    // type PropsElementType = typeof props.element.isCompleted\r\n    const [checked, setChecked] = useState(props.element.isCompleted === 1 ? true : false)\r\n    const [deleteingInProgess, setDeleteingInProgess] = useState(false)\r\n\r\n    const onisCompletedChange = (e: CheckboxChangeEvent) => {\r\n        setChecked(!checked)\r\n        const values = { isCompleted: e.target.checked }\r\n        props.updateTask(values, props.element.id)\r\n    }\r\n\r\n    const onEdit = (e: any) => {\r\n        props.onEdit(e)\r\n    }\r\n\r\n    const deleteTask: (taskid: number) => void = (taskid) => {\r\n        setDeleteingInProgess(true)\r\n        props.deleteTask(taskid, props.dateInterval.startDate.format('YYYY-MM-DD'), props.dateInterval.endDate.format('YYYY-MM-DD'))\r\n    }\r\n\r\n    return (\r\n        <ListGroup.Item action className=\"\" key={props.element.id}>\r\n            <Row className=\"px-0 ml-0 ml-sm-5\">\r\n                <Col className=\"mx-2\">\r\n                    <Checkbox \r\n                        // checked={props.element.isCompleted === 1 ? true : false} \r\n                        onChange={onisCompletedChange} \r\n                        checked={checked}\r\n                        />\r\n                </Col>\r\n                <Col className=\"mx-2\">\r\n                    {props.element.time.split(':', 2).join(':')}\r\n                </Col>\r\n                <Col className=\"mx-2\">\r\n                    <Tooltip key={props.element.id} placement=\"topLeft\" title={props.element.descriptions}>\r\n                        <span\r\n                            style={{ textDecoration: checked ? 'line-through' : '' }}\r\n                            // className=\"text-break\"\r\n                        >\r\n                            {props.element.name}\r\n                        </span>\r\n                    </Tooltip>\r\n                </Col>\r\n                <Col className=\"mr-auto ml-0 mr-sm-2 ml-sm-auto\">\r\n                    <Button className=\"\"\r\n                        type=\"primary\"\r\n                        shape=\"circle\"\r\n                        size=\"small\"\r\n                        style={{ marginLeft: 10 }}\r\n                        onClick={()=>{onEdit(props.element)}}\r\n                        icon={\r\n                            <div className=\"d-flex flex-wrap align-content-start\">\r\n                                <EditOutlined className=\"ml-1\" style={{ fontSize: '14px' }} />\r\n                            </div>\r\n                        }\r\n                    />\r\n\r\n                    {!deleteingInProgess ? \r\n                    <Button \r\n                        danger\r\n                        type=\"primary\"\r\n                        shape=\"circle\"\r\n                        size=\"small\"\r\n                        style={{ marginLeft: 10 }}\r\n                        onClick={() => { deleteTask(props.element.id) }}\r\n                        icon={\r\n                            <div className=\"d-flex flex-wrap align-content-start\">\r\n                                <DeleteOutlined className=\"ml-1\" style={{ fontSize: '14px' }} />\r\n                            </div>\r\n                        }\r\n                    />\r\n                    :\r\n                    <Spin key=\"spin\" size=\"small\" />\r\n                    }\r\n                </Col>\r\n            </Row>\r\n\r\n        </ListGroup.Item>\r\n    )\r\n}\r\n\r\nexport default TaskItem\r\n","import {connect} from 'react-redux'\r\nimport TaskItem, { OwnTaskItemPropsType } from './TaskItem'\r\nimport {deleteTask, getTaskList, updateTask} from './../../../redux/taskReducer'\r\nimport {AppStateType} from '../../../redux/store'\r\n\r\nexport type MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype DispatchPropsType = {\r\n    deleteTask: (taskid: number, startDate: string, endDate: string) => void\r\n    getTaskList: (startDate: string, endDate: string) => void,\r\n    updateTask: (values: any, taskId: number) => void,\r\n}\r\n\r\nexport type TaskItemPropsType = MapPropsType & DispatchPropsType & OwnTaskItemPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        dateInterval: state.task.dateInterval,\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, DispatchPropsType, OwnTaskItemPropsType, AppStateType>(mapStateToProps, \r\n    {deleteTask, getTaskList, updateTask}) \r\n    (TaskItem)","import { TaskType } from \"../Types/types\"\r\n\r\nexport const sortTaskArrayByParams = (field: 'date' | 'time') => {\r\n    if (field === 'date') {\r\n        return (a: TaskType, b: TaskType) => a['date'] > b['date'] ? 1 : -1\r\n    } else {\r\n        return (a: TaskType, b: TaskType) => a['time'] > b['time'] ? -1 : 1\r\n    }\r\n}","import React, { useEffect, useState } from 'react'\r\nimport { TaskType } from '../../Types/types'\r\nimport moment from 'moment'\r\nimport { TimeScalePropsType } from './TimeScaleContainer'\r\nimport { Divider, Spin, Tooltip, message } from 'antd'\r\nimport TaskItem from './TaskItem/TaskItemContainer'\r\nimport { sortTaskArrayByParams } from '../../utils/array-helpers'\r\n\r\nexport type OwnTaskTimeScaleType = {\r\n    onEdit: (value:any)=>void\r\n}\r\nconst TimeScale: React.FC<TimeScalePropsType> = (props) => {\r\n    type SelestedDatesType = typeof props.dateInterval\r\n    const [selestedDates, setSelectedDates] = useState<SelestedDatesType>({ startDate: moment(null), endDate: moment() })\r\n    // const [isInterval, setIsInterval] = useState(\r\n    //     props.dateInterval.startDate.format('YYYY-MM-DD') === props.dateInterval.endDate.format('YYYY-MM-DD') ? false : true\r\n    //     )\r\n    useEffect(() => {\r\n        if (\r\n            props.dateInterval.startDate.isSame(selestedDates.startDate.format('YYYY-MM-DD'), \"day\" ) &&\r\n            props.dateInterval.endDate.isSame(selestedDates.endDate.format('YYYY-MM-DD'), \"day\" )\r\n        ) { }\r\n        else {\r\n            if (props.dateInterval.startDate !== null) {\r\n                props.getTaskList(\r\n                    props.dateInterval.startDate.format('YYYY-MM-DD'),\r\n                    props.dateInterval.endDate.format('YYYY-MM-DD')\r\n                )\r\n                setSelectedDates(props.dateInterval)\r\n            }\r\n        }\r\n    }, [props.dateInterval])\r\n\r\n    useEffect(() => {\r\n        if (props.errorMessage !== null) {\r\n            message.success(props.errorMessage)\r\n        }\r\n    }, [props.errorMessage])\r\n    \r\n    //console.log(props.dateInterval)\r\n\r\n    if (props.taskList !== undefined) {\r\n        if (props.taskList !== null) {\r\n            return (\r\n                <>\r\n                    {getTimeScaleArrey(props.taskList, props.isInterval, props.onEdit)}\r\n                </>\r\n            )\r\n        } else {\r\n            return (\r\n                <Spin key=\"spin\" size=\"large\" />\r\n            )\r\n        }\r\n    } else {\r\n        return <div>Authorization required to get a list of tasks</div>\r\n    }\r\n    \r\n}\r\n\r\nexport default TimeScale\r\n\r\n\r\nconst getTimeScaleArrey = (taskList: Array<TaskType>, isInterval:boolean, onEdit:(value:any)=>void): Array<React.ReactElement<string>> => {\r\n    let timeScaleArrey: Array<React.ReactElement<string>> = []\r\n    let tomorowTasks: Array<TaskType> = []\r\n\r\n    //console.log('isInterval: ', isInterval)\r\n\r\n    taskList.sort(sortTaskArrayByParams('time')).sort(sortTaskArrayByParams('date'))\r\n\r\n    const getHeadlineLabel = (task: TaskType) => {\r\n        return moment(task.date).format('D MMMM')\r\n    }\r\n\r\n    let headlineDate: string | null = null\r\n\r\n    if (taskList !== null && taskList.length > 0) {\r\n        headlineDate = getHeadlineLabel(taskList[0])\r\n        timeScaleArrey.push(\r\n            <h5 \r\n                key={headlineDate + 'title'}\r\n                className={isInterval ? \"text-left\" : \"\"}\r\n            >\r\n                {headlineDate}:\r\n            </h5>\r\n        )\r\n    }\r\n\r\n    for (let index: number = 0; index < 24; index++) {\r\n        if (taskList.length > 0) {\r\n            if (!isInterval && index > 7) {\r\n                timeScaleArrey.push(\r\n                    <Divider key={index + 'to' + headlineDate} orientation=\"left\">\r\n                        {index <= 9 ? '0' : null}{index}:00\r\n                    </Divider>\r\n                )\r\n            }\r\n        } else {\r\n            timeScaleArrey.push(<h3 key=\"noTasks\">no tasks</h3>)\r\n            break\r\n        }\r\n\r\n        if (taskList !== null) {\r\n            for (let i = 0; i < taskList.length; i++) {\r\n                const element: TaskType = taskList[i]\r\n                const timeVal = Number(element.time.split(':', 1))\r\n                const nextHour = index + 1\r\n                if (timeVal >= index && timeVal < nextHour) {\r\n                    if (getHeadlineLabel(element) === headlineDate) {\r\n                        timeScaleArrey.push(\r\n                            <Tooltip key={index + '-' + element.id} placement=\"topLeft\" title={element.descriptions}>\r\n                                <TaskItem element={element} onEdit={onEdit}/>\r\n                            </Tooltip>\r\n                        )\r\n                    }\r\n                    else {\r\n                        tomorowTasks.push(element)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (tomorowTasks.length > 0) {\r\n        timeScaleArrey = timeScaleArrey.concat(getTimeScaleArrey(tomorowTasks, isInterval, onEdit))\r\n    }\r\n\r\n    return timeScaleArrey\r\n}","import {connect} from 'react-redux'\r\nimport TimeScale from './TimeScale'\r\nimport {getTaskList} from './../../redux/taskReducer'\r\nimport { AppStateType } from '../../redux/store'\r\nimport { OwnTaskTimeScaleType } from './TimeScale'\r\n\r\nexport type MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype DispatchPropsType = {\r\n    getTaskList: (startDate: string, endDate: string) => void\r\n}\r\n\r\nexport type TimeScalePropsType = MapPropsType & DispatchPropsType & OwnTaskTimeScaleType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        taskList: state.task.taskList,\r\n        taskSaveStatus: state.task.taskSaveStatus,\r\n        taskListIsFetching: state.task.taskListIsFetching,\r\n        dateInterval: state.task.dateInterval,\r\n        errorMessage: state.task.errorMessage,\r\n        isInterval: state.task.isInterval\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, DispatchPropsType, OwnTaskTimeScaleType, AppStateType>(mapStateToProps, \r\n    {getTaskList}) \r\n    (TimeScale)\r\n\r\n\r\n","import { Card, Drawer } from 'antd'\r\nimport React, { useEffect, useState } from 'react'\r\nimport ToDoHeaderContainer from './ToDoHeader/ToDoHeaderContainer'\r\nimport TimeScale from '../TimeScale/TimeScaleContainer'\r\nimport { Formik } from 'formik'\r\nimport ToDoForm from './ToDoForm/ToDoForm'\r\nimport moment from \"moment\"\r\n\r\ntype InitialDrewerDataType = {\r\n    header: string,\r\n    taskId: false | number\r\n}\r\n\r\nconst initialDrewerData: InitialDrewerDataType = {\r\n    header: 'Create New Task',\r\n    taskId: false\r\n}\r\n\r\nconst zeroTime = moment()\r\nzeroTime.hours(0)\r\nzeroTime.minutes(0)\r\nzeroTime.seconds(0)\r\nzeroTime.milliseconds(0)\r\n\r\ntype InitialValuesType = {\r\n    name: string | null,\r\n    time: moment.Moment,\r\n    date: moment.Moment,\r\n    descriptions: string | null \r\n\r\n}\r\nconst initialValues: any = {\r\n    name: '',\r\n    time: zeroTime,\r\n    date: moment(),\r\n    descriptions: ''\r\n\r\n}\r\n\r\nconst ToDoBrowser: React.FC<any> = (props) => {\r\n    const [visible, setVisible] = useState(false)\r\n    const [isModalVisible, setIsModalVisible] = useState(false)\r\n    const [drawerData, setDrawerData] = useState(initialDrewerData)\r\n    const [initialFormValues, setInitialFormValues] = useState(initialValues)\r\n\r\n    useEffect(() => {\r\n        if (props.taskList === null) {\r\n            props.getTaskList(props.dateInterval.startDate.format('YYYY-MM-DD'), props.dateInterval.endDate.format('YYYY-MM-DD'))\r\n        }\r\n    }, [props.getTaskList])\r\n    useEffect(() => {\r\n        //console.log('useEffect')\r\n    }, [initialFormValues])\r\n\r\n    const onTaskEdit = (value:any) => {\r\n        //console.log('onTaskEdit: ', value)\r\n        setDrawerData({\r\n            header: 'Edite \"'+value.name+'\"',\r\n            taskId: value.id\r\n        })\r\n\r\n        const splitTime = value.time.split(/:/)\r\n\r\n        setInitialFormValues({\r\n            name: value.name,\r\n            time: moment().hours(splitTime[0]).minutes(splitTime[1]).seconds(0),\r\n            date: moment(value.date),\r\n            descriptions: value.descriptions ? value.descriptions : null\r\n        })\r\n        \r\n        showDrawer()\r\n    }\r\n\r\n    const showDrawer = (): void => {\r\n        //console.log('drawerData', drawerData)\r\n        if (!drawerData.taskId) {\r\n            //console.log('empty')\r\n        }\r\n        //console.log(initialFormValues)\r\n        setVisible(true)\r\n    }\r\n\r\n    const onClose = (): void => {\r\n        //console.log('onClose')\r\n\r\n        setInitialFormValues(null)\r\n        setInitialFormValues({...initialValues})\r\n\r\n        setDrawerData({...initialDrewerData})\r\n        setVisible(false)\r\n        //console.log('drawerData: ', drawerData)\r\n    }\r\n\r\n    const showModal = () => {\r\n        setIsModalVisible(true)\r\n    }\r\n    const onAdd = () => {\r\n        // setDrawerData(initialDrewerData)\r\n        // setInitialFormValues(initialValues)\r\n        // showDrawer()\r\n    }\r\n\r\n    const handleOk = () => {\r\n        setIsModalVisible(false)\r\n    }\r\n\r\n    const handleCancel = () => {\r\n        setIsModalVisible(false)\r\n    }\r\n\r\n    const handleSubmit = (formProps: any) => {\r\n        let formPropsCopy: any = { ...formProps }\r\n        // delete formPropsCopy.selectOptions\r\n        // delete formPropsCopy.taskTypes\r\n        if (formPropsCopy.time !== undefined) {\r\n            formPropsCopy.time = formPropsCopy.time.format('HH:mm:ss')\r\n        }\r\n        if (formPropsCopy.date !== undefined) {\r\n            formPropsCopy.date = formPropsCopy.date.format('YYYY-MM-DD')\r\n        }\r\n\r\n        formPropsCopy.user_id = props.userId\r\n        //console.log('handleSubmit', formPropsCopy)\r\n        if (!drawerData.taskId) {\r\n            props.createNewTask(formPropsCopy, true)\r\n        } else {\r\n        //     //console.log(formPropsCopy)\r\n            props.updateTask(formPropsCopy, drawerData.taskId)\r\n        }\r\n        // setInitialFormValues({...initialValues})\r\n        onClose()\r\n    }\r\n\r\n    //console.log('ToDoBrowser initialFormValues: ', initialFormValues)\r\n\r\n    return (\r\n        <Card\r\n            title={ <ToDoHeaderContainer \r\n                        showDrawer={showDrawer} \r\n                        showModal={showModal}\r\n                    />}\r\n            bordered={false}\r\n        >\r\n            <TimeScale onEdit={onTaskEdit}/>\r\n\r\n            <Drawer\r\n                title={drawerData.header}\r\n                placement=\"right\"\r\n                closable={true}\r\n                onClose={onClose}\r\n                visible={visible}\r\n                width=\"90%\"\r\n            >\r\n\r\n                <Formik\r\n                    initialValues={initialFormValues}\r\n                    // initialValues={{}}\r\n                    onSubmit={handleSubmit}\r\n                    render={ToDoForm}\r\n                    enableReinitialize={true}\r\n                />\r\n\r\n            </Drawer>\r\n\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default ToDoBrowser","import {connect} from 'react-redux'\r\nimport ToDoMobile from './ToDoMobile'\r\nimport { isMobile } from 'react-device-detect'\r\nimport {getTaskList, createNewTask, updateTask, deleteTask} from '../../redux/taskReducer'\r\nimport { AppStateType } from '../../redux/store'\r\nimport ToDoBrowser from './ToDoBrowser'\r\nimport { NewTaskDataType } from '../../Types/types'\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    getTaskList: (start_date: string, end_date:string)=>void,\r\n    createNewTask: (values: NewTaskDataType, reload:boolean)=>void,\r\n    updateTask: (values: any, taskId: number)=>void,\r\n    deleteTask: (taskid: number, startDate: string, endDate:string)=>void,\r\n}\r\n\r\nexport type ToDoListPropsType = MapPropsType & MapDispatchPropsType & OwnToDoListPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        taskList: state.task.taskList,\r\n        viewSettings: state.auth.viewSettings,\r\n        isInterval: state.task.isInterval,\r\n        dateInterval: state.task.dateInterval,\r\n        userId: state.auth.user?.id\r\n    }\r\n}\r\n\r\ntype OwnToDoListPropsType = {}\r\n\r\nconst component: any = isMobile ? ToDoMobile : ToDoBrowser\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnToDoListPropsType, AppStateType>(mapStateToProps, \r\n    {getTaskList, createNewTask, updateTask, deleteTask}) \r\n    ( component )\r\n    \r\n\r\n","import {getAuthUserData} from \"./authReducer\"\r\nimport {InferActionsTypes} from './store'\r\n\r\nlet initialState = {\r\n    initialized: false,\r\n    location: '/'\r\n}\r\n\r\n// export type InitialStateType = typeof initialState\r\nexport type InitialStateType ={\r\n    initialized: boolean,\r\n    location: string\r\n}\r\n\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\n\r\nconst appReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/APP/INITIALIZED_SUCCESS':\r\n            //console.log('INITIALIZED_SUCCESS: true')\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            }\r\n\r\n        case 'SN/APP/SET_LOCATION':\r\n            //console.log('location in appReducer:', action.location)\r\n            return  {\r\n                ...state,\r\n                location: action.location\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    initializedSuccess: () => ({type: 'SN/APP/INITIALIZED_SUCCESS'} as const),\r\n    setLocation: (location: string) => ({type: 'SN/APP/SET_LOCATION', location} as const),\r\n}\r\n\r\nexport const initializeApp = () => (dispatch: any) => {\r\n    let promise = dispatch(getAuthUserData());\r\n    Promise.all([promise])\r\n        .then(() => {\r\n            //console.log('dispatch(actions.initializedSuccess());')\r\n            dispatch(actions.initializedSuccess());\r\n        });\r\n}\r\n\r\nexport const addLocation = (location: string) => (dispatch: any) => {\r\n    dispatch(actions.setLocation(location));\r\n}\r\n\r\n\r\nexport default appReducer;","import { TaskListType } from '../Types/types'\r\nimport {instance} from './api'\r\n\r\n\r\nif (localStorage.getItem('remember_token')) {\r\n    instance.defaults.headers.common['X-Auth-Token'] = localStorage.getItem('remember_token')\r\n}\r\nif (sessionStorage.getItem('remember_token')) {\r\n    instance.defaults.headers.common['X-Auth-Token'] = sessionStorage.getItem('remember_token')\r\n}\r\n\r\nexport const taskListAPI = {\r\n    getTaskList() {\r\n        return instance.get<TaskListType>(`taskList`)\r\n        .then(response => {\r\n            //console.log(response)\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                //console.log(err.response)\r\n                return err.response\r\n            } else if (err.request) {\r\n                //console.log('request', err.request)\r\n            } else {\r\n                //console.log('anything else: ', err)\r\n            }\r\n            return null\r\n        })\r\n    },\r\n    createNewTaskList(values: any) {\r\n        return instance.post<TaskListType>(`taskList`, values)\r\n        .then(response => {\r\n            //console.log(response)\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                //console.log(err.response)\r\n                return err.response\r\n            } else if (err.request) {\r\n                //console.log('request', err.request)\r\n            } else {\r\n                //console.log('anything else: ', err)\r\n            }\r\n            return null\r\n        })\r\n    },\r\n    deleteTask(taskId: number) {\r\n        return instance.delete<TaskListType>(`taskList/${taskId}`).then(response => {\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                return err.response\r\n            } else if (err.request) {\r\n                //console.log('request', err.request)\r\n            } else {\r\n                //console.log('anything else: ', err)\r\n            }\r\n            return null\r\n        })\r\n    },\r\n    updateTask(values: any, taskId: number) {\r\n        return instance.put<TaskListType>(`taskList/${taskId}`, values)\r\n        .then(response => {\r\n            //console.log(response)\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                //console.log(err.response)\r\n                return err.response\r\n            } else if (err.request) {\r\n                //console.log('request', err.request)\r\n            } else {\r\n                //console.log('anything else: ', err)\r\n            }\r\n            return null\r\n        })\r\n    }\r\n}\r\n//descriptions\r\n//descriptions","import { Dispatch } from \"react\";\r\nimport { BaseThunkType, InferActionsTypes } from \"./store\";\r\nimport { taskListAPI } from './../api/taskListAPI'\r\nimport { TaskListType } from \"../Types/types\";\r\n\r\n\r\nexport type InitialStateType = {\r\n    taskList: Array<TaskListType>,\r\n    taskListIsFetching: boolean,\r\n    isTaskListLoaded: boolean,\r\n    selectedTasks: Array<number>\r\n    // taskSaveStatus: 'no' | 'inProgress' | 'success' | 'error'\r\n    // errorMessage: null | string,\r\n    // isInterval: boolean,\r\n    // dateInterval: {\r\n    //     startDate: moment.Moment,\r\n    //     endDate: moment.Moment\r\n    // }\r\n}\r\n\r\nlet initialState:InitialStateType = {\r\n    taskList: [],\r\n    taskListIsFetching: false,\r\n    isTaskListLoaded: false,\r\n    selectedTasks:[]\r\n    // taskSaveStatus: 'no',\r\n    // errorMessage: null,\r\n    // isInterval: false,\r\n    // dateInterval: {\r\n    //     startDate: moment(),\r\n    //     endDate: moment()\r\n    // }\r\n}\r\n\r\nconst taskListReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/TASK_LIST/BACK_SELECTED_TASK':\r\n            let newSelectedTasks: Array<number> = [...state.selectedTasks]\r\n            if (newSelectedTasks.length > 0) {\r\n                newSelectedTasks.pop()\r\n            }              \r\n            return { ...state, selectedTasks: newSelectedTasks }\r\n        case 'SN/TASK_LIST/SET_SELECTED_TASK':\r\n            //console.log( { ...state, selectedTasks: [...state.selectedTasks, action.taskId] })\r\n            return { ...state, selectedTasks: [...state.selectedTasks, action.taskId] }\r\n        case 'SN/TASK_LIST/SET_TASK_LIST':\r\n            return { ...state, taskList: action.taskList, isTaskListLoaded: true}\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    setTaskList: (taskList: Array<any>) => ({ type: 'SN/TASK_LIST/SET_TASK_LIST', taskList } as const),\r\n    setSelectedTasks: (taskId: number) => ({ type: 'SN/TASK_LIST/SET_SELECTED_TASK', taskId } as const),\r\n    backSelectedTasks: () => ({type: 'SN/TASK_LIST/BACK_SELECTED_TASK'} as const),\r\n    // setTaskSaveStatus: (taskSaveStatus: 'no' | 'inProgress' | 'success' | 'error') => ({ type: 'SN/TASK/SET_TASK_SAVE_STATUS', taskSaveStatus } as const),\r\n    // setErrorMessage: (message: string | null) => ({type: 'SN/TASK/SET_ERROR_MESSAGE', message} as const),\r\n    // setTaskListIsFetching: (isFetchingValue: boolean) => ({type: 'SN/TASK/SET_TASK_LIST_IS_FETCHING', isFetchingValue} as const),\r\n    // setIsInterval: (isInterval: boolean, date: {startDate: moment.Moment, endDate: moment.Moment}) => ({type: 'SN/TASK/SET_IS_INTERVAL', isInterval, date} as const)\r\n}\r\n\r\nexport const getTaskList = (): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        // dispatch(actions.setTaskListIsFetching(true))\r\n\r\n        let response = await taskListAPI.getTaskList()\r\n        //console.log(response)\r\n\r\n        if (response !== undefined && response !== null) {\r\n            dispatch(actions.setTaskList(response.data.Tasks))\r\n        } else {\r\n            // add error message\r\n        }\r\n        // dispatch(actions.setTaskListIsFetching(false))\r\n    }\r\n}\r\n\r\nexport const createNewTaskList = (values: any): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        let response = await taskListAPI.createNewTaskList(values)\r\n        //console.log(response)\r\n        dispatch(actions.setTaskList(response.data.Tasks))\r\n    }\r\n}\r\n\r\nexport const deleteTaskList = (taskId: number): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        let response = await taskListAPI.deleteTask(taskId)\r\n        //console.log(response)\r\n        dispatch(actions.setTaskList(response.data.Tasks))\r\n    }\r\n}\r\n\r\nexport const updateTaskList = (values: any, taskId: number): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        let response = await taskListAPI.updateTask(values, taskId)\r\n        //console.log(response)\r\n        dispatch(actions.setTaskList(response.data.Tasks))\r\n    }\r\n}\r\n\r\nexport default taskListReducer\r\n\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsTypes>\r\nexport type DispatchType = Dispatch<ActionsTypes>","import {Action, applyMiddleware, combineReducers, createStore} from \"redux\"\r\nimport thunkMiddleware, {ThunkAction} from \"redux-thunk\"\r\nimport appReducer from \"./appReducer\"\r\nimport authReducer from \"./authReducer\"\r\nimport taskListReducer from \"./TaskListReducer\"\r\nimport taskReducer from './taskReducer'\r\n\r\n\r\nlet rootReducer = combineReducers({\r\n    task: taskReducer,\r\n    app: appReducer,\r\n    auth: authReducer,\r\n    taskList: taskListReducer,\r\n})\r\n\r\ntype rootReducerType = typeof rootReducer\r\nexport type AppStateType = ReturnType<rootReducerType>\r\n\r\nexport type InferActionsTypes<T> = T extends { [keys: string]: (...args: any[]) => infer U } ? U : never\r\nexport type BaseThunkType<A extends Action = Action, R = Promise<void>> = ThunkAction<R, AppStateType, unknown, A>\r\n\r\nlet store = createStore(rootReducer, applyMiddleware(thunkMiddleware))\r\n\r\n//console.log('global State:', store.getState())\r\n\r\nexport default store","import React, {useState} from 'react'\r\nimport { Button, Menu } from 'antd';\r\nimport {Link, useHistory} from 'react-router-dom'\r\n// import { MailOutlined, AppstoreOutlined, SettingOutlined } from '@ant-design/icons';\r\nimport {LogoutOutlined} from '@ant-design/icons'\r\nimport {MenuBrowserPropsType} from './MenuBrowserConainer'\r\nimport { TaskListType } from '../../Types/types';\r\nimport { MenuDataType } from './Header';\r\n\r\nconst { SubMenu } = Menu;\r\n\r\nexport type OwnMenuBrowserPropsType = {\r\n    menuData: any,\r\n    // logout: any,\r\n    // appLocation: string | null\r\n}\r\n\r\nconst MenuBrowser: React.FC<MenuBrowserPropsType> = (props) => {\r\n    let history = useHistory();\r\n    const [state, setState] = useState<Array<string>>([])\r\n    const handleClick = (e: any | undefined) => {\r\n        //console.log('click ', e);\r\n        // setState({ current: e.key });\r\n    }\r\n\r\n    const getMenuItem = (childs: any):any => {\r\n        // return <Menu.Item key=\"setting:1\">Option 1</Menu.Item>\r\n        const menuItems = childs.map( (item: any) => {\r\n            return (\r\n                <Menu.Item key={item.value}>\r\n                    <Link to={item.value}>{item.label}</Link>\r\n                </Menu.Item>\r\n            )\r\n        })\r\n        return menuItems\r\n    }\r\n\r\n    const getSubMenu = () => {\r\n        //console.log(props.menuData)\r\n        const subMenu = props.menuData.map( (item: any) => {\r\n            //console.log(item)\r\n            return (\r\n                <SubMenu \r\n                    key={item.value} \r\n                    // icon={<MailOutlined />}\r\n                    title={item.label}\r\n                >\r\n                    {getMenuItem(item.children)}\r\n                </SubMenu >\r\n            )\r\n        })\r\n        // subMenu.push(\r\n        //     <Menu.Item key=\"login\">\r\n        //         <Link to={props.appLocation +\"login\"} >Login</Link>\r\n        //     </Menu.Item>\r\n        // )\r\n        return subMenu\r\n    }\r\n\r\n    const onLogout = () => {\r\n        // onChange(['', ''])\r\n        history.replace(props.appLocation+'login')\r\n        props.logout()\r\n    }\r\n\r\n    //console.log(props)\r\n\r\n    return (\r\n        <Menu \r\n            onClick={handleClick} \r\n            // selectedKeys={[current]} \r\n            mode=\"horizontal\"\r\n            theme=\"dark\"\r\n        >\r\n            {getSubMenu()}\r\n\r\n            {!props.isAuth ? \r\n                <Menu.Item key=\"login\">\r\n                    <Link to={props.appLocation +\"login\"} >Login</Link>\r\n                </Menu.Item>\r\n            :\r\n                <SubMenu \r\n                    key={props.user?.name} \r\n                    title={props.user?.name}\r\n                >\r\n                    <Menu.Item key=\"login\" onClick={onLogout}>\r\n                        {/* <Link to={props.appLocation +\"login\"} > */}\r\n                            Logout\r\n                        {/* </Link> */}\r\n                    </Menu.Item>\r\n                </SubMenu >\r\n                \r\n            }\r\n        </Menu>\r\n    )\r\n}\r\n\r\nexport default MenuBrowser","import {connect} from 'react-redux'\r\nimport MenuBrowser, { OwnMenuBrowserPropsType } from './MenuBrowser'\r\nimport { AppStateType } from '../../redux/store'\r\nimport {actions} from './../../redux/authReducer'\r\n\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    logout: ()=>void\r\n}\r\n\r\nexport type MenuBrowserPropsType = MapPropsType & MapDispatchPropsType & OwnMenuBrowserPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n        user: state.auth.user,\r\n        appLocation: state.app.location\r\n        \r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnMenuBrowserPropsType, AppStateType>(mapStateToProps, \r\n    {logout: actions.logout}) \r\n    (MenuBrowser)\r\n    \r\n\r\n","import { Popover, Icon } from 'antd-mobile'\r\nimport React, { useState } from 'react'\r\n\r\nconst Item = Popover.Item\r\n\r\nconst MenuPopover: React.FC<any> = (props) => {\r\n    const [visible, setVisible] = useState(false)\r\n\r\n    const onSelect = (opt: any, index?: number) => {\r\n        //console.log(opt.props);\r\n        setVisible(false)\r\n        if(opt.props.children === \"Logout\") {\r\n            props.onLogout()\r\n        }\r\n    }\r\n\r\n    const handleVisibleChange = (visible: boolean) => {\r\n        setVisible(visible)\r\n    }\r\n\r\n    const fortest:String = \"fortest\"\r\n\r\n    return (\r\n        <div className=\"mr-3\">\r\n        <Popover \r\n            mask\r\n            visible={visible}\r\n            overlay={[\r\n                (<Item key=\"1\" >Logout</Item>),\r\n                (<Item key=\"2\" >Info</Item>),\r\n                (<Item key=\"3\" >Help</Item>),\r\n            ]}\r\n            onVisibleChange={handleVisibleChange}\r\n            onSelect={onSelect}\r\n        >\r\n            <div style={{\r\n                height: '100%',\r\n                padding: '0 15px',\r\n                marginRight: '-20px',\r\n                display: 'flex',\r\n                alignItems: 'center',\r\n            }}\r\n            >\r\n                <Icon type=\"ellipsis\" />\r\n            </div>\r\n        </Popover>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MenuPopover","import React, { useState } from 'react'\r\nimport { Menu, ActivityIndicator, NavBar, Button } from 'antd-mobile'\r\nimport { ValueType } from 'antd-mobile/lib/menu/PropsType'\r\nimport './MenuMobile.css'\r\nimport { useHistory, useLocation } from 'react-router-dom'\r\nimport { MenuDataType } from './Header'\r\nimport { MenuMobilePropsType } from './MenuMobileContainer'\r\nimport { Link } from 'react-router-dom'\r\nimport { LogoutOutlined } from '@ant-design/icons'\r\nimport MenuPopover from './MenuPopover'\r\n\r\nexport type OwnMenuMobilePropsType = {\r\n    menuData: MenuDataType,\r\n    logout: () => void\r\n}\r\n\r\nconst MenuMobile: React.FC<MenuMobilePropsType> = (props) => {\r\n    let history = useHistory();\r\n    const location = useLocation();\r\n    const [show, setShow] = useState(false)\r\n    type DataType = typeof props.menuData\r\n    const data = [...props.menuData]\r\n    const [initData, setInitData] = useState<DataType>(data)\r\n\r\n    const getSelectedMenuItem = (): ValueType => {\r\n        let response: ValueType = [data[0].value, '']\r\n        data.forEach((dataItem: any) => {\r\n            if (dataItem.children) {\r\n                dataItem.children.forEach((item: any) => {\r\n                    //console.log('/',item.value,'===',location.pathname)\r\n                    if (item.value === location.pathname) {\r\n                        response = [dataItem.value, item.value]\r\n                    }\r\n                })\r\n            }\r\n        })\r\n        //console.log('getSelectedMenuItem response: ', response)\r\n        return response\r\n    }\r\n\r\n    const [selectedMenuItem, setSelectedMenuItem] = useState<ValueType>(getSelectedMenuItem())\r\n\r\n    const handleClick = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\r\n        e.preventDefault(); // Fix event propagation on Android\r\n        setShow(!show)\r\n        // if (!initData) {\r\n        //     setInitData(data)\r\n        // }\r\n    }\r\n\r\n    const onChange = (value?: ValueType | undefined) => {\r\n        //console.log('input values: ', value)\r\n        if (value) {\r\n            let subMenu = value[0]\r\n\r\n            data.forEach((dataItem) => {\r\n                if (dataItem.value === value[0]) {\r\n                    subMenu = value[0]\r\n                    if (dataItem.children && value[1]) {\r\n                        dataItem.children.forEach((cItem: { value: string | string[]; label: any }) => {\r\n                            if (cItem.value === value[1]) {\r\n                                history.replace(`${cItem.value}`)\r\n                                setShow(false)\r\n                            }\r\n                        })\r\n                    }\r\n                }\r\n            })\r\n        \r\n            if (subMenu === '') {\r\n                subMenu = data[0].value\r\n            }\r\n            //console.log('set values: ', [subMenu, value[1]])\r\n            setSelectedMenuItem([subMenu, value[1]])\r\n        }\r\n        \r\n    }\r\n\r\n    const onMaskClick = () => {\r\n        setShow(false)\r\n    }\r\n\r\n    const menuEl = (\r\n        <Menu\r\n            className=\"foo-menu\"\r\n            data={initData}\r\n            value={selectedMenuItem}\r\n            onChange={onChange}\r\n            height={document.documentElement.clientHeight * 0.6}\r\n        />\r\n    );\r\n\r\n    const loadingEl = (\r\n        <div style={{ width: '100%', height: document.documentElement.clientHeight * 0.6, display: 'flex', justifyContent: 'center' }}>\r\n            <ActivityIndicator size=\"large\" />\r\n        </div>\r\n    );\r\n\r\n    //console.log(props)\r\n\r\n    const onLogout = () => {\r\n        onChange(['', ''])\r\n        history.replace(props.appLocation + 'login')\r\n        props.logout()\r\n    }\r\n\r\n    return (\r\n        <div className={show ? 'menu-active' : ''}>\r\n            <div>\r\n                <NavBar\r\n                    leftContent=\"\"\r\n                    mode=\"light\"\r\n                    icon={<img src=\"https://gw.alipayobjects.com/zos/rmsportal/iXVHARNNlmdCGnwWxQPH.svg\" className=\"am-icon am-icon-md\" alt=\"\" />}\r\n                    onLeftClick={handleClick}\r\n                    className=\"top-nav-bar\"\r\n                    rightContent={props.isAuth ? <MenuPopover onLogout={onLogout} /> : null}\r\n                >\r\n                    {!props.isAuth ?\r\n                        <Link\r\n                            to={props.appLocation + \"login\"}\r\n                            onClick={() => { onChange(['', '']) }}\r\n                        >\r\n                            <span className=\"text-white\">Login</span>\r\n                        </Link>\r\n                        :\r\n                        <>\r\n                        <div>\r\n                            {props.user?.name}\r\n                            {/* <Button className=\"ml-5\" size=\"small\" icon={<LogoutOutlined />} onClick={onLogout} inline >\r\n\r\n                            </Button> */}\r\n                        </div>\r\n                        {/* <div className=\"w-100\">\r\n                            \r\n                        </div> */}\r\n                        </>\r\n                    }\r\n                    \r\n\r\n                </NavBar>\r\n            </div>\r\n            {show ? initData ? menuEl : loadingEl : null}\r\n            {show ? <div className=\"menu-mask\" onClick={onMaskClick} /> : null}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default (MenuMobile)\r\n\r\n\r\n","import {connect} from 'react-redux'\r\nimport MenuMobile, { OwnMenuMobilePropsType } from './MenuMobile'\r\n// import {getTaskList} from '../../redux/taskReducer'\r\nimport { AppStateType } from '../../redux/store'\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    // getTaskList: (start_date: string, end_date:string)=>void\r\n}\r\n\r\nexport type MenuMobilePropsType = MapPropsType & MapDispatchPropsType & OwnMenuMobilePropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        appLocation: state.app.location,\r\n        isAuth: state.auth.isAuth,\r\n        user: state.auth.user\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnMenuMobilePropsType, AppStateType>(mapStateToProps, \r\n    {}) \r\n    (MenuMobile)\r\n    \r\n\r\n","import React from 'react'\r\nimport {\r\n    BrowserView,\r\n    MobileView,\r\n    isBrowser,\r\n    isMobile\r\n} from \"react-device-detect\"\r\nimport { HeaderPropsType } from './HeaderContainer'\r\nimport MenuBrowser from './MenuBrowserConainer'\r\nimport MenuMobile from './MenuMobileContainer'\r\n// import {useHistory, useLocation} from 'react-router-dom'\r\n\r\n// type MenuDataType = Array<any>\r\n\r\nexport type OwnHeaderPropsType = {}\r\n\r\nconst Header: React.FC<HeaderPropsType> = (props) => {\r\n    // const location = useLocation()\r\n    //console.log('Header')\r\n\r\n    if (isMobile) {\r\n        return <MenuMobile menuData={menuData(props.appLocation)} logout={props.logout}/>\r\n    } else {\r\n        return <MenuBrowser menuData={menuData(props.appLocation)}/>\r\n    }\r\n}\r\n\r\nexport default Header\r\n\r\n\r\nexport type MenuDataType = ReturnType<typeof menuData>\r\n\r\nconst menuData = (appLocation: string) => {\r\n    const data = [\r\n    {\r\n        value: 'planning',\r\n        label: 'Planning',\r\n        children: [\r\n            {\r\n                label: 'ToDo list',\r\n                // label: <Link to='/toDoList'>ToDo list</Link>,\r\n                value: appLocation + 'toDoList',\r\n                disabled: false,\r\n            },\r\n            {\r\n                label: 'Tasks tree',\r\n                value: appLocation + 'tasksTree',\r\n            },\r\n            {\r\n                label: 'Analysis',\r\n                value: appLocation + 'analysis',\r\n                disabled: true,\r\n            }\r\n        ],\r\n    }, {\r\n        value: 'catalog',\r\n        label: 'Catalog',\r\n        children: [\r\n            {\r\n                label: 'Products',\r\n                value: appLocation + 'products',\r\n            }\r\n            , {\r\n                label: 'Providers',\r\n                value: appLocation + 'providers',\r\n            }\r\n        ],\r\n    },\r\n    {\r\n        value: 'orders',\r\n        label: 'Orders',\r\n        // isLeaf: true,\r\n        children: [\r\n            {\r\n                label: 'Orders',\r\n                value: appLocation + 'orders',\r\n            },\r\n            {\r\n                label: 'Leads',\r\n                value: appLocation + 'leads',\r\n            },\r\n        ],\r\n    },\r\n    ]\r\n    return data\r\n}\r\n","import {connect} from 'react-redux'\r\nimport Header, { OwnHeaderPropsType } from './Header'\r\nimport {actions} from '../../redux/authReducer'\r\nimport { AppStateType } from '../../redux/store'\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    logout: ()=>void\r\n}\r\n\r\nexport type HeaderPropsType = MapPropsType & MapDispatchPropsType & OwnHeaderPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        appLocation: state.app.location,\r\n        user: state.auth.user\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnHeaderPropsType, AppStateType>(mapStateToProps, \r\n    {logout: actions.logout}) \r\n    (Header)\r\n    \r\n\r\n","import React, { ReactNode } from 'react'\r\nimport { Form, Field, FormikProps } from \"formik\"\r\nimport { AntInput, AntCheckbox, AntInputPassword } from '../../utils/Formik/CreateAntField'\r\nimport { validateEmail, validateRequired } from '../../utils/Formik/ValidateFields'\r\n\r\nconst LoginForm: ((props: FormikProps<{}>) => ReactNode) = (props) => {\r\n    return (\r\n        <Form \r\n            className=\"form-container\" \r\n            onSubmit={props.handleSubmit}\r\n        >\r\n            <Field\r\n                component={AntInput}\r\n                name=\"email\"\r\n                type=\"email\"\r\n                label=\"Email\"\r\n                validate={validateEmail}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n            <Field\r\n                component={AntInputPassword}\r\n                name=\"password\"\r\n                type=\"password\"\r\n                label=\"Password\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n            <Field\r\n                component={AntCheckbox}\r\n                name=\"remember\"\r\n                label=\"Remember Me\"\r\n                submitCount={props.submitCount}\r\n            />\r\n            <div className=\"submit-container\">\r\n                <button className=\"ant-btn ant-btn-primary\" type=\"submit\">\r\n                    Login\r\n                </button>\r\n            </div>\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default LoginForm","import React, {useEffect} from 'react'\r\nimport { LoginPropsType } from './LoginContainer'\r\nimport { List, InputItem, Checkbox } from 'antd-mobile'\r\nimport { Formik } from \"formik\"\r\nimport moment from \"moment\"\r\nimport LoginForm from './LoginForm'\r\nimport { propTypes } from 'react-bootstrap/esm/Image'\r\nimport { Button, message } from 'antd'\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst CheckboxItem = Checkbox.CheckboxItem;\r\n\r\nconst initialValues = {\r\n    // bookingClient: \"\",\r\n    // bookingDate: moment(Date.now()),\r\n    // bookingTime: moment(Date.now()),\r\n    // selectOptions: [\"Mark\", \"Bob\", \"Anthony\"]\r\n}\r\n\r\n// export const dateFormat = \"YYYY--MM-DD\";\r\n// export const timeFormat = \"h:mm A\";\r\n\r\nexport type OwnLoginPropsType = {}\r\n\r\nconst Login: React.FC<LoginPropsType> = (props) => {\r\n    useEffect(() => {\r\n        if (props.authError) {\r\n            message.error(props.authError)\r\n        }\r\n    }, [props.authError])\r\n\r\n    const handleSubmit = (formProps: any) => {\r\n        //console.log('formProps: ', formProps)\r\n        if (!formProps.remember) {\r\n            formProps.remember = false\r\n        }\r\n        props.login(formProps)\r\n    }\r\n\r\n    //console.log(props)\r\n\r\n    return (\r\n        <>\r\n            <h1 className=\"mb-5 mx-auto\">Login Form</h1>\r\n            <Formik\r\n                initialValues={initialValues}\r\n                onSubmit={handleSubmit}\r\n                render={LoginForm}\r\n            />\r\n            <div className=\"mt-3\">\r\n                <Link to={props.location +\"register\"}><Button type=\"link\" block>Register</Button></Link>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Login","import {connect} from 'react-redux'\r\nimport Login, { OwnLoginPropsType } from './Login'\r\nimport { AppStateType } from '../../redux/store'\r\nimport {credsType, login} from './../../redux/authReducer'\r\n\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    login: (data: credsType)=>void\r\n}\r\n\r\nexport type LoginPropsType = MapPropsType & MapDispatchPropsType & OwnLoginPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        auth: state.auth,\r\n        location: state.app.location,\r\n        authError: state.auth.authError\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnLoginPropsType, AppStateType>(mapStateToProps, \r\n    {login}) \r\n    (Login)\r\n    \r\n\r\n","import { formatCountdown } from 'antd/lib/statistic/utils'\r\nimport React from 'react'\r\nimport { OrdersPropsType } from './OrdersContainer'\r\n\r\nexport type OwnOrdersPropsType = {}\r\nconst Orders: React.FC<OrdersPropsType> = (props) => {\r\n    return(\r\n        <div>Orders</div>\r\n    )\r\n}\r\n\r\nexport default Orders","import {connect} from 'react-redux'\r\nimport Orders, { OwnOrdersPropsType } from './Orders'\r\n// import {getTaskList} from '../../redux/taskReducer'\r\nimport { AppStateType } from '../../redux/store'\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    // getTaskList: (start_date: string, end_date:string)=>void\r\n}\r\n\r\nexport type OrdersPropsType = MapPropsType & MapDispatchPropsType & OwnOrdersPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        appLocation: state.app.location\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnOrdersPropsType, AppStateType>(mapStateToProps, \r\n    {}) \r\n    (Orders)\r\n    \r\n\r\n","import { Form, Field, FormikProps } from 'formik'\r\nimport React, { ReactNode, useState, useEffect } from 'react'\r\nimport { AntInput, AntSelect, AntTextArea, AntTimePicker } from '../../utils/Formik/CreateAntField'\r\nimport { validateRequired } from '../../utils/Formik/ValidateFields'\r\nimport { Select } from 'antd';\r\n\r\nconst { Option }: any = Select;\r\n\r\n\r\nconst NewTaskTreeForm: ((props: FormikProps<{}>) => ReactNode) = (props) => {\r\n    const values: any = props.values\r\n    //console.log(values)\r\n    const selectOptions = values.selectOptions\r\n    const taskTypes = values.taskTypes // ++++++\r\n\r\n    const [taskType, setTaskType] = useState(values.taskType)\r\n\r\n    useEffect(() => {\r\n        const values: any = props.values\r\n        const taskTypes = values.task_type\r\n        setTaskType(taskTypes)\r\n\r\n        //console.log('useEffect NewTaskTreeForm', props.initialValues)\r\n    }, [props.values])\r\n\r\n    //console.log('NewTaskTreeForm props: ', props)\r\n\r\n    // const handleSubmit = (formProps: any) => {\r\n    //     //console.log('formProps in NewTaskTreeForm: ',formProps)\r\n    //     props.handleSubmit(formProps)\r\n    // }\r\n\r\n    //console.log('NewTaskTreeForm', props)\r\n    //console.log('NewTaskTreeForm render', values)\r\n\r\n    return (\r\n        <Form\r\n            className=\"form-container\"\r\n            onSubmit={props.handleSubmit}\r\n        >\r\n            <Field\r\n                component={AntInput}\r\n                name=\"name\"\r\n                type=\"text\"\r\n                label=\"Name\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n\r\n            <Field\r\n                component={AntSelect}\r\n\r\n                selectOptions={selectOptions}\r\n\r\n                name=\"parent_id\"\r\n                type=\"select\"\r\n                label=\"Parent\"\r\n                // validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n            // hasFeedback\r\n            />\r\n\r\n            <Field\r\n                component={AntTextArea}\r\n                name=\"descriptions\"\r\n                type=\"text\"\r\n                label=\"Descriptions\"\r\n                // validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                // hasFeedback\r\n            />\r\n\r\n            <Field\r\n                component={AntTimePicker}\r\n                name=\"time_to_complete\"\r\n                type=\"time\"\r\n                label=\"Time to complete\"\r\n                // validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n            // hasFeedback\r\n            />\r\n\r\n            <Field\r\n                component={AntSelect}\r\n\r\n                selectOptions={taskTypes}\r\n\r\n                name=\"task_type\"\r\n                type=\"select\"\r\n                label=\"task Types\"\r\n                // validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                // hasFeedback\r\n            />\r\n\r\n\r\n            {taskType === 2 ?\r\n                <>\r\n                    <Field\r\n                        component={AntInput}\r\n                        name=\"context1\"\r\n                        type=\"text\"\r\n                        label=\"context1\"\r\n                        validate={validateRequired}\r\n                        submitCount={props.submitCount}\r\n                        hasFeedback\r\n                    />\r\n                    <Field\r\n                        component={AntInput}\r\n                        name=\"context2\"\r\n                        type=\"text\"\r\n                        label=\"context2\"\r\n                        validate={validateRequired}\r\n                        submitCount={props.submitCount}\r\n                        hasFeedback\r\n                    />\r\n                </>\r\n                :\r\n                null\r\n            }\r\n\r\n            <div className=\"submit-container\">\r\n                <button className=\"ant-btn ant-btn-primary\" type=\"submit\">\r\n                    Save\r\n                </button>\r\n            </div>\r\n\r\n        </Form>\r\n    )\r\n    // )\r\n}\r\nexport default NewTaskTreeForm","import { Button, Card, Drawer, List, Checkbox, Collapse } from 'antd'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { TasksTreePropsType } from './TasksTreeContainer'\r\nimport { FileAddOutlined, SettingOutlined } from '@ant-design/icons'\r\nimport NewTaskTreeForm from './NewTaskTreeForm'\r\nimport { Formik } from 'formik'\r\nimport moment from \"moment\"\r\nimport { DeleteOutlined, EditOutlined } from '@ant-design/icons'\r\n\r\nconst { Panel } = Collapse;\r\n\r\ntype InitialDrewerDataType = {\r\n    header: string,\r\n    taskId: false | number\r\n}\r\n\r\nconst initialDrewerData: InitialDrewerDataType = {\r\n    header: 'Create New Task',\r\n    taskId: false\r\n}\r\n\r\nconst TasksTreeBrowser: React.FC<TasksTreePropsType> = (props) => {\r\n    useEffect(() => {\r\n        if (props.taskList !== undefined && props.taskList.length === 0 && !props.isTaskListLoaded) {\r\n            props.getTaskList()\r\n        }\r\n        else if (props.taskList === undefined) {\r\n            props.getTaskList()\r\n        }\r\n        setVisible(false)\r\n        setInitialFormValues(initialValues)\r\n    }, [props.taskList])\r\n\r\n    const [visible, setVisible] = useState(false)\r\n    const [drawerData, setDrawerData] = useState(initialDrewerData)\r\n\r\n    const getSelectOptions = () => {\r\n        if (props.taskList !== undefined && props.taskList.length > 0) {\r\n            return props.taskList.map((item) => {\r\n                return ({\r\n                    name: item.name,\r\n                    value: item.id\r\n                })\r\n            })\r\n        } else {\r\n            return null\r\n        }\r\n    }\r\n\r\n    const initialValues: any = {\r\n        selectOptions: getSelectOptions(),\r\n        taskTypes: [\r\n            {\r\n                name: 'Простая задача',\r\n                value: 1\r\n            },\r\n            {\r\n                name: 'Задача с контектом',\r\n                value: 2\r\n            }\r\n        ],\r\n        task_type: 1,\r\n        name: '',\r\n\r\n    }\r\n\r\n    const [initialFormValues, setInitialFormValues] = useState(initialValues)\r\n\r\n    const onClose = () => {\r\n        setVisible(false)\r\n    }\r\n\r\n    const showDrawer = () => {\r\n        setVisible(true)\r\n    }\r\n\r\n    const onAdd = () => {\r\n        setDrawerData(initialDrewerData)\r\n        setInitialFormValues(initialValues)\r\n        showDrawer()\r\n    }\r\n\r\n    const handleSubmit = (formProps: any) => {\r\n        let formPropsCopy: any = { ...formProps }\r\n        delete formPropsCopy.selectOptions\r\n        delete formPropsCopy.taskTypes\r\n        if (formPropsCopy.time_to_complete !== undefined) {\r\n            formPropsCopy.time_to_complete = formPropsCopy.time_to_complete.format('HH:mm:ss')\r\n        }\r\n\r\n        formPropsCopy.user_id = props.userId\r\n        if (!drawerData.taskId) {\r\n            props.createNewTaskList(formPropsCopy)\r\n        } else {\r\n            props.updateTaskList(formPropsCopy, drawerData.taskId)\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"site-card-border-less-wrapper\">\r\n                <Card\r\n                    title={\r\n                        <div\r\n                            // className=\"col-12 col-md-12 col-lg-4\"\r\n                            className=\"inline\"\r\n                        >\r\n                            <div ><h2>Tasks Tree</h2></div>\r\n\r\n\r\n                        </div>\r\n                    }\r\n                    extra={\r\n                        <>\r\n                            <Button\r\n                                type=\"primary\"\r\n                                shape=\"round\"\r\n                                icon={\r\n                                    <div className=\"d-flex flex-wrap align-content-start\">\r\n                                        <FileAddOutlined style={{ fontSize: '18px' }} />\r\n                                        <span className=\"ml-1\" style={{ fontSize: '14px' }}>Add</span>\r\n                                    </div>}\r\n                                style={{ marginLeft: 10 }}\r\n                                onClick={onAdd}\r\n                            />\r\n\r\n                            <Button className=\"\"\r\n                                type=\"primary\"\r\n                                shape=\"round\"\r\n                                style={{ marginLeft: 10 }}\r\n                                // onClick={props.showModal}\r\n                                icon={\r\n                                    <div className=\"d-flex flex-wrap align-content-start\">\r\n                                        <SettingOutlined style={{ fontSize: '18px' }} />\r\n                                        <span className=\"ml-1\" style={{ fontSize: '14px' }}>Settings</span>\r\n                                    </div>}\r\n                            />\r\n                        </>\r\n                    }\r\n                    bordered={false}\r\n                >\r\n\r\n                    <List\r\n                        size=\"small\"\r\n                        bordered\r\n                        dataSource={getTaskTreeItems(\r\n                            props.taskList,\r\n                            props.deleteTaskList,\r\n                            props.updateTaskList,\r\n                            showDrawer,\r\n                            setDrawerData,\r\n                            initialFormValues,\r\n                            setInitialFormValues,\r\n                            props.selectedTasks\r\n                        )}\r\n\r\n                        renderItem={item => <List.Item className=\"py-0\" draggable>{item}</List.Item>}\r\n                    />\r\n\r\n                    <Drawer\r\n                        title={drawerData.header}\r\n                        placement=\"right\"\r\n                        closable={true}\r\n                        onClose={onClose}\r\n                        visible={visible}\r\n                        width=\"90%\"\r\n                    >\r\n\r\n                        <Formik\r\n                            initialValues={initialFormValues}\r\n                            onSubmit={handleSubmit}\r\n                            render={NewTaskTreeForm}\r\n                            enableReinitialize={true}\r\n                        />\r\n\r\n                    </Drawer>\r\n\r\n                </Card>\r\n            </div>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default TasksTreeBrowser\r\n\r\nconst getTaskTreeItems = (\r\n    taskList: Array<any>,\r\n    deleteTask: (taskId: number) => void,\r\n    updateTaskList: (values: any, taskId: number) => void,\r\n    showDrawer: () => void,\r\n    setDrawerData: (drawerData: any) => void,\r\n    initialFormValues: any,\r\n    setInitialFormValues: (initialFormValues: any) => void,\r\n    selectedTasks: Array<number>\r\n) => {\r\n    const onEdit = (task: any) => {\r\n        setDrawerData({\r\n            header: 'Edit: \"' + task.name + '\"',\r\n            taskId: task.id\r\n        })\r\n\r\n\r\n        let day = moment().zone('GMT')\r\n        if (task.time_to_complete !== null) {\r\n            const splitTime = task.time_to_complete.split(/:/)\r\n            day.hours(parseInt(splitTime[0])).minutes(parseInt(splitTime[1])).seconds(0).milliseconds(0);\r\n        } else {\r\n            day.hours(0).minutes(0).seconds(0).milliseconds(0);\r\n        }\r\n\r\n        setInitialFormValues(\r\n            {\r\n                ...initialFormValues,\r\n                name: task.name,\r\n                time_to_complete: day,\r\n                descriptions: task.descriptions,\r\n                parent_id: task.parent_id,\r\n                task_type: Number(task.task_type)\r\n            }\r\n        )\r\n        showDrawer()\r\n    }\r\n\r\n    const onStatusChange = (e: any) => {\r\n        const values = { isCompleted: e.target.checked }\r\n        updateTaskList(values, e.target.id)\r\n    }\r\n\r\n    // let display: string = 'none'\r\n\r\n    // const changeDisplat = (key: any) => {\r\n    //     console.log(key);\r\n    //     display = \"block\"\r\n    //   }\r\n\r\n    if (taskList !== undefined && taskList.length > 0) {\r\n\r\n\r\n        let taskTreeItems: Array<any> = []\r\n        for (let index = 0; index < taskList.length; index++) {\r\n            const item = taskList[index];\r\n            if (item.parent_id === null) {\r\n                taskTreeItems.push(\r\n                    <>\r\n                        <div className=\"py-2\"><Checkbox checked={item.isCompleted} id={item.id} onClick={onStatusChange} /></div>\r\n                        <div className=\"w-100 float-left\" key={item.id}>\r\n                            <div className=\"ml-3 float-left\">\r\n\r\n                                {item.isCompleted ? <span className=\"text-black-50\">{item.name}</span> : <span>{item.name}</span>}\r\n\r\n                            </div>\r\n                            <div className=\"ml-3 float-right\">\r\n                                {item.time_to_complete}\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"d-flex flex-row\">\r\n                            <Button className=\"\"\r\n                                type=\"primary\"\r\n                                shape=\"circle\"\r\n                                size=\"small\"\r\n                                style={{ marginLeft: 10 }}\r\n                                onClick={() => { onEdit(item) }}\r\n                                icon={\r\n                                    <div className=\"d-flex flex-wrap align-content-start\">\r\n                                        <EditOutlined className=\"ml-1\" style={{ fontSize: '14px' }} />\r\n                                    </div>\r\n                                }\r\n                            />\r\n                            <Button className=\"\"\r\n                                type=\"primary\"\r\n                                danger\r\n                                shape=\"circle\"\r\n                                size=\"small\"\r\n                                style={{ marginLeft: 10 }}\r\n                                onClick={() => { deleteTask(item.id) }}\r\n                                icon={\r\n                                    <div className=\"d-flex flex-wrap align-content-start\">\r\n                                        <DeleteOutlined className=\"ml-1\" style={{ fontSize: '14px' }} />\r\n                                    </div>\r\n                                }\r\n                            />\r\n                        </div>\r\n                    </>\r\n                )\r\n            }\r\n\r\n        }\r\n        return taskTreeItems\r\n\r\n    } else {\r\n        return []\r\n    }\r\n}","import { SwipeAction, List } from 'antd-mobile'\r\nimport React from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { TaskListType } from '../../Types/types'\r\nimport { actions } from './../../redux/TaskListReducer'\r\n\r\nconst Item = List.Item\r\n\r\n\r\nconst time_to_complete = new Date()\r\ntime_to_complete.setHours(0)\r\ntime_to_complete.setMinutes(0)\r\ntime_to_complete.setSeconds(0)\r\ntime_to_complete.setMilliseconds(0)\r\n\r\nexport type OwnTaskTreeItemsType = {\r\n    taskItem: TaskListType,\r\n    deleteTaskList: (taskId: number) => void,\r\n    showDrawer: () => void,\r\n    setDrawerData: (drawerData: any) => void,\r\n    initialFormValues: any,\r\n    setInitialFormValues: (initialFormValues: any) => void\r\n    updateTaskList: (values: any, taskId: number) => void,\r\n}\r\nexport const TaskTreeItemMobile: React.FC<OwnTaskTreeItemsType> = (props) => {\r\n    const dispatch = useDispatch()\r\n\r\n    const onSubTask = () => {\r\n        //console.log(props.taskItem.id, ': onSubTask')\r\n        props.setDrawerData({\r\n            header: 'SubTask for: \"' + props.taskItem.name + '\"',\r\n            taskId: false\r\n        })\r\n        //console.log('parent_id:', props.taskItem.parent_id)\r\n\r\n        props.setInitialFormValues({\r\n            ...props.initialFormValues,\r\n            name: '',\r\n            time_to_complete: time_to_complete,\r\n            descriptions: '',\r\n            parent_id: [Number(props.taskItem.id)],\r\n            task_type: [0]\r\n        })\r\n        props.showDrawer()\r\n    }\r\n\r\n    const onEdit = (task: TaskListType) => {\r\n        props.setDrawerData({\r\n            header: 'Edit: \"' + task.name + '\"',\r\n            taskId: task.id\r\n        })\r\n\r\n        // let new_time_to_complete = {...time_to_complete}\r\n        let new_time_to_complete = new Date(time_to_complete.getTime())\r\n        if (task.time_to_complete !== null) {\r\n            const splitTime = task.time_to_complete.split(/:/)\r\n            new_time_to_complete.setHours(parseInt(splitTime[0]))\r\n            new_time_to_complete.setMinutes(parseInt(splitTime[1]))\r\n            new_time_to_complete.setSeconds(0)\r\n            new_time_to_complete.setMilliseconds(0)\r\n        } else {\r\n            \r\n        }\r\n\r\n        props.setInitialFormValues({\r\n            ...props.initialFormValues,\r\n            name: task.name,\r\n            time_to_complete: new_time_to_complete,\r\n            descriptions: task.descriptions,\r\n            parent_id: [task.parent_id],\r\n            task_type: [Number(task.task_type)]\r\n        })\r\n\r\n        props.showDrawer()\r\n    }\r\n\r\n    const onItemOpen = () => {\r\n        dispatch(actions.setSelectedTasks(props.taskItem.id));\r\n    }\r\n\r\n    const onComplet = () => {\r\n        //console.log('onComplet')\r\n        const values = { isCompleted: !props.taskItem.isCompleted }\r\n        props.updateTaskList(values, props.taskItem.id)\r\n    }\r\n\r\n    return (\r\n        <SwipeAction\r\n            style={{ backgroundColor: 'gray' }}\r\n            autoClose\r\n            right={[\r\n                {\r\n                    text: 'SubTask',\r\n                    onPress: () => { onSubTask() },\r\n                    style: { backgroundColor: 'green', color: 'white' },\r\n                },\r\n                {\r\n                    text: 'Delete',\r\n                    onPress: () => props.deleteTaskList(props.taskItem.id),\r\n                    style: { backgroundColor: '#F4333C', color: 'white' },\r\n                },\r\n            ]}\r\n            left={[\r\n                {\r\n                    text: 'Edit',\r\n                    onPress: () => { onEdit(props.taskItem) },\r\n                    style: { backgroundColor: '#108ee9', color: 'white' },\r\n                },\r\n                {\r\n                    text: props.taskItem.isCompleted ? 'Not Done' : 'Done',\r\n                    onPress: () => onComplet(),\r\n                    style: { backgroundColor: 'green', color: 'white' },\r\n                },\r\n            ]}\r\n        // onOpen={() => //console.log('global open')}\r\n        // onClose={() => //console.log('global close')}\r\n        >\r\n            <Item\r\n                // className=\"my-3\"\r\n                onClick={onItemOpen}\r\n                // arrow=\"horizontal\"\r\n                key={props.taskItem.id}\r\n                wrap\r\n            >\r\n                {/* {props.taskItem.isCompleted ? <span className=\"text-black-50\">{props.taskItem.name}</span> : <span>{props.taskItem.name}</span>} */}\r\n\r\n                <div className=\"w-100 row \" key={props.taskItem.id}>\r\n                    <div className=\"col-10\">\r\n                        {props.taskItem.isCompleted ? \r\n                        <span className=\"text-black-50 text-break\">{props.taskItem.name}</span> \r\n                        : \r\n                        <span className=\"text-break\">{props.taskItem.name}</span>}\r\n                    </div>\r\n                    <div className=\"col-2\">\r\n                        {props.taskItem.time_to_complete.split(/:/)[0]+':'+props.taskItem.time_to_complete.split(/:/)[1]}\r\n                    </div>\r\n                </div>\r\n\r\n            </Item>\r\n\r\n        </SwipeAction>\r\n    )\r\n}","import React, { useState, useEffect } from 'react'\r\nimport { TasksTreePropsType } from './TasksTreeContainer'\r\nimport { Drawer, List, SwipeAction, Icon, Button, Card, WingBlank, WhiteSpace } from 'antd-mobile'\r\nimport NewTaskTreeForm from './NewTaskTreeForm'\r\nimport './TasksTreeMobile.css'\r\nimport { Formik } from 'formik'\r\nimport { Spin, Empty } from 'antd'\r\nimport { propTypes } from 'react-bootstrap/esm/Image'\r\nimport moment from \"moment\"\r\nimport { TaskListType } from '../../Types/types'\r\nimport { useDispatch } from 'react-redux'\r\nimport { TaskTreeItemMobile } from './TaskTreeItem'\r\n\r\nconst Item = List.Item\r\n\r\ntype InitialDrewerDataType = {\r\n    header: string,\r\n    taskId: false | number\r\n}\r\n\r\nconst initialDrewerData: InitialDrewerDataType = {\r\n    header: 'Create New Task',\r\n    taskId: false\r\n}\r\n\r\nconst TasksTreeMobile: React.FC<TasksTreePropsType> = (props) => {\r\n    useEffect(() => {\r\n        if (props.taskList && props.taskList.length === 0 && !props.isTaskListLoaded) {\r\n            props.getTaskList()\r\n        } else if (props.taskList === undefined) {\r\n            props.getTaskList()\r\n        }\r\n        setVisible(false)\r\n        //console.log('initialValues: ', initialValues)\r\n        setInitialFormValues(initialValues)\r\n    }, [props.taskList])\r\n\r\n    const getSelectOptions = () => {\r\n        if (props.taskList !== undefined && props.taskList.length > 0) {\r\n            return props.taskList.map((item) => {\r\n                return ({\r\n                    name: item.name,\r\n                    value: item.id\r\n                })\r\n            })\r\n        } else {\r\n            //console.log('вернули пыстой список', props.taskList)\r\n            return null\r\n        }\r\n    }\r\n\r\n    let initialTimeToComplete = new Date()\r\n    initialTimeToComplete.setHours(0)\r\n    initialTimeToComplete.setMinutes(0)\r\n    initialTimeToComplete.setSeconds(0)\r\n    initialTimeToComplete.setMilliseconds(0)\r\n\r\n    const initialValues: any = {\r\n        selectOptions: getSelectOptions(),\r\n        taskTypes: [\r\n            {\r\n                name: 'Простая задача',\r\n                value: 1\r\n            },\r\n            {\r\n                name: 'Задача с контектом',\r\n                value: 2\r\n            }\r\n        ],\r\n        task_type: 1,\r\n        time_to_complete: initialTimeToComplete\r\n        // parent_id:[]\r\n    }\r\n\r\n    const [visible, setVisible] = useState(false)\r\n    const [initialFormValues, setInitialFormValues] = useState(initialValues)\r\n    const [drawerData, setDrawerData] = useState(initialDrewerData)\r\n\r\n    const handleSubmit = (formProps: any) => {\r\n        //console.log('handleSubmit TasksTreeMobile: ', formProps.time_to_complete)\r\n        let formPropsCopy: any = { ...formProps }\r\n        delete formPropsCopy.selectOptions\r\n        delete formPropsCopy.taskTypes\r\n        if (formPropsCopy.time_to_complete !== undefined) {\r\n            //console.log(formPropsCopy.time_to_complete)\r\n            const time_to_complete = moment(formPropsCopy.time_to_complete)\r\n            formPropsCopy.time_to_complete = time_to_complete.format('HH:mm:ss')\r\n        }\r\n        if (Array.isArray(formPropsCopy.parent_id)) {\r\n            formPropsCopy.parent_id = formPropsCopy.parent_id[0]\r\n        }\r\n\r\n        //console.log('NewTaskMobile submit: ', formPropsCopy)\r\n\r\n        formPropsCopy.user_id = props.userId\r\n        // props.createNewTaskList(formPropsCopy)\r\n        // setInitialFormValues(initialValues)\r\n        //console.log('taskId: ', drawerData.taskId)\r\n        if (!drawerData.taskId) {\r\n            //console.log('createNewTaskList: ', formPropsCopy)\r\n            props.createNewTaskList(formPropsCopy)\r\n        } else {\r\n            //console.log('updateTaskList: ', formPropsCopy)\r\n            props.updateTaskList(formPropsCopy, drawerData.taskId)\r\n        }\r\n    }\r\n\r\n    const onAdd = (args: any) => {\r\n        if (props.selectedTasks.length !== 0) {\r\n            setDrawerData({ ...drawerData, taskId: false })\r\n            //console.log('sub')\r\n            //console.log('initialValues', initialValues)\r\n            setInitialFormValues({ ...initialValues, parent_id: [Number(props.selectedTasks[props.selectedTasks.length - 1])] })\r\n        } else {\r\n            setInitialFormValues(initialValues)\r\n        }\r\n\r\n        setVisible(!visible)\r\n    }\r\n\r\n    const showDrawer = () => {\r\n        setVisible(true)\r\n    }\r\n\r\n    const onBack = () => {\r\n        props.backSelectedTasks()\r\n    }\r\n\r\n    //console.log('TasksTreeMobile props: ', props)\r\n    //console.log('TasksTreeMobile name: ', initialFormValues.name)\r\n\r\n    // if (props.taskList !== undefined) {\r\n    return (\r\n        <WingBlank size=\"lg\">\r\n            <WhiteSpace size=\"lg\" />\r\n            <Card>\r\n                <Card.Header\r\n                    title={<h4 className=\"w-100 text-center\">Tasks Tree</h4>}\r\n                    extra={\r\n                        <div className=\"d-flex flex-row\">\r\n                            {props.selectedTasks.length > 0 && !visible ?\r\n                                <Button\r\n                                    inline\r\n                                    size=\"small\"\r\n                                    className=\"mx-3 my-2\"\r\n                                    // style={{ marginRight: '4px' }} \r\n                                    onClick={onBack}\r\n                                    type=\"primary\"\r\n                                >\r\n                                    Back\r\n                                    </Button>\r\n                                :\r\n                                null\r\n                            }\r\n                            <Button\r\n                                inline\r\n                                size=\"small\"\r\n                                className=\"mx-3 my-2\"\r\n                                // style={{ marginRight: '4px' }} \r\n                                onClick={onAdd}\r\n                                type=\"primary\"\r\n                            >\r\n                                {visible ? 'Close' : 'Add'}\r\n                            </Button>\r\n                        </div>\r\n                    }\r\n                >\r\n\r\n                </Card.Header>\r\n\r\n                <Drawer\r\n                    className=\"my-drawer\"\r\n                    style={{ minHeight: document.documentElement.clientHeight }}\r\n                    // enableDragHandle\r\n                    contentStyle={{ color: '#A6A6A6', textAlign: 'center', paddingTop: 0, width: \"100%\" }}\r\n                    sidebar={\r\n                        <div className=\"mt-4\">\r\n                            <Formik\r\n                                initialValues={initialFormValues}\r\n                                onSubmit={handleSubmit}\r\n                                render={NewTaskTreeForm}\r\n                                enableReinitialize={true}\r\n                            />\r\n                        </div>\r\n                    }\r\n                    open={visible}\r\n                    onOpenChange={onAdd}\r\n                >\r\n                    <List>\r\n\r\n\r\n                        {props.taskList !== undefined ?\r\n                            props.taskList.map((item) => {\r\n                                let parentId: number\r\n                                if (props.selectedTasks.length !== 0) {\r\n                                    parentId = props.selectedTasks[props.selectedTasks.length - 1]\r\n                                    if (item.parent_id === parentId) {\r\n                                        return (\r\n                                            <TaskTreeItemMobile\r\n                                                taskItem={item}\r\n                                                deleteTaskList={props.deleteTaskList}\r\n                                                showDrawer={showDrawer}\r\n                                                setDrawerData={setDrawerData}\r\n                                                initialFormValues={initialFormValues}\r\n                                                setInitialFormValues={setInitialFormValues}\r\n                                                updateTaskList={props.updateTaskList}\r\n                                            />\r\n                                        )\r\n                                    }\r\n                                } else {\r\n                                    if (item.parent_id === null) {\r\n                                        return (\r\n                                            <TaskTreeItemMobile\r\n                                                taskItem={item}\r\n                                                deleteTaskList={props.deleteTaskList}\r\n                                                showDrawer={showDrawer}\r\n                                                setDrawerData={setDrawerData}\r\n                                                initialFormValues={initialFormValues}\r\n                                                setInitialFormValues={setInitialFormValues}\r\n                                                updateTaskList={props.updateTaskList}\r\n                                            />\r\n                                        )\r\n                                    }\r\n                                }\r\n\r\n                            })\r\n                            :\r\n                            null\r\n                        }\r\n\r\n                    </List>\r\n                </Drawer>\r\n\r\n\r\n\r\n            </Card>\r\n        </WingBlank>\r\n    )\r\n    // } else {\r\n    //     return <Spin key=\"spin\" size=\"large\" />\r\n    // }\r\n}\r\n\r\nexport default TasksTreeMobile\r\n\r\n// const getTaskTreeItems = (\r\n//     taskList: Array<any>,\r\n//     deleteTaskList: (taskId: number) => void,\r\n//     showDrawer: () => void,\r\n//     setDrawerData: (drawerData: any) => void,\r\n//     initialFormValues: any,\r\n//     setInitialFormValues: (initialFormValues: any) => void\r\n// ) => {\r\n//     const onEdit = (task: any) => {\r\n//         //console.log(task)\r\n\r\n//         setDrawerData({\r\n//             header: 'Edit: \"' + task.name + '\"',\r\n//             taskId: task.id\r\n//         })\r\n\r\n//         let day = new Date()\r\n//         if (task.time_to_complete !== null) {\r\n//             const splitTime = task.time_to_complete.split(/:/)\r\n//             day.setHours(parseInt(splitTime[0]))\r\n//             day.setMinutes(parseInt(splitTime[1]))\r\n//             day.setSeconds(0)\r\n//             day.setMilliseconds(0)\r\n//         } else {\r\n//             day.setHours(0)\r\n//             day.setMinutes(0)\r\n//             day.setSeconds(0)\r\n//             day.setMilliseconds(0)\r\n//         }\r\n\r\n//         setInitialFormValues(\r\n//             {\r\n//                 ...initialFormValues,\r\n//                 // new: false,\r\n//                 name: task.name,\r\n//                 time_to_complete: day,\r\n//                 descriptions: task.descriptions,\r\n//                 parent_id: [task.parent_id],\r\n//                 task_type: [Number(task.task_type)]\r\n//             }\r\n//         )\r\n\r\n//         showDrawer()\r\n//     }\r\n\r\n//     const onItemOpen = (itemId: number) => {\r\n//         //console.log(itemId, 'is open')\r\n//         // const dispatch = useDispatch()\r\n//         // dispatch( { type: 'SN/TASK_LIST/SET_SELECTED_TASK', itemId } )\r\n//     }\r\n\r\n//     //console.log(taskList)\r\n\r\n//     if (taskList && taskList.length > 0) {\r\n//         return taskList.map((item) => {\r\n//             //console.log('!!!!!!!')\r\n//             return (\r\n//                 <SwipeAction\r\n//                     style={{ backgroundColor: 'gray' }}\r\n//                     autoClose\r\n//                     right={[\r\n//                         {\r\n//                             text: 'Cancel',\r\n//                             onPress: () => {\r\n//                                 //console.log('cancel') \r\n//                             },\r\n//                             style: { backgroundColor: '#ddd', color: 'white' },\r\n//                         },\r\n//                         {\r\n//                             text: 'Delete',\r\n//                             onPress: () => deleteTaskList(item.id),\r\n//                             style: { backgroundColor: '#F4333C', color: 'white' },\r\n//                         },\r\n//                     ]}\r\n//                     left={[\r\n//                         {\r\n//                             text: 'Edit',\r\n//                             onPress: () => { onEdit(item) },\r\n//                             style: { backgroundColor: '#108ee9', color: 'white' },\r\n//                         },\r\n//                         {\r\n//                             text: 'Execute',\r\n//                             onPress: () => {\r\n//                                 //console.log('cancel')\r\n//                             },\r\n//                             style: { backgroundColor: 'green', color: 'white' },\r\n//                         },\r\n//                     ]}\r\n//                 // onOpen={() => //console.log('global open')}\r\n//                 // onClose={() => //console.log('global close')}\r\n//                 >\r\n//                     <Item\r\n//                         // className=\"my-3\"\r\n//                         onClick={() => { onItemOpen(item.id) }}\r\n//                         arrow=\"horizontal\"\r\n//                         key={item.id}\r\n//                     >\r\n//                         {item.name}\r\n//                     </Item>\r\n\r\n//                 </SwipeAction>\r\n//             )\r\n//         })\r\n//     } else {\r\n//         return (\r\n//             <Empty />\r\n//         )\r\n//     }\r\n\r\n\r\n// }\r\n\r\n","import {connect} from 'react-redux'\r\n// import TasksTree, { OwnTasksTreePropsType } from './TasksTree'\r\nimport { AppStateType } from '../../redux/store'\r\nimport {getTaskList, createNewTaskList, deleteTaskList, updateTaskList, actions} from './../../redux/TaskListReducer'\r\nimport { isMobile } from 'react-device-detect'\r\nimport TasksTreeBrowser from './TasksTreeBrowser'\r\nimport TasksTreeMobile from './TasksTreeMobile'\r\n\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    getTaskList: ()=>void,\r\n    createNewTaskList: (values: any)=>void,\r\n    deleteTaskList: (taskId: number)=>void,\r\n    updateTaskList: (values: any, taskId: number)=> void,\r\n    backSelectedTasks: ()=>void,\r\n}\r\n\r\ntype OwnTasksTreePropsType = {\r\n\r\n}\r\n\r\nexport type TasksTreePropsType = MapPropsType & MapDispatchPropsType & OwnTasksTreePropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        taskList: state.taskList.taskList,\r\n        userId: state.auth.user?.id,\r\n        isTaskListLoaded: state.taskList.isTaskListLoaded,\r\n        selectedTasks: state.taskList.selectedTasks\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnTasksTreePropsType, AppStateType>(mapStateToProps, \r\n    {getTaskList, createNewTaskList, deleteTaskList, updateTaskList, backSelectedTasks: actions.backSelectedTasks}) \r\n    (isMobile ? TasksTreeMobile : TasksTreeBrowser)\r\n    \r\n\r\n","import React, { ReactNode } from 'react'\r\nimport { Form, Field, FormikProps } from \"formik\"\r\nimport { AntCheckbox, AntInput, AntInputPassword } from '../../utils/Formik/CreateAntField'\r\nimport { validateEmail, validateRequired } from '../../utils/Formik/ValidateFields'\r\n\r\nconst RegisterForm: ((props: FormikProps<{}>) => ReactNode) = (props) => {\r\n    return(\r\n        <Form\r\n            className=\"form-container\" \r\n            onSubmit={props.handleSubmit}\r\n        >\r\n            <Field\r\n                component={AntInput}\r\n                name=\"name\"\r\n                type=\"text\"\r\n                label=\"Name\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n            <Field\r\n                component={AntInput}\r\n                name=\"email\"\r\n                type=\"email\"\r\n                label=\"Email\"\r\n                validate={validateEmail}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n            <Field\r\n                component={AntInputPassword}\r\n                name=\"password\"\r\n                type=\"password\"\r\n                label=\"Password\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n\r\n            <Field\r\n                component={AntInputPassword}\r\n                name=\"c_password\"\r\n                type=\"password\"\r\n                label=\"Confirm\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n\r\n            <Field\r\n                component={AntCheckbox}\r\n                name=\"remember\"\r\n                label=\"Remember Me\"\r\n                submitCount={props.submitCount}\r\n            />\r\n            <div className=\"submit-container\">\r\n                <button className=\"ant-btn ant-btn-primary\" type=\"submit\">\r\n                    Register\r\n                </button>\r\n            </div>\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default RegisterForm","import { Formik } from 'formik'\r\nimport React, { useEffect } from 'react'\r\nimport RegisterForm from './RegisterForm'\r\nimport { RegisterPropsType } from './RegisterContainer'\r\nimport { propTypes } from 'react-bootstrap/esm/Image'\r\nimport { Redirect, Route, useHistory } from 'react-router-dom'\r\n\r\nconst initialValues = {\r\n    // parent_id :['1', '2', '3']\r\n}\r\n\r\nexport type OwnRegisterPropsType = {}\r\n\r\nconst Register: React.FC<RegisterPropsType> = (props) => {\r\n    let history = useHistory();\r\n    useEffect( () => {\r\n        //console.log('useEffect in Register: ', props.isAuth)\r\n        if(props.isAuth) {\r\n            history.replace(props.appLocation+'toDoList')\r\n        }\r\n    }, [props.isAuth])\r\n    const handleSubmit = (formProps: any) => {\r\n        //console.log(formProps)\r\n        formProps.status = 'guest'\r\n        props.register(formProps)\r\n    }\r\n\r\n    //console.log('Register', props)\r\n    return (\r\n        <>\r\n            <h1 className=\"mb-5 mx-auto\">Register Form</h1>\r\n            <Formik\r\n                initialValues={initialValues}\r\n                onSubmit={handleSubmit}\r\n                render={RegisterForm}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Register","import {connect} from 'react-redux'\r\nimport Register, { OwnRegisterPropsType } from './Register'\r\nimport { AppStateType } from '../../redux/store'\r\nimport {register} from './../../redux/authReducer'\r\n\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    register: (creds: any)=>void\r\n}\r\n\r\nexport type RegisterPropsType = MapPropsType & MapDispatchPropsType & OwnRegisterPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n        appLocation: state.app.location\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnRegisterPropsType, AppStateType>(mapStateToProps, \r\n    {register}) \r\n    (Register)\r\n    \r\n\r\n","import React, { useEffect, useState } from 'react'\r\nimport './App.css'\r\nimport ToDoList from './Components/ToDo/ToDoContainer'\r\nimport { BrowserRouter, Redirect, Route, Switch, withRouter, useLocation } from 'react-router-dom'\r\nimport { connect, Provider } from 'react-redux'\r\nimport 'antd/dist/antd.css'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport 'antd-mobile/dist/antd-mobile.css'\r\nimport store, { AppStateType } from './redux/store'\r\nimport { Layout, Spin } from 'antd'\r\nimport { compose } from 'redux'\r\nimport { initializeApp, addLocation } from './redux/appReducer'\r\nimport {login} from './redux/authReducer'\r\nimport Header from './Components/Header/HeaderContainer'\r\nimport { isMobile } from \"react-device-detect\"\r\nimport Login from './Components/Login/LoginContainer'\r\nimport Orders from './Components/Orders/OrdersContainer'\r\nimport TasksTree from './Components/TasksTree/TasksTreeContainer'\r\nimport Register from './Components/Register/RegisterContainer'\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\ntype DispatchPropsType = {\r\n  initializeApp: () => void,\r\n  addLocation: (location: string) => void,\r\n  login: (data: any)=> void,\r\n}\r\n\r\nconst App = (props: MapPropsType & DispatchPropsType) => {\r\n  const [location, setLocation] = useState(useLocation().pathname)\r\n\r\n  useEffect(() => {\r\n    if (!props.initialized) {\r\n      // http://localhost:3000/?email=7383125@gmail.com&password=gfhjkm4501\r\n      let instanseCreds = parseQueryString()\r\n      if (instanseCreds.email && instanseCreds.password) {\r\n        instanseCreds.remember = true\r\n        props.login(instanseCreds)\r\n      }\r\n\r\n      if (location === '/front1/') {\r\n        props.addLocation(location)\r\n      }\r\n      //console.log('initialized FALSE', props)\r\n      props.initializeApp()\r\n    } else {\r\n      //console.log('initialized TRUE', props)\r\n    }\r\n  }, [props.initialized])\r\n\r\n\r\n  if (!props.initialized) {\r\n    return <Spin key=\"spin\" size=\"large\" />\r\n  }\r\n\r\n  return (\r\n    <Layout>\r\n      <Header />\r\n      <Switch>\r\n        {!props.isAuth ?\r\n          <Route exact path={props.appLocation}\r\n            render={() => <Redirect to={props.appLocation+'login'} />} />\r\n        :\r\n          <Route exact path={props.appLocation}\r\n            render={() => <Redirect to={props.appLocation+'toDoList'} />} />\r\n        }\r\n        \r\n        {props.isAuth ?\r\n            <Route exact path={props.appLocation+'login'}\r\n              render={ () => <Redirect to={props.appLocation+'toDoList'} /> } \r\n            />  \r\n          :\r\n            null\r\n        }\r\n\r\n        <Route path={props.appLocation+'login'}\r\n          render={() => <Login />} />\r\n        \r\n         <Route path={props.appLocation+'toDoList'}\r\n            render={() => <ToDoList />} />\r\n\r\n          <Route path={props.appLocation+'tasksTree'}\r\n            render={() => <TasksTree />} />\r\n\r\n          <Route path={props.appLocation+'orders'}\r\n            render={() => <Orders />} />\r\n\r\n          <Route path={props.appLocation+'register'}\r\n            render={() => <Register />} />\r\n\r\n          <Route path={props.appLocation+'*'}\r\n            render={() => <div>404 NOT FOUND</div>} />\r\n      </Switch>\r\n    </Layout>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n  initialized: state.app.initialized,\r\n  appLocation: state.app.location,\r\n  isAuth: state.auth.isAuth\r\n})\r\n\r\nlet AppContainer = compose<React.ComponentType>(\r\n  withRouter,\r\n  connect(mapStateToProps, { initializeApp, addLocation, login }))(App)\r\n\r\nconst MainApp = () => {\r\n  return (\r\n    <BrowserRouter>\r\n      <Provider store={store}>\r\n        <div className={isMobile ? \"\" : \"container\"}>\r\n          <AppContainer />\r\n        </div>\r\n      </Provider>\r\n    </BrowserRouter>\r\n  )\r\n}\r\n\r\nexport default MainApp\r\n\r\nconst parseQueryString = (): any => {\r\n  const params:  any = {}\r\n  document.location.search.substr(1).split('&').forEach( (pair) => {\r\n      const [key, value] = pair.split('=')\r\n      params[key] = value\r\n  })\r\n  return params;\r\n};\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './App'\r\nimport reportWebVitals from './reportWebVitals'\r\n\r\nReactDOM.render(\r\n  // <React.StrictMode>\r\n    <App />\r\n  // </React.StrictMode>\r\n  ,\r\n  document.getElementById('root')\r\n)\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(//console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals()\r\n"],"sourceRoot":""}
{"version":3,"sources":["api/api.ts","utils/Formik/ValidateFields.ts","utils/Formik/CreateAntField.tsx","utils/Date/NewDeteByString.ts","Components/ToDo/Settings/SettingsModal.tsx","api/authAPI.ts","redux/authReducer.ts","Components/ToDo/Settings/SettingsModalContainer.tsx","Components/ToDo/ToDoHeader/ToDoHeader.tsx","api/taskApi.ts","redux/taskReducer.ts","Components/ToDo/ToDoHeader/ToDoHeaderMobile.tsx","Components/ToDo/ToDoHeader/ToDoHeaderContainer.tsx","Components/ToDo/ToDoForm/ToDoForm.tsx","Components/ToDo/ToDoMobile.tsx","Components/ToDo/ToDoActions/ToDoActionsRouter.tsx","Components/ToDo/TimeScale/TaskItem/TaskItem.tsx","Components/ToDo/TimeScale/TaskItem/TaskItemContainer.tsx","utils/array-helpers.ts","Components/ToDo/TimeScale/TimeScale.tsx","Components/ToDo/TimeScale/TimeScaleContainer.tsx","Components/ToDo/ToDoBrowser.tsx","Components/ToDo/Schedule/Schedule.tsx","Components/ToDo/ToDoContainer.tsx","redux/appReducer.ts","redux/codeReducer.ts","api/projectAPI.ts","api/ControllerMethodsAPI.ts","redux/projectReducer.ts","api/ProviderAPI.ts","redux/ProviderReducer.ts","api/taskListAPI.ts","redux/TaskListReducer.ts","api/usersAPI.ts","redux/usersReducer.ts","api/vocabularyAPI.ts","redux/vocabularyReducer.ts","redux/ContactsReducer.ts","api/productsAPI.ts","redux/productsReducer.ts","redux/store.ts","Components/Header/MenuPopover.tsx","Components/Header/MenuMobile.tsx","Components/Header/MenuBrowser.tsx","Components/Header/MenuContainer.tsx","Components/Header/Header.tsx","Components/Header/HeaderContainer.tsx","Components/Login/LoginForm.tsx","Components/Login/Login.tsx","Components/Login/LoginContainer.tsx","Components/Orders/Orders.tsx","Components/Orders/OrdersContainer.tsx","Components/TasksTree/TaskTreeForm/Project/BackendForm/BackendForm.tsx","Components/TasksTree/TaskTreeForm/Project/BackendForm/BackendFormContainer.tsx","Components/TasksTree/TaskTreeForm/Project/NewProject/NewProjectForm.tsx","Components/TasksTree/TaskTreeForm/Project/OldProject/OldProjectForm.tsx","Components/TasksTree/TaskTreeForm/Project/OldProject/OldProjectFormContainer.tsx","Components/TasksTree/TaskTreeForm/Project/ProjectForm.tsx","Components/TasksTree/TaskTreeForm/NewTaskTreeForm.tsx","Components/TasksTree/TaskTreeBrowserItem.tsx","Components/TasksTree/TaskTreeBrowserItemContainer.tsx","Components/TasksTree/RunTask.tsx/RunTaskForm.tsx","Components/TasksTree/TaskListActions/TaskListActions.ts","Components/TasksTree/TasksTreeBrowser.tsx","Components/TasksTree/TaskTreeMobileItem.tsx","Components/TasksTree/TasksTreeMobile.tsx","Components/TasksTree/TasksTreeContainer.tsx","Components/Register/RegisterForm.tsx","Components/Register/Register.tsx","Components/Register/RegisterContainer.tsx","Components/Users/Users.tsx","Components/Users/UsersMobile.tsx","redux/usersSelector.ts","Components/Users/UsersContainer.tsx","Components/Users/CurrentUser/UserDataForm.tsx","Components/Users/CurrentUser/CurrentUser.tsx","Components/Users/CurrentUser/CurrentUserMobile.tsx","Components/Users/CurrentUser/CurrentUserContainer.tsx","Components/Development/Projects/Projects.tsx","Components/Development/Projects/ProjectsContainer.tsx","Components/Development/Projects/CurrentProject/Backend/Instanses/InstansesForm.tsx","Components/Development/Projects/CurrentProject/Backend/Models/FieldList.tsx","Components/Development/Projects/CurrentProject/Backend/Models/FieldListContainer.tsx","Components/Development/Projects/CurrentProject/Backend/Models/FieldForm.tsx","Components/Development/Projects/CurrentProject/Backend/Models/ModelForm.tsx","Components/Development/Code/Model/ModelCode.tsx","Components/Development/Code/Model/ModelCodeContainer.tsx","Components/Development/Code/CodeModal.tsx","Components/Development/Code/CodeModalContainer.tsx","Components/Development/Projects/CurrentProject/Backend/Models/Models.tsx","Components/Development/Projects/CurrentProject/Backend/Models/ModelsContainer.tsx","Components/Development/Projects/CurrentProject/Backend/Controllers/ControllerForm.tsx","Components/Development/Projects/CurrentProject/Backend/Controllers/ControllerMethodsForm/ControllerMethodsCode.tsx","Components/Development/Projects/CurrentProject/Backend/Controllers/ControllerMethodsForm/RequestItem.tsx","Components/Development/Projects/CurrentProject/Backend/Controllers/ControllerMethodsForm/ResponseItem.tsx","Components/Development/Projects/CurrentProject/Backend/Controllers/ControllerMethodsForm/ControllerMethodsForm.tsx","Components/Development/Projects/CurrentProject/Backend/Controllers/ControllerMethods.tsx","Components/Development/Projects/CurrentProject/Backend/Controllers/ControllerMethodsContainer.tsx","Components/Development/Projects/CurrentProject/Backend/Controllers/FullControllerMethodCode/FullControllerMethodCode.tsx","Components/Development/Projects/CurrentProject/Backend/Controllers/FullControllerMethodCode/FullControllerMethodCodeContainer.tsx","Components/Development/Projects/CurrentProject/Backend/Controllers/Controllers.tsx","Components/Development/Projects/CurrentProject/Backend/Controllers/ControllersContainer.tsx","Components/Development/Projects/CurrentProject/Backend/Backend.tsx","Components/Development/Projects/CurrentProject/Backend/BackendContainer.tsx","Components/Development/Projects/CurrentProject/Frontend/Instanses/InstansesFrontendForm.tsx","Components/Development/Projects/CurrentProject/Frontend/Frontend.tsx","Components/Development/Projects/CurrentProject/CurrentProject.tsx","Components/Development/Projects/CurrentProject/CurrentProjectContainer.tsx","Components/English/Trening/Trening.tsx","Components/English/Trening/TreningContainer.tsx","Components/English/CarTrener/CarTrenerSettings.tsx","Components/English/CarTrener/SayingWords/SayingWords2.tsx","Components/English/CarTrener/LerningWords/LerningWords.tsx","Components/English/CarTrener/LerningWords/LerningWordsContainer.tsx","Components/English/CarTrener/CarTrener.tsx","Components/English/CarTrener/CarTrenerContainer.tsx","Components/English/English.tsx","Components/English/EnglishContainer.tsx","utils/components/Contact/Contact.tsx","utils/components/Contact/ContactContainer.tsx","Components/Providers/ProviderForm/ProviderForm.tsx","Components/Providers/Providers.tsx","Components/Providers/ProvidersContainer.tsx","Components/Products/ProductsCategoryTree/ProductsCategoryTree.tsx","Components/Products/Products.tsx","Components/Products/ProductsContainer.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ResultCodesEnum","validateRequired","value","errors","validateEmail","test","validatePhone","length","Number","FormItem","Form","Item","Option","Select","CheckboxItem","CheckboxMobile","TextArea","Input","CreateAntField","AntComponent","field","form","hasFeedback","label","selectOptions","submitCount","type","props","touched","name","submitted","hasError","submittedError","touchedError","onInputChange","onChange","console","log","undefined","setFieldValue","target","checked","Array","isArray","mode","onBlur","setFieldTouched","isMobile","help","validateStatus","onOk","onSelect","allowClear","map","item","title","MobileComponent","useState","defaultValue","setValue","useEffect","data","key","onOkCheck","autoHeight","onPickerChangeCheck","disabled","defaultChecked","locale","enUs","className","cols","AntSelect","Picker","AntDatePicker","DatePickerMobile","DatePicker","AntInput","InputItem","AntInputPassword","Password","AntTimePicker","TimePicker","AntCheckbox","Checkbox","AntTextArea","TextareaItem","InputNumber","NewTimeByString","dateValue","newDate","Date","dateParts","split","setHours","setMinutes","setSeconds","setMilliseconds","zeroTimeDate","zeroTimeMoment","moment","maxTimeDate","maxTimeMoment","settingasInstanse","timeScaleInrerval","completeInrerval","timeScaleSingle","completeSingle","timeStart","timeEnd","SettingsModal","settings","viewSettings","timeStartParts","timeEndParts","hours","minutes","seconds","milliseconds","getSettingsInstanseFromPros","ToDo","visible","isModalVisible","handleOk","onCancel","handleCancel","initialValues","onSubmit","values","changeSettings","enableReinitialize","SettingsForm","handleSubmit","renderHeader","component","validate","instance","axios","create","withCredentials","baseURL","getToken","localStorage","getItem","defaults","headers","common","sessionStorage","authAPI","remember_token","get","then","response","catch","err","request","post","remember","setItem","removeItem","status","creds","token","initialState","user","isAuth","authError","actions","setAuthUserData","logout","settingType","setAuthError","error","login","dispatch","getState","a","message","authReducer","state","action","isMoment","format","toTimeString","JSON","parse","view_settings","connect","auth","RangePicker","ToDoHeader","isInterval","setIsInterval","startDate","endDate","dates","setDates","dateInterval","isSame","formatString","style","marginLeft","dateString","e","isReadOnly","shape","icon","FileAddOutlined","fontSize","onClick","showDrawer","showModal","SettingOutlined","taskAPI","taskId","delete","put","taskList","taskListIsFetching","taskSaveStatus","errorMessage","setTaskList","setTaskSaveStatus","setErrorMessage","setTaskListIsFetching","isFetchingValue","date","editTaskList","task","createNewTask","reload","getTaskList","start_date","end_date","deleteTask","taskid","updateTask","taskReducer","stateCopy","id","Tasks","ToDoHeaderMobile","toDate","extra","inline","size","isOpen","ToDoForm","initialStatus","initialDrewerData","header","zeroTime","time","time_to_complete","descriptions","ToDoMobile","setIsTimeScaleVisible","setVisible","setIsModalVisible","drawerData","setDrawerData","isTimeScaleVisible","initialFormValues","setInitialFormValues","onComplete","updatedTask","isCompleted","Header","minHeight","document","documentElement","clientHeight","contentStyle","color","textAlign","paddingTop","width","sidebar","formPropsCopy","user_id","userId","resetForm","open","TaskItemMobile","wrap","element","textDecoration","toString","backgroundColor","autoClose","right","text","onPress","left","splitDate","setFullYear","parseInt","setMonth","setDate","onEdit","onOpen","onClose","TimeScale","dateArrey","isSameOrBefore","push","add","getTasksForHour","hour","tasksForHour","filter","getHours","headlineDate","index","orientation","TasksOnly","ToDoActionsRouter","CallAction","isCallVisible","setIsCallVisible","action_data","phone","PhoneOutlined","centered","href","formProps","CallResultForm","TaskItem","setChecked","deleteingInProgess","setDeleteingInProgess","split_time_to_complete","split_start","startTimeTime","endTime","minute","ListGroup","as","join","placement","EditOutlined","danger","DeleteOutlined","sortTaskArrayByParams","b","selestedDates","setSelectedDates","success","getTimeScaleArrey","timeScaleArrey","tomorowTasks","sort","getHeadlineLabel","i","timeVal","concat","ToDoBrowser","ToDoHeaderContainer","bordered","SettingsModalContainer","splitTime","splitTime_to_complete","closable","initialized","location","appReducer","codeRowsArray","codeType","codeTargetName","setShowCodeModal","isShow","codeData","setCodeTarget","codeReducer","projectAPI","projectId","backendAPI","backendId","modelsAPI","modelId","controllersAPI","controllerId","controllerMethodsAPI","controllerMethodId","projectList","isProjectLoaded","modelsList","controllersList","controllerMethodsList","isLoaded","backendData","getProjectList","projects","getModelsList","models","createController","controllers","getControllerMethodsList","controllerMethods","updateControllerMethodsList","createControllerMethodsList","projectReducer","ProviderAPI","providerId","ContactAPI","providersList","providerReducer","taskListAPI","isTaskListLoaded","selectedTasks","setSelectedTasks","backSelectedTasks","createNewTaskList","deleteTaskList","updateTaskList","taskListReducer","newSelectedTasks","pop","usersAPI","usersList","isUsersDataChanged","setUsersList","updateUserList","changedUserData","setUsersDataChanged","getUsersList","UsersList","updateUser","authActions","usersReducer","statetCopy","newUserList","vocabularyAPI","part","vocabularyId","wordId","vocabularyList","count","toLern","setVocabularyList","setLerningTarget","learningTarget","setVocabularyList2","setToLern","setResults","result","updateVocabulary","getWordsToLern","toLearn","vocabularyReducer","contactList","contactReducer","productsAPI","catalogItemName","productCatigoryList","productReducer","rootReducer","combineReducers","app","users","code","vocabulary","providors","contacts","products","store","createStore","applyMiddleware","thunkMiddleware","Popover","MenuPopover","mask","overlay","onVisibleChange","opt","children","onLogout","height","padding","marginRight","display","alignItems","MenuMobile","history","useHistory","useLocation","showMenu","setShowMenu","menuData","forEach","dataItem","pathname","getSelectedMenuItem","selectedMenuItem","setSelectedMenuItem","subMenu","cItem","replace","menuEl","loadingEl","justifyContent","leftContent","src","alt","onLeftClick","preventDefault","rightContent","appLocation","to","SubMenu","Menu","MenuBrowser","theme","childs","userStatus","MenuContainer","LoginForm","Login","email","password","block","Orders","BackendForm","isBackendNew","isProjectListLoaded","setOldProjectsData","oldProjectsData","onSelectBackEndType","NewProjectForm","frontend","setFrontend","backend","setBackend","setIsBackendNew","submitFrontEnd","val","OldProjectForm","ProjectForm","isNewType","setIsNewType","NewTaskTreeForm","taskTypes","taskType","setTaskType","task_type","Panel","Collapse","TaskTreeBrowserItem","parent_id","onAddSubtask","day","zone","newFormValues","onStatusChange","onRunTask","String","ChildItem","dataSource","childsTasklList","renderItem","CollapseItem","childsList","getChildsList","isLast","totalTime","groupCollapsed","timeParts","days","groupEnd","draggable","defaultActiveKey","collapsible","ghost","LastItem","data-toggle","aria-controls","ButtonsBlock","CaretRightOutlined","PlusCircleOutlined","elem","RunTaskFormCall","checkActionsType","formPropsData","lead_name","phone_number","getInitialValues","getSelectOptions","taskTreeTypes","TasksTreeBrowser","runTaskVisible","setRunTaskVisible","runData","setRunData","newTaskList","okText","cancelText","newToDo","description","createNewToDo","List","TaskTreeItemMobile","useDispatch","taskItem","new_time_to_complete","onComplet","initialTimeToComplete","TasksTreeMobile","onAdd","taskName","onOpenChange","parentId","isSubform","childTypes","RegisterForm","statusOptions","Register","register","credsToLogin","Object","prototype","hasOwnProperty","call","Users","url","useRouteMatch","UserStatus","UsersMobile","getUsersListSelector","createSelector","UserDataForm","userData","created_at","updated_at","FormFielsd","isChanged","setIsChanged","submitPosible","getTargetUser","toDoPart","toDoList","currentPage","defaultPageSize","startIndex","endIndex","CurrentUser","setDefaultPageSize","setCurrentPage","toDoFormVisible","setToDoFormVisible","match","params","setDateInterval","total","showTotal","range","defaultCurrent","onShowSizeChange","current","tasklist","toDo","isBetween","TodoItem","CurrentUserMobile","getTaskListCallback","useCallback","onTaskOpen","enUS","Math","ceil","Projects","InstansesForm","isDataChanged","setIsDataChanged","FieldList","fields","targetName","fieldName","fieldType","isNulleble","isPrimary","isNew","openModalToAddField","fieldId","deleteField","fieldParam","FieldRow","rowBG","FieldForm","radioValue","setRadioValue","Group","setValues","ModelForm","ModelCode","soft_delete","db","toUpperCase","slice","tab","getFieldtype","Fillable","Hidden","tabs","getTabs","CodeModal","ModelCodeContainer","getTargetComponennt","Models","modelItem","changePanel","updateModel","vals","createModel","backend_id","CodeModalContainer","ModelFormItem","fieldsdata","fieldInit","formValues","oldValue","newFieldData","stringify","own","ModelView","initialFieldValues","setInitialFieldValues","emptyInitialModalValues","newFieldName","newFieldType","initialModalValues","setInitialModalValues","initialValues2","setInitialValues2","targetData","newController","isResource","createControllerThunk","modalFieldFormValues","newFields","isUpdate","ControllerForm","ControllerMethodsCode","methodData","body_actions","getResponse","responseData","getMetodResponse","getResponseResponse","tabIndex","methodName","responseBlock","responseItems","variable","RequestItem","showSearch","dropdownStyle","maxHeight","overflow","placeholder","showCheckedStrategy","typeValue","labelList","onRowChange","selectable","per_id","model","event","ResponseItem","responseInit","controllerMethod","methodId","newResponse","setResponseValues","responseRows","rowValue","elementNumber","param","ResponseRows","onNameChange","onVariableChange","ControllerMethodsForm","setRequest","isRequest","setIsRequest","setResponse","isResponse","setIsResponse","setBody_actions","isBody_actions","setIsBody_actions","onAddRequest","newRequest","requestCopy","RestTypeOtions","onKeyDown","v","keyCode","before","substr","selectionEnd","after","newStart","selectionStart","newEnd","setTimeout","rows","responseValues","ControllerMethods","emptyInitialValues","setMethodData","setinitialValues","modalTitle","setModalTitle","controllerData","newControllerMethodsList","controller_id","isMiddleware","rest_type","showMethod","FullControllerMethodCode","methods","setMethods","method","Controllers","getControllersList","updateController","ControllerItem","isResurce","modelsOptions","options","getOptions","folder","model_id","ControllerInstansesForm","needGetMethods","Backend","activeKey","setActiveKey","getBackendData","project","getTargetProject","projectsList","instansesInitialValues","ip","closeKey","openKey","updateBackend","isProjectsLoaded","InstansesFrontendForm","treeData","addTreeItem","trace","TreeSRC","checkable","defaultExpandedKeys","defaultSelectedKeys","defaultCheckedKeys","selectedKeys","info","onCheck","checkedKeys","FolderRow","Frontend","getCurrentFrontend","CurrentProject","frontend_id","Trening","require","targetIndex","setTargetIndex","answer","setAnswer","SpeechRecognition","browserSupportsSpeechRecognition","onNext","step","stopListening","startListening","language","continuous","CarTrenerSettingsForm","checkType","setCheckType","onCheckTypeChange","submitForm","checkedChildren","unCheckedChildren","window","webkitSpeechRecognition","SayingWords","speechSynthesis","record","setStatus","recognition","rand","relations","tergetName","setTergetName","targetAnswer","setTargetAnswer","targetLang","setTargetLang","ansswerLang","setAnswerLang","getVoices","voices","ok","setOk","recognizing","setRecognizing","speachResults","setSpeachResults","start","newSpechInstanse","newSpech","lang","voice","speak","interimResults","onaudiostart","onaudioend","onresult","results","speachResultsCopy","transcript","onend","toLocaleLowerCase","includes","lastResult","correctResult","checkTestResult","checkMethod","next","isComand","checkComands","toLowerCase","startLisent","abort","onerror","onnomatch","onsoundstart","onsoundend","utterThis","SpeechSynthesisUtterance","utterThisItem","need","checkPendidng","speaking","pending","LerningWords","selectedWordsIds","setselectedWordsIds","wordsToCompare","setWordsToCompare","getWordsToCompare","wordsArray","wordsCount","rus","reverseWordsArray","wordsRus","targetRus","onError","hits","wordsToCompareCopy","styles","newNelectedWordsIds","choiseValues","thisTarget","check","alert","onCheckEng","words","wordsToCompareLength","getRandomInt","splice","arr","indexOf","targetRelations","array","temporaryValue","randomIndex","currentIndex","floor","random","shuffle","max","word","itemRelations","CarTrener","settarget","isShowRelations","setIsShowRelations","isShowAudio","setIsShowAudio","isLern","setIsLern","initialSettingsValues","compareCount","learnCount","onMove","englishWords","stopPropagation","skipWord","NotificationOutlined","TabPane","Tabs","English","getVocabularyList","showQuickJumper","pageNumber","footer","languige","part_of_speech","Contact","setContacts","saveNewContact","contact","contactsCopy","createNewContact","Skype","Viber","Telegram","WhatsApp","providers_id","canAdd","NewContactForm","contactData","setContactData","checkedValue","contactDataCopy","providorsList","ProviderForm","Providers","emptyInitialvalues","initialvalues","setInitialvalues","getProvidersList","createNewProvider","updateProvider","marks","changeTab","Schedule","dayNumber","ScheduleDay","min","vertical","reverse","tipFormatter","hourNumber","minNumber","keys","contecstsDaily","ProductsCategoryTree","catalogListTree","startCatalogItem","startProductParamParsing","getProductDescriptions","total_count","Products","setCatalogListTree","productCategoryList","getProductCategoryList","createCatalogListTree","startCatalogParsing","targetId","getChildsForCatalogListItem","child","AppContainer","compose","withRouter","initializeApp","promise","resultCode","Promise","all","addLocation","setLocation","instanseCreds","parseQueryString","exact","path","render","ProductsContainer","ProvidersContainer","Page404","MainApp","search","pair","subTitle","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.76a8fc66.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nexport const instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://crmapiserver.h1n.ru/api/',\r\n})\r\n\r\nexport enum ResultCodesEnum {\r\n    Success = 0,\r\n    Error = 1\r\n}\r\n\r\nexport type APIResponseType<D = {}, RC = ResultCodesEnum> = {\r\n    data: D\r\n    messages: Array<string>\r\n    resultCode: RC\r\n}\r\n\r\nexport const getToken = (): string => {\r\n    if (localStorage.getItem('remember_token')) {\r\n        instance.defaults.headers.common['X-Auth-Token'] = localStorage.getItem('remember_token')\r\n    }\r\n    if (sessionStorage.getItem('remember_token')) {\r\n        instance.defaults.headers.common['X-Auth-Token'] = sessionStorage.getItem('remember_token')\r\n    }\r\n    return instance.defaults.headers.common['X-Auth-Token']\r\n}","export const validateRequired = (value: string) => {\r\n    let errors;\r\n    if (!value) {\r\n        errors = \"Required!\";\r\n    }\r\n    return errors;\r\n}\r\n\r\nexport const validateEmail = (value: string) => {\r\n    let errors;\r\n\r\n    if (!value) {\r\n        errors = \"Required!\";\r\n    } else if (!/^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/.test(value)) {\r\n        errors = \"Invalid email address!\";\r\n    }\r\n\r\n    return errors;\r\n};\r\n\r\nexport const validateAsync = (value: string) => {\r\n    const sleep = () => new Promise(resolve => setTimeout(resolve, 2000));\r\n    return sleep().then(() => {\r\n        if (['admin', 'null', 'god'].includes(value)) {\r\n            return 'Nice try'\r\n        }\r\n    })\r\n}\r\n\r\nexport const validatePhone = (value: string) => {\r\n    let errors;\r\n    if (!value) {\r\n        errors = \"Required!\";\r\n    } else if (value.length === 1) {\r\n        if ( !Number(value) ) {\r\n            if (value !== '+') {\r\n                errors = \"NOT NUMBER!\";\r\n            }\r\n        }\r\n    } else if (value.length < 9) {\r\n        if (!Number(value)) {\r\n            errors = \"NOT NUMBER!\"\r\n        } else {\r\n            errors = \"Phone number is short\"\r\n        }\r\n    } else if (value.length === 9) {\r\n        const prefix = value[0]+value[1]\r\n        if (prefix !== '25' || '29' || '33' || '44') {\r\n            errors = \"Wrong prefix\"\r\n        }\r\n    } else if (value.length < 12) {\r\n        if (value[0] !== '+') {\r\n            if (!Number(value)) {\r\n                errors = \"NOT NUMBER!\"\r\n            } else {\r\n                errors = \"Phone number is short!\"\r\n            }\r\n        } else {\r\n            if (!Number(value)) {\r\n                errors = \"NOT NUMBER!\"\r\n            } \r\n        }\r\n    } else if (value.length === 13) {\r\n        if (value[0] !== '+') {\r\n            errors = \"Phone number is too long!\"\r\n        }\r\n    }else if (value.length > 13) {\r\n        errors = \"Phone number is too long!\"\r\n    }\r\n\r\n    return errors;\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport { isMobile } from \"react-device-detect\"\r\nimport {\r\n    DatePicker,\r\n    Form,\r\n    Input,\r\n    TimePicker,\r\n    Select,\r\n    Checkbox,\r\n    InputNumber \r\n} from \"antd\"\r\nimport enUs from 'antd-mobile/lib/date-picker/locale/en_US'\r\nimport {\r\n    List,\r\n    InputItem,\r\n    Checkbox as CheckboxMobile,\r\n    TextareaItem,\r\n    Picker,\r\n    DatePicker as DatePickerMobile,\r\n} from 'antd-mobile'\r\n\r\nconst FormItem = Form.Item\r\nconst Option = Select.Option\r\nconst CheckboxItem = CheckboxMobile.CheckboxItem\r\nconst { TextArea } = Input;\r\n\r\nconst CreateAntField = (AntComponent: any) => (\r\n    {\r\n        field,\r\n        form,\r\n        hasFeedback,\r\n        label,\r\n        selectOptions,\r\n        submitCount,\r\n        type,\r\n        ...props\r\n    }: any\r\n) => {\r\n\r\n    const touched = form.touched[field.name];\r\n    const submitted = submitCount > 0;\r\n    const hasError = form.errors[field.name];\r\n    const submittedError = hasError && submitted;\r\n    const touchedError = hasError && touched;\r\n\r\n    const onInputChange = (value: any) => {\r\n        //console.log(value)\r\n        //console.log(props)\r\n\r\n        if (props.onChange) {\r\n            console.log('onChange field in create', value)\r\n            props.onChange(field.name, value)\r\n        }\r\n\r\n        if (value === undefined) {\r\n            if (type === 'select' || type === 'time') {\r\n                //console.log('1')\r\n                form.setFieldValue(field.name, null)\r\n            }\r\n        } else if(value === null) {\r\n            //console.log('2')\r\n            form.setFieldValue(field.name, null)\r\n        } else if (type === 'checkbox') {\r\n            //console.log('3')\r\n            form.setFieldValue(field.name, value.target.checked)\r\n        } else if (value.target) {\r\n            //console.log('4')\r\n            form.setFieldValue(field.name, value.target.value)\r\n        } else {\r\n            if (type === 'time') {\r\n                //console.log('5')\r\n                form.setFieldValue(field.name, value)\r\n            } else if (Array.isArray(value)) {\r\n                //console.log('6')\r\n                if (props.mode && props.mode === 'multiple') {\r\n                    form.setFieldValue(field.name, value) // Для select mode === 'multiple'\r\n                } else {\r\n                    form.setFieldValue(field.name, value[0])\r\n                }\r\n            } else {\r\n                //console.log('7')\r\n                form.setFieldValue(field.name, value)\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    const onChange = (value: string | React.ChangeEvent<HTMLInputElement>) => {\r\n        if (props.onChange) {\r\n            console.log('onChange field in create')\r\n            props.onChange(field.name, value)\r\n        }\r\n        if (typeof value !== \"string\" && value.target.type === 'checkbox') {\r\n            form.setFieldValue(field.name, value.target.checked)\r\n        } else {\r\n            form.setFieldValue(field.name, value)\r\n        }\r\n    }\r\n\r\n    const onBlur = () => form.setFieldTouched(field.name, true);\r\n\r\n    // console.log('props.: ', props)\r\n    \r\n    return (\r\n        <FormItem\r\n            label={!isMobile ? label : null}\r\n            hasFeedback={\r\n                (hasFeedback && submitted) || (hasFeedback && touched) ? true : false\r\n            }\r\n            help={submittedError || touchedError ? hasError : false}\r\n            validateStatus={submittedError || touchedError ? \"error\" : \"success\"}\r\n        >\r\n            {isMobile ?\r\n                <MobileComponent\r\n                    {...props}\r\n                    AntComponent={AntComponent}\r\n                    onBlur={onBlur}\r\n                    type={type}\r\n                    onInputChange={onInputChange}\r\n                    onChange={onChange}\r\n                    label={label}\r\n                    selectOptions={selectOptions}\r\n                    value={field.value}\r\n                    onOk={props.onSelect}\r\n                />\r\n                :\r\n                <AntComponent\r\n                    {...field}\r\n                    {...props}\r\n                    allowClear={selectOptions ? \"true\" : \"false\"}\r\n                    onBlur={onBlur}\r\n                    onChange={type ? onInputChange : onChange}\r\n                    checked={field.value}\r\n                >\r\n                    {selectOptions &&\r\n                        selectOptions.map((item: any) => <Option title={item.name} value={item.value} key={item.name}>{item.name}</Option>)}\r\n\r\n                    {/* {\r\n                        type === 'radio' ? \r\n                        // <label htmlFor={'1'}>\r\n                            // {label} \r\n                            <>label</>\r\n                        // </label>\r\n                        : null\r\n                    } */}\r\n                </AntComponent>\r\n            }\r\n\r\n        </FormItem>\r\n    )\r\n}\r\n\r\n\r\n\r\ntype SelectOptionsType = {\r\n    name: string,\r\n    value: string\r\n}\r\n\r\ntype MobileComponentType = {\r\n    onInputChange: (value: any) => void,\r\n    selectOptions: Array<SelectOptionsType>,\r\n    AntComponent: any,\r\n    onBlur: () => void,\r\n    type: 'select' | 'date' | 'text' | 'number' | 'password' | 'time' | 'checkbox' | 'textarea',\r\n    onChange: (value: any) => void,\r\n    label: string,\r\n    value: any,\r\n    onOk: (val:any)=>void,\r\n    disabled?: boolean,\r\n}\r\n\r\nconst MobileComponent: React.FC<MobileComponentType> = (props) => {\r\n    const [defaultValue, setValue] = useState(props.type === 'select' ? [props.value] : props.value)\r\n\r\n    useEffect(() => {\r\n        if (props.type === 'select' && !Array.isArray(props.value) ) {\r\n            setValue([props.value])\r\n        } else {\r\n            setValue(props.value)\r\n        }\r\n    }, [props.value, props.type])\r\n\r\n    const onInputChange = (value: any) => {\r\n        setValue(value)\r\n        props.onInputChange(value)\r\n        if (props.type === 'checkbox') {\r\n            props.onOk(value)\r\n        }\r\n    }\r\n\r\n    const onPickerChange = (value:any) => {\r\n        setValue(value)\r\n    }\r\n\r\n    const onOk = (value:any) => {\r\n        setValue(value)\r\n        if (props.onOk) {\r\n            props.onOk(value)\r\n        }\r\n        \r\n    }\r\n\r\n    type DataType = Array<\r\n        {\r\n            label: string,\r\n            value: string,\r\n            key: string\r\n        }\r\n    >\r\n\r\n    let data: DataType\r\n    if (props.selectOptions !== null && props.selectOptions !== undefined) {\r\n        data = props.selectOptions.map((item: SelectOptionsType) => {\r\n            return (\r\n                {\r\n                    label: item.name,\r\n                    value: item.value,\r\n                    key: item.name\r\n                }\r\n            )\r\n        })\r\n    } else {\r\n        data = []\r\n    }\r\n\r\n    const mode = props.type\r\n    \r\n    const autoHeight = props.type === 'textarea' ? {autoHeight: true} : null\r\n    const onPickerChangeCheck = props.type === 'date' || 'time' ? onPickerChange : null\r\n    const disabled = props.disabled ? {disabled: true} : null\r\n\r\n    let onOkCheck\r\n    if (props.AntComponent.onOk) {\r\n        onOkCheck = onOk\r\n    }\r\n\r\n    if (props.disabled) {\r\n\r\n    }   \r\n\r\n    return (\r\n        <List>\r\n            <props.AntComponent\r\n                onBlur={props.onBlur}\r\n                type={props.type}\r\n                mode={mode}\r\n\r\n                defaultValue={defaultValue}\r\n                defaultChecked={defaultValue}\r\n                value={defaultValue}\r\n\r\n                key={props.label}\r\n                title={props.label}\r\n                locale={enUs}\r\n                {...autoHeight}\r\n                {...disabled}\r\n\r\n                className={props.type === 'text' ? 'pl-0' : null}\r\n                data={data}\r\n                cols={1}\r\n                \r\n                {...onOkCheck}\r\n                {...onPickerChangeCheck}\r\n                onChange={props.type ? onInputChange : props.onChange}\r\n            >\r\n                <List.Item\r\n                    className=\"pl-0\"\r\n                >\r\n                    {props.label}\r\n                </List.Item>\r\n            </props.AntComponent>\r\n        </List>\r\n    )\r\n}\r\n\r\n\r\nexport const AntSelect = !isMobile ? CreateAntField(Select) : CreateAntField(Picker)\r\nexport const AntDatePicker = !isMobile ? CreateAntField(DatePicker) : CreateAntField(DatePickerMobile)\r\nexport const AntInput = !isMobile ? CreateAntField(Input) : CreateAntField(InputItem)\r\nexport const AntInputPassword = !isMobile ? CreateAntField(Input.Password) : CreateAntField(InputItem)\r\nexport const AntTimePicker = !isMobile ? CreateAntField(TimePicker) : CreateAntField(DatePickerMobile)\r\nexport const AntCheckbox = !isMobile ? CreateAntField(Checkbox) : CreateAntField(CheckboxItem)\r\nexport const AntTextArea = !isMobile ? CreateAntField(TextArea) : CreateAntField(TextareaItem)\r\nexport const AntInputNumber = !isMobile ? CreateAntField(InputItem) : CreateAntField(InputNumber)\r\n","\r\n\r\nexport const NewTimeByString = (dateValue?: string): Date => {\r\n    const newDate = new Date()\r\n    let dateParts: Array<string> = []\r\n    if (dateValue) {\r\n        dateParts = dateValue.split(':')\r\n    }\r\n    \r\n    newDate.setHours(!dateParts[0] ? 0 : Number(dateParts[0]))\r\n    newDate.setMinutes(!dateParts[1] ? 0 : Number(dateParts[1]))\r\n    newDate.setSeconds(!dateParts[2] ? 0 : Number(dateParts[2]))\r\n    newDate.setMilliseconds(!dateParts[3] ? 0 : Number(dateParts[3]))\r\n\r\n    return newDate\r\n}\r\n\r\nexport const NewDateByString = (dateValue?: string): Date => {\r\n    const newDate = new Date()\r\n    let dateParts: Array<string> = []\r\n    if (dateValue) {\r\n        dateParts = dateValue.split('-')\r\n    }\r\n    \r\n    newDate.setFullYear(!dateParts[0] ? 0 : Number(dateParts[0]))\r\n    newDate.setMonth(!dateParts[1] ? 0 : Number(dateParts[1]))\r\n    newDate.setDate(!dateParts[2] ? 0 : Number(dateParts[2]))\r\n\r\n    return newDate\r\n}","import React, { ReactNode } from 'react'\r\nimport { Modal } from 'antd'\r\nimport { SettingsModalPropsType } from './SettingsModalContainer'\r\nimport { Form, Field, FormikProps, Formik } from 'formik'\r\nimport { validateRequired } from '../../../utils/Formik/ValidateFields'\r\nimport { AntTimePicker, AntCheckbox } from '../../../utils/Formik/CreateAntField'\r\nimport { List } from 'antd-mobile'\r\nimport moment from \"moment\"\r\nimport { isMobile } from 'react-device-detect'\r\nimport { NewTimeByString } from '../../../utils/Date/NewDeteByString'\r\n\r\nconst zeroTimeDate = NewTimeByString()\r\nconst zeroTimeMoment = moment(zeroTimeDate)\r\n\r\nconst maxTimeDate = NewTimeByString('23:00')\r\nconst maxTimeMoment = moment(maxTimeDate)\r\n\r\nconst settingasInstanse = {\r\n        timeScaleInrerval: false,\r\n        completeInrerval: true,\r\n        timeScaleSingle: true,\r\n        completeSingle: true,\r\n        timeStart: isMobile ? zeroTimeDate : zeroTimeMoment,\r\n        timeEnd: isMobile ? maxTimeDate : maxTimeMoment,\r\n}\r\n\r\nexport type SettingasInstanseType = typeof settingasInstanse\r\n\r\nexport type OwmSettingsModalPropsType = {\r\n    isModalVisible: boolean,\r\n    handleOk: () => void,\r\n    handleCancel: () => void\r\n}\r\n\r\nconst getSettingsInstanseFromPros = (viewSettings: any) => {\r\n    const timeStartParts = viewSettings.timeStart.split(':')\r\n    const timeEndParts = viewSettings.timeEnd.split(':')\r\n\r\n    return {\r\n        ...viewSettings,\r\n        timeStart: isMobile ? NewTimeByString(viewSettings.timeStart) : moment().hours(timeStartParts[0]).minutes(timeStartParts[1]).seconds(0).milliseconds(0),\r\n        timeEnd: isMobile ? NewTimeByString(viewSettings.timeEnd) : moment().hours(timeEndParts[0]).minutes(timeEndParts[1]).seconds(0).milliseconds(0),\r\n    }\r\n}\r\n\r\nconst SettingsModal: React.FC<SettingsModalPropsType> = (props) => {\r\n    const settings = props.viewSettings !== null ? getSettingsInstanseFromPros(props.viewSettings.ToDo) : settingasInstanse\r\n\r\n    const handleSubmit = (values: SettingasInstanseType) => {\r\n        props.changeSettings('ToDo', values)\r\n        props.handleOk()\r\n    }\r\n\r\n    return (\r\n        <Modal\r\n            title=\"Task display settings\"\r\n            visible={props.isModalVisible}\r\n            onOk={props.handleOk}\r\n            onCancel={props.handleCancel}\r\n        >\r\n            <Formik\r\n                initialValues={settings}\r\n                onSubmit={handleSubmit}\r\n                enableReinitialize={true}\r\n            >\r\n                {SettingsForm}\r\n            </Formik>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default SettingsModal\r\n\r\nconst SettingsForm: ((props: FormikProps<{}>) => ReactNode) = (props) => {\r\n    return (\r\n        <Form\r\n            className=\"form-container\"\r\n            onSubmit={props.handleSubmit}\r\n        >\r\n            <List renderHeader={() => 'Single date settings'}>\r\n                <Field\r\n                    component={AntCheckbox}\r\n                    name=\"timeScaleSingle\"\r\n                    label=\"is time scale visible\"\r\n                    submitCount={props.submitCount}\r\n                />\r\n\r\n                <Field\r\n                    component={AntCheckbox}\r\n                    name=\"completeSingle\"\r\n                    label=\"is complete visible\"\r\n                    submitCount={props.submitCount}\r\n                />\r\n            </List>\r\n            <List renderHeader={() => 'Inrerval date settings'}>\r\n                <Field\r\n                    component={AntCheckbox}\r\n                    name=\"timeScaleInrerval\"\r\n                    label=\"is time scale visible\"\r\n                    submitCount={props.submitCount}\r\n                />\r\n\r\n                <Field\r\n                    component={AntCheckbox}\r\n                    name=\"completeInrerval\"\r\n                    label=\"is complete visible\"\r\n                    submitCount={props.submitCount}\r\n                />\r\n            </List>\r\n            <List renderHeader={() => 'Work day info'}>\r\n                <Field\r\n                    component={AntTimePicker}\r\n                    name=\"timeStart\"\r\n                    type=\"time\"\r\n                    label=\"Start time\"\r\n                    validate={validateRequired}\r\n                    submitCount={props.submitCount}\r\n                    hasFeedback\r\n                />\r\n\r\n                <Field\r\n                    component={AntTimePicker}\r\n                    name=\"timeEnd\"\r\n                    type=\"time\"\r\n                    label=\"End time\"\r\n                    validate={validateRequired}\r\n                    submitCount={props.submitCount}\r\n                    hasFeedback\r\n                />\r\n            </List>\r\n            <div className=\"submit-container\">\r\n                <button className=\"ant-btn ant-btn-primary\" type=\"submit\">\r\n                    Save\r\n                </button>\r\n            </div>\r\n        </Form>\r\n    )\r\n}\r\n\r\n\r\n","import { credsType } from \"../redux/authReducer\";\r\nimport { instance } from \"./api\";\r\n\r\nexport type RegisterFormType = {\r\n    name: string,\r\n    email: string,\r\n    password: string,\r\n    remember?: boolean,\r\n    status?: 'guest' | 'admin'\r\n}\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        let remember_token: string | null = 'error'\r\n        if (localStorage.getItem('remember_token')) {\r\n            remember_token = localStorage.getItem('remember_token')\r\n        }\r\n        if (sessionStorage.getItem('remember_token')) {\r\n            remember_token = sessionStorage.getItem('remember_token')\r\n        }\r\n        return instance.get(`authMe/`+remember_token).then( (response) => {\r\n            return response\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                console.log('authMe ERROR: ', err.response)\r\n                return err.response\r\n            } else if (err.request) {\r\n            } else {\r\n            }\r\n            return null\r\n        })\r\n    },\r\n\r\n    login(data: credsType) {\r\n        return instance.post('login', data)\r\n        .then(response => {\r\n            if (data.remember) {\r\n                if (response.data.remember_token !== null) {\r\n                    localStorage.setItem('remember_token', response.data.remember_token);\r\n                } else {\r\n                    localStorage.removeItem('remember_token');\r\n                }\r\n            } else {\r\n                if (response.data.remember_token !== null) {\r\n                    sessionStorage.setItem('remember_token', response.data.remember_token);\r\n                } else {\r\n                    sessionStorage.removeItem('remember_token');\r\n                }\r\n            }\r\n            \r\n\r\n            return response.status === 200 ? response : null;\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                return err.response\r\n            } else if (err.request) {\r\n            } else {\r\n            }\r\n            return null\r\n        })\r\n    },\r\n\r\n    register(creds: RegisterFormType) {\r\n        return instance.post('register', creds)\r\n        .then(response => {\r\n            if (response.data.remember_token !== null) {\r\n                localStorage.setItem('remember_token', response.data.token);\r\n            } else {\r\n                localStorage.removeItem('remember_token');\r\n            }\r\n            return response.status === 200 ? response : null;\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                return err.response\r\n            } else if (err.request) {\r\n            } else {\r\n            }\r\n            return null\r\n        })\r\n    }\r\n}","import { authAPI, RegisterFormType } from \"../api/authAPI\";\r\nimport { SettingasInstanseType } from \"../Components/ToDo/Settings/SettingsModal\";\r\nimport { BaseThunkType, InferActionsTypes } from \"./store\"\r\nimport moment from \"moment\"\r\n\r\ntype InitialStateType = {\r\n    user: UserType | null,\r\n    remember_token: string | null,\r\n    isAuth: boolean\r\n    viewSettings: any\r\n    authError: null | string\r\n}\r\nlet initialState: InitialStateType = {\r\n    user: null,\r\n    remember_token: null,\r\n    isAuth: false,\r\n    viewSettings: {\r\n        ToDo: {}\r\n    },\r\n    authError: null\r\n}\r\n\r\nconst authReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/AUTH/SET_AUTH_ERROR':\r\n            return{...state, authError: action.error}\r\n        case 'SN/AUTH/SET_SETTINGS_DATA':\r\n            let viewSettings = {...state.viewSettings}\r\n            \r\n            let timeStart: string = ''\r\n            if (moment.isMoment(action.settings.timeStart)) {\r\n                timeStart = action.settings.timeStart.format('h:mm A')\r\n            } else {\r\n                timeStart = action.settings.timeStart.toTimeString().split(' ')[0]\r\n            }\r\n            let timeEnd: string = ''\r\n            if (moment.isMoment(action.settings.timeEnd)) {\r\n                timeEnd = action.settings.timeEnd.format('h:mm A')\r\n            } else {\r\n                timeEnd = action.settings.timeEnd.toTimeString().split(' ')[0]\r\n            }\r\n\r\n            viewSettings[action.settingType] = {\r\n                ...action.settings,\r\n                timeStart: timeStart,\r\n                timeEnd: timeEnd\r\n            }\r\n            return {...state, viewSettings: viewSettings}\r\n        case 'SN/AUTH/SET_USER_DATA':\r\n            if (action.user !== null) {\r\n                return { ...state, \r\n                            user: action.user, \r\n                            remember_token: action.remember_token, \r\n                            isAuth: true, \r\n                            viewSettings: JSON.parse(action.user.view_settings),\r\n                            authError: null\r\n                        }\r\n            } else {\r\n                return initialState;\r\n            }\r\n            \r\n        case 'SN/AUTH/LOGOUT':\r\n            localStorage.removeItem('remember_token')\r\n            sessionStorage.removeItem('remember_token');\r\n            return initialState;\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport type UserType = {\r\n    created_at: string\r\n    email: string\r\n    email_verified_at: null | string\r\n    id: number\r\n    name: string\r\n    status: string\r\n    updated_at: string,\r\n    view_settings: string\r\n    toDoList?: Array<any> \r\n}\r\nexport const actions = {\r\n    setAuthUserData: (user: UserType | null, remember_token: string | null) => ({ type: 'SN/AUTH/SET_USER_DATA', user, remember_token } as const),\r\n    logout: () => ({type: 'SN/AUTH/LOGOUT'} as const),\r\n    changeSettings: (settingType: string, settings: SettingasInstanseType) => ({ type: 'SN/AUTH/SET_SETTINGS_DATA', settingType, settings } as const),\r\n    setAuthError: (error: string) => ({type: 'SN/AUTH/SET_AUTH_ERROR', error } as const),\r\n}\r\n\r\nexport const getAuthUserData = (): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        let response = await authAPI.me()\r\n\r\n        if (response !== null) {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(actions.setAuthUserData(response.data.user, response.data.remember_token))\r\n            } else {\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport type credsType = {\r\n    email: string,\r\n    password: string,\r\n    remember: boolean\r\n}\r\n\r\nexport const login = (data: credsType): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        let response = await authAPI.login(data)\r\n        if (response) {\r\n            if (response.status === 200) {\r\n                dispatch(actions.setAuthUserData(response.data.user, response.data.remember_token))\r\n            } else {\r\n                dispatch(actions.setAuthError(response.data.message))\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport const register = (creds: RegisterFormType): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        const response = await authAPI.register(creds)\r\n        if (response.status === 200) {\r\n            const credsToLogin: credsType = {\r\n                email: creds.email,\r\n                password: creds.password,\r\n                remember: creds.remember ? creds.remember : false\r\n            }\r\n            dispatch(login(credsToLogin))\r\n        } else {\r\n            let message: string = ''\r\n            for (const key in response.data) {\r\n                if (Object.prototype.hasOwnProperty.call(response.data, key)) {\r\n                    const element = response.data[key];\r\n                    message = message+key+': '+element[0]+';'\r\n                }\r\n            }\r\n            \r\n            dispatch(actions.setAuthError(message))\r\n        }\r\n        \r\n    }\r\n}\r\n\r\nexport default authReducer;\r\n\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType< ActionsTypes>\r\n\r\n","import {connect} from 'react-redux'\r\nimport SettingsModal, { OwmSettingsModalPropsType, SettingasInstanseType } from './SettingsModal'\r\nimport { AppStateType } from '../../../redux/store'\r\nimport { actions } from './../../../redux/authReducer'\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    changeSettings: (settingType: string, settings: SettingasInstanseType)=> void\r\n}\r\n\r\nexport type SettingsModalPropsType = MapPropsType & MapDispatchPropsType & OwmSettingsModalPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        viewSettings: state.auth.viewSettings\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwmSettingsModalPropsType, AppStateType>(mapStateToProps, \r\n    {changeSettings: actions.changeSettings} ) \r\n    ( SettingsModal )\r\n    \r\n\r\n","import React, { useState, useEffect } from 'react'\r\nimport { DatePicker, Checkbox, Button } from 'antd'\r\nimport { FileAddOutlined, SettingOutlined } from '@ant-design/icons'\r\nimport { CheckboxChangeEvent } from 'antd/lib/checkbox'\r\nimport {RangeValue} from '../../../Types/types'\r\nimport { ToDoHeaderPropsType } from './ToDoHeaderContainer'\r\nimport moment from 'moment'\r\n\r\nconst { RangePicker } = DatePicker\r\n\r\nconst ToDoHeader: React.FC<ToDoHeaderPropsType> = (props) => {\r\n    const [isInterval, setIsInterval] = useState(false)\r\n    const [dates, setDates] = useState<{startDate: moment.Moment, endDate: moment.Moment}>({startDate: moment(), endDate: moment()})\r\n\r\n    useEffect(() => {\r\n        if ( \r\n            !props.dateInterval.startDate.isSame(dates.startDate.format('YYYY-MM-DD'), \"day\" ) ||\r\n            !props.dateInterval.endDate.isSame(dates.endDate.format('YYYY-MM-DD'), \"day\" )\r\n        ) {\r\n            props.setIsInterval(isInterval, dates)\r\n        }\r\n        \r\n    }, [isInterval, dates, props])\r\n\r\n\r\n    const onDateTypeChange = (e: CheckboxChangeEvent) => {\r\n        if (!e.target.checked) {\r\n            setDates({\r\n                startDate: dates.startDate,\r\n                endDate: dates.startDate\r\n            })\r\n        }\r\n        setIsInterval(e.target.checked)\r\n        props.setIsInterval(e.target.checked, props.dateInterval)\r\n    }\r\n\r\n    const onDateRangeChange = (values: RangeValue<moment.Moment>, formatString: [string, string]): void => {\r\n        if (values !== null && values[0] !== null && values[1] !== null ) {\r\n            setDates({\r\n                startDate: values[0],\r\n                endDate: values[1],\r\n            })\r\n        }\r\n        \r\n    }\r\n\r\n    const onDateChange = (value: moment.Moment | null, dateString: string):void => {\r\n        if (value !== null) {\r\n            setDates({\r\n                startDate: value,\r\n                endDate: value,\r\n            })\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"row w-100\" >\r\n            <div className=\"col-12 col-md-9 col-lg-9 col-xl-7 w-100\">\r\n                <div className=\"d-none d-sm-inline\">\r\n                    <label >{isInterval ? \"Date interval\" : \"Date\"}:</label>\r\n                </div>\r\n\r\n                <div className=\"d-none d-inline\">\r\n                    {isInterval ?\r\n                        <RangePicker\r\n                            onChange={onDateRangeChange}\r\n                            defaultValue={[props.dateInterval.startDate, props.dateInterval.endDate]}\r\n                            value = {[props.dateInterval.startDate, props.dateInterval.endDate]}\r\n                            format='DD-MM-YYYY'\r\n                            style={{ marginLeft: 10 }}\r\n                        />\r\n                        :\r\n                        <DatePicker\r\n                            onChange={onDateChange}\r\n                            defaultValue={props.dateInterval.startDate}\r\n                            format='DD-MM-YYYY'\r\n                            style={{ marginLeft: 10 }}\r\n                        />\r\n                    }\r\n                </div>\r\n            </div>\r\n            \r\n            <div className=\"col-12 col-md-3 col-lg-3 col-xl-2 m-2 m-md-0\" >\r\n                <Checkbox className=\"ml-3\" onChange={onDateTypeChange}>Date interval</Checkbox>\r\n            </div>\r\n            { !props.isReadOnly ?\r\n            <div className=\"col-12 col-md-12 col-lg-4 col-xl-3 mt-lg-2\">\r\n                <Button\r\n                    type=\"primary\"\r\n                    shape=\"round\"\r\n                    icon={\r\n                        <div className=\"d-flex flex-wrap align-content-start\">\r\n                            <FileAddOutlined style={{ fontSize: '18px' }} />\r\n                            <span className=\"ml-1\" style={{ fontSize: '14px' }}>Add</span>\r\n                        </div>}\r\n                    style={{ marginLeft: 10 }}\r\n                    onClick={props.showDrawer}\r\n                />\r\n\r\n                <Button className=\"\"\r\n                    type=\"primary\"\r\n                    shape=\"round\"\r\n                    style={{ marginLeft: 10 }}\r\n                    onClick={props.showModal}\r\n                    icon={\r\n                        <div className=\"d-flex flex-wrap align-content-start\">\r\n                            <SettingOutlined style={{ fontSize: '18px' }} />\r\n                            <span className=\"ml-1\" style={{ fontSize: '14px' }}>Settings</span>\r\n                        </div>} \r\n                    />\r\n            </div>\r\n            : null\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ToDoHeader","import { NewTaskDataType, TaskType } from '../Types/types'\r\nimport {getToken, instance} from './api'\r\n\r\nexport type TaskListType = {\r\n    Tasks: Array<TaskType>\r\n}\r\n\r\nexport const taskAPI = {\r\n    createNewTask(values: NewTaskDataType) {\r\n        return instance.post<TaskListType>(`tasks`, values)\r\n        .then(response => {\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                return err.response\r\n            } else if (err.request) {\r\n            } else {\r\n            }\r\n            return null\r\n        })\r\n    },\r\n\r\n    getTaskList(values: getTaskListValuesType) {\r\n        getToken()\r\n        return instance.post<TaskListType>(`tasks/part`, values)\r\n        .then(response => {\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                return err.response\r\n            } else if (err.request) {\r\n            } else {\r\n            }\r\n            return null\r\n        })\r\n    },\r\n\r\n    deleteTask(taskId: number) {\r\n        getToken()\r\n        return instance.delete<TaskListType>(`tasks/${taskId}`).then(response => {\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                return err.response\r\n            } else if (err.request) {\r\n            } else {\r\n            }\r\n            return null\r\n        })\r\n    }, \r\n\r\n    updateTask(values: NewTaskDataType, taskId: number) {\r\n        getToken()\r\n        return instance.put<TaskListType>(`tasks/${taskId}`, values)\r\n        .then(response => {\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                return err.response\r\n            } else if (err.request) {\r\n            } else {\r\n            }\r\n            return null\r\n        })\r\n    }\r\n}\r\n\r\nexport type getTaskListValuesType = {\r\n    start_date: string, \r\n    end_date: string\r\n}","import { Dispatch } from 'redux'\r\nimport { taskAPI, TaskListType } from '../api/taskApi'\r\nimport { NewTaskDataType, TaskType } from '../Types/types'\r\nimport {BaseThunkType, InferActionsTypes} from './store'\r\nimport moment from 'moment'\r\n\r\nexport type InitialStateType = {\r\n    taskList: null | Array<TaskType>,\r\n    taskListIsFetching: boolean,\r\n    taskSaveStatus: 'no' | 'inProgress' | 'success' | 'error'\r\n    errorMessage: null | string,\r\n    isInterval: boolean,\r\n    dateInterval: {\r\n        startDate: moment.Moment,\r\n        endDate: moment.Moment\r\n    }\r\n}\r\n\r\nlet initialState:InitialStateType = {\r\n    taskList: null,\r\n    taskListIsFetching: false,\r\n    taskSaveStatus: 'no',\r\n    errorMessage: null,\r\n    isInterval: false,\r\n    dateInterval: {\r\n        startDate: moment(),\r\n        endDate: moment()\r\n    }\r\n}\r\n\r\nconst taskReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n    \r\n    switch (action.type) {\r\n        case 'SN/TASK/EDIT_TASK_LIST':\r\n            if (state.taskList !== null) {\r\n            const stateCopy = state.taskList.map( item => {\r\n                if (action.task.id === item.id) {\r\n                    return action.task\r\n                } else {\r\n                    return item\r\n                }\r\n            })\r\n            return {...state, taskList: stateCopy}\r\n            } else {\r\n                return state\r\n            }\r\n\r\n        case 'SN/TASK/SET_TASK_LIST':\r\n            return {...state, taskList: action.taskList.Tasks}\r\n\r\n        case 'SN/TASK/SET_TASK_SAVE_STATUS':\r\n            return {...state, taskSaveStatus: action.taskSaveStatus}\r\n\r\n        case 'SN/TASK/SET_ERROR_MESSAGE':\r\n            return {...state, errorMessage: action.message}\r\n\r\n        case 'SN/TASK/SET_TASK_LIST_IS_FETCHING':\r\n            return {...state, taskListIsFetching: action.isFetchingValue}\r\n\r\n        case 'SN/TASK/SET_IS_INTERVAL':\r\n            const dateInterval = {\r\n                startDate: action.date.startDate,\r\n                endDate: action.date.endDate\r\n            }\r\n            return {...state, isInterval: action.isInterval, dateInterval }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    setTaskList: (taskList: TaskListType) => ({ type: 'SN/TASK/SET_TASK_LIST', taskList } as const),\r\n    setTaskSaveStatus: (taskSaveStatus: 'no' | 'inProgress' | 'success' | 'error') => ({ type: 'SN/TASK/SET_TASK_SAVE_STATUS', taskSaveStatus } as const),\r\n    setErrorMessage: (message: string | null) => ({type: 'SN/TASK/SET_ERROR_MESSAGE', message} as const),\r\n    setTaskListIsFetching: (isFetchingValue: boolean) => ({type: 'SN/TASK/SET_TASK_LIST_IS_FETCHING', isFetchingValue} as const),\r\n    setIsInterval: (isInterval: boolean, date: {startDate: moment.Moment, endDate: moment.Moment}) => ({type: 'SN/TASK/SET_IS_INTERVAL', isInterval, date} as const),\r\n    editTaskList: (task: TaskType) => ({type: 'SN/TASK/EDIT_TASK_LIST', task} as const),\r\n}\r\n\r\nexport const createNewTask = (values: NewTaskDataType, reload:boolean = true): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        dispatch(actions.setTaskSaveStatus('inProgress'))\r\n\r\n        let response = await taskAPI.createNewTask(values)\r\n\r\n        if (response && response.status && response.status === 200) {\r\n            if (reload) {\r\n                const state = getState()\r\n                const startDate = state.task.dateInterval.startDate.format('YYYY-MM-DD')\r\n                const endDate = state.task.dateInterval.endDate.format('YYYY-MM-DD')\r\n                dispatch(getTaskList(startDate, endDate))\r\n            }\r\n            dispatch(actions.setTaskSaveStatus('success'))\r\n            dispatch(actions.setTaskSaveStatus('no'))\r\n        } else {\r\n            if (response && response.data) {\r\n                dispatch(actions.setErrorMessage(response.data.message))\r\n                dispatch(actions.setTaskSaveStatus('error'))\r\n                dispatch(actions.setTaskSaveStatus('no'))\r\n                dispatch( actions.setErrorMessage(null) )\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport const getTaskList = (startDate: string, endDate:string): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        dispatch(actions.setTaskListIsFetching(true))\r\n\r\n        const values = {start_date: startDate, end_date: endDate}\r\n        let response = await taskAPI.getTaskList(values)\r\n\r\n        if (response !== undefined && response !== null) {\r\n            dispatch(actions.setTaskList(response.data))\r\n        } else {\r\n        }\r\n        dispatch(actions.setTaskListIsFetching(false))\r\n    }\r\n}\r\n\r\nexport const deleteTask = (taskid: number, startDate: string, endDate:string): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        let response = await taskAPI.deleteTask(taskid)\r\n\r\n        if (response !== null) {\r\n            dispatch(actions.setErrorMessage('Task deletion was successful'))\r\n            dispatch(getTaskList(startDate, endDate))\r\n            dispatch( actions.setErrorMessage(null) )\r\n        }\r\n    }\r\n}\r\n\r\nexport const updateTask = (values: NewTaskDataType, taskId: number): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        let response = await taskAPI.updateTask(values, taskId)\r\n        console.log(response)\r\n        dispatch(actions.editTaskList(response.data[0]))\r\n    }\r\n}\r\n\r\nexport default taskReducer\r\n\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsTypes>\r\nexport type DispatchType = Dispatch<ActionsTypes>\r\n","import React, { useState } from 'react'\r\nimport { ToDoHeaderPropsType } from './ToDoHeaderContainer'\r\nimport { Button, DatePicker, List, Switch } from 'antd-mobile'\r\nimport enUs from 'antd-mobile/lib/date-picker/locale/en_US'\r\nimport moment from \"moment\"\r\n\r\nconst ToDoHeaderMobile: React.FC<ToDoHeaderPropsType> = (props) => {\r\n    const [isInterval, setIsInterval] = useState(false)\r\n\r\n    const onIntervalChange = (e: boolean) => {\r\n        if (e) {\r\n            props.setIsInterval( !isInterval, {startDate: props.dateInterval.startDate, endDate: props.dateInterval.endDate })\r\n        } else {\r\n            props.setIsInterval( !isInterval, {startDate: props.dateInterval.startDate, endDate: props.dateInterval.startDate })\r\n        }\r\n        setIsInterval(!isInterval)\r\n    }\r\n\r\n    const onStartChange = (value: Date) => {\r\n        if (!isInterval) {\r\n            props.setIsInterval(isInterval, {startDate: moment(value), endDate: moment(value) })\r\n        } else {\r\n            props.setIsInterval(isInterval, {startDate: moment(value), endDate: props.dateInterval.endDate })\r\n        }\r\n    }\r\n\r\n    const onEndChange = (value: Date) => {\r\n        props.setIsInterval(isInterval, {startDate: props.dateInterval.startDate, endDate: moment(value) })\r\n    }\r\n\r\n    return (\r\n        <div className=\"w-100\">\r\n            <DatePicker\r\n                locale={enUs}\r\n                mode=\"date\"\r\n                value={props.dateInterval.startDate.toDate()}\r\n                onChange={onStartChange}\r\n            >\r\n                <List.Item className=\"w-100\">\r\n                {isInterval ? 'Start:' : 'Date:'}\r\n                </List.Item>\r\n            </DatePicker>\r\n\r\n            {isInterval ?\r\n                <DatePicker\r\n                    locale={enUs}\r\n                    mode=\"date\"\r\n                    value={props.dateInterval.endDate.toDate()}\r\n                    onChange={onEndChange}\r\n                >\r\n                    <List.Item >End:</List.Item>\r\n                </DatePicker>\r\n                :\r\n                null\r\n            }\r\n\r\n            <List.Item\r\n                extra={\r\n                        <Switch\r\n                            checked={isInterval}\r\n                            onChange={onIntervalChange}\r\n                        />\r\n                }\r\n                >\r\n                Date interval\r\n            </List.Item>\r\n            { !props.isReadOnly ?\r\n            <div className=\"mt-3\">\r\n            <Button\r\n                inline\r\n                size=\"small\"\r\n                className=\"ml-3\"\r\n                onClick={props.showDrawer ? props.showDrawer : ()=>{} }\r\n                type=\"primary\"\r\n            >\r\n                {!props.isOpen ? 'Add' : 'Close'}\r\n            </Button>\r\n            <Button\r\n                inline\r\n                size=\"small\"\r\n                className=\"ml-3\"\r\n                onClick={ props.showModal ? props.showModal : ()=>{} }\r\n                type=\"primary\"\r\n            >\r\n                Settings\r\n            </Button>\r\n            </div>\r\n            : null}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ToDoHeaderMobile","import {connect} from 'react-redux'\r\nimport ToDoHeader from './ToDoHeader'\r\nimport {actions} from '../../../redux/taskReducer'\r\nimport { AppStateType } from '../../../redux/store'\r\nimport { isMobile } from 'react-device-detect'\r\nimport ToDoHeaderMobile from './ToDoHeaderMobile'\r\n\r\ntype OwnToDoHeaderPropsType = {\r\n    showDrawer?: () => void,\r\n    showModal?: () => void,\r\n    isOpen?: boolean,\r\n    isReadOnly?: boolean\r\n}\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    setIsInterval: (isInterval: boolean, date: {startDate: moment.Moment, endDate: moment.Moment}) => void\r\n}\r\n\r\nexport type ToDoHeaderPropsType = MapPropsType & MapDispatchPropsType & OwnToDoHeaderPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        dateInterval: state.task.dateInterval\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnToDoHeaderPropsType, AppStateType>(mapStateToProps, \r\n    {setIsInterval: actions.setIsInterval}) \r\n    (isMobile ? ToDoHeaderMobile : ToDoHeader)\r\n    \r\n\r\n","import { Form, Field, FormikProps } from 'formik'\r\nimport React, { ReactNode } from 'react'\r\nimport { AntInput, AntTextArea, AntTimePicker, AntDatePicker } from '../../../utils/Formik/CreateAntField'\r\nimport { validateRequired } from '../../../utils/Formik/ValidateFields'\r\n\r\n\r\nconst ToDoForm: ((props: FormikProps<{}>) => ReactNode) = (props) => {\r\n    const disabled = props.initialStatus === 'readOnly' ? true : false\r\n    \r\n    return (\r\n        <Form\r\n            className=\"form-container\"\r\n            onSubmit={props.handleSubmit}\r\n        >\r\n            <Field\r\n                component={AntInput}\r\n                name=\"name\"\r\n                type=\"text\"\r\n                label=\"Name\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n                disabled= {disabled}\r\n            />\r\n\r\n            <Field\r\n                component={AntDatePicker}\r\n                name=\"date\"\r\n                type=\"date\"\r\n                label=\"Task date\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                disabled= {disabled}\r\n            />\r\n\r\n            <Field\r\n                component={AntTimePicker}\r\n                name=\"time\"\r\n                type=\"time\"\r\n                label=\"Task time\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                disabled= {disabled}\r\n            />\r\n\r\n            <Field\r\n                component={AntTextArea}\r\n                name=\"descriptions\"\r\n                type=\"textarea\"\r\n                label=\"Descriptions\"\r\n                submitCount={props.submitCount}\r\n                disabled= {disabled}\r\n            />\r\n\r\n            <Field\r\n                component={AntTimePicker}\r\n                name=\"time_to_complete\"\r\n                type=\"time\"\r\n                label=\"Time to complete\"\r\n                submitCount={props.submitCount}\r\n            />\r\n\r\n            { !disabled ?\r\n                <div className=\"submit-container\">\r\n                    <button className=\"ant-btn ant-btn-primary\" type=\"submit\">\r\n                        Save\r\n                    </button>\r\n                </div>\r\n                : \r\n                null\r\n            }\r\n\r\n\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default ToDoForm","import { List, Card, Drawer, WhiteSpace, WingBlank, SwipeAction } from 'antd-mobile'\r\nimport { Formik } from 'formik'\r\nimport React, { useEffect, useState } from 'react'\r\nimport SettingsModal from './Settings/SettingsModalContainer'\r\nimport ToDoHeader from './ToDoHeader/ToDoHeaderContainer'\r\nimport { ToDoListPropsType } from './ToDoContainer'\r\nimport ToDoForm from './ToDoForm/ToDoForm'\r\nimport moment from 'moment'\r\nimport { TaskType, TimeScaleSettingsType, NewTaskDataType } from '../../Types/types'\r\nimport { Divider, Empty } from 'antd'\r\nimport { NewTimeByString } from '../../utils/Date/NewDeteByString'\r\n\r\ntype InitialDrewerDataType = {\r\n    header: string,\r\n    taskId: false | number\r\n}\r\n\r\nconst initialDrewerData: InitialDrewerDataType = {\r\n    header: 'Create New Task',\r\n    taskId: false\r\n}\r\nconst zeroTime = NewTimeByString()\r\n\r\nexport type InitialValuesType = {\r\n    name: string,\r\n    time: Date,\r\n    date: Date,\r\n    time_to_complete: Date,\r\n    descriptions: string | null\r\n}\r\n\r\nexport const initialValues: InitialValuesType = {\r\n    name: '',\r\n    time: zeroTime,\r\n    date: new Date(),\r\n    time_to_complete: zeroTime,\r\n    descriptions: ''\r\n}\r\n\r\nconst ToDoMobile: React.FC<ToDoListPropsType> = (props) => {\r\n    useEffect(() => {\r\n        if (props.taskList === null) {\r\n            props.getTaskList(props.dateInterval.startDate.format('YYYY-MM-DD'), props.dateInterval.endDate.format('YYYY-MM-DD'))\r\n        }\r\n    }, [props])\r\n\r\n    useEffect(() => {\r\n        const getTaskList = () => props.getTaskList\r\n        getTaskList()(props.dateInterval.startDate.format('YYYY-MM-DD'), props.dateInterval.endDate.format('YYYY-MM-DD'))\r\n    }, [props.dateInterval, props.getTaskList])\r\n\r\n    useEffect(() => {\r\n        if (props.isInterval) {\r\n            setIsTimeScaleVisible(props.viewSettings.ToDo.timeScaleInrerval)\r\n        } else {\r\n            setIsTimeScaleVisible(props.viewSettings.ToDo.timeScaleSingle)\r\n        }\r\n    }, [props.isInterval, props.viewSettings])\r\n\r\n    const [visible, setVisible] = useState(false)\r\n    const [isModalVisible, setIsModalVisible] = useState(false)\r\n    const [drawerData, setDrawerData] = useState<InitialDrewerDataType>(initialDrewerData)\r\n    const [isTimeScaleVisible, setIsTimeScaleVisible] = useState<TimeScaleSettingsType>(props.viewSettings.ToDo.timeScaleSingle)\r\n    const [initialFormValues, setInitialFormValues] = useState<InitialValuesType>(initialValues)\r\n\r\n    const showDrawer = (): void => {\r\n        if (visible) {\r\n            setInitialFormValues(initialValues)\r\n            setDrawerData(initialDrewerData)\r\n        }\r\n        setVisible(!visible)\r\n    }\r\n\r\n    const showModal = () => {\r\n        setIsModalVisible(true)\r\n    }\r\n\r\n    const handleOk = () => {\r\n        setIsModalVisible(false)\r\n    }\r\n\r\n    const handleCancel = () => {\r\n        setIsModalVisible(false)\r\n    }\r\n\r\n    const handleSubmit = (values: InitialValuesType, actions: any) => {\r\n        let formPropsCopy: NewTaskDataType = {\r\n            ...values,\r\n            time: moment(values.time).format('HH:mm:ss'),\r\n            date: moment(values.date).format('YYYY-MM-DD'),\r\n            // time_to_complete: values.time_to_complete.format('HH:mm:00'), \r\n            time_to_complete: moment(values.time_to_complete).format('HH:mm:ss'),\r\n            user_id: props.userId,\r\n        }\r\n\r\n        if (!drawerData.taskId) {\r\n            props.createNewTask(formPropsCopy, true)\r\n        } else {\r\n            props.updateTask(formPropsCopy, drawerData.taskId)\r\n        }\r\n        actions.resetForm()\r\n        showDrawer()\r\n    }\r\n\r\n    const onComplete = (task: TaskType) => {\r\n        const updatedTask: NewTaskDataType = {\r\n            ...task as NewTaskDataType,\r\n            isCompleted: !task.isCompleted\r\n        }\r\n        props.updateTask(updatedTask, task.id)\r\n    }\r\n\r\n\r\n    if (props.taskList !== null) {\r\n        return (\r\n            <WingBlank size=\"lg\">\r\n                <WhiteSpace size=\"lg\" />\r\n                <Card>\r\n                    <Card.Header\r\n                        title={<ToDoHeader\r\n                            showDrawer={showDrawer}\r\n                            showModal={showModal}\r\n                            isOpen={visible}\r\n                        />}\r\n                    >\r\n                    </Card.Header>\r\n                    <SettingsModal\r\n                        isModalVisible={isModalVisible}\r\n                        handleOk={handleOk}\r\n                        handleCancel={handleCancel}\r\n                    />\r\n                    <Drawer\r\n                        className=\"my-drawer\"\r\n                        style={{ minHeight: document.documentElement.clientHeight }}\r\n                        contentStyle={{ color: '#A6A6A6', textAlign: 'center', paddingTop: 0, width: \"100%\" }}\r\n                        sidebar={\r\n                            <div className=\"mt-4\">\r\n                                <Formik\r\n                                    initialValues={initialFormValues}\r\n                                    onSubmit={handleSubmit}\r\n                                    enableReinitialize={true}\r\n                                >\r\n                                    {ToDoForm}\r\n                                </Formik>\r\n                            </div>\r\n                        }\r\n                        open={visible}\r\n                    >\r\n                        <List>\r\n                            {\r\n                                isTimeScaleVisible ?\r\n                                    <TimeScale\r\n                                        taskList={props.taskList}\r\n                                        dateInterval={props.dateInterval}\r\n                                        deleteTask={props.deleteTask}\r\n                                        setDrawerData={setDrawerData}\r\n                                        setInitialFormValues={setInitialFormValues}\r\n                                        showDrawer={showDrawer}\r\n                                        onComplete={onComplete}\r\n                                    />\r\n                                    :\r\n                                    <TasksOnly\r\n                                        taskList={props.taskList}\r\n                                        dateInterval={props.dateInterval}\r\n                                        deleteTask={props.deleteTask}\r\n                                        setDrawerData={setDrawerData}\r\n                                        setInitialFormValues={setInitialFormValues}\r\n                                        showDrawer={showDrawer}\r\n                                        onComplete={onComplete}\r\n                                    />\r\n                            }\r\n                        </List>\r\n                    </Drawer>\r\n                </Card>\r\n            </WingBlank>\r\n        )\r\n    } else {\r\n        return <Empty />\r\n    }\r\n}\r\n\r\nexport default ToDoMobile\r\n\r\ntype TaskItemMobileType = {\r\n    element: TaskType,\r\n    dateInterval: {\r\n        startDate: moment.Moment;\r\n        endDate: moment.Moment;\r\n    },\r\n    deleteTask: (taskid: number, startDate: string, endDate: string) => void,\r\n    setDrawerData: React.Dispatch<React.SetStateAction<InitialDrewerDataType>>,\r\n    setInitialFormValues: React.Dispatch<React.SetStateAction<InitialValuesType>>,\r\n    showDrawer: () => void,\r\n    onComplete: (values: TaskType) => void,\r\n    isReadOnly: boolean\r\n}\r\n\r\nconst TaskItemMobile: React.FC<TaskItemMobileType> = (props) => {\r\n\r\n    const onEdit = (value: TaskType) => {\r\n        props.setDrawerData({\r\n            header: 'Edite \"' + value.name + '\"',\r\n            taskId: value.id\r\n        })\r\n\r\n        let time = NewTimeByString(value.time)\r\n\r\n        const splitDate = value.date.split(/-/)\r\n        let date = new Date()\r\n        date.setFullYear(parseInt(splitDate[0]))\r\n        date.setMonth(parseInt(splitDate[1]) - 1)\r\n        date.setDate(parseInt(splitDate[2]))\r\n\r\n        props.setInitialFormValues({\r\n            name: value.name,\r\n            time: time,\r\n            date: date,\r\n            time_to_complete: NewTimeByString(value.time_to_complete),\r\n            descriptions: value.descriptions ? value.descriptions : null\r\n        })\r\n\r\n        props.showDrawer()\r\n    }\r\n\r\n    if (!props.isReadOnly) {\r\n        return (\r\n            <SwipeAction\r\n                key={props.element.id}\r\n                style={{ backgroundColor: 'gray' }}\r\n                autoClose\r\n                right={[\r\n                    {\r\n                        text: 'Delete',\r\n                        onPress: () => props.deleteTask(\r\n                            props.element.id,\r\n                            props.dateInterval.startDate.format('YYYY-MM-DD'),\r\n                            props.dateInterval.endDate.format('YYYY-MM-DD')\r\n                        ),\r\n                        style: { backgroundColor: '#F4333C', color: 'white' },\r\n                    },\r\n                ]}\r\n                left={[\r\n                    {\r\n                        text: 'Edit',\r\n                        onPress: () => { onEdit(props.element) },\r\n                        style: { backgroundColor: '#108ee9', color: 'white' },\r\n                    },\r\n                    {\r\n                        text: props.element.isCompleted ? 'Not Done' : 'Done',\r\n                        onPress: () => props.onComplete(props.element),\r\n                        style: { backgroundColor: 'green', color: 'white' },\r\n                    },\r\n                ]}\r\n                onOpen={() => { }}\r\n                onClose={() => { }}\r\n            >\r\n\r\n                <List.Item\r\n                    key={props.element.id.toString()}\r\n                    wrap\r\n                >\r\n                    <div className=\"w-100 row \" key={props.element.id.toString()}>\r\n                        <div className=\"col-2 \">\r\n                            <span className=\"ml-3\">{props.element.time.split(/:/)[0] + ':' + props.element.time.split(/:/)[1]}</span>\r\n                        </div>\r\n                        <div className=\"col-10\">\r\n                            {props.element.isCompleted ?\r\n                                <span\r\n                                    className=\"text-break ml-3\"\r\n                                    style={{ textDecoration: props.element.isCompleted ? 'line-through' : '' }}\r\n                                >\r\n                                    {props.element.name}\r\n                                </span>\r\n                                :\r\n                                <span className=\"text-break ml-3\">{props.element.name}</span>\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                </List.Item>\r\n            </SwipeAction>\r\n        )\r\n    } else {\r\n        return (\r\n            <List.Item\r\n                key={props.element.id.toString()}\r\n                wrap\r\n            >\r\n                <div className=\"w-100 row \" key={props.element.id.toString()}>\r\n                    <div className=\"col-2 \">\r\n                        <span className=\"ml-3\">{props.element.time.split(/:/)[0] + ':' + props.element.time.split(/:/)[1]}</span>\r\n                    </div>\r\n                    <div className=\"col-10\">\r\n                        {props.element.isCompleted ?\r\n                            <span\r\n                                className=\"text-break ml-3\"\r\n                                style={{ textDecoration: props.element.isCompleted ? 'line-through' : '' }}\r\n                            >\r\n                                {props.element.name}\r\n                            </span>\r\n                            :\r\n                            <span className=\"text-break ml-3\">{props.element.name}</span>\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </List.Item>\r\n        )\r\n    }\r\n\r\n}\r\n\r\ntype TimeScaleType = {\r\n    taskList: Array<TaskType> | null\r\n    dateInterval: {\r\n        startDate: moment.Moment,\r\n        endDate: moment.Moment,\r\n    },\r\n    deleteTask?: (taskid: number, startDate: string, endDate: string) => void,\r\n    setDrawerData?: React.Dispatch<React.SetStateAction<InitialDrewerDataType>>,\r\n    setInitialFormValues?: React.Dispatch<React.SetStateAction<InitialValuesType>>,\r\n    showDrawer?: () => void,\r\n    onComplete?: (values: TaskType) => void,\r\n    isReadOnly?: boolean\r\n}\r\nconst TimeScale: React.FC<TimeScaleType> = (props) => {\r\n    let startDate = moment(props.dateInterval.startDate)\r\n\r\n    let dateArrey: Array<moment.Moment> = []\r\n\r\n    while (moment(startDate.format('YYYY-MM-DD')).isSameOrBefore(moment(props.dateInterval.endDate.format('YYYY-MM-DD')))) {\r\n        dateArrey.push(moment(startDate))\r\n        startDate.add(1, 'days')\r\n    }\r\n\r\n    const getTasksForHour = (date: string, hour: number) => {\r\n        let tasksForHour: Array<JSX.Element | undefined> = []\r\n        if (props.taskList !== null) {\r\n            tasksForHour = props.taskList\r\n                .filter((item: TaskType) => {\r\n                    return item.date === date && moment().hours(hour).format('HH') === item.time.split(':')[0]\r\n                })\r\n                .map((item: TaskType) => {\r\n                    return (\r\n                        <TaskItemMobile\r\n                            key={item.id.toString()}\r\n                            element={item}\r\n                            dateInterval={props.dateInterval}\r\n                            deleteTask={props.deleteTask ? props.deleteTask : () => { }}\r\n                            setDrawerData={props.setDrawerData ? props.setDrawerData : () => { }}\r\n                            setInitialFormValues={props.setInitialFormValues ? props.setInitialFormValues : () => { }}\r\n                            showDrawer={props.showDrawer ? props.showDrawer : () => { }}\r\n                            onComplete={props.onComplete ? props.onComplete : () => { }}\r\n                            isReadOnly={props.isReadOnly ? props.isReadOnly : false}\r\n                        />\r\n                    )\r\n                })\r\n        }\r\n        return tasksForHour\r\n\r\n    }\r\n\r\n    const getHours = (headlineDate: string) => {\r\n        let hours: Array<JSX.Element | undefined> = []\r\n        for (let index = 0; index < 24; index++) {\r\n            hours.push(\r\n                <div key={index + 'div'}>\r\n                    <Divider key={index + 'to' + headlineDate} orientation=\"left\">\r\n                        {index <= 9 ? '0' : null}{index}:00\r\n                    </Divider>\r\n                    {getTasksForHour(headlineDate, index)}\r\n                </div>\r\n            )\r\n        }\r\n        return hours\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {\r\n                dateArrey.map((date: moment.Moment) => {\r\n                    return (\r\n                        <div key={date.format('DD MMMM') + 'divBlock'}>\r\n                            <h3 key={date.format('DD MMMM') + 'dateHeader'}>{date.format('DD MMMM')}</h3>\r\n                            {getHours(date.format('YYYY-MM-DD'))}\r\n                        </div>\r\n                    )\r\n                })\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport const TasksOnly: React.FC<TimeScaleType> = (props) => {\r\n    const startDate = moment(props.dateInterval.startDate)\r\n    let dateArrey: Array<moment.Moment> = []\r\n    while (moment(startDate.format('YYYY-MM-DD')).isSameOrBefore(moment(props.dateInterval.endDate.format('YYYY-MM-DD')))) {\r\n        dateArrey.push(moment(startDate))\r\n        startDate.add(1, 'days')\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {dateArrey.map((date: moment.Moment) => {\r\n                return (\r\n                    <div key={date.format('DD MMMM')}>\r\n                        <h3>{date.format('DD MMMM')}</h3>\r\n                        {props.taskList?.map((task: TaskType) => {\r\n                            if (task.date === date.format('YYYY-MM-DD')) {\r\n                                return <TaskItemMobile\r\n                                    key={task.id.toString()}\r\n                                    element={task}\r\n                                    dateInterval={props.dateInterval}\r\n                                    deleteTask={props.deleteTask ? props.deleteTask : () => { }}\r\n                                    setDrawerData={props.setDrawerData ? props.setDrawerData : () => { }}\r\n                                    showDrawer={props.showDrawer ? props.showDrawer : () => { }}\r\n                                    setInitialFormValues={props.setInitialFormValues ? props.setInitialFormValues : () => { }}\r\n                                    onComplete={props.onComplete ? props.onComplete : () => { }}\r\n                                    isReadOnly={props.isReadOnly ? props.isReadOnly : false}\r\n                                />\r\n                            } else return null\r\n                        })}\r\n                    </div>\r\n                )\r\n            })}\r\n        </>\r\n    )\r\n}","import { Button, Modal } from 'antd'\r\nimport React, { ReactNode, useState } from 'react'\r\nimport { PhoneOutlined } from '@ant-design/icons'\r\nimport { Field, Form, Formik, FormikProps } from 'formik'\r\nimport { AntTextArea } from '../../../utils/Formik/CreateAntField'\r\n\r\nconst ToDoActionsRouter: React.FC<any> = (props) => {\r\n\r\n    switch (props.action) {\r\n        case 2:\r\n\r\n            return <CallAction {...props} />\r\n\r\n        default:\r\n            return <></>\r\n    }\r\n}\r\n\r\nexport default ToDoActionsRouter\r\n\r\nconst CallAction: React.FC<any> = (props) => {\r\n    const [isCallVisible, setIsCallVisible] = useState(false)\r\n\r\n    const handleOk = () => {\r\n        setIsCallVisible(false)\r\n    }\r\n\r\n    const handleCancel = () => {\r\n        setIsCallVisible(false)\r\n    }\r\n\r\n    const handleSubmit = (formProps: any) => {\r\n        console.log(formProps)\r\n    }\r\n\r\n    const data = JSON.parse(props.action_data)\r\n    let phone = 'tel:'\r\n\r\n    if (data) {\r\n        phone = phone + data.phone\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Button\r\n                type=\"primary\"\r\n                shape=\"circle\"\r\n                size=\"small\"\r\n                style={{ marginLeft: 10 }}\r\n                onClick={() => { setIsCallVisible(true) }}\r\n                icon={\r\n                    <div className=\"d-flex flex-wrap align-content-start\">\r\n                        <PhoneOutlined className=\"ml-1\" style={{ fontSize: '14px' }} />\r\n                    </div>\r\n                }\r\n            ></Button>\r\n\r\n            <Modal\r\n                title={\"Call to \" + data.name}\r\n                visible={isCallVisible}\r\n                onOk={handleOk}\r\n                onCancel={handleCancel}\r\n                width={1000}\r\n                centered\r\n            >\r\n                {data ?\r\n                    <>\r\n                        <p><a href={phone}>Call to: {data.name}</a></p>\r\n                        <p>number: {data.phone}</p>\r\n                    </>\r\n                    :\r\n                    null\r\n                }\r\n\r\n                <Formik\r\n                    initialValues={{}}\r\n                    onSubmit={handleSubmit}\r\n                    enableReinitialize={true}\r\n                >\r\n                    {CallResultForm}\r\n                </Formik>\r\n\r\n            </Modal>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nconst CallResultForm: ((props: FormikProps<{}>) => ReactNode) = (props) => {\r\n    return (\r\n        <Form\r\n            className=\"form-container mt-4\"\r\n            onSubmit={props.handleSubmit}\r\n        >\r\n            Call result:\r\n            <Field\r\n                component={AntTextArea}\r\n                name=\"call_description\"\r\n                type=\"textarea\"\r\n                label=\"\"\r\n                submitCount={props.submitCount}\r\n            />\r\n            <div className=\"submit-container\">\r\n                <button className=\"ant-btn ant-btn-primary\" type=\"submit\">\r\n                    Save\r\n                </button>\r\n                <button className=\"ant-btn ant-btn-primary ml-4\" type=\"submit\">\r\n                    Save and complete\r\n                </button>\r\n            </div>\r\n        </Form>\r\n    )\r\n}","import React, { useState } from 'react'\r\nimport { Col, Row, Checkbox, Tooltip, Button, Spin } from 'antd'\r\nimport { CheckboxChangeEvent } from 'antd/lib/checkbox'\r\nimport { ListGroup } from 'react-bootstrap'\r\nimport { TaskType } from '../../../../Types/types'\r\nimport { DeleteOutlined, EditOutlined } from '@ant-design/icons'\r\nimport { TaskItemPropsType } from './TaskItemContainer'\r\nimport ToDoActionsRouter from '../../ToDoActions/ToDoActionsRouter'\r\nimport moment from 'moment'\r\n\r\nexport type OwnTaskItemPropsType = {\r\n    element: TaskType,\r\n    onEdit: (value:any)=>void,\r\n    isReadOnly?: boolean\r\n}\r\n\r\nconst TaskItem: React.FC<TaskItemPropsType> = (props) => {\r\n    const [checked, setChecked] = useState(props.element.isCompleted)\r\n    const [deleteingInProgess, setDeleteingInProgess] = useState(false)\r\n\r\n    const onisCompletedChange = (e: CheckboxChangeEvent) => {\r\n        console.log(props.isReadOnly)\r\n        setChecked(!checked)\r\n        const values = { isCompleted: e.target.checked }\r\n        if (props.element.id) {}\r\n        props.updateTask(values, props.element.id)\r\n    }\r\n\r\n    const onEdit = (e: any) => {\r\n        props.onEdit(e)\r\n    }\r\n\r\n    const deleteTask: (taskid: number) => void = (taskid) => {\r\n        setDeleteingInProgess(true)\r\n        props.deleteTask(taskid, props.dateInterval.startDate.format('YYYY-MM-DD'), props.dateInterval.endDate.format('YYYY-MM-DD'))\r\n    }\r\n\r\n    const split_time_to_complete = props.element.time_to_complete.split(':')\r\n    const split_start = props.element.time.split(':')\r\n    console.log(split_start)\r\n    const startTimeTime = moment().hours(parseInt(split_start[0])).minutes( parseInt(split_start[1]) )\r\n\r\n    console.log(props.element.name,': ',startTimeTime.format('HH:mm'))\r\n\r\n    const endTime = startTimeTime.add({hour: parseInt(split_time_to_complete[0]), minute: parseInt(split_time_to_complete[1]) })\r\n\r\n    const disabled = props.isReadOnly ? {disabled: true} : null\r\n    return (\r\n        <ListGroup.Item as=\"li\" action className=\"\" key={props.element.id}>\r\n            <Row className=\"px-0 ml-0 ml-sm-5\">\r\n                <Col className=\"mx-2\">\r\n                    <Checkbox \r\n                        onChange={onisCompletedChange} \r\n                        checked={checked}\r\n                        {...disabled}\r\n                        />\r\n                </Col>\r\n                <Col className=\"mx-2\">\r\n                    {props.element.time.split(':', 2).join(':')} - {endTime.format('HH:mm')}\r\n                </Col>\r\n                <Col className=\"mx-2\">\r\n                    <Tooltip key={props.element.id} placement=\"topLeft\" title={props.element.descriptions}>\r\n                        <span\r\n                            style={{ textDecoration: checked ? 'line-through' : '' }}\r\n                        >\r\n                            {props.element.name}\r\n                        </span>\r\n                    </Tooltip>\r\n                </Col>\r\n                { !props.isReadOnly ? \r\n                <Col className=\"mr-auto ml-0 mr-sm-2 ml-sm-auto\">\r\n                    <ToDoActionsRouter {...props.element}/>\r\n                    <Button\r\n                        type=\"primary\"\r\n                        shape=\"circle\"\r\n                        size=\"small\"\r\n                        style={{ marginLeft: 10 }}\r\n                        onClick={()=>{onEdit(props.element)}}\r\n                        icon={\r\n                            <div className=\"d-flex flex-wrap align-content-start\">\r\n                                <EditOutlined className=\"ml-1\" style={{ fontSize: '14px' }} />\r\n                            </div>\r\n                        }\r\n                    ></Button>\r\n\r\n                    {!deleteingInProgess ? \r\n                    <Button \r\n                        danger\r\n                        type=\"primary\"\r\n                        shape=\"circle\"\r\n                        size=\"small\"\r\n                        style={{ marginLeft: 10 }}\r\n                        onClick={() => { deleteTask(props.element.id) }}\r\n                        icon={\r\n                            <div className=\"d-flex flex-wrap align-content-start\">\r\n                                <DeleteOutlined className=\"ml-1\" style={{ fontSize: '14px' }} />\r\n                            </div>\r\n                        }\r\n                    />\r\n                    :\r\n                    <Spin key=\"spin\" size=\"small\" />\r\n                    }\r\n                </Col>\r\n                : null }\r\n            </Row>\r\n\r\n        </ListGroup.Item>\r\n    )\r\n}\r\n\r\nexport default TaskItem\r\n","import {connect} from 'react-redux'\r\nimport TaskItem, { OwnTaskItemPropsType } from './TaskItem'\r\nimport {deleteTask, getTaskList, updateTask} from './../../../../redux/taskReducer'\r\nimport {AppStateType} from '../../../../redux/store'\r\n\r\nexport type MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype DispatchPropsType = {\r\n    deleteTask: (taskid: number, startDate: string, endDate: string) => void\r\n    getTaskList: (startDate: string, endDate: string) => void,\r\n    updateTask: (values: any, taskId: number) => void,\r\n}\r\n\r\nexport type TaskItemPropsType = MapPropsType & DispatchPropsType & OwnTaskItemPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        dateInterval: state.task.dateInterval,\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, DispatchPropsType, OwnTaskItemPropsType, AppStateType>(mapStateToProps, \r\n    {deleteTask, getTaskList, updateTask}) \r\n    (TaskItem)","import { TaskType } from \"../Types/types\"\r\n\r\nexport const sortTaskArrayByParams = (field: 'date' | 'time') => {\r\n    if (field === 'date') {\r\n        return (a: TaskType, b: TaskType) => a['date'] > b['date'] ? 1 : -1\r\n    } else {\r\n        return (a: TaskType, b: TaskType) => a['time'] > b['time'] ? -1 : 1\r\n    }\r\n}","import React, { useEffect, useState } from 'react'\r\n// import { TaskType } from '../../Types/types'\r\nimport { TaskType } from './../../../Types/types'\r\nimport moment from 'moment'\r\nimport { TimeScalePropsType } from './TimeScaleContainer'\r\nimport { Divider, Spin, Tooltip, message } from 'antd'\r\nimport TaskItem from './TaskItem/TaskItemContainer'\r\nimport { sortTaskArrayByParams } from '../../../utils/array-helpers'\r\nimport { ListGroup } from 'react-bootstrap'\r\n\r\nexport type OwnTaskTimeScaleType = {\r\n    onEdit: (value:any)=>void,\r\n    isReadOnly?: boolean\r\n}\r\nconst TimeScale: React.FC<TimeScalePropsType> = (props) => {\r\n    type SelestedDatesType = typeof props.dateInterval\r\n    const [selestedDates, setSelectedDates] = useState<SelestedDatesType>({ startDate: moment(null), endDate: moment() })\r\n\r\n    useEffect(() => {\r\n        const getTaskList = () => props.getTaskList\r\n        if (\r\n            props.dateInterval.startDate.isSame(selestedDates.startDate.format('YYYY-MM-DD'), \"day\" ) &&\r\n            props.dateInterval.endDate.isSame(selestedDates.endDate.format('YYYY-MM-DD'), \"day\" )\r\n        ) { }\r\n        else {\r\n            if (props.dateInterval.startDate !== null) {\r\n                getTaskList()(\r\n                    props.dateInterval.startDate.format('YYYY-MM-DD'),\r\n                    props.dateInterval.endDate.format('YYYY-MM-DD')\r\n                )\r\n                setSelectedDates(props.dateInterval)\r\n            }\r\n        }\r\n    }, [props.dateInterval, props.getTaskList, selestedDates])\r\n\r\n    useEffect(() => {\r\n        if (props.errorMessage !== null) {\r\n            message.success(props.errorMessage)\r\n        }\r\n    }, [props.errorMessage])\r\n\r\n    if (props.taskList !== undefined) {\r\n        if (props.taskList !== null) {\r\n            return (\r\n                <>\r\n                    {getTimeScaleArrey(props.taskList, props.isInterval, props.onEdit, props.isReadOnly ? props.isReadOnly : false)}\r\n                </>\r\n            )\r\n        } else {\r\n            return (\r\n                <Spin key=\"spin\" size=\"large\" />\r\n            )\r\n        }\r\n    } else {\r\n        return <div>Authorization required to get a list of tasks</div>\r\n    }\r\n    \r\n}\r\n\r\nexport default TimeScale\r\n\r\n\r\nconst getTimeScaleArrey = (\r\n    taskList: Array<TaskType>, \r\n    isInterval:boolean, \r\n    onEdit:(value:any)=>void,\r\n    isReadOnly: boolean\r\n    ):Array<React.ReactElement<string>> => {\r\n    let timeScaleArrey: Array<React.ReactElement<string>> = []\r\n    let tomorowTasks: Array<TaskType> = []\r\n\r\n    taskList.sort(sortTaskArrayByParams('time')).sort(sortTaskArrayByParams('date'))\r\n\r\n    const getHeadlineLabel = (task: TaskType):string => {\r\n        return moment(task.date).format('D MMMM')\r\n    }\r\n\r\n    let headlineDate: string | null = null\r\n\r\n    if (taskList !== null && taskList.length > 0) {\r\n        headlineDate = getHeadlineLabel(taskList[0])\r\n        timeScaleArrey.push(\r\n            <h5 \r\n                key={headlineDate}\r\n                className={isInterval ? \"text-left\" : \"\"}\r\n            >\r\n                {headlineDate}:\r\n            </h5>\r\n        )\r\n    }\r\n\r\n    for (let index: number = 0; index < 24; index++) {\r\n        if (taskList.length > 0) {\r\n            if (!isInterval && index > 7) {\r\n                timeScaleArrey.push(\r\n                    <Divider key={index + 'to' + headlineDate} orientation=\"left\">\r\n                        {index <= 9 ? '0' : null}{index}:00\r\n                    </Divider>\r\n                )\r\n            }\r\n        } else {\r\n            timeScaleArrey.push(<h3 key={'noTasks'+index}>no tasks</h3>)\r\n            break\r\n        }\r\n\r\n        if (taskList !== null) {\r\n            for (let i = 0; i < taskList.length; i++) {\r\n                const element: TaskType = taskList[i]\r\n                const timeVal = Number(element.time.split(':', 1))\r\n                const nextHour = index + 1\r\n                if (timeVal >= index && timeVal < nextHour) {\r\n                    if (getHeadlineLabel(element) === headlineDate) {\r\n                        timeScaleArrey.push(\r\n                            <Tooltip key={index + '-' + element.id} placement=\"topLeft\" title={element.descriptions}>\r\n                                <ListGroup as=\"ul\" key={index}>\r\n                                    <TaskItem key={index} element={element} onEdit={onEdit} isReadOnly={isReadOnly}/>\r\n                                </ListGroup>\r\n                            </Tooltip>\r\n                        )\r\n                    }\r\n                    else {\r\n                        tomorowTasks.push(element)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (tomorowTasks.length > 0) {\r\n        timeScaleArrey = timeScaleArrey.concat(getTimeScaleArrey(tomorowTasks, isInterval, onEdit , isReadOnly))\r\n    }\r\n\r\n    return timeScaleArrey\r\n}","import {connect} from 'react-redux'\r\nimport TimeScale from './TimeScale'\r\nimport {getTaskList} from './../../../redux/taskReducer'\r\nimport { AppStateType } from '../../../redux/store'\r\nimport { OwnTaskTimeScaleType } from './TimeScale'\r\n\r\nexport type MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype DispatchPropsType = {\r\n    getTaskList: (startDate: string, endDate: string) => void,\r\n}\r\n\r\nexport type TimeScalePropsType = MapPropsType & DispatchPropsType & OwnTaskTimeScaleType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        taskList: state.task.taskList,\r\n        taskSaveStatus: state.task.taskSaveStatus,\r\n        taskListIsFetching: state.task.taskListIsFetching,\r\n        dateInterval: state.task.dateInterval,\r\n        errorMessage: state.task.errorMessage,\r\n        isInterval: state.task.isInterval,\r\n        settings: state.auth.viewSettings\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, DispatchPropsType, OwnTaskTimeScaleType, AppStateType>(mapStateToProps, \r\n    {getTaskList}) \r\n    (TimeScale)\r\n\r\n\r\n","import { Card, Drawer } from 'antd'\r\nimport React, { useEffect, useState } from 'react'\r\nimport ToDoHeaderContainer from './ToDoHeader/ToDoHeaderContainer'\r\nimport TimeScale from './TimeScale/TimeScaleContainer'\r\nimport { Formik } from 'formik'\r\nimport ToDoForm from './ToDoForm/ToDoForm'\r\nimport moment from \"moment\"\r\nimport { ToDoListPropsType } from './ToDoContainer'\r\nimport { NewTaskDataType, TaskType } from '../../Types/types'\r\nimport SettingsModalContainer from './Settings/SettingsModalContainer'\r\n\r\ntype InitialDrewerDataType = {\r\n    header: string,\r\n    taskId: false | number\r\n}\r\n\r\nconst initialDrewerData: InitialDrewerDataType = {\r\n    header: 'Create New Task',\r\n    taskId: false\r\n}\r\n\r\nconst zeroTime = moment()\r\nzeroTime.hours(0)\r\nzeroTime.minutes(0)\r\nzeroTime.seconds(0)\r\nzeroTime.milliseconds(0)\r\n\r\nexport type InitialValuesType = {\r\n    name: string,\r\n    time: moment.Moment,\r\n    date: moment.Moment,\r\n    descriptions: string | null,\r\n    time_to_complete: moment.Moment,\r\n}\r\n\r\nexport const initialValues: InitialValuesType = {\r\n    name: '',\r\n    time: zeroTime,\r\n    date: moment(),\r\n    descriptions: '',\r\n    time_to_complete: zeroTime\r\n}\r\n\r\nconst ToDoBrowser: React.FC<ToDoListPropsType> = (props) => {\r\n    useEffect(() => {\r\n        const getTaskList = () => props.getTaskList\r\n        if (props.taskList === null) {\r\n            getTaskList()(props.dateInterval.startDate.format('YYYY-MM-DD'), props.dateInterval.endDate.format('YYYY-MM-DD'))\r\n        }\r\n    }, [props.taskList, props.getTaskList, props.dateInterval])\r\n\r\n    \r\n\r\n    const [visible, setVisible] = useState(false)\r\n    const [isModalVisible, setIsModalVisible] = useState(false)\r\n    const [drawerData, setDrawerData] = useState(initialDrewerData)\r\n    const [initialFormValues, setInitialFormValues] = useState(initialValues)\r\n\r\n    useEffect(() => {\r\n    }, [initialFormValues])\r\n\r\n    const onTaskEdit = (value: TaskType) => {\r\n        setDrawerData({\r\n            header: 'Edite \"' + value.name + '\"',\r\n            taskId: value.id\r\n        })\r\n\r\n        const splitTime = value.time.split(/:/)\r\n        const splitTime_to_complete = value.time_to_complete.split(/:/)\r\n\r\n        setInitialFormValues({\r\n            name: value.name,\r\n            time: moment().hours(Number(splitTime[0])).minutes(Number(splitTime[1])).seconds(0),\r\n            date: moment(value.date),\r\n            descriptions: value.descriptions ? value.descriptions : null,\r\n            time_to_complete: moment().hours(Number(splitTime_to_complete[0])).minutes(Number(splitTime_to_complete[1])).seconds(0),\r\n        })\r\n\r\n        showDrawer()\r\n    }\r\n\r\n    const showDrawer = (): void => {\r\n        setVisible(true)\r\n    }\r\n\r\n    const onClose = (): void => {\r\n        setInitialFormValues(initialValues)\r\n        setDrawerData({ ...initialDrewerData })\r\n        setVisible(false)\r\n    }\r\n\r\n    const showModal = () => {\r\n        setIsModalVisible(true)\r\n    }\r\n\r\n    const handleCancel = () => {\r\n        setIsModalVisible(false)\r\n    }\r\n\r\n    const handleOk = () => {\r\n        setIsModalVisible(false)\r\n    }\r\n\r\n    const handleSubmit = (values: InitialValuesType, actions: any) => {\r\n        // @ts-ignore\r\n        console.log(values.time_to_complete.format('HH:mm:ss'))\r\n        let formProps: NewTaskDataType = {\r\n            ...values,\r\n            time: values.time.format('HH:mm:ss'),\r\n            date: values.date.format('YYYY-MM-DD'),\r\n            user_id: props.userId,\r\n            time_to_complete: values.time_to_complete.format('HH:mm:ss')\r\n        }\r\n        if (!drawerData.taskId) {\r\n            props.createNewTask(formProps, true)\r\n        } else {\r\n            props.updateTask(formProps, drawerData.taskId)\r\n        }\r\n\r\n        actions.resetForm()\r\n        \r\n        onClose()\r\n    }\r\n\r\n    return (\r\n        <Card\r\n            title={<ToDoHeaderContainer\r\n                showDrawer={showDrawer}\r\n                showModal={showModal}\r\n            />}\r\n            bordered={false}\r\n        >\r\n            <SettingsModalContainer\r\n                isModalVisible={isModalVisible}\r\n                handleOk={handleOk}\r\n                handleCancel={handleCancel}\r\n            />\r\n\r\n            <TimeScale onEdit={onTaskEdit} />\r\n            \r\n            <Drawer\r\n                title={drawerData.header}\r\n                placement=\"right\"\r\n                closable={true}\r\n                onClose={onClose}\r\n                visible={visible}\r\n                width=\"90%\"\r\n            >\r\n                <Formik\r\n                    initialValues={initialFormValues}\r\n                    onSubmit={handleSubmit}\r\n                    enableReinitialize={true}\r\n                >\r\n                    {ToDoForm}\r\n                </Formik>\r\n            </Drawer>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default ToDoBrowser","import React, {Dispatch, SetStateAction, useState, useEffect} from 'react'\r\nimport { Button, Collapse, List, Tabs } from 'antd'\r\nimport { Slider } from 'antd'\r\nimport { reduceEachTrailingCommentRange } from 'typescript'\r\n\r\nconst { TabPane } = Tabs\r\nconst { Panel } = Collapse;\r\n\r\nconst style = {\r\n    // display: 'inline-block',\r\n    height: 1000,\r\n    width: 100,\r\n    backgroundColor: 'white',\r\n}\r\ntype MarksType = {\r\n    [key: string]: string | {\r\n        style?: {\r\n            [key: string]: any,\r\n        },\r\n        label: React.ReactNode\r\n    }\r\n}\r\nlet marks: MarksType = {}\r\nfor (let index = 60 * 6; index <= 1440; index = index + 60) {\r\n    const name = index.toString()\r\n    // marks[name] = index/60+':00'\r\n    marks[name] = {\r\n        style: {\r\n            color: 'black',\r\n            // marginBottom: '10px'\r\n        },\r\n        label: <strong>{index / 60 + ':00'}</strong>,\r\n    }\r\n}\r\n\r\ntype SchedulePropsType = {\r\n\r\n}\r\n\r\nconst changeTab = (key: string) => {\r\n    // console.log(key)\r\n}\r\n\r\n\r\n\r\nconst Schedule: React.FC<SchedulePropsType> = (props) => {\r\n\r\n    return (\r\n        <div>\r\n            <h3>Распорядок дня:</h3>\r\n            <Tabs defaultActiveKey=\"1\" onChange={changeTab}>\r\n                <TabPane tab=\"Понедельник\" key=\"1\">\r\n                    <h4>Понедельник:</h4>\r\n                    <ScheduleDay \r\n                        dayNumber={'Понедельник'} \r\n                        // defaultActiveKey={activeKey}\r\n                        // setActiveKey={setActiveKey}\r\n                    />\r\n                </TabPane>\r\n                <TabPane tab=\"Вторник\" key=\"2\">\r\n                    <h4>Вторник:</h4>\r\n                    <ScheduleDay \r\n                        dayNumber={'Вторник'} \r\n                        // defaultActiveKey={activeKey} \r\n                        // setActiveKey={setActiveKey}\r\n                    />\r\n                </TabPane>\r\n                <TabPane tab=\"Среда\" key=\"3\">\r\n                    Content of Tab Pane 3\r\n                </TabPane>\r\n                <TabPane tab=\"Четверг\" key=\"4\">\r\n                    Content of Tab Pane 3\r\n                </TabPane>\r\n                <TabPane tab=\"Пятница\" key=\"5\">\r\n                    Content of Tab Pane 3\r\n                </TabPane>\r\n                <TabPane tab=\"Суббота\" key=\"6\">\r\n                    Content of Tab Pane 3\r\n                </TabPane>\r\n                <TabPane tab=\"Воскресенье\" key=\"7\">\r\n                    Content of Tab Pane 3\r\n                </TabPane>\r\n                <TabPane tab=\"Статистика\" key=\"8\">\r\n                    Статистика\r\n                </TabPane>\r\n            </Tabs>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Schedule\r\n\r\n\r\ntype ScheduleDayPropsType = {\r\n    dayNumber: string\r\n    // defaultActiveKey: Array<string>,\r\n    // setActiveKey: Dispatch<SetStateAction<string[]>>\r\n}\r\n\r\nconst ScheduleDay: React.FC<ScheduleDayPropsType> = (props) => {\r\n    const [activeKey, setActiveKey] = useState<Array<string>>([])\r\n    // useEffect( ()=>{\r\n    //     console.log(props.dayNumber, props.defaultActiveKey)\r\n    //     setActiveKey(props.defaultActiveKey)\r\n    // },[props])\r\n\r\n    console.log(props.dayNumber,' activeKey:' ,activeKey)\r\n   \r\n    const formatter = (value: number | undefined) => {\r\n        let hour: string\r\n        let min: string\r\n        if (value) {\r\n            const hourNumber = Math.floor(value / 60)\r\n            hour = hourNumber.toString()\r\n            const minNumber = (value - (hourNumber * 60))\r\n            min = minNumber < 10 ? '0' + minNumber.toString() : minNumber.toString()\r\n        } else {\r\n            hour = min = '??'\r\n        }\r\n\r\n        return (\r\n            <>{hour}:{min}</>\r\n        )\r\n    }\r\n\r\n    const changeActiveContext = (keys: string | string[] ) => {\r\n        console.log(keys)\r\n        if (Array.isArray(keys)) {\r\n            setActiveKey(keys)\r\n        } else {\r\n            setActiveKey([keys])\r\n        }\r\n        \r\n    }\r\n\r\n    const contecsts: Array<string> = [\r\n        'Продажи',\r\n        'Разработка'\r\n    ]\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"d-flex flex-row\">\r\n                <div className=\"pb-5 pt-2\" style={style}>\r\n                    <Slider\r\n                        min={6 * 60}\r\n                        max={1440}\r\n                        vertical\r\n                        reverse\r\n                        range\r\n                        marks={marks}\r\n                        defaultValue={[6 * 60, 18 * 60]}\r\n                        tipFormatter={formatter}\r\n                        className=\"\"\r\n                    />\r\n\r\n                </div>\r\n                <div className=\"p-2  bg-warning\">Flex item</div>\r\n                <div className=\"p-2 flex-grow-1\">\r\n\r\n                    \r\n                    <h5>Контексты</h5>\r\n                    <Collapse \r\n                        activeKey={activeKey} \r\n                        defaultActiveKey={activeKey} \r\n                        onChange={changeActiveContext}\r\n                    >\r\n                        <Panel header={<p className=\"text-left p-0 m-0\">Ежедневно</p>} key=\"0\">\r\n                            <Button className=\"mb-1\" type=\"primary\" size=\"small\">Add</Button>\r\n                            <List\r\n                                size=\"small\"\r\n                                bordered\r\n                                dataSource={contecstsDaily}\r\n                                renderItem={item => <List.Item >{item}</List.Item>}\r\n                            />\r\n                        </Panel>\r\n                        <Panel header={<p className=\"text-left p-0 m-0\">Работа</p>} key=\"1\">\r\n                            <List\r\n                                size=\"small\"\r\n                                bordered\r\n                                dataSource={contecsts}\r\n                                renderItem={item => <List.Item >{item}</List.Item>}\r\n                            />\r\n                        </Panel>\r\n                        <Panel header=\"Дом\" key=\"2\">\r\n                            \r\n                        </Panel>\r\n                        <Panel header=\"Хобби\" key=\"3\">\r\n                            \r\n                        </Panel>\r\n                        <Panel header=\"Спорт\" key=\"4\">\r\n                            \r\n                        </Panel>\r\n                        <Panel header=\"Образование\" key=\"5\">\r\n                            \r\n                        </Panel>\r\n                    </Collapse>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst contecstsDaily: Array<string> = [\r\n    'Подьем',\r\n    'Отбой',\r\n    'Завтрак',\r\n    'Обед',\r\n    'Ужин',\r\n    'Душ',\r\n    'Побрится',\r\n    'Почистить зубы (утро)',\r\n    'Почистить зубы (вечер)',\r\n]","import {connect} from 'react-redux'\r\nimport ToDoMobile from './ToDoMobile'\r\nimport { isMobile } from 'react-device-detect'\r\nimport {getTaskList, createNewTask, updateTask, deleteTask} from '../../redux/taskReducer'\r\nimport { AppStateType } from '../../redux/store'\r\nimport ToDoBrowser from './ToDoBrowser'\r\nimport { NewTaskDataType } from '../../Types/types'\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    getTaskList: (start_date: string, end_date:string)=>void,\r\n    createNewTask: (values: NewTaskDataType, reload:boolean)=>void,\r\n    updateTask: (values: NewTaskDataType, taskId: number)=>void,\r\n    deleteTask: (taskid: number, startDate: string, endDate:string)=>void,\r\n}\r\n\r\nexport type ToDoListPropsType = MapPropsType & MapDispatchPropsType & OwnToDoListPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        taskList: state.task.taskList,\r\n        viewSettings: state.auth.viewSettings,\r\n        isInterval: state.task.isInterval,\r\n        dateInterval: state.task.dateInterval,\r\n        userId: state.auth.user?.id\r\n    }\r\n}\r\n\r\ntype OwnToDoListPropsType = {}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnToDoListPropsType, AppStateType>(mapStateToProps, \r\n    {getTaskList, createNewTask, updateTask, deleteTask}) \r\n    ( isMobile ? ToDoMobile : ToDoBrowser )\r\n    \r\n\r\n","import {getAuthUserData} from \"./authReducer\"\r\nimport {InferActionsTypes} from './store'\r\n\r\nlet initialState = {\r\n    initialized: false,\r\n    location: '/'\r\n}\r\n\r\nexport type InitialStateType ={\r\n    initialized: boolean,\r\n    location: string\r\n}\r\n\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\n\r\nconst appReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/APP/INITIALIZED_SUCCESS':\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            }\r\n\r\n        case 'SN/APP/SET_LOCATION':\r\n            return  {\r\n                ...state,\r\n                location: action.location\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    initializedSuccess: () => ({type: 'SN/APP/INITIALIZED_SUCCESS'} as const),\r\n    setLocation: (location: string) => ({type: 'SN/APP/SET_LOCATION', location} as const),\r\n}\r\n\r\nexport const initializeApp = () => (dispatch: any) => {\r\n    let promise = dispatch(getAuthUserData());\r\n    Promise.all([promise])\r\n        .then(() => {\r\n            dispatch(actions.initializedSuccess());\r\n        });\r\n}\r\n\r\nexport const addLocation = (location: string) => (dispatch: any) => {\r\n    dispatch(actions.setLocation(location));\r\n}\r\n\r\nexport default appReducer;","import { \r\n    // BaseThunkType, \r\n    InferActionsTypes \r\n} from \"./store\"\r\nimport { Dispatch } from \"react\"\r\n\r\nexport type codeTypeList = 'model'| 'controller'\r\n\r\nexport type InitialStateType = {\r\n    isModalVisible: boolean,\r\n    codeRowsArray: Array<any>,\r\n    codeType: codeTypeList,\r\n    codeTargetName: string,\r\n    codeData?: any // данные для формирования\r\n}\r\n\r\nlet initialState:InitialStateType = {\r\n    isModalVisible: false,\r\n    codeRowsArray: [],\r\n    codeType: 'model',\r\n    codeTargetName: ''\r\n}\r\n\r\nconst codeReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/CODE/SET_SHOW_CODE_MODAL':\r\n            console.log('SN/CODE/SET_SHOW_CODE_MODAL')\r\n            return {...state, isModalVisible: action.isShow, codeRowsArray: action.codeRowsArray, }\r\n            // return {...state, isModalVisible: action.isShow, codeRowsArray: action.codeRowsArray, codeTargetName: action.codeTargetName}\r\n    \r\n        case 'SN/CODE/SET_CODE_TARGET':\r\n            console.log(action.codeTargetName)\r\n            console.log(action.codeData)\r\n            return {...state, codeTargetName: action.codeTargetName, codeData: action.codeData}\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    setShowCodeModal: (\r\n        isShow: boolean, \r\n        codeType: codeTypeList, \r\n        codeRowsArray: Array<any>, \r\n        codeTargetName: string,\r\n        codeData: Array<any>\r\n        ) => ({ type: 'SN/CODE/SET_SHOW_CODE_MODAL', isShow, codeType, codeRowsArray, codeTargetName, codeData} as const),\r\n    setCodeTarget: (codeTargetName: string, codeData: any) => ({ type: 'SN/CODE/SET_CODE_TARGET', codeTargetName, codeData} as const),\r\n}\r\n\r\nexport default codeReducer\r\n\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\n// type ThunkType = BaseThunkType<ActionsTypes>\r\nexport type DispatchType = Dispatch<ActionsTypes>","import {getToken, instance} from './api'\r\n\r\nexport type ProjectResponseType = {\r\n    projects: [\r\n        {\r\n            backend_id: number,\r\n            created_at: string,\r\n            deleted_at: string,\r\n            frontend_id: number,\r\n            id: number,\r\n            name: string,\r\n            updated_at: string,\r\n        }\r\n    ]\r\n}\r\n\r\nexport type BackendType = {\r\n    created_at?: string,\r\n    deleted_at?: string,\r\n    updated_at?: string,\r\n    id?: number,\r\n    name: string,\r\n    url: string,\r\n    ip: string,\r\n    login: string,\r\n    password: string,\r\n    folder: string,\r\n}\r\n\r\nexport type getBackendDataResponseType = {\r\n    Backend: Array<BackendType>\r\n}\r\n\r\nexport const projectAPI = {\r\n    getProjects() {\r\n        getToken()\r\n        return instance.get<ProjectResponseType>(`project`)\r\n        .then(response => {\r\n            console.log('projectAPI.getProjects:', response)\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                return err.response\r\n            } else if (err.request) {\r\n            } else {\r\n            }\r\n            return null\r\n        })\r\n    },\r\n    getBackendData(projectId: number) {\r\n        getToken()\r\n        return instance.get<getBackendDataResponseType>(`project/`+projectId)\r\n        .then(response => {\r\n            console.log('projectAPI.getBackendData:', response)\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                return err.response\r\n            } else if (err.request) {\r\n            } else {\r\n            }\r\n            return null\r\n        })\r\n    }\r\n    \r\n}\r\n\r\nexport const backendAPI = {\r\n    updateBackend(values: BackendType, backendId: number) {\r\n        getToken()\r\n        return instance.put<BackendType>(`backend/${backendId}`, values)\r\n        .then(response => {\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                return err.response\r\n            } else if (err.request) {\r\n            } else {\r\n            }\r\n            return null\r\n        })\r\n    }\r\n}\r\n\r\nexport type FieldType = {\r\n        name: string,\r\n        type: string,\r\n        isPrimary: boolean,\r\n        description: string,\r\n        isNulleble: boolean,\r\n        fieldParam?: string\r\n}\r\n\r\nexport type ModelsType = {\r\n    backend_id?: number,\r\n    created_at?: string,\r\n    deleted_at?: string,\r\n    updated_at?: string,\r\n    fields: string //| Array<FieldType>,\r\n    id: number,\r\n    name: string,\r\n    db: boolean,\r\n    soft_delete: boolean\r\n}\r\n\r\nexport type getModelsListResponseType = {\r\n    data: {\r\n        models: Array<ModelsType>\r\n    }\r\n}\r\n\r\nexport const modelsAPI = {\r\n    getModelsList(backendId: number) {\r\n        getToken()\r\n        return instance.get<getModelsListResponseType>(`models/`+backendId)\r\n        .then(response => {\r\n            console.log('modelsAPI.getModelsList', response)\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                return err.response\r\n            } else if (err.request) {\r\n            } else {\r\n            }\r\n            return null\r\n        })\r\n    },\r\n    updateModel(values: ModelsType, modelId: number) {\r\n        console.log(values)\r\n        console.log('modelId', modelId)\r\n        return instance.put<getModelsListResponseType>(`models/${modelId}`, values)\r\n        .then(response => {\r\n            console.log(response)\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                return err.response\r\n            } else if (err.request) {\r\n            } else {\r\n            }\r\n            return null\r\n        })\r\n    },\r\n    createModel(values: ModelsType) {\r\n        return instance.post<getModelsListResponseType>(`models`, values)\r\n        .then(response => {\r\n            console.log(response)\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                console.log(err.response)\r\n                return err.response\r\n            } else if (err.request) {\r\n            } else {\r\n            }\r\n            return null\r\n        })\r\n    }\r\n}\r\n\r\nexport type ControllersType = {\r\n    id: number,\r\n    name: string,\r\n    folder: string,\r\n    model_id: Array<number>,\r\n    backend_id: number,\r\n    isResource: boolean,\r\n    models: Array<ModelsType>\r\n}\r\n\r\nexport type getControllersListResponseType = {\r\n    // data: {\r\n        controllers: Array<ControllersType>,\r\n        needGetMethods: boolean,\r\n    // }\r\n}\r\n\r\nexport const controllersAPI = {\r\n    getControllersList(backendId: number) {\r\n        getToken()\r\n        return instance.get<getControllersListResponseType>(`currentControllers/`+backendId)\r\n        .then(response => {\r\n            console.log('controllersAPI.getControllersList', response)\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                return err.response\r\n            } else if (err.request) {\r\n            } else {\r\n            }\r\n            return null\r\n        })\r\n    },\r\n    createController(values: any) {\r\n        return instance.post<getControllersListResponseType>(`controllers`, values)\r\n        .then(response => {\r\n            console.log(response)\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                console.log(err.response)\r\n                return err.response\r\n            } else if (err.request) {\r\n            } else {\r\n            }\r\n            return null\r\n        })\r\n    },\r\n    updateController(values: ControllersType, controllerId: number) {\r\n        console.log(values)\r\n        console.log('controllerId', controllerId)\r\n        return instance.put<getControllersListResponseType>(`controllers/${controllerId}`, values)\r\n        .then(response => {\r\n            console.log(response)\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                return err.response\r\n            } else if (err.request) {\r\n            } else {\r\n            }\r\n            return null\r\n        })\r\n    },\r\n}","import {getToken, instance} from './api'\r\n\r\nexport type rest_typeType = 'get'|'post'|'put'|'delete'| null\r\n\r\nexport type ControllerMethodsType = {\r\n    id: number,\r\n    controller_id: number,\r\n    name: string,\r\n    request: string,\r\n    response: string,\r\n    rest_type: rest_typeType,\r\n    isMiddleware: boolean,\r\n    body_actions: string,\r\n}\r\n\r\nexport type GetControllerMethodsResponseType = {\r\n    controllerMethods: Array<ControllerMethodsType>,\r\n}\r\n\r\nexport const controllerMethodsAPI = {\r\n    getControllerMethods() {\r\n        getToken()\r\n        return instance.get<GetControllerMethodsResponseType>(`controllerMethods`)\r\n        .then(response => {\r\n            console.log(response)\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                return err.response\r\n            } else if (err.request) {\r\n            } else {\r\n            }\r\n            return null\r\n        })\r\n    },\r\n    createControllerMethods(values: any) {\r\n        return instance.post<GetControllerMethodsResponseType>(`controllerMethods`, values)\r\n        .then(response => {\r\n            console.log(response)\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                console.log(err.response)\r\n                return err.response\r\n            } else if (err.request) {\r\n            } else {\r\n            }\r\n            return null\r\n        })\r\n    },\r\n    updateControllerMethods(values: any, controllerMethodId: number) {\r\n        console.log(values)\r\n        console.log('modelId', controllerMethodId)\r\n        return instance.put<GetControllerMethodsResponseType>(`controllerMethods/${controllerMethodId}`, values)\r\n        .then(response => {\r\n            console.log(response)\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                console.log(err.response)\r\n                return err.response\r\n            } else if (err.request) {\r\n            } else {\r\n            }\r\n            return null\r\n        })\r\n    },\r\n}","import { BaseThunkType, InferActionsTypes } from \"./store\"\r\nimport { projectAPI, backendAPI, BackendType, modelsAPI, getModelsListResponseType, ModelsType, controllersAPI, getControllersListResponseType, ControllersType } from './../api/projectAPI'\r\nimport { Dispatch } from \"react\"\r\nimport { ControllerMethodsType, controllerMethodsAPI, GetControllerMethodsResponseType} from \"../api/ControllerMethodsAPI\"\r\nimport { AxiosResponse } from \"axios\"\r\n\r\ntype backendDataType = {\r\n    created_at: string,\r\n    deleted_at: string,\r\n    updated_at: string,\r\n    id: number,\r\n    name: string,\r\n\r\n    url?: string,\r\n    ip?: string,\r\n    login?: string,\r\n    password?: string,\r\n    folder?: string,\r\n}\r\n\r\nexport type ProjectItemType = {\r\n    backend_id: number,\r\n    created_at: string,\r\n    deleted_at: string,\r\n    frontend_id: number,\r\n    id: number,\r\n    name: string,\r\n    updated_at: string,\r\n    backendData?: backendDataType\r\n}\r\n\r\nexport type InitialStateType = {\r\n    projectList: Array<ProjectItemType>,\r\n    isProjectLoaded: boolean,\r\n    modelsList: Array<ModelsType>,\r\n    controllersList: Array<ControllersType>,\r\n    controllerMethodsList: Array<ControllerMethodsType>\r\n}\r\n\r\nlet initialState:InitialStateType = {\r\n    projectList: [],\r\n    isProjectLoaded: false,\r\n    modelsList: [],\r\n    controllersList: [],\r\n    controllerMethodsList: []\r\n}\r\n\r\nconst projectReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/PROJECT/SET_CONTROLLER_METHOD_LIST':\r\n            return ({...state, controllerMethodsList: action.controllerMethodsList })\r\n\r\n        case 'SN/PROJECT/SET_CONTROLLERS_LIST':\r\n            return ({...state, controllersList: action.controllersList})\r\n\r\n        case 'SN/PROJECT/SET_MODELS_LIST':\r\n            return ({...state, modelsList: action.modelsList})\r\n\r\n        case 'SN/PROJECT/SET_PROJECT_LIST':\r\n            return { ...state, projectList: action.projectList }\r\n\r\n        case 'SN/PROJECT/SET_IS_LOADED':\r\n            return {...state, isProjectLoaded: action.isLoaded}\r\n\r\n        case 'SN/PROJECT/SET_BACKEND_DATA':\r\n            // selector\r\n            return {...state, projectList: state.projectList.map( item => {\r\n                if (action.projectId === item.id) {\r\n                    item.backendData = action.backendData\r\n                    return item\r\n                } else {\r\n                    return item\r\n                }\r\n            })}\r\n\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    setProjectList: (projectList: Array<ProjectItemType>) => ({ type: 'SN/PROJECT/SET_PROJECT_LIST', projectList } as const),\r\n    setIsLoaded: (isLoaded: boolean) => ({type: 'SN/PROJECT/SET_IS_LOADED', isLoaded} as const),\r\n    setBackendData: (projectId: number ,backendData: backendDataType) => ({type: 'SN/PROJECT/SET_BACKEND_DATA', backendData, projectId} as const),\r\n    setModelsList: (modelsList: Array<ModelsType>) => ({type: 'SN/PROJECT/SET_MODELS_LIST', modelsList} as const),\r\n    setControllersList: (controllersList: Array<ControllersType>) => ({type: 'SN/PROJECT/SET_CONTROLLERS_LIST', controllersList} as const),\r\n    setControllerMethodsList: (controllerMethodsList: Array<ControllerMethodsType>) => ({type: 'SN/PROJECT/SET_CONTROLLER_METHOD_LIST', controllerMethodsList} as const),\r\n}\r\n\r\nexport const getProjectList = (): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        const response = await projectAPI.getProjects()\r\n        if (response !== undefined && response !== null) {\r\n            dispatch(actions.setIsLoaded(true))\r\n            dispatch(actions.setProjectList(response.data.projects))\r\n        } else {\r\n            // add error message\r\n        }\r\n    }\r\n}\r\n\r\nexport const getBackendData = (projectId: number): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        const response = await projectAPI.getBackendData(projectId)\r\n        if (response !== undefined && response !== null) {\r\n            dispatch(actions.setBackendData(projectId, response.data.Backend[0]))\r\n            // dispatch(actions.setProjectList(response.data.projects))\r\n        } else {\r\n            // add error message\r\n        }\r\n    }\r\n}\r\n\r\nexport const updateBackend = (values: BackendType, backendId: number): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        const response = await backendAPI.updateBackend(values, backendId)\r\n        console.log(response)\r\n    }\r\n}\r\n\r\nexport const getModelsList = (backendId: number):ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        const response: getModelsListResponseType = await modelsAPI.getModelsList(backendId)\r\n        // console.log(response.data.models)\r\n        dispatch(actions.setModelsList(response.data.models))\r\n    }\r\n}\r\n\r\nexport const updateModel = (values: ModelsType, modelId: number):ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        const response: getModelsListResponseType = await modelsAPI.updateModel(values, modelId)\r\n        console.log(response)\r\n        dispatch(actions.setModelsList(response.data.models))\r\n    }\r\n}\r\n\r\nexport const createModel = (values: ModelsType):ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        const response: getModelsListResponseType = await modelsAPI.createModel(values)\r\n        console.log(response)\r\n        dispatch(actions.setModelsList(response.data.models))\r\n    }\r\n}\r\n\r\nexport const getControllersList = (backendId: number):ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        const response: AxiosResponse<getControllersListResponseType> = await controllersAPI.getControllersList(backendId)\r\n        // console.log(response.data)\r\n        dispatch(actions.setControllersList(response.data.controllers))\r\n    }\r\n}\r\n\r\nexport const createController = (values: any):ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        const response: AxiosResponse<getControllersListResponseType> = await controllersAPI.createController(values)\r\n        console.log(response)\r\n        dispatch(actions.setControllersList(response.data.controllers))\r\n    }\r\n}\r\n\r\nexport const getControllerMethodsList = ():ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        const response: AxiosResponse<GetControllerMethodsResponseType> = await controllerMethodsAPI.getControllerMethods()\r\n        dispatch(actions.setControllerMethodsList(response.data.controllerMethods))\r\n    }\r\n}\r\n\r\nexport const updateControllerMethodsList = (values: any, controllerMethodId: number):ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        const response: AxiosResponse<GetControllerMethodsResponseType> = await controllerMethodsAPI.updateControllerMethods(values, controllerMethodId)\r\n        dispatch(actions.setControllerMethodsList(response.data.controllerMethods))\r\n        // console.log(response)\r\n    }\r\n}\r\n\r\nexport const createControllerMethodsList = (values: any):ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        const response: AxiosResponse<GetControllerMethodsResponseType> = await controllerMethodsAPI.createControllerMethods(values)\r\n        console.log(response)\r\n        dispatch(actions.setControllerMethodsList(response.data.controllerMethods))\r\n    }\r\n}\r\n\r\nexport const updateController = (values: ControllersType, controllerId: number):ThunkType => {\r\n    return async (dispatch, getState) => {\r\n\r\n        const response: AxiosResponse<getControllersListResponseType> = await controllersAPI.updateController(values, controllerId)\r\n        console.log(response)\r\n        if (response.data.needGetMethods) {\r\n            //getControllerMethodsList\r\n            dispatch(getControllerMethodsList())\r\n        }\r\n    }\r\n}\r\n\r\nexport default projectReducer\r\n\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsTypes>\r\nexport type DispatchType = Dispatch<ActionsTypes>","import {getToken, instance} from './api'\r\n\r\nexport type ProviderType = {\r\n    name: string,\r\n    descriptions: string,\r\n    id: number,\r\n    contacts?: Array<ContactType>\r\n}\r\n\r\ntype GetProvidersListResponeType = {\r\n    providersList: Array<ProviderType>\r\n}\r\n\r\nexport const ProviderAPI = {\r\n    getProvidersList() {\r\n        return instance.get<GetProvidersListResponeType>(`providers`)\r\n        .then(response => {\r\n            console.log('getProvidersList: ', response)\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                console.log(err.response)\r\n                return err.response\r\n            } else if (err.request) {\r\n            } else {\r\n            }\r\n            return null\r\n        })\r\n    },\r\n    createNewProvider(values: any) {\r\n        return instance.post<any>(`providers`, values)\r\n        .then(response => {\r\n            console.log('createNewProvider: ', response)\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                return err.response\r\n            } else if (err.request) {\r\n            } else {\r\n            }\r\n            return null\r\n        })\r\n    },\r\n    updateProvider(values: any, providerId: number) {\r\n        getToken()\r\n        return instance.put<any>(`providers/${providerId}`, values)\r\n        .then(response => {\r\n            console.log('updateProvider', response)\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                console.log(err.response)\r\n                return err.response\r\n            } else if (err.request) {\r\n            } else {\r\n            }\r\n            return null\r\n        })\r\n    },\r\n    deleteProvider(providerId: number) {\r\n\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport type ContactType = {\r\n    id?: number,\r\n    name: string,\r\n    phone: string,\r\n    status: 'new' | 'old',\r\n    Skype: any,\r\n    Viber: any,\r\n    Telegram: any,\r\n    WhatsApp: any,\r\n    providers_id?: number\r\n}\r\n\r\n\r\nexport const ContactAPI = {\r\n    getContactList() {\r\n        getToken()\r\n        return instance.get<GetProvidersListResponeType>(`contacts`)\r\n        .then(response => {\r\n            console.log('getProvidersList: ', response)\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                console.log('getContactListERROR: ',err.response)\r\n                return err.response\r\n            } else if (err.request) {\r\n            } else {\r\n            }\r\n            return null\r\n        })\r\n    },\r\n    createNewContact(values: any) {\r\n        getToken()\r\n        return instance.post<any>(`contacts`, values)\r\n        .then(response => {\r\n            console.log('createNewProvider: ', response)\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                console.log('createNewProvider ERROR: ',err.response)\r\n                return err.response\r\n            } else if (err.request) {\r\n            } else {\r\n            }\r\n            return null\r\n        })\r\n    },\r\n    updateContact(values: any, providerId: number) {\r\n        getToken()\r\n        return instance.put<any>(`contacts/${providerId}`, values)\r\n        .then(response => {\r\n            console.log('updateProvider', response)\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                console.log(err.response)\r\n                return err.response\r\n            } else if (err.request) {\r\n            } else {\r\n            }\r\n            return null\r\n        })\r\n    },\r\n    deleteContact(providerId: number) {\r\n\r\n    }\r\n}","import { Dispatch } from 'redux'\r\nimport { ProviderAPI,  ProviderType } from '../api/ProviderAPI'\r\nimport { BaseThunkType, InferActionsTypes } from './store'\r\n\r\nexport type InitialStateType = {\r\n    providersList: Array<ProviderType>\r\n}\r\n\r\nlet initialState: InitialStateType = {\r\n    providersList: []\r\n}\r\n\r\nconst providerReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/PROVIDER/SET_PROVIDER_LIST':\r\n            return{\r\n                ...state,\r\n                providersList: action.providersList\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    setProvidersList: (providersList: Array<ProviderType>) => ({type: 'SN/PROVIDER/SET_PROVIDER_LIST', providersList} as const),\r\n}\r\n\r\nexport const getProvidersList = (): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        let response = await ProviderAPI.getProvidersList()\r\n        dispatch( actions.setProvidersList(response.data.providersList) )\r\n    }\r\n}\r\n\r\nexport const createNewProvider = (values: any): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        let response = await ProviderAPI.createNewProvider(values)\r\n        dispatch( actions.setProvidersList(response.data.providersList) )\r\n    }\r\n}\r\n\r\nexport const updateProvider = (values: any, providerId: number): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        let response = await ProviderAPI.updateProvider(values, providerId)\r\n        dispatch( actions.setProvidersList(response.data.providersList) )\r\n    }\r\n}\r\n\r\nexport default providerReducer\r\n\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsTypes>\r\nexport type DispatchType = Dispatch<ActionsTypes>","import { TaskListType } from '../Types/types'\r\nimport {getToken, instance} from './api'\r\nimport {NewTaskListType} from './../Types/types'\r\n\r\nexport const taskListAPI = {\r\n    getTaskList() {\r\n        getToken()\r\n        return instance.get<TaskListType>(`taskList`)\r\n        .then(response => {\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                return err.response\r\n            } else if (err.request) {\r\n            } else {\r\n            }\r\n            return null\r\n        })\r\n    },\r\n    createNewTaskList(values: NewTaskListType) {\r\n        console.log(values)\r\n        return instance.post<TaskListType>(`taskList`, values)\r\n        .then(response => {\r\n            console.log(response)\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                console.log(err.response)\r\n                return err.response\r\n            } else if (err.request) {\r\n            } else {\r\n            }\r\n            return null\r\n        })\r\n    },\r\n    deleteTask(taskId: number) {\r\n        return instance.delete<TaskListType>(`taskList/${taskId}`).then(response => {\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                return err.response\r\n            } else if (err.request) {\r\n            } else {\r\n            }\r\n            return null\r\n        })\r\n    },\r\n    updateTask(values: NewTaskListType, taskId: number) {\r\n        console.log(values)\r\n        return instance.put<TaskListType>(`taskList/${taskId}`, values)\r\n        .then(response => {\r\n            console.log(response)\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                return err.response\r\n            } else if (err.request) {\r\n            } else {\r\n            }\r\n            return null\r\n        })\r\n    }\r\n}\r\n","import { Dispatch } from \"react\";\r\nimport { BaseThunkType, InferActionsTypes } from \"./store\";\r\nimport { taskListAPI } from './../api/taskListAPI'\r\nimport { NewTaskListType, TaskListType } from \"../Types/types\";\r\n\r\n\r\nexport type InitialStateType = {\r\n    taskList: Array<TaskListType>,\r\n    taskListIsFetching: boolean,\r\n    isTaskListLoaded: boolean,\r\n    selectedTasks: Array<number>\r\n}\r\n\r\nlet initialState:InitialStateType = {\r\n    taskList: [],\r\n    taskListIsFetching: false,\r\n    isTaskListLoaded: false,\r\n    selectedTasks:[]\r\n}\r\n\r\nconst taskListReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/TASK_LIST/BACK_SELECTED_TASK':\r\n            let newSelectedTasks: Array<number> = [...state.selectedTasks]\r\n            if (newSelectedTasks.length > 0) {\r\n                newSelectedTasks.pop()\r\n            }              \r\n            return { ...state, selectedTasks: newSelectedTasks }\r\n        case 'SN/TASK_LIST/SET_SELECTED_TASK':\r\n            return { ...state, selectedTasks: [...state.selectedTasks, action.taskId] }\r\n        case 'SN/TASK_LIST/SET_TASK_LIST':\r\n            return { ...state, taskList: action.taskList, isTaskListLoaded: true}\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    setTaskList: (taskList: Array<any>) => ({ type: 'SN/TASK_LIST/SET_TASK_LIST', taskList } as const),\r\n    setSelectedTasks: (taskId: number) => ({ type: 'SN/TASK_LIST/SET_SELECTED_TASK', taskId } as const),\r\n    backSelectedTasks: () => ({type: 'SN/TASK_LIST/BACK_SELECTED_TASK'} as const),\r\n}\r\n\r\nexport const getTaskList = (): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        let response = await taskListAPI.getTaskList()\r\n        if (response !== undefined && response !== null) {\r\n            dispatch(actions.setTaskList(response.data.Tasks))\r\n        } else {\r\n            // add error message\r\n        }\r\n    }\r\n}\r\n\r\nexport const createNewTaskList = (values: NewTaskListType): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        let response = await taskListAPI.createNewTaskList(values)\r\n        dispatch(actions.setTaskList(response.data.Tasks))\r\n    }\r\n}\r\n\r\nexport const deleteTaskList = (taskId: number): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        let response = await taskListAPI.deleteTask(taskId)\r\n        dispatch(actions.setTaskList(response.data.Tasks))\r\n    }\r\n}\r\n\r\nexport const updateTaskList = (values: NewTaskListType, taskId: number): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        let response = await taskListAPI.updateTask(values, taskId)\r\n        dispatch(actions.setTaskList(response.data.Tasks))\r\n    }\r\n}\r\n\r\nexport default taskListReducer\r\n\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsTypes>\r\nexport type DispatchType = Dispatch<ActionsTypes>","import { UserType } from '../redux/authReducer'\r\nimport {instance, getToken} from './api'\r\n\r\ntype UsersListType = Array<UserType>\r\n\r\nexport const usersAPI = {\r\n    getUsersList() {\r\n        getToken()\r\n        return instance.get<UsersListType>(`account`)\r\n        .then(response => {\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                return err.response\r\n            } else if (err.request) {\r\n            } else {\r\n            }\r\n            return null\r\n        })\r\n    },\r\n    updateUser(values: UserType, userId: number) {\r\n        getToken()\r\n        return instance.put<UserType>(`account/${userId}`, values)\r\n        .then(response => {\r\n            console.log(response)\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                console.log(err.response)\r\n                return err.response\r\n            } else if (err.request) {\r\n            } else {\r\n            }\r\n            return null\r\n        })\r\n    }\r\n}","\r\nimport { Dispatch } from 'redux'\r\nimport { usersAPI, } from '../api/usersAPI'\r\nimport { UserType } from './authReducer'\r\nimport { BaseThunkType, InferActionsTypes } from './store'\r\nimport { actions as authActions } from './authReducer'\r\n\r\nexport type InitialStateType = {\r\n    usersList: Array<UserType>,\r\n    isUsersDataChanged: boolean\r\n}\r\n\r\nlet initialState: InitialStateType = {\r\n    usersList: [],\r\n    isUsersDataChanged: false\r\n}\r\n\r\nconst usersReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/USERS/SET_IS_USERS_DATA_CHANGED':\r\n            return { ...state, isUsersDataChanged: action.isUsersDataChanged }\r\n\r\n        case 'SN/USERS/UPDATE_USERS_LIST':\r\n            let statetCopy = { ...state }\r\n            const newUserList = statetCopy.usersList.map((item: UserType) => {\r\n                if (item.id !== action.changedUserData.id) {\r\n                    return item\r\n                } else {\r\n                    return action.changedUserData\r\n                }\r\n            })\r\n            return { ...state, usersList: newUserList }\r\n\r\n        case 'SN/USERS/SET_USERS_LIST':\r\n            return { ...state, usersList: action.usersList }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    setUsersList: (usersList: Array<UserType>) => ({ type: 'SN/USERS/SET_USERS_LIST', usersList } as const),\r\n    updateUserList: (changedUserData: UserType) => ({ type: 'SN/USERS/UPDATE_USERS_LIST', changedUserData } as const),\r\n    setUsersDataChanged: (isUsersDataChanged: boolean) => ({ type: 'SN/USERS/SET_IS_USERS_DATA_CHANGED', isUsersDataChanged } as const),\r\n}\r\n\r\nexport const getUsersList = (): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        let response = await usersAPI.getUsersList()\r\n        dispatch(actions.setUsersList(response.data.UsersList))\r\n    }\r\n}\r\n\r\nexport const updateUser = (values: UserType, userId: number): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n\r\n        let response = await usersAPI.updateUser(values, userId)\r\n        dispatch(actions.updateUserList(response.data.changedUserData))\r\n        dispatch( actions.setUsersDataChanged(true) )\r\n        const state = getState()\r\n        if (state.auth.user && state.auth.user.id === response.data.changedUserData.id) {\r\n            const data: UserType = response.data.changedUserData\r\n            // @ts-ignore\r\n            dispatch(authActions.setAuthUserData(data, null))\r\n        }\r\n    }\r\n}\r\n\r\nexport default usersReducer\r\n\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsTypes>\r\nexport type DispatchType = Dispatch<ActionsTypes>","import {instance, getToken} from './api'\r\n\r\nexport type VocabularyType = {\r\n    eng_value: string,\r\n    eng_sound: string | null,\r\n    rus_value: string,\r\n    part_of_speech: string,\r\n    id: number,\r\n    status: string | null,\r\n}\r\n\r\nexport type WordType = {\r\n    conjugation: string,\r\n    description: string,\r\n    examples: string,\r\n    gender: null\r\n    id: number\r\n    isBasic: boolean,\r\n    isContain: boolean,\r\n    languige: string,\r\n    name: string,\r\n    occurrence: number,\r\n    part_of_speech: string | null\r\n    relations: Array<WordType>\r\n    word_number: string,\r\n    pivot: {\r\n        english_word_id: number,\r\n        progress: string,\r\n        status: \"toLearn\" | \"learned\",\r\n        user_id: number,\r\n    }\r\n}\r\n\r\ntype GetVocabularyPartType = {\r\n    vocabularyList: Array<VocabularyType>,\r\n    englishWords: Array<WordType>,\r\n    part: string,\r\n    count: number,\r\n    toLern: Array<VocabularyType>,\r\n}\r\n\r\ntype UpdateVocabularyType = {\r\n    vocabularyTarget: VocabularyType\r\n}\r\n\r\nexport type CheckTestResultDataType = {\r\n    result: string,\r\n    checkMethod: 'ru_en_c'|'en_ru_c'|'ru_en_s'|'en_ru_s'|'ru_en_r'|'en_ru_r';\r\n}\r\n\r\nexport const vocabularyAPI = {\r\n    getVocabularyPart(part: number) {\r\n        getToken()\r\n        return instance.get<GetVocabularyPartType>(`getVocabularyPart/`+part)\r\n        .then(response => {\r\n            // console.log('getVocabularyPart: ', response)\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                console.log(err.response)\r\n                return err.response\r\n            } else if (err.request) {\r\n            } else {\r\n            }\r\n            return null\r\n        })\r\n    },\r\n    updateVocabulary(values: any, vocabularyId: number) {\r\n        getToken()\r\n        return instance.put<UpdateVocabularyType>(`vocabulary/${vocabularyId}`, values)\r\n        .then(response => {\r\n            console.log(response)\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                console.log(err.response)\r\n                return err.response\r\n            } else if (err.request) {\r\n            } else {\r\n            }\r\n            return null\r\n        })\r\n    },\r\n    checkTestResult(data: CheckTestResultDataType, wordId: number) {\r\n        console.log('wordId: ', wordId)\r\n        getToken()\r\n        return instance.post<any>(`checkTestResult/${wordId}`, data)\r\n        .then(response => {\r\n            console.log('checkTestResult: ', response)\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                console.log('checkTestResult ERROR: ', err.response)\r\n                return err.response\r\n            } else if (err.request) {\r\n            } else {\r\n            }\r\n            return null\r\n        })\r\n    },\r\n    //\r\n    getWordsToLern() {\r\n        getToken()\r\n        return instance.get<GetVocabularyPartType>(`vocabulary`)\r\n        .then(response => {\r\n            console.log('getWordsToLern: ', response)\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                console.log(err.response)\r\n                return err.response\r\n            } else if (err.request) {\r\n            } else {\r\n            }\r\n            return null\r\n        })\r\n    },\r\n    skipWord(wordId: number) {\r\n        getToken()\r\n        return instance.get<GetVocabularyPartType>(`skipWord/`+wordId)\r\n        .then(response => {\r\n            console.log('getWordsToLern: ', response)\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                console.log(err.response)\r\n                return err.response\r\n            } else if (err.request) {\r\n            } else {\r\n            }\r\n            return null\r\n        })\r\n    },\r\n}","\r\nimport { Dispatch } from 'redux'\r\nimport { isConditionalExpression } from 'typescript'\r\nimport { CheckTestResultDataType, vocabularyAPI, VocabularyType, WordType } from './../api/vocabularyAPI'\r\nimport { BaseThunkType, InferActionsTypes } from './store'\r\n\r\nexport type InitialStateType = {\r\n    vocabularyList: Array<WordType>,\r\n    part: number,\r\n    count: number,\r\n    toLern: Array<WordType>,\r\n    learningTarget?: WordType\r\n}\r\n\r\nlet initialState: InitialStateType = {\r\n    vocabularyList: [],\r\n    part: 1,\r\n    count: 0,\r\n    toLern: [],\r\n}\r\n\r\nconst vocabularyReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'VOCABULARY/SET_RESULT':\r\n            console.log('VOCABULARY/SET_RESULT: ', action.result)\r\n            return{\r\n                ...state\r\n            }\r\n        case 'VOCABULARY/SET_TO_LERN':\r\n            return{\r\n                ...state,\r\n                toLern: action.toLern\r\n            }\r\n        case 'SN/VOCABULARY/SET_VOCABULARY_LIST':\r\n            // console.log(action.vocabularyList[0])\r\n            return { \r\n                ...state, \r\n                vocabularyList: action.vocabularyList, \r\n                part: action.part, \r\n                count: action.count,\r\n                // toLern: action.toLern,\r\n                learningTarget: action.vocabularyList[0]\r\n            }\r\n\r\n        case 'SN/VOCABULARY/SET_LEARNING_TARGET':\r\n            // console.log(action.learningTarget ? action.learningTarget.id : null)\r\n            return{\r\n                ...state,\r\n                learningTarget: action.learningTarget\r\n            }\r\n\r\n        case 'SN/VOCABULARY/SET_VOCABULARY_LIST2':\r\n            return{\r\n                ...state,\r\n                vocabularyList: action.vocabularyList, \r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    setVocabularyList: (vocabularyList: Array<WordType>, part: number, count: number, toLern: Array<VocabularyType>) => \r\n    ({ type: 'SN/VOCABULARY/SET_VOCABULARY_LIST', vocabularyList, part, count, toLern } as const),\r\n    setLerningTarget: (learningTarget: WordType) => ({type: 'SN/VOCABULARY/SET_LEARNING_TARGET', learningTarget} as const),\r\n    setVocabularyList2: (vocabularyList: Array<WordType>) => \r\n    ({ type: 'SN/VOCABULARY/SET_VOCABULARY_LIST2', vocabularyList } as const),\r\n    setToLern: (toLern: Array<WordType>) =>({type: 'VOCABULARY/SET_TO_LERN', toLern} as const),\r\n    setResults: (result: any) => ({type: 'VOCABULARY/SET_RESULT', result} as const),\r\n}\r\n\r\nexport const getVocabularyList = (part: number): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        let response = await vocabularyAPI.getVocabularyPart(part)\r\n        console.log(response)\r\n        if (response.status === 200) {\r\n            dispatch( actions.setVocabularyList(response.data.englishWords, Number(response.data.part), Number(response.data.count), response.data.toLern) )\r\n        } else {\r\n            console.log(response.data.message)\r\n        }\r\n        \r\n    }\r\n}\r\n\r\nexport const updateVocabulary = (values: any, vocabularyId: number): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        let response = await vocabularyAPI.updateVocabulary(values, vocabularyId)\r\n        console.log(response)\r\n    }\r\n}\r\n\r\nexport const checkTestResult = (data: CheckTestResultDataType, wordId: number): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        let response = await vocabularyAPI.checkTestResult(data, wordId)\r\n        dispatch(actions.setResults(response.data))\r\n    }\r\n}\r\n\r\nexport const getWordsToLern = ():ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        let response = await vocabularyAPI.getWordsToLern()\r\n        dispatch(actions.setToLern(response.data.toLearn))\r\n    }\r\n}\r\n\r\nexport const skipWord = (wordId: number):ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        let response = await vocabularyAPI.skipWord(wordId)\r\n        console.log(response)\r\n    }\r\n}\r\n\r\nexport default vocabularyReducer\r\n\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsTypes>\r\nexport type DispatchType = Dispatch<ActionsTypes>","import { Dispatch } from 'redux'\r\nimport { ProviderAPI,  ProviderType, ContactAPI, ContactType } from '../api/ProviderAPI'\r\nimport { BaseThunkType, InferActionsTypes } from './store'\r\n\r\nexport type InitialStateType = {\r\n    contactList: Array<ContactType>\r\n}\r\n\r\nlet initialState: InitialStateType = {\r\n    contactList: []\r\n}\r\n\r\nconst contactReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/CONTACTS/SET_CONTACT_LIST':\r\n            return{\r\n                ...state,\r\n                contactList: action.contactList\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    setContactList: (contactList: Array<ContactType>) => ({type: 'SN/CONTACTS/SET_CONTACT_LIST', contactList} as const),\r\n}\r\n\r\nexport const getContactList = (): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        let response = await ContactAPI.getContactList()\r\n        dispatch( actions.setContactList(response.data.providersList) )\r\n    }\r\n}\r\n\r\nexport const createNewContact = (values: any): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        let response = await ContactAPI.createNewContact(values)\r\n        dispatch( actions.setContactList(response.data.providersList) )\r\n    }\r\n}\r\n\r\nexport const updateContact = (values: any, providerId: number): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        let response = await ContactAPI.updateContact(values, providerId)\r\n        dispatch( actions.setContactList(response.data.providersList) )\r\n    }\r\n}\r\n\r\nexport default contactReducer\r\n\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsTypes>\r\nexport type DispatchType = Dispatch<ActionsTypes>","import {getToken, instance} from './api'\r\n\r\nexport type ProductType = {\r\n    created_at: string\r\n    descriptions_count: null| number\r\n    full_url: string | null\r\n    id: number\r\n    is_active: null | boolean\r\n    label: string\r\n    labels: null | string\r\n    name: string\r\n    params: any\r\n    parent_id: number\r\n    total_count: null| number\r\n    type: 'block' | 'subBlock' | 'item'\r\n    updated_at: string,\r\n    url: string | null\r\n}\r\n\r\nexport const productsAPI = {\r\n    startCatalogParsing() { // Получить весь каталог\r\n        getToken()\r\n        return instance.get<any>(`startCatalogParsing`)\r\n        .then(response => {\r\n            console.log('startCatalogParsing:', response)\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                console.log('startCatalogParsing ERROR:', err.response)\r\n                return err.response\r\n            } else if (err.request) {\r\n            } else {\r\n            }\r\n            return null\r\n        })\r\n    },\r\n    getProductCategoryList() { // Получить все разделы Catalog\r\n        getToken()\r\n        return instance.get<Array<ProductType>>(`getCatalogParts`)\r\n        .then(response => {\r\n            console.log('getProductCategoryList:', response)\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                console.log('getProductCategoryList ERROR:', err.response)\r\n                return err.response\r\n            } else if (err.request) {\r\n            } else {\r\n            }\r\n            return null\r\n        })\r\n    },\r\n    startCatalogItem(catalogItemName: string) { //\r\n        getToken()\r\n        return instance.get<Array<ProductType>>(`startCatalogItem/`+catalogItemName)\r\n        .then(response => {\r\n            console.log('startCatalogItem:', response)\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                console.log('startCatalogItem ERROR:', err.response)\r\n                return err.response\r\n            } else if (err.request) {\r\n            } else {\r\n            }\r\n            return null\r\n        })\r\n    },\r\n    startProductParamParsing(catalogItemName: string){ // Начать парсинг Описаний для раздела\r\n        getToken()\r\n        return instance.get<Array<ProductType>>(`startProductParamParsing/`+catalogItemName)\r\n        .then(response => {\r\n            console.log('startCatalogItem:', response)\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                console.log('startCatalogItem ERROR:', err.response)\r\n                return err.response\r\n            } else if (err.request) {\r\n            } else {\r\n            }\r\n            return null\r\n        })\r\n    },\r\n    getProductDescriptions(catalogItemName: string) { // Получить готовые описания для товаров\r\n        getToken()\r\n        return instance.get<Array<ProductType>>(`getProductDescriptions/`+catalogItemName+'/1')\r\n        .then(response => {\r\n            console.log('getProductDescriptions:', response)\r\n            return response.status === 200 ? response : null\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                console.log('getProductDescriptions ERROR:', err.response)\r\n                return err.response\r\n            } else if (err.request) {\r\n                console.log(err.request)\r\n            } else {\r\n            }\r\n            return null\r\n        })\r\n    }\r\n}","import { BaseThunkType, InferActionsTypes } from \"./store\"\r\n// import { projectAPI, backendAPI, BackendType, modelsAPI, getModelsListResponseType, ModelsType, controllersAPI, getControllersListResponseType, ControllersType } from './../api/projectAPI'\r\nimport {productsAPI, ProductType} from './../api/productsAPI'\r\nimport { Dispatch } from \"react\"\r\nimport { ControllerMethodsType, controllerMethodsAPI, GetControllerMethodsResponseType} from \"../api/ControllerMethodsAPI\"\r\nimport { AxiosResponse } from \"axios\"\r\n\r\nexport type InitialStateType = {\r\n    productCatigoryList: Array<ProductType>\r\n}\r\n\r\nlet initialState:InitialStateType = {\r\n    productCatigoryList: []\r\n}\r\n\r\nconst productReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/PRODUCT/SET_PRODUCT_CATEGORY_LIST':\r\n            return ({...state, productCatigoryList: action.productCatigoryList })\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    setProductList: (productCatigoryList: Array<ProductType>) => ({ type: 'SN/PRODUCT/SET_PRODUCT_CATEGORY_LIST', productCatigoryList } as const),\r\n}\r\n\r\nexport const startCatalogParsing = (): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        const response = await productsAPI.startCatalogParsing()\r\n        // if (response !== undefined && response !== null) {\r\n        //     dispatch(actions.setIsLoaded(true))\r\n        //     dispatch(actions.setProjectList(response.data.projects))\r\n        // } else {\r\n        //     // add error message\r\n        // }\r\n    }\r\n}\r\n\r\nexport const getProductCategoryList = (): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        const response = await productsAPI.getProductCategoryList()\r\n        dispatch(actions.setProductList(response.data))\r\n    }\r\n}\r\n\r\nexport const startCatalogItem = (catalogItemName: string): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        const response = await productsAPI.startCatalogItem(catalogItemName)\r\n        // dispatch(actions.setProductList(response.data))\r\n    }\r\n}\r\n\r\nexport const startProductParamParsing = (catalogItemName: string): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        const response = await productsAPI.startProductParamParsing(catalogItemName)\r\n        // dispatch(actions.setProductList(response.data))\r\n    }\r\n}\r\n\r\nexport const getProductDescriptions = (catalogItemName: string): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        const response = await productsAPI.getProductDescriptions(catalogItemName)\r\n        // dispatch(actions.setProductList(response.data))\r\n    }\r\n}\r\n\r\nexport default productReducer\r\n\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsTypes>\r\nexport type DispatchType = Dispatch<ActionsTypes>","import {Action, applyMiddleware, combineReducers, createStore} from \"redux\"\r\nimport thunkMiddleware, {ThunkAction} from \"redux-thunk\"\r\nimport appReducer from \"./appReducer\"\r\nimport authReducer from \"./authReducer\"\r\nimport codeReducer from \"./codeReducer\"\r\nimport projectReducer from \"./projectReducer\"\r\nimport providerReducer from \"./ProviderReducer\"\r\nimport taskListReducer from \"./TaskListReducer\"\r\nimport taskReducer from './taskReducer'\r\nimport usersReducer from \"./usersReducer\"\r\nimport vocabularyReducer from \"./vocabularyReducer\"\r\nimport contactReducer from './ContactsReducer'\r\nimport productReducer from \"./productsReducer\"\r\n\r\n\r\nlet rootReducer = combineReducers({\r\n    task: taskReducer,\r\n    app: appReducer,\r\n    auth: authReducer,\r\n    taskList: taskListReducer,\r\n    users: usersReducer,\r\n    projects: projectReducer,\r\n    code: codeReducer,\r\n    vocabulary: vocabularyReducer,\r\n    providors: providerReducer,\r\n    contacts: contactReducer,\r\n    products: productReducer\r\n})\r\n\r\ntype rootReducerType = typeof rootReducer\r\nexport type AppStateType = ReturnType<rootReducerType>\r\n\r\nexport type InferActionsTypes<T> = T extends { [keys: string]: (...args: any[]) => infer U } ? U : never\r\nexport type BaseThunkType<A extends Action = Action, R = Promise<void>> = ThunkAction<R, AppStateType, unknown, A>\r\n\r\nlet store = createStore(rootReducer, applyMiddleware(thunkMiddleware))\r\n\r\nexport default store","import { Popover, Icon } from 'antd-mobile'\r\nimport React, { useState } from 'react'\r\n\r\nconst Item = Popover.Item\r\n\r\ntype MenuPopoverType = {\r\n    onLogout: ()=>void\r\n}\r\n\r\nconst MenuPopover: React.FC<MenuPopoverType> = (props) => {\r\n    const [visible, setVisible] = useState(false)\r\n\r\n    const onSelect = (opt: JSX.Element, index?: number) => {\r\n        setVisible(false)\r\n\r\n        switch (opt.props.children) {\r\n            case 'Logout':\r\n                props.onLogout()\r\n                break\r\n        \r\n            default:\r\n                break\r\n        }\r\n    }\r\n\r\n    const handleVisibleChange = (visible: boolean) => {\r\n        setVisible(visible)\r\n    }\r\n\r\n    return (\r\n        <div className=\"mr-3\">\r\n        <Popover \r\n            mask\r\n            visible={visible}\r\n            overlay={[\r\n                (<Item key=\"1\" >Logout</Item>),\r\n                (<Item key=\"2\" >Info</Item>),\r\n                (<Item key=\"3\" >Help</Item>),\r\n            ]}\r\n            onVisibleChange={handleVisibleChange}\r\n            onSelect={onSelect}\r\n        >\r\n            <div style={{\r\n                height: '100%',\r\n                padding: '0 15px',\r\n                marginRight: '-20px',\r\n                display: 'flex',\r\n                alignItems: 'center',\r\n            }}\r\n            >\r\n                <Icon type=\"ellipsis\" />\r\n            </div>\r\n        </Popover>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MenuPopover","import React, { useState } from 'react'\r\nimport { Menu, ActivityIndicator, NavBar } from 'antd-mobile'\r\nimport { ValueType } from 'antd-mobile/lib/menu/PropsType'\r\nimport './MenuMobile.css'\r\nimport { useHistory, useLocation } from 'react-router-dom'\r\nimport { MenuPropsType } from './MenuContainer'\r\nimport { Link } from 'react-router-dom'\r\nimport MenuPopover from './MenuPopover'\r\nimport { MenuDataItemType } from './Header'\r\n\r\nconst MenuMobile: React.FC<MenuPropsType> = (props) => {\r\n    let history = useHistory()\r\n    const location = useLocation()\r\n    const [showMenu, setShowMenu] = useState(false)\r\n\r\n    const getSelectedMenuItem = (): ValueType => {\r\n        let response: ValueType = [props.menuData[0].value, '']\r\n        props.menuData.forEach((dataItem: MenuDataItemType) => {\r\n            if (dataItem.children) {\r\n                dataItem.children.forEach((item: MenuDataItemType) => {\r\n                    if (item.value === location.pathname) {\r\n                        response = [dataItem.value, item.value]\r\n                    }\r\n                })\r\n            }\r\n        })\r\n        return response\r\n    }\r\n\r\n    const [selectedMenuItem, setSelectedMenuItem] = useState<ValueType>(getSelectedMenuItem())\r\n\r\n    const handleClick = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\r\n        e.preventDefault(); // Fix event propagation on Android\r\n        setShowMenu(!showMenu)\r\n    }\r\n\r\n    const onChange = (value?: ValueType | undefined) => {\r\n        if (value) {\r\n            let subMenu = value[0]\r\n\r\n            props.menuData.forEach((dataItem) => {\r\n                if (dataItem.value === value[0]) {\r\n                    subMenu = value[0]\r\n                    if (dataItem.children && value[1]) {\r\n                        dataItem.children.forEach((cItem: { value: string | string[]; label: string }) => {\r\n                            if (cItem.value === value[1]) {\r\n                                history.replace(`${cItem.value}`)\r\n                                setShowMenu(false)\r\n                            }\r\n                        })\r\n                    }\r\n                }\r\n            })\r\n        \r\n            if (subMenu === '') {\r\n                subMenu = props.menuData[0].value\r\n            }\r\n            setSelectedMenuItem([subMenu, value[1]])\r\n        }\r\n        \r\n    }\r\n\r\n    const onMaskClick = () => {\r\n        setShowMenu(false)\r\n    }\r\n\r\n    const menuEl = (\r\n        <Menu\r\n            className=\"foo-menu\"\r\n            data={props.menuData}\r\n            value={selectedMenuItem}\r\n            onChange={onChange}\r\n            height={document.documentElement.clientHeight * 0.6}\r\n        />\r\n    );\r\n\r\n    const loadingEl = (\r\n        <div style={{ width: '100%', height: document.documentElement.clientHeight * 0.6, display: 'flex', justifyContent: 'center' }}>\r\n            <ActivityIndicator size=\"large\" />\r\n        </div>\r\n    );\r\n\r\n    const onLogout = () => {\r\n        onChange(['', ''])\r\n        history.replace(props.appLocation + 'login')\r\n        props.logout()\r\n    }\r\n\r\n    return (\r\n        <div className={showMenu ? 'menu-active' : ''}>\r\n            <div>\r\n                <NavBar\r\n                    leftContent=\"\"\r\n                    mode=\"light\"\r\n                    icon={<img src=\"https://gw.alipayobjects.com/zos/rmsportal/iXVHARNNlmdCGnwWxQPH.svg\" className=\"am-icon am-icon-md\" alt=\"\" />}\r\n                    onLeftClick={handleClick}\r\n                    className=\"top-nav-bar\"\r\n                    rightContent={props.isAuth ? <MenuPopover onLogout={onLogout} /> : null}\r\n                >\r\n                    {!props.isAuth ?\r\n                        <Link\r\n                            to={props.appLocation + \"login\"}\r\n                            onClick={() => { onChange(['', '']) }}\r\n                        >\r\n                            <span className=\"text-white\">Login</span>\r\n                        </Link>\r\n                        :\r\n                        <>\r\n                        <div>\r\n                            {props.user?.name}\r\n                        </div>\r\n                        </>\r\n                    }\r\n                    \r\n\r\n                </NavBar>\r\n            </div>\r\n            {showMenu ? props.menuData ? menuEl : loadingEl : null}\r\n            {showMenu ? <div className=\"menu-mask\" onClick={onMaskClick} /> : null}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default (MenuMobile)\r\n\r\n\r\n","import React from 'react'\r\nimport { Menu } from 'antd'\r\nimport {Link, useHistory} from 'react-router-dom'\r\nimport { MenuPropsType } from './MenuContainer'\r\nimport { MenuDataItemType } from './Header';\r\n\r\nconst { SubMenu } = Menu;\r\n\r\nconst MenuBrowser: React.FC<MenuPropsType> = (props) => {\r\n    let history = useHistory();\r\n\r\n    const handleClick = () => {}\r\n\r\n    const getMenuItem = (childs: Array<MenuDataItemType>):Array<JSX.Element | undefined> => {\r\n        const menuItems = childs.map( (item: MenuDataItemType) => {\r\n            const disabled = item.disabled ? {disabled: true} : null\r\n            return (\r\n                <Menu.Item key={item.value} {...disabled}>\r\n                    <Link to={item.value}>{item.label}</Link>\r\n                </Menu.Item>\r\n            )\r\n        })\r\n        return menuItems\r\n    }\r\n\r\n    const getSubMenu = ():Array<JSX.Element | undefined> => {\r\n        const subMenu = props.menuData.map( (item: MenuDataItemType) => {\r\n            return (\r\n                <SubMenu \r\n                    key={item.value} \r\n                    title={item.label}\r\n                >\r\n                    {item.children ? getMenuItem(item.children) : null}\r\n                </SubMenu >\r\n            )\r\n        })\r\n        return subMenu\r\n    }\r\n\r\n    const onLogout = () => {\r\n        history.replace(props.appLocation+'login')\r\n        props.logout()\r\n    }\r\n\r\n    return (\r\n        <Menu \r\n            onClick={handleClick} \r\n            mode=\"horizontal\"\r\n            theme=\"dark\"\r\n        >\r\n            { getSubMenu() }\r\n\r\n            {!props.isAuth ? \r\n                <Menu.Item key=\"login\">\r\n                    <Link to={props.appLocation +\"login\"} >Login</Link>\r\n                </Menu.Item>\r\n            :\r\n                <SubMenu \r\n                    key={props.user?.name} \r\n                    title={props.user?.name}\r\n                >\r\n                    <Menu.Item key=\"login\" onClick={onLogout}>\r\n                            Logout\r\n                    </Menu.Item>\r\n                    <Menu.Item key=\"info\" onClick={()=>{}}>\r\n                            Info\r\n                    </Menu.Item>\r\n                    <Menu.Item key=\"help\" onClick={()=>{}}>\r\n                            Help\r\n                    </Menu.Item>\r\n                </SubMenu >\r\n            }\r\n        </Menu>\r\n    )\r\n}\r\n\r\nexport default MenuBrowser","import {connect} from 'react-redux'\r\nimport MenuMobile from './MenuMobile'\r\nimport MenuBrowser from './MenuBrowser'\r\nimport {actions} from '../../redux/authReducer'\r\nimport { AppStateType } from '../../redux/store'\r\nimport { MenuDataType } from './Header'\r\nimport { isMobile } from \"react-device-detect\"\r\n\r\ntype OwnMenuPropsType = {\r\n    menuData: MenuDataType\r\n}\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    logout: ()=>void\r\n}\r\n\r\nexport type MenuPropsType = MapPropsType & MapDispatchPropsType & OwnMenuPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        appLocation: state.app.location,\r\n        isAuth: state.auth.isAuth,\r\n        user: state.auth.user\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnMenuPropsType, AppStateType>(mapStateToProps, \r\n    {logout: actions.logout}) \r\n    (isMobile ? MenuMobile : MenuBrowser)\r\n    \r\n\r\n","import React from 'react'\r\nimport { HeaderPropsType } from './HeaderContainer'\r\nimport MenuContainer from './MenuContainer'\r\n\r\nexport type OwnHeaderPropsType = {}\r\n\r\nconst Header: React.FC<HeaderPropsType> = (props) => {\r\n    const userStatus = props.user ? props.user.status : null\r\n    return <MenuContainer menuData={menuData(props.appLocation, userStatus)}/>\r\n}\r\n\r\nexport default Header\r\n\r\nexport type MenuDataType = Array<MenuDataItemType>\r\nexport type MenuDataItemType = {\r\n    value: string,\r\n    label: string,\r\n    disabled?: boolean\r\n    children?: Array<MenuDataItemType>,\r\n}\r\n\r\nconst menuData = (appLocation: string, userStatus: string | null): MenuDataType => {\r\n    const data: MenuDataType = [\r\n    {\r\n        value: 'planning',\r\n        label: 'Planning',\r\n        children: [\r\n            {\r\n                label: 'ToDo list',\r\n                value: appLocation + 'toDoList',\r\n                disabled: false,\r\n            },\r\n            {\r\n                label: 'Tasks tree',\r\n                value: appLocation + 'tasksTree',\r\n            },\r\n            {\r\n                label: 'Analysis',\r\n                value: appLocation + 'analysis',\r\n                disabled: true,\r\n            },\r\n            {\r\n                label: 'Daily schedule',\r\n                value: appLocation + 'schedule',\r\n                disabled: false,\r\n            },\r\n        ],\r\n    }, {\r\n        value: 'catalog',\r\n        label: 'Catalog',\r\n        children: [\r\n            {\r\n                label: 'Products',\r\n                value: appLocation + 'products',\r\n            }\r\n            , {\r\n                label: 'Providers',\r\n                value: appLocation + 'providers',\r\n            }\r\n        ],\r\n    },\r\n    {\r\n        value: 'orders',\r\n        label: 'Orders',\r\n        children: [\r\n            {\r\n                label: 'Orders',\r\n                value: appLocation + 'orders',\r\n            },\r\n            {\r\n                label: 'Leads',\r\n                value: appLocation + 'leads',\r\n            },\r\n        ],\r\n    },\r\n    {\r\n        value: 'english',\r\n        label: 'English',\r\n        children: [\r\n            {\r\n                label: 'Vocabulary',\r\n                value: appLocation + 'vocabulary',\r\n            }\r\n            , {\r\n                label: 'Grammer',\r\n                value: appLocation + 'grammer',\r\n            }\r\n        ],\r\n    },\r\n    ]\r\n\r\n    if (userStatus === 'admin' || userStatus ==='superAdmin') {\r\n        data.push(\r\n            {\r\n                value: 'admin',\r\n                label: 'Admin',\r\n                children: [\r\n                    {\r\n                        label: 'Users',\r\n                        value: appLocation + 'users',\r\n                    }\r\n                ],\r\n            }\r\n        )\r\n        //\r\n        data.push(\r\n            {\r\n                value: 'development',\r\n                label: 'Development',\r\n                children: [\r\n                    {\r\n                        label: 'Projects',\r\n                        value: appLocation + 'projects',\r\n                    }\r\n                ],\r\n            }\r\n        )\r\n    }\r\n    return data\r\n}\r\n","import {connect} from 'react-redux'\r\nimport Header, { OwnHeaderPropsType } from './Header'\r\nimport {actions} from '../../redux/authReducer'\r\nimport { AppStateType } from '../../redux/store'\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    logout: ()=>void\r\n}\r\n\r\nexport type HeaderPropsType = MapPropsType & MapDispatchPropsType & OwnHeaderPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        appLocation: state.app.location,\r\n        user: state.auth.user\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnHeaderPropsType, AppStateType>(mapStateToProps, \r\n    {logout: actions.logout}) \r\n    (Header)\r\n    \r\n\r\n","import React, { ReactNode } from 'react'\r\nimport { Form, Field, FormikProps } from \"formik\"\r\nimport { AntInput, AntCheckbox, AntInputPassword } from '../../utils/Formik/CreateAntField'\r\nimport { validateEmail, validateRequired } from '../../utils/Formik/ValidateFields'\r\n\r\nconst LoginForm: ((props: FormikProps<{}>) => ReactNode) = (props) => {\r\n    return (\r\n        <Form \r\n            className=\"form-container\" \r\n            onSubmit={props.handleSubmit}\r\n        >\r\n            <Field\r\n                component={AntInput}\r\n                name=\"email\"\r\n                type=\"email\"\r\n                label=\"Email\"\r\n                validate={validateEmail}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n            <Field\r\n                component={AntInputPassword}\r\n                name=\"password\"\r\n                type=\"password\"\r\n                label=\"Password\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n            <Field\r\n                component={AntCheckbox}\r\n                name=\"remember\"\r\n                label=\"Remember Me\"\r\n                submitCount={props.submitCount}\r\n            />\r\n            <div className=\"submit-container\">\r\n                <button className=\"ant-btn ant-btn-primary\" type=\"submit\">\r\n                    Login\r\n                </button>\r\n            </div>\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default LoginForm","import React, {useEffect} from 'react'\r\nimport { LoginPropsType } from './LoginContainer'\r\nimport { Formik } from \"formik\"\r\nimport LoginForm from './LoginForm'\r\nimport { Button, message } from 'antd'\r\nimport { Link } from 'react-router-dom'\r\nimport { credsType } from '../../redux/authReducer'\r\n\r\n\r\nexport type OwnLoginPropsType = {}\r\n\r\nconst Login: React.FC<LoginPropsType> = (props) => {\r\n    useEffect(() => {\r\n        if (props.authError) {\r\n            message.error(props.authError)\r\n        }\r\n    }, [props.authError])\r\n\r\n    type FormPropsType = {\r\n        email: string,\r\n        password: string,\r\n        remember: boolean\r\n    }\r\n\r\n    const initialValues: FormPropsType = {\r\n        email: '',\r\n        password: '',\r\n        remember: false\r\n    }\r\n\r\n    const handleSubmit = (formProps: FormPropsType) => {\r\n        props.login(formProps as credsType)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h1 className=\"mb-5 mx-auto\">Login Form</h1>\r\n            <Formik\r\n                initialValues={initialValues}\r\n                onSubmit={handleSubmit}\r\n            >\r\n                {LoginForm}\r\n            </Formik>\r\n            <div className=\"mt-3\">\r\n                <Link to={props.location +\"register\"}><Button type=\"link\" block>Register</Button></Link>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Login","import {connect} from 'react-redux'\r\nimport Login, { OwnLoginPropsType } from './Login'\r\nimport { AppStateType } from '../../redux/store'\r\nimport {credsType, login} from './../../redux/authReducer'\r\n\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    login: (data: credsType)=>void\r\n}\r\n\r\nexport type LoginPropsType = MapPropsType & MapDispatchPropsType & OwnLoginPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        auth: state.auth,\r\n        location: state.app.location,\r\n        authError: state.auth.authError\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnLoginPropsType, AppStateType>(mapStateToProps, \r\n    {login}) \r\n    (Login)\r\n    \r\n\r\n","import React from 'react'\r\nimport { OrdersPropsType } from './OrdersContainer'\r\n\r\nexport type OwnOrdersPropsType = {}\r\nconst Orders: React.FC<OrdersPropsType> = (props) => {\r\n    return(\r\n        <div>Orders</div>\r\n    )\r\n}\r\n\r\nexport default Orders","import {connect} from 'react-redux'\r\nimport Orders, { OwnOrdersPropsType } from './Orders'\r\nimport { AppStateType } from '../../redux/store'\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {}\r\n\r\nexport type OrdersPropsType = MapPropsType & MapDispatchPropsType & OwnOrdersPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        appLocation: state.app.location\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnOrdersPropsType, AppStateType>(mapStateToProps, \r\n    {}) \r\n    (Orders)\r\n    \r\n\r\n","import { Field } from 'formik'\r\nimport React, {useState, useEffect} from 'react'\r\nimport { AntdOptionsType } from '../../../../../Types/types'\r\nimport { AntSelect } from '../../../../../utils/Formik/CreateAntField'\r\nimport {BackendFormPropsType} from './BackendFormContainer'\r\n\r\nexport type OwnBackendFormPropsType = {\r\n    isBackendNew: boolean,\r\n    onSelectBackEndType: (val: any) => void,\r\n    submitCount: (val: any)=>void\r\n}\r\n\r\nconst BackendForm: React.FC<BackendFormPropsType> = (props) => {\r\n    useEffect( ()=> {\r\n        if (!props.isBackendNew && !props.isProjectListLoaded) {\r\n            props.getProjectList()\r\n        }\r\n    }, [props, props.isBackendNew, props.isProjectListLoaded])\r\n\r\n    useEffect( ()=> {\r\n        if(props.projectList && props.projectList.length>0) {\r\n            setOldProjectsData(props.projectList.map(item => {\r\n                return(\r\n                    {name: item.name, value: item.name}\r\n                )\r\n            }))\r\n        }\r\n    }, [props.projectList])\r\n\r\n    // const [isBackendNew, setIsBackendNew] = useState(props.isBackendNew)\r\n    const [oldProjectsData, setOldProjectsData] = useState<Array<AntdOptionsType>>([])\r\n\r\n    // const submitBackendIsNew = (val: any) => {\r\n    //     setIsBackendNew(val.target.checked)\r\n    // }\r\n\r\n    const backendTypeOptions = [\r\n        {\r\n            name: 'Laravel',\r\n            value: 'laravel'\r\n        },\r\n        {\r\n            name: 'Other',\r\n            value: 'other'\r\n        },\r\n    ]\r\n\r\n    // console.log(props)\r\n\r\n    if (props.isBackendNew) {\r\n        return(\r\n            <Field\r\n                component={AntSelect}\r\n                selectOptions={backendTypeOptions}\r\n                name=\"backendType\"\r\n                type=\"select\"\r\n                label=\"Backend type\"\r\n                onSelect = {props.onSelectBackEndType}\r\n                submitCount={props.submitCount}\r\n            />\r\n        )\r\n    } else {\r\n        return(\r\n            <>\r\n            get old projects\r\n            <Field\r\n                component={AntSelect}\r\n                selectOptions={oldProjectsData}\r\n                name=\"backend_project\"\r\n                type=\"select\"\r\n                label=\"Choise backend project\"\r\n                onSelect = {props.onSelectBackEndType}\r\n                submitCount={props.submitCount}\r\n            />\r\n            </>\r\n        )\r\n    }\r\n    \r\n}\r\n\r\nexport default BackendForm","import {connect} from 'react-redux'\r\nimport BackendForm, { OwnBackendFormPropsType } from './BackendForm'\r\nimport { AppStateType } from './../../../../../redux/store'\r\nimport {getProjectList} from './../../../../../redux/projectReducer'\r\n// import {getTaskList, createNewTaskList, deleteTaskList, updateTaskList} from './../../redux/TaskListReducer'\r\n// import { NewTaskListType } from '../../Types/types'\r\n\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    getProjectList: ()=>void,\r\n    // createNewTaskList: (values: NewTaskListType)=>void,\r\n    // deleteTaskList: (taskId: number)=>void,\r\n    // updateTaskList: (values: NewTaskListType, taskId: number)=> void,\r\n}\r\n\r\nexport type BackendFormPropsType = MapPropsType & MapDispatchPropsType & OwnBackendFormPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        projectList: state.projects.projectList,\r\n        isProjectListLoaded: state.projects.isProjectLoaded\r\n        // userId: state.auth.user?.id,\r\n        // isTaskListLoaded: state.taskList.isTaskListLoaded,\r\n        // selectedTasks: state.taskList.selectedTasks\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnBackendFormPropsType, AppStateType>(mapStateToProps, \r\n    {getProjectList}) \r\n    (BackendForm)\r\n    \r\n\r\n","import { Tooltip } from 'antd'\r\nimport { Field } from 'formik'\r\nimport React, { useState } from 'react'\r\nimport { AntCheckbox, AntInput } from '../../../../../utils/Formik/CreateAntField'\r\nimport { validateRequired } from '../../../../../utils/Formik/ValidateFields'\r\nimport BackendForm from '../BackendForm/BackendFormContainer'\r\n\r\ntype NewProjectFormPropsType = {\r\n    submitCount: (val: any)=>void\r\n}\r\n\r\nconst NewProjectForm: React.FC<NewProjectFormPropsType> = (props) => {\r\n    const [frontend, setFrontend] = useState(false)\r\n    const [backend, setBackend] = useState(false)\r\n    const [isBackendNew, setIsBackendNew] = useState(false)\r\n\r\n    const submitFrontEnd = (val: any) => {\r\n        setFrontend(val.target.checked)\r\n    }\r\n\r\n    const submitBackEnd = (val: any) => {\r\n        setBackend(val.target.checked)\r\n    }\r\n\r\n    const onSelectBackEndType = (val:any) => {\r\n\r\n    }\r\n\r\n    const submitBackendIsNew = (val: any) => {\r\n        setIsBackendNew(val.target.checked)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Field\r\n                component={AntInput}\r\n                name=\"name\"\r\n                type=\"text\"\r\n                label=\"Project Name\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n            <Field\r\n                component={AntCheckbox}\r\n                name=\"isHasBackEnd\"\r\n                type=\"checkbox\"\r\n                label=\"BackEnd\"\r\n                submitCount={props.submitCount}\r\n                onClick={submitBackEnd}\r\n                // onSelect={submitBackEnd}\r\n            />\r\n\r\n\r\n\r\n\r\n            {backend ? \r\n            <>\r\n                <h5>backend initial options:</h5><br />\r\n\r\n                <Field\r\n                    component={AntCheckbox}\r\n                    type=\"checkbox\"\r\n                    name=\"isBackendNew\"\r\n                    label=\"New Backend\"\r\n                    submitCount={props.submitCount}\r\n                    onClick={submitBackendIsNew}\r\n                />\r\n\r\n                <BackendForm \r\n                    isBackendNew={isBackendNew} \r\n                    onSelectBackEndType={onSelectBackEndType} \r\n                    submitCount={props.submitCount}\r\n                    />\r\n\r\n                {/* {isBackendNew ?\r\n                    <Field\r\n                        component={AntSelect}\r\n                        selectOptions={backendTypeOptions}\r\n                        name=\"backendType\"\r\n                        type=\"select\"\r\n                        label=\"Backend type\"\r\n                        onSelect = {onSelectBackEndType}\r\n                        submitCount={props.submitCount}\r\n                    />\r\n                :\r\n                    <Field\r\n                        component={AntSelect}\r\n                        selectOptions={backendTypeOptions}\r\n                        name=\"backend_project\"\r\n                        type=\"select\"\r\n                        label=\"Choise backend project\"\r\n                        onSelect = {onSelectBackEndType}\r\n                        submitCount={props.submitCount}\r\n                    />\r\n                } */}\r\n\r\n                \r\n                </>\r\n            :null}\r\n\r\n\r\n\r\n\r\n\r\n            <Field\r\n                component={AntCheckbox}\r\n                name=\"isHasFrontEnd\"\r\n                type=\"checkbox\"\r\n                label=\"FrontEnd\"\r\n                submitCount={props.submitCount}\r\n                onClick={submitFrontEnd}\r\n                onSelect={submitFrontEnd}\r\n            />\r\n            {frontend ? <>\r\n                <h5>Frontend initial options:</h5><br />\r\n                <Field\r\n                    component={AntCheckbox}\r\n                    name=\"isCRA\"\r\n                    label=\"Create React App\"\r\n                    submitCount={props.submitCount}\r\n                />\r\n                <Field\r\n                    component={AntCheckbox}\r\n                    name=\"isTS\"\r\n                    label=\"Type Script\"\r\n                    submitCount={props.submitCount}\r\n                />\r\n                <Field\r\n                    component={AntCheckbox}\r\n                    name=\"isMenu\"\r\n                    label=\"Menu\"\r\n                    submitCount={props.submitCount}\r\n                />\r\n                <Field\r\n                    component={AntCheckbox}\r\n                    name=\"isRouter\"\r\n                    label=\"Router\"\r\n                    submitCount={props.submitCount}\r\n                />\r\n                <Field\r\n                    component={AntCheckbox}\r\n                    name=\"isLogin\"\r\n                    label=\"Login/ Register\"\r\n                    submitCount={props.submitCount}\r\n                />\r\n                <Field\r\n                    component={AntCheckbox}\r\n                    name=\"isBAM\"\r\n                    label={\r\n                        <Tooltip title={<><p>Использование методологии БЭМ дваомтвщкмтущмшсвкумзкумз куцмзкцмозущкмзщк\r\n                            зщсоуцшр сщрумщкуцмрщкму цршуцщмшрцщкушмщмкшцщш шомзущцкомзкумо зщумозщ3уом</p><p>Второй абзац</p></>}>\r\n                            <span>БЭМ</span>\r\n                        </Tooltip>\r\n                }\r\n                    submitCount={props.submitCount}\r\n                />\r\n\r\n            </> : null}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default NewProjectForm","import { Field } from 'formik'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { AntdOptionsType } from '../../../../../Types/types'\r\nimport { AntSelect } from '../../../../../utils/Formik/CreateAntField'\r\nimport {OldProjectFormPropsType} from './OldProjectFormContainer'\r\n\r\nexport type OwnOldProjectFormPropsType = {\r\n    submitCount: (val:any)=>void\r\n}\r\nconst OldProjectForm: React.FC<OldProjectFormPropsType> = (props) => {\r\n    useEffect( ()=> {\r\n        if (!props.isProjectListLoaded) {\r\n            props.getProjectList()\r\n        }\r\n    }, [props.isProjectListLoaded, props])\r\n\r\n    useEffect( ()=> {\r\n        if(props.projectList && props.projectList.length>0) {\r\n            setOldProjectsData(props.projectList.map( (item: any)=> {\r\n                return(\r\n                    {name: item.name, value: item.id.toString()}\r\n                )\r\n            }))\r\n        }\r\n    }, [props.projectList])\r\n\r\n    const [oldProjectsData, setOldProjectsData] = useState<Array<AntdOptionsType>>([])\r\n\r\n    const onProjectSelect = (val: number) => {\r\n        console.log('project id: ',val)\r\n        console.log( props.projectList.filter(item=> item.id === Number(val))[0] )\r\n    }\r\n    \r\n    return(\r\n        <Field\r\n            component={AntSelect}\r\n            selectOptions={oldProjectsData}\r\n            name=\"project_name\"\r\n            type=\"select\"\r\n            label=\"Choise backend project\"\r\n            onSelect = {onProjectSelect}\r\n            submitCount={props.submitCount}\r\n        />\r\n    )\r\n}\r\n\r\nexport default OldProjectForm","import {connect} from 'react-redux'\r\nimport OldProjectForm, { OwnOldProjectFormPropsType } from './OldProjectForm'\r\nimport { AppStateType } from './../../../../../redux/store'\r\nimport {getProjectList} from './../../../../../redux/projectReducer'\r\n// import {getTaskList, createNewTaskList, deleteTaskList, updateTaskList} from './../../redux/TaskListReducer'\r\n// import { NewTaskListType } from '../../Types/types'\r\n\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    getProjectList: ()=>void,\r\n    // createNewTaskList: (values: NewTaskListType)=>void,\r\n    // deleteTaskList: (taskId: number)=>void,\r\n    // updateTaskList: (values: NewTaskListType, taskId: number)=> void,\r\n}\r\n\r\nexport type OldProjectFormPropsType = MapPropsType & MapDispatchPropsType & OwnOldProjectFormPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        projectList: state.projects.projectList,\r\n        isProjectListLoaded: state.projects.isProjectLoaded\r\n        // userId: state.auth.user?.id,\r\n        // isTaskListLoaded: state.taskList.isTaskListLoaded,\r\n        // selectedTasks: state.taskList.selectedTasks\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnOldProjectFormPropsType, AppStateType>(mapStateToProps, \r\n    {getProjectList}) \r\n    (OldProjectForm)\r\n    \r\n\r\n","import React, {useState} from 'react'\r\nimport { Field } from 'formik'\r\nimport { AntSelect } from '../../../../utils/Formik/CreateAntField'\r\nimport { validateRequired } from '../../../../utils/Formik/ValidateFields'\r\nimport NewProjectForm from './NewProject/NewProjectForm'\r\nimport OldProjectForm from './OldProject/OldProjectFormContainer'\r\n\r\nconst ProjectForm: React.FC<any> = (props) => {\r\n    const [isNewType, setIsNewType] = useState<number>(0)\r\n    const isNewTypeOptions = [\r\n        {\r\n            name: 'Old',\r\n            value: 1\r\n        },\r\n        {\r\n            name: 'New',\r\n            value: 2\r\n        },\r\n        {\r\n            name: 'Load From SRC',\r\n            value: 3\r\n        },\r\n    ]\r\n\r\n    const onSelect = (val: string) => {\r\n        console.log('onSelect')\r\n        setIsNewType( Number(val) )\r\n    }\r\n\r\n    return(\r\n        <>\r\n            <Field\r\n                component={AntSelect}\r\n                selectOptions={isNewTypeOptions}\r\n                name=\"isNewType\"\r\n                type=\"select\"\r\n                label=\"Вид проекта\"\r\n                submitCount={props.submitCount}\r\n                validate={validateRequired}\r\n                onSelect = {onSelect}\r\n                // onOk={ (val:any)=>{\r\n                //     // console.log('111', val)\r\n                // }}\r\n            />\r\n            {isNewType === 1 ? <OldProjectForm submitCount={props.submitCount}/> : null}\r\n            {isNewType === 2 ? <NewProjectForm {...props}/> : null}\r\n            {isNewType === 3 ? <div>load</div> : null}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ProjectForm","import { Form, Field, FormikProps } from 'formik'\r\nimport React, { ReactNode, useState, useEffect } from 'react'\r\nimport { AntInput, AntSelect, AntTextArea, AntTimePicker } from '../../../utils/Formik/CreateAntField'\r\nimport { validateRequired } from '../../../utils/Formik/ValidateFields'\r\nimport ProjectForm from './Project/ProjectForm'\r\n\r\n\r\nconst NewTaskTreeForm: ((props: FormikProps<{}>) => ReactNode) = (props) => {\r\n    const values: any = props.values\r\n    const selectOptions = values.selectOptions\r\n    const taskTypes = values.taskTypes \r\n\r\n    const [taskType, setTaskType] = useState(values.taskType)\r\n\r\n    useEffect(() => {\r\n        const values: any = props.values\r\n        const taskTypes = values.task_type\r\n        if (Array.isArray(taskTypes)) {\r\n            setTaskType(taskTypes[0])\r\n        } else {\r\n            setTaskType(taskTypes)\r\n        }\r\n        \r\n    }, [props.values])\r\n\r\n    const onSelectTaskType = (val: string) => {}\r\n    \r\n    return (\r\n        <Form\r\n            className=\"form-container\"\r\n            onSubmit={props.handleSubmit}\r\n        >\r\n            {taskType !== 3 ?\r\n            <Field\r\n                component={AntInput}\r\n                name=\"name\"\r\n                type=\"text\"\r\n                label=\"Name\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n            :\r\n            null}\r\n\r\n            <Field\r\n                component={AntSelect}\r\n                selectOptions={selectOptions}\r\n                name=\"parent_id\"\r\n                type=\"select\"\r\n                label=\"Parent\"\r\n                submitCount={props.submitCount}\r\n            />\r\n\r\n            <Field\r\n                component={AntTextArea}\r\n                name=\"descriptions\"\r\n                type=\"textarea\"\r\n                label=\"Descriptions\"\r\n                submitCount={props.submitCount}\r\n            />\r\n\r\n            {taskType !== 3 ?\r\n                <Field\r\n                    component={AntTimePicker}\r\n                    name=\"time_to_complete\"\r\n                    type=\"time\"\r\n                    label=\"Time to complete\"\r\n                    submitCount={props.submitCount}\r\n                />\r\n                :\r\n                null\r\n            }\r\n\r\n\r\n            <Field\r\n                component={AntSelect}\r\n                selectOptions={taskTypes}\r\n                name=\"task_type\"\r\n                type=\"select\"\r\n                label=\"task Types\"\r\n                onSelect = {onSelectTaskType}\r\n                submitCount={props.submitCount}\r\n            />\r\n\r\n\r\n            {taskType === 2 ?\r\n                <>\r\n                    <Field\r\n                        component={AntInput}\r\n                        name=\"phone_number\"\r\n                        type=\"text\"\r\n                        label=\"Номер телефона\"\r\n                        validate={validateRequired}\r\n                        submitCount={props.submitCount}\r\n                        hasFeedback\r\n                    />\r\n                    <Field\r\n                        component={AntInput}\r\n                        name=\"lead_name\"\r\n                        type=\"text\"\r\n                        label=\"Имя абонента\"\r\n                        validate={validateRequired}\r\n                        submitCount={props.submitCount}\r\n                        hasFeedback\r\n                    />\r\n                </>\r\n                :\r\n                null\r\n            }\r\n            {\r\n                taskType === 3 ?\r\n                    <ProjectForm />\r\n                    :\r\n                    null\r\n            }\r\n\r\n            <div className=\"submit-container\">\r\n                <button className=\"ant-btn ant-btn-primary\" type=\"submit\">\r\n                    Save\r\n                </button>\r\n            </div>\r\n\r\n        </Form>\r\n    )\r\n}\r\nexport default NewTaskTreeForm","import React from 'react'\r\nimport { Button, Checkbox, Collapse, List } from 'antd'\r\nimport { PlusCircleOutlined, DeleteOutlined, EditOutlined, CaretRightOutlined } from '@ant-design/icons'\r\nimport { TaskListType } from '../../Types/types'\r\nimport { TaskTreeBrowserItemType } from './TaskTreeBrowserItemContainer'\r\nimport moment from \"moment\"\r\nimport { InitialDrewerDataType, InitialValuesType } from './TasksTreeBrowser'\r\n\r\nconst { Panel } = Collapse\r\n\r\nexport type OwnTaskTreeBrowserItemType = {\r\n    item: TaskListType,\r\n    showDrawer: () => void,\r\n    setDrawerData: React.Dispatch<React.SetStateAction<InitialDrewerDataType>>,\r\n    initialFormValues: InitialValuesType,\r\n    setInitialFormValues: React.Dispatch<React.SetStateAction<InitialValuesType>>,\r\n    initialValues: InitialValuesType,\r\n    onRunTask: (values: number) => void\r\n}\r\n\r\nconst TaskTreeBrowserItem: React.FC<TaskTreeBrowserItemType> = (props) => {\r\n\r\n    const onAddSubtask = (taskId: number) => {\r\n        console.log(taskId)\r\n        props.setInitialFormValues({ ...props.initialValues, parent_id: taskId })\r\n        props.setDrawerData({header: 'add subtask', taskId: false})\r\n        props.showDrawer()\r\n    }\r\n\r\n    const onEdit = (values: TaskListType) => {\r\n        console.log(values)\r\n        props.setDrawerData({\r\n            header: 'Edit: \"' + values.name + '\"',\r\n            taskId: values.id\r\n        })\r\n        let day = moment().zone('GMT')\r\n        if (values.time_to_complete !== null) {\r\n            const splitTime = values.time_to_complete.split(/:/)\r\n            day.hours(parseInt(splitTime[0])).minutes(parseInt(splitTime[1])).seconds(0).milliseconds(0);\r\n        } else {\r\n            day.hours(0).minutes(0).seconds(0).milliseconds(0);\r\n        }\r\n        \r\n        let newFormValues: InitialValuesType = {\r\n            ...props.initialFormValues,\r\n            name: values.name,\r\n            time_to_complete: day,\r\n            descriptions: values.descriptions ? values.descriptions : undefined,\r\n            parent_id: values.parent_id ? values.parent_id : undefined,\r\n            task_type: Number(values.task_type)\r\n        }\r\n        if (values.data) {\r\n            newFormValues = {\r\n                ...newFormValues,\r\n                ...JSON.parse(values.data)\r\n            }\r\n        }\r\n        console.log(newFormValues)\r\n        props.setInitialFormValues(newFormValues)\r\n        props.showDrawer()\r\n    }\r\n\r\n    const onStatusChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        const values = { isCompleted: e.target.checked }\r\n        props.updateTaskList(values, Number.parseInt(e.target.id))\r\n    }\r\n\r\n    const deleteTask = (taskId: number) => {\r\n        props.deleteTaskList(taskId)\r\n    }\r\n\r\n    if (props.item.parent_id === null) {\r\n        return <CollapseItem\r\n            item={props.item}\r\n            taskList={props.taskList}\r\n            key={String(props.item.id)}\r\n            onAddSubtask={onAddSubtask}\r\n            onEdit={onEdit}\r\n            deleteTask={deleteTask}\r\n            onStatusChange={onStatusChange}\r\n            onRunTask={props.onRunTask}\r\n        />\r\n    } else {\r\n        return null\r\n    }\r\n}\r\n\r\nexport default TaskTreeBrowserItem\r\n\r\ntype ChildItemType = {\r\n    childsTasklList: Array<TaskListType>,\r\n    taskList: Array<TaskListType>,\r\n    onEdit: (task: TaskListType) => void,\r\n    deleteTask: (task: number) => void,\r\n    onAddSubtask: (taskId: number) => void,\r\n    onStatusChange: (e: React.ChangeEvent<HTMLInputElement>) => void,\r\n    onRunTask: (values: number) => void\r\n}\r\n\r\nconst ChildItem: React.FC<ChildItemType> = (props) => {\r\n    return (\r\n        <List\r\n            size=\"small\"\r\n            bordered\r\n            dataSource={props.childsTasklList}\r\n            renderItem={item => {\r\n                return (<CollapseItem\r\n                    item={item}\r\n                    taskList={props.taskList}\r\n                    key={item.id.toString()}\r\n                    onAddSubtask={props.onAddSubtask}\r\n                    onEdit={props.onEdit}\r\n                    deleteTask={props.deleteTask}\r\n                    onStatusChange={props.onStatusChange}\r\n                    onRunTask={props.onRunTask}\r\n                />\r\n                )\r\n            }}\r\n        />\r\n    )\r\n}\r\n\r\ntype CollapseItemType = {\r\n    key: string\r\n    item: TaskListType,\r\n    taskList: Array<TaskListType>,\r\n    onEdit: (task: TaskListType) => void,\r\n    deleteTask: (task: number) => void,\r\n    onAddSubtask: (taskId: number) => void,\r\n    onStatusChange: (e: React.ChangeEvent<HTMLInputElement>) => void,\r\n    onRunTask: (values: number) => void\r\n}\r\nconst CollapseItem: React.FC<CollapseItemType> = (props) => {\r\n    const childsList = getChildsList(props.taskList, props.item)\r\n    const isLast = childsList.length === 0 ? true : false\r\n    \r\n\r\n    let totalTime = moment().hours(0).minutes(0).seconds(0)\r\n\r\n    console.groupCollapsed(props.item.name)\r\n    console.log('empty totalTime.format: ', totalTime.format('HH:mm'))\r\n    for (let index = 0; index < childsList.length; index++) {\r\n        const element = childsList[index];\r\n\r\n        const elementChildList = getChildsList(props.taskList, element)\r\n        const isElementLast = elementChildList.length > 0 ? false : true\r\n\r\n        let timeParts: Array<string> = []\r\n        if (isElementLast) {\r\n            if (element.time_to_complete !== null && !element.isCompleted ) {\r\n                timeParts = element.time_to_complete.split(':')\r\n                console.log(timeParts)\r\n                console.log(totalTime.format('HH:mm'))\r\n                totalTime.add({\r\n                    days: 0,\r\n                    hours: parseInt(timeParts[0]),\r\n                    minutes: parseInt(timeParts[1]),\r\n                    seconds: parseInt(timeParts[2]),\r\n                })\r\n                console.log(totalTime.format('HH:mm'))\r\n                // console.log(element.name, ': ',element.time_to_complete, totalTime.format('HH:mm') )\r\n            }\r\n        } else {\r\n            console.log('not last: ', element.name)\r\n        }\r\n    }\r\n    console.log(props.item.name, ': ',totalTime.format('HH:mm') )\r\n    console.groupEnd()\r\n\r\n    if (!isLast) {\r\n        return (\r\n            <List.Item className=\"p-0\" draggable key={props.item.id}>\r\n                <Collapse key={String(props.item.id)} className=\"w-100\" defaultActiveKey={[]} collapsible=\"header\" ghost>\r\n                    <Panel\r\n                        header={\r\n                            // <span key={String(props.item.id)} className=\"float-left pl-2\" >{props.item.name}</span>\r\n                            <div key={String(props.item.id)}>\r\n                                <div>\r\n                                    <span  className=\"float-left pl-2\" >{props.item.name}</span>\r\n                                </div>\r\n                                <div className=\"float-right pl-2\">({totalTime.format('HH:mm')})</div>\r\n                            </div>\r\n                        }\r\n                        key={props.item.id + 'Panel'}\r\n                        extra={<ButtonsBlock {...props} />}\r\n                    >\r\n                        <ChildItem\r\n                            childsTasklList={getChildsList(props.taskList, props.item)}\r\n                            taskList={props.taskList}\r\n                            onEdit={props.onEdit}\r\n                            deleteTask={props.deleteTask}\r\n                            onAddSubtask={props.onAddSubtask}\r\n                            onStatusChange={props.onStatusChange}\r\n                            onRunTask={props.onRunTask}\r\n                        />\r\n                    </Panel>\r\n                </Collapse>\r\n            </List.Item>\r\n        )\r\n    } else {\r\n        return (<LastItem\r\n            item={props.item}\r\n            onEdit={props.onEdit}\r\n            deleteTask={props.deleteTask}\r\n            onAddSubtask={props.onAddSubtask}\r\n            onStatusChange={props.onStatusChange}\r\n            onRunTask={props.onRunTask}\r\n        />)\r\n    }\r\n\r\n}\r\n\r\ntype LastItemType = {\r\n    item: TaskListType,\r\n    onEdit: (task: TaskListType) => void,\r\n    deleteTask: (task: number) => void,\r\n    onAddSubtask: (taskId: number) => void,\r\n    onStatusChange: (e: React.ChangeEvent<any>) => void,\r\n    onRunTask: (values: number) => void\r\n}\r\n\r\nconst LastItem: React.FC<LastItemType> = (props) => {\r\n\r\n    return (\r\n        <List.Item className=\"py-0\" draggable key={String(props.item.id)}>\r\n            <>\r\n                <div className=\"py-2 pl-3\"><Checkbox checked={props.item.isCompleted} id={props.item.id.toString()} onClick={props.onStatusChange} /></div>\r\n                <div className=\"w-100 float-left\" key={String(props.item.id)}>\r\n                    <div className=\"ml-3 float-left\">\r\n\r\n                        {\r\n                            props.item.isCompleted ?\r\n                                <span className=\"text-black-50\">{props.item.name}</span>\r\n                                :\r\n                                <span data-toggle=\"collapse\" aria-controls={props.item.id + 'collapseExample'} >{props.item.name}</span >\r\n                        }\r\n\r\n                    </div>\r\n                    <div className=\"ml-3 float-right\">\r\n                        {props.item.time_to_complete}\r\n                    </div>\r\n                </div>\r\n                <div className=\"pr-3\">\r\n                    <ButtonsBlock {...props} />\r\n                </div>\r\n            </>\r\n        </List.Item>\r\n    )\r\n}\r\n\r\ntype ButtonsBlockType = {\r\n    item: TaskListType,\r\n    onEdit: (task: TaskListType) => void,\r\n    deleteTask: (task: number) => void,\r\n    onAddSubtask: (parentId: number) => void,\r\n    onRunTask: (values: number) => void\r\n}\r\n\r\nconst ButtonsBlock: React.FC<ButtonsBlockType> = (props) => {\r\n    return (\r\n        <div className=\"d-flex flex-row\">\r\n            {Number(props.item.task_type) > 1 ?\r\n                <Button className=\"\"\r\n                    type=\"primary\"\r\n                    shape=\"circle\"\r\n                    size=\"small\"\r\n                    style={{ marginLeft: 10 }}\r\n                    onClick={() => { props.onRunTask(props.item.id) }}\r\n                    icon={\r\n                        <div className=\"d-flex flex-wrap align-content-start\">\r\n                            <CaretRightOutlined className=\"ml-1\" style={{ fontSize: '14px' }} />\r\n                        </div>\r\n                    }\r\n                />\r\n                :\r\n                null\r\n            }\r\n            <Button className=\"\"\r\n                type=\"primary\"\r\n                shape=\"circle\"\r\n                size=\"small\"\r\n                style={{ marginLeft: 10 }}\r\n                onClick={() => { props.onAddSubtask(props.item.id) }}\r\n                icon={\r\n                    <div className=\"d-flex flex-wrap align-content-start\">\r\n                        <PlusCircleOutlined className=\"ml-1\" style={{ fontSize: '14px' }} />\r\n                    </div>\r\n                }\r\n            />\r\n            <Button className=\"\"\r\n                type=\"primary\"\r\n                shape=\"circle\"\r\n                size=\"small\"\r\n                style={{ marginLeft: 10 }}\r\n                onClick={() => { props.onEdit(props.item) }}\r\n                icon={\r\n                    <div className=\"d-flex flex-wrap align-content-start\">\r\n                        <EditOutlined className=\"ml-1\" style={{ fontSize: '14px' }} />\r\n                    </div>\r\n                }\r\n            />\r\n            <Button className=\"\"\r\n                type=\"primary\"\r\n                danger\r\n                shape=\"circle\"\r\n                size=\"small\"\r\n                style={{ marginLeft: 10 }}\r\n                onClick={() => { props.deleteTask(props.item.id) }}\r\n                icon={\r\n                    <div className=\"d-flex flex-wrap align-content-start\">\r\n                        <DeleteOutlined className=\"ml-1\" style={{ fontSize: '14px' }} />\r\n                    </div>\r\n                }\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nconst getChildsList = (taskList: Array<TaskListType>, item: TaskListType):Array<TaskListType> => {\r\n    let childs: Array<TaskListType> = []\r\n    for (let index = 0; index < taskList.length; index++) {\r\n        const elem = taskList[index]\r\n        if (elem.parent_id === item.id) {\r\n            childs.push(elem)\r\n        }\r\n    }\r\n    return childs\r\n}\r\n\r\nconst getTotalTime = (totalTime: moment.Moment, target: TaskListType, taskArray: Array<TaskListType>) => {\r\n    const childsList = getChildsList(taskArray, target)\r\n\r\n    for (let index = 0; index < childsList.length; index++) {\r\n        const element = childsList[index]\r\n\r\n        const elementChildList = getChildsList(taskArray, element)\r\n        const isElementLast = elementChildList.length > 0 ? false : true\r\n\r\n        let timeParts: Array<string> = []\r\n        if (isElementLast) {\r\n            if (element.time_to_complete !== null && !element.isCompleted ) {\r\n                timeParts = element.time_to_complete.split(':')\r\n                console.log(timeParts)\r\n                console.log(totalTime.format('HH:mm'))\r\n                totalTime.add({\r\n                    days: 0,\r\n                    hours: parseInt(timeParts[0]),\r\n                    minutes: parseInt(timeParts[1]),\r\n                    seconds: parseInt(timeParts[2]),\r\n                })\r\n                console.log(totalTime.format('HH:mm'))\r\n                // console.log(element.name, ': ',element.time_to_complete, totalTime.format('HH:mm') )\r\n            }\r\n        } else {\r\n            console.log('not last: ', element.name)\r\n        }\r\n    }\r\n}","import {connect} from 'react-redux'\r\nimport TaskTreeBrowserItem, { OwnTaskTreeBrowserItemType } from './TaskTreeBrowserItem'\r\nimport { AppStateType } from '../../redux/store'\r\nimport {getTaskList, createNewTaskList, deleteTaskList, updateTaskList} from './../../redux/TaskListReducer'\r\nimport { NewTaskListType } from '../../Types/types'\r\n\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    getTaskList: ()=>void,\r\n    createNewTaskList: (values: NewTaskListType)=>void,\r\n    deleteTaskList: (taskId: number)=>void,\r\n    updateTaskList: (values: NewTaskListType, taskId: number)=> void,\r\n}\r\n\r\nexport type TaskTreeBrowserItemType = MapPropsType & MapDispatchPropsType & OwnTaskTreeBrowserItemType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        taskList: state.taskList.taskList,\r\n        userId: state.auth.user?.id,\r\n        isTaskListLoaded: state.taskList.isTaskListLoaded,\r\n        selectedTasks: state.taskList.selectedTasks\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnTaskTreeBrowserItemType, AppStateType>(mapStateToProps, \r\n    {getTaskList, createNewTaskList, deleteTaskList, updateTaskList}) \r\n    (TaskTreeBrowserItem)\r\n    \r\n\r\n","import { Form, Field, FormikProps } from 'formik'\r\nimport React, { ReactNode } from 'react'\r\nimport { AntDatePicker, AntTimePicker } from '../../../utils/Formik/CreateAntField'\r\nimport { validateRequired } from '../../../utils/Formik/ValidateFields'\r\n\r\nconst RunTaskFormCall: ((props: FormikProps<{}>) => ReactNode) = (props) => {\r\n    return (\r\n        <Form\r\n            className=\"form-container\"\r\n            onSubmit={props.handleSubmit}\r\n        >\r\n            <Field\r\n                component={AntDatePicker}\r\n                name=\"date\"\r\n                type=\"date\"\r\n                label=\"Select Date\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n            />\r\n\r\n            <Field\r\n                component={AntTimePicker}\r\n                name=\"time\"\r\n                type=\"time\"\r\n                label=\"Select time\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n            />\r\n            <button type=\"button\" className=\"ant-btn ant-btn-primary ml-2\">Add now</button>\r\n            <button type=\"button\" className=\"ant-btn ant-btn-primary ml-2\">Auto add by context</button>\r\n\r\n            <div className=\"submit-container\">\r\n                <button className=\"ant-btn ant-btn-primary\" type=\"submit\">\r\n                    Save\r\n                </button>\r\n            </div>\r\n\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default RunTaskFormCall","export type FormPropsDataType = {\r\n    task_type: number\r\n    lead_name?: string,\r\n    phone_number?: string\r\n}\r\nexport const checkActionsType = (formPropsData: FormPropsDataType):any => {\r\n    console.log(Number(formPropsData.task_type))\r\n    switch ( Number(formPropsData.task_type) ) {\r\n        case 2:\r\n            return {\r\n                lead_name: formPropsData.lead_name,\r\n                phone_number: formPropsData.phone_number\r\n            }\r\n    \r\n        default:\r\n            return null\r\n    }\r\n}","import { Button, Card, Drawer, List, Modal } from 'antd'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { TasksTreePropsType, taskTreeTypes } from './TasksTreeContainer'\r\nimport { FileAddOutlined, SettingOutlined } from '@ant-design/icons'\r\nimport NewTaskTreeForm from './TaskTreeForm/NewTaskTreeForm'\r\nimport { Formik  } from 'formik'\r\nimport moment from \"moment\"\r\nimport TaskTreeBrowserItem from './TaskTreeBrowserItemContainer'\r\nimport RunTaskFormCall from './RunTask.tsx/RunTaskForm'\r\nimport { NewTaskListType, TaskListType, NewTaskDataType } from '../../Types/types'\r\nimport { checkActionsType } from './TaskListActions/TaskListActions'\r\n\r\nexport type InitialDrewerDataType = {\r\n    header: string,\r\n    taskId: false | number\r\n}\r\n\r\nconst initialDrewerData: InitialDrewerDataType = {\r\n    header: 'Create New Task',\r\n    taskId: false\r\n} \r\n\r\ntype SelectOptionType = {\r\n    name: string,\r\n    value: number\r\n}\r\n\r\nexport type InitialValuesType = {\r\n    selectOptions: Array<SelectOptionType> | null,\r\n    taskTypes: typeof taskTreeTypes,\r\n    task_type: number,\r\n    name: string\r\n    time_to_complete?: moment.Moment,\r\n    descriptions?: string,\r\n    parent_id?: number,\r\n    data?: string\r\n}\r\n\r\nconst getInitialValues = ( taskList: Array<TaskListType> ):InitialValuesType => {\r\n    return (\r\n        {\r\n            selectOptions: getSelectOptions(taskList),\r\n            taskTypes: taskTreeTypes,\r\n            task_type: 1,\r\n            name: '',\r\n        }\r\n    )\r\n}\r\n\r\nconst getSelectOptions = (taskList: Array<TaskListType>):Array<SelectOptionType>  => {\r\n    if (taskList !== undefined && taskList.length > 0) {\r\n        return taskList.map((item: TaskListType) => {\r\n            return ({\r\n                name: item.name,\r\n                value: item.id\r\n            })\r\n        })\r\n    } else {\r\n        return []\r\n    }\r\n}\r\n\r\nconst TasksTreeBrowser: React.FC<TasksTreePropsType> = (props) => {\r\n\r\n    useEffect(() => {\r\n        const getTaskList = () => props.getTaskList\r\n        if (props.taskList !== undefined && props.taskList.length === 0 && !props.isTaskListLoaded) {\r\n            getTaskList()()\r\n        }\r\n        else if (props.taskList === undefined) {\r\n            getTaskList()()\r\n        }\r\n        setVisible(false)\r\n        setInitialFormValues(getInitialValues(props.taskList))\r\n    }, [props.taskList, props.getTaskList, props.isTaskListLoaded])\r\n\r\n    const [visible, setVisible] = useState(false)\r\n    const [drawerData, setDrawerData] = useState(initialDrewerData)\r\n    const [initialFormValues, setInitialFormValues] = useState(getInitialValues(props.taskList))\r\n    const [runTaskVisible, setRunTaskVisible] = useState(false)\r\n    const [runData, setRunData] = useState<TaskListType | null>(null)\r\n\r\n    type RunTaskSubmitType = {\r\n        date: moment.Moment,\r\n        time: moment.Moment,\r\n        time_to_complete: moment.Moment,\r\n    }\r\n    const runTaskSubmit = (values: RunTaskSubmitType) => {\r\n        if (runData !== null && runData.data !== null && props.userId) {\r\n            const data = JSON.parse(runData.data)\r\n            const newToDo: NewTaskDataType = {\r\n                name: 'Call to '+data.lead_name,\r\n                description: data.phone_number,\r\n                date: values.date.format('YYYY-MM-DD'),\r\n                time: values.time.format('HH:mm:00'), \r\n                time_to_complete: values.time_to_complete.format('HH:mm:00'), \r\n                user_id: props.userId,\r\n                action: Number(runData.task_type),\r\n                action_data: {\r\n                    phone: data.phone_number,\r\n                    name: data.lead_name\r\n                }\r\n            }\r\n            console.log(newToDo)\r\n            props.createNewToDo(newToDo, true)\r\n        }\r\n    }\r\n    const runTaskOk = () => {\r\n        setRunTaskVisible(false)\r\n    }\r\n\r\n    const runTaskCancel = () => {\r\n        setRunTaskVisible(false)\r\n    }\r\n\r\n    const onRunTask = (values: number) => {\r\n        setRunTaskVisible(true)\r\n        setRunData(\r\n            props.taskList.filter( (item: TaskListType)=> {\r\n                    return (item.id === values)\r\n            })[0]\r\n        )\r\n    }\r\n    \r\n    const onClose = () => {\r\n        setInitialFormValues(getInitialValues(props.taskList))\r\n        setVisible(false)\r\n    }\r\n\r\n    const showDrawer = () => {\r\n        setVisible(true)\r\n    }\r\n\r\n    const onAdd = () => {\r\n        setDrawerData(initialDrewerData)\r\n        showDrawer()\r\n    }\r\n\r\n    const handleSubmit = (formProps: InitialValuesType) => {\r\n        const data = checkActionsType(formProps)\r\n        console.log(formProps)\r\n        let newTaskList: NewTaskListType = {\r\n            name: formProps.name,\r\n            task_type: formProps.task_type.toString(),\r\n            user_id: props.userId,\r\n            time_to_complete: formProps.time_to_complete ? formProps.time_to_complete.format('HH:mm:ss') : undefined,\r\n\r\n            descriptions: formProps.descriptions, \r\n            parent_id: formProps.parent_id ? formProps.parent_id : undefined,\r\n        }\r\n\r\n        if (data) {\r\n            newTaskList = {...newTaskList, data: data}\r\n        }\r\n\r\n        if (!drawerData.taskId) {\r\n            props.createNewTaskList(newTaskList)\r\n        } else {\r\n            props.updateTaskList(newTaskList, drawerData.taskId)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"site-card-border-less-wrapper\">\r\n                <Card\r\n                    title={\r\n                        <div className=\"inline\" >\r\n                            <div ><h2>Tasks Tree</h2></div>\r\n                        </div>\r\n                    }\r\n                    extra={\r\n                        <>\r\n                            <Button\r\n                                type=\"primary\"\r\n                                shape=\"round\"\r\n                                icon={\r\n                                    <div className=\"d-flex flex-wrap align-content-start\">\r\n                                        <FileAddOutlined style={{ fontSize: '18px' }} />\r\n                                        <span className=\"ml-1\" style={{ fontSize: '14px' }}>Add</span>\r\n                                    </div>}\r\n                                style={{ marginLeft: 10 }}\r\n                                onClick={onAdd}\r\n                            />\r\n\r\n                            <Button className=\"\"\r\n                                type=\"primary\"\r\n                                shape=\"round\"\r\n                                style={{ marginLeft: 10 }}\r\n                                icon={\r\n                                    <div className=\"d-flex flex-wrap align-content-start\">\r\n                                        <SettingOutlined style={{ fontSize: '18px' }} />\r\n                                        <span className=\"ml-1\" style={{ fontSize: '14px' }}>Settings</span>\r\n                                    </div>}\r\n                            />\r\n                        </>\r\n                    }\r\n                    bordered={false}\r\n                >\r\n                    <List\r\n                        size=\"small\"\r\n                        bordered\r\n                        dataSource={props.taskList}\r\n                        renderItem={item => {\r\n                            return (<TaskTreeBrowserItem\r\n                                item={item}\r\n                                showDrawer={showDrawer}\r\n                                setDrawerData={setDrawerData}\r\n                                initialFormValues={initialFormValues}\r\n                                setInitialFormValues={setInitialFormValues}\r\n                                initialValues={getInitialValues(props.taskList)}\r\n                                onRunTask={onRunTask}\r\n                            />)\r\n                        }}\r\n                    />\r\n\r\n                    <Drawer\r\n                        title={drawerData.header}\r\n                        placement=\"right\"\r\n                        closable={true}\r\n                        onClose={onClose}\r\n                        visible={visible}\r\n                        width=\"90%\"\r\n                    >\r\n\r\n                        <Formik\r\n                            initialValues={initialFormValues}\r\n                            onSubmit={handleSubmit}\r\n                            enableReinitialize={true}\r\n                        >\r\n                            {NewTaskTreeForm}\r\n                        </Formik>\r\n\r\n                    </Drawer>\r\n\r\n                    <Modal\r\n                        title=\"Run Task\"\r\n                        visible={runTaskVisible}\r\n                        onOk={runTaskOk}\r\n                        onCancel={runTaskCancel}\r\n                        okText=\"Ok\"\r\n                        cancelText=\"Cancel\"\r\n                    >\r\n                        <Formik\r\n                            initialValues={{\r\n                                date: moment(),\r\n                                time: moment(),\r\n                                time_to_complete: moment(), \r\n                                action: 2\r\n                            }}\r\n                            onSubmit={runTaskSubmit}\r\n                            enableReinitialize={true}\r\n                        >\r\n                            {RunTaskFormCall}\r\n                        </Formik>\r\n                    </Modal>\r\n\r\n                </Card>\r\n            </div>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default TasksTreeBrowser","import { SwipeAction, List } from 'antd-mobile'\r\nimport React from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { NewTaskListType, TaskListType } from '../../Types/types'\r\nimport { NewTimeByString } from '../../utils/Date/NewDeteByString'\r\nimport { actions } from '../../redux/TaskListReducer'\r\nimport { InitialDrewerDataType, InitialValuesType } from './TasksTreeMobile'\r\n\r\nconst Item = List.Item\r\n\r\n\r\nconst time_to_complete = NewTimeByString()\r\n\r\nexport type OwnTaskTreeItemsType = {\r\n    taskItem: TaskListType,\r\n    deleteTaskList: (taskId: number) => void,\r\n    showDrawer: () => void,\r\n    setDrawerData: (drawerData: InitialDrewerDataType) => void,\r\n    initialFormValues: InitialValuesType,\r\n    setInitialFormValues: (initialFormValues: InitialValuesType) => void\r\n    updateTaskList: (values: NewTaskListType, taskId: number) => void,\r\n    onRunTask: (values: number) => void\r\n}\r\nexport const TaskTreeItemMobile: React.FC<OwnTaskTreeItemsType> = (props) => {\r\n    const dispatch = useDispatch()\r\n\r\n    const onSubTask = () => {\r\n        props.setDrawerData({\r\n            header: 'SubTask for: \"' + props.taskItem.name + '\"',\r\n            taskId: false\r\n        })\r\n\r\n        props.setInitialFormValues({\r\n            ...props.initialFormValues,\r\n            name: '',\r\n            time_to_complete: time_to_complete,\r\n            descriptions: '',\r\n            parent_id: Number(props.taskItem.id),\r\n            // task_type: 0\r\n            task_type: [0]\r\n        })\r\n        props.showDrawer()\r\n    }\r\n\r\n    const onEdit = (task: TaskListType) => {\r\n        props.setDrawerData({\r\n            header: 'Edit: \"' + task.name + '\"',\r\n            taskId: task.id\r\n        })\r\n\r\n        const new_time_to_complete = NewTimeByString( task.time_to_complete )\r\n\r\n        let newFormValues = {\r\n            ...props.initialFormValues,\r\n            name: task.name,\r\n            time_to_complete: new_time_to_complete,\r\n            descriptions: task.descriptions ? task.descriptions : undefined,\r\n            parent_id: task.parent_id ? task.parent_id : undefined,\r\n            task_type:  [Number(task.task_type)]\r\n        }\r\n\r\n        if (task.data) {\r\n            newFormValues = {\r\n                ...newFormValues,\r\n                ...JSON.parse(task.data)\r\n            }\r\n        }\r\n\r\n        console.log(newFormValues)\r\n\r\n        props.setInitialFormValues(newFormValues)\r\n\r\n        // props.setInitialFormValues({\r\n        //     ...props.initialFormValues,\r\n        //     name: task.name,\r\n        //     time_to_complete: new_time_to_complete,\r\n        //     descriptions: task.descriptions ? task.descriptions : undefined,\r\n        //     parent_id: task.parent_id ? task.parent_id : undefined,\r\n        //     // task_type:  Number(task.task_type) \r\n        //     task_type:  [Number(task.task_type)]\r\n        // })\r\n\r\n        props.showDrawer()\r\n    }\r\n\r\n    const onItemOpen = () => {\r\n        dispatch(actions.setSelectedTasks(props.taskItem.id));\r\n        props.setDrawerData({\r\n            header: props.taskItem.name,\r\n            taskId: props.taskItem.id\r\n        })\r\n    }\r\n\r\n    const onComplet = () => {\r\n        const values = { isCompleted: !props.taskItem.isCompleted }\r\n        props.updateTaskList(values, props.taskItem.id)\r\n    }\r\n\r\n    return (\r\n        <SwipeAction\r\n            style={{ backgroundColor: 'gray' }}\r\n            autoClose\r\n            right={[\r\n                {\r\n                    text: 'SubTask',\r\n                    onPress: () => { onSubTask() },\r\n                    style: { backgroundColor: 'green', color: 'white' },\r\n                },\r\n                {\r\n                    text: 'Delete',\r\n                    onPress: () => props.deleteTaskList(props.taskItem.id),\r\n                    style: { backgroundColor: '#F4333C', color: 'white' },\r\n                },\r\n            ]}\r\n            left={[\r\n                {\r\n                    text: 'Edit',\r\n                    onPress: () => { onEdit(props.taskItem) },\r\n                    style: { backgroundColor: '#108ee9', color: 'white' },\r\n                },\r\n                {\r\n                    text: props.taskItem.isCompleted ? 'Not Done' : 'Done',\r\n                    onPress: () => onComplet(),\r\n                    style: { backgroundColor: 'green', color: 'white' },\r\n                },\r\n                {\r\n                    text: 'Run',\r\n                    onPress: () => props.onRunTask(props.taskItem.id),\r\n                    style: { backgroundColor: '#F4333C', color: 'white' },\r\n                }\r\n            ]}\r\n        >\r\n            <Item\r\n                onClick={onItemOpen}\r\n                key={props.taskItem.id}\r\n                wrap\r\n            >\r\n                <div className=\"w-100 row \" key={props.taskItem.id}>\r\n                    <div className=\"col-10\">\r\n                        {props.taskItem.isCompleted ? \r\n                        <span className=\"text-black-50 text-break\">{props.taskItem.name}</span> \r\n                        : \r\n                        <span className=\"text-break\">{props.taskItem.name}</span>}\r\n                    </div>\r\n                    <div className=\"col-2\">\r\n                        {props.taskItem.time_to_complete ? props.taskItem.time_to_complete.split(/:/)[0]+':'+props.taskItem.time_to_complete.split(/:/)[1] : null}\r\n                    </div>\r\n                </div>\r\n\r\n            </Item>\r\n\r\n        </SwipeAction>\r\n    )\r\n}","import React, { useState, useEffect } from 'react'\r\nimport { TasksTreePropsType, taskTreeTypes } from './TasksTreeContainer'\r\nimport { Drawer, List, Button, Card, WingBlank, WhiteSpace } from 'antd-mobile'\r\nimport NewTaskTreeForm from './TaskTreeForm/NewTaskTreeForm'\r\nimport './TasksTreeMobile.css'\r\nimport { Formik } from 'formik'\r\nimport { TaskTreeItemMobile } from './TaskTreeMobileItem'\r\nimport { NewTimeByString } from '../../utils/Date/NewDeteByString'\r\nimport { NewTaskListType, TaskListType } from '../../Types/types'\r\nimport { checkActionsType } from './TaskListActions/TaskListActions'\r\n\r\nexport type InitialDrewerDataType = {\r\n    header: string,\r\n    taskId: false | number\r\n}\r\n\r\nconst initialDrewerData: InitialDrewerDataType = {\r\n    header: 'Tasks Tree',\r\n    taskId: false\r\n}\r\n\r\ntype SelectOptionType = {\r\n    name: string,\r\n    value: number\r\n}\r\n\r\nexport type InitialValuesType = {\r\n    selectOptions: Array<SelectOptionType> | null,\r\n    taskTypes: typeof taskTreeTypes,\r\n    task_type: Array<number>,\r\n    name?: string,\r\n    descriptions?: string\r\n    parent_id?: number\r\n    time_to_complete?: Date\r\n}\r\n\r\nconst getInitialValues = ( taskList: Array<TaskListType> ):InitialValuesType => {\r\n    return (\r\n        {\r\n            selectOptions: getSelectOptions(taskList),\r\n            taskTypes: taskTreeTypes,\r\n            task_type: [1],\r\n            time_to_complete: initialTimeToComplete,\r\n        }\r\n    )\r\n}\r\n\r\nlet initialTimeToComplete = NewTimeByString()\r\n\r\nconst getSelectOptions = (taskList: Array<TaskListType>):Array<SelectOptionType>  => {\r\n    if (taskList !== undefined && taskList.length > 0) {\r\n        return taskList.map((item: TaskListType) => {\r\n            return ({\r\n                name: item.name,\r\n                value: item.id\r\n            })\r\n        })\r\n    } else {\r\n        return []\r\n    }\r\n}\r\n\r\nconst TasksTreeMobile: React.FC<TasksTreePropsType> = (props) => {\r\n    useEffect(() => {\r\n        const getTaskList = () => props.getTaskList\r\n        if (props.taskList && props.taskList.length === 0 && !props.isTaskListLoaded) {\r\n            getTaskList()()\r\n        } else if (props.taskList === undefined) {\r\n            getTaskList()()\r\n        }\r\n        setVisible(false)\r\n        setInitialFormValues( getInitialValues(props.taskList) )\r\n    }, [ props.taskList, props.getTaskList, props.isTaskListLoaded ])\r\n\r\n    const [visible, setVisible] = useState(false)\r\n    const [initialFormValues, setInitialFormValues] = useState(getInitialValues(props.taskList))\r\n    const [drawerData, setDrawerData] = useState(initialDrewerData)\r\n\r\n    const handleSubmit = (formProps: InitialValuesType) => {\r\n        console.log(formProps)\r\n        const data = checkActionsType({...formProps, task_type: Number(formProps.task_type)})\r\n        console.log(data)\r\n        let newTaskList: NewTaskListType = {\r\n            name: formProps.name,\r\n            // task_type: formProps.taskTypes[0].value?.toString(),\r\n            task_type: formProps.task_type.toString(),\r\n            descriptions: formProps.descriptions, \r\n            user_id: props.userId,\r\n            parent_id: formProps.parent_id ? formProps.parent_id : undefined,\r\n            time_to_complete: formProps.time_to_complete ? formProps.time_to_complete.toTimeString().split(' ')[0] : undefined,\r\n        }\r\n\r\n        if (data) {\r\n            newTaskList = {...newTaskList, data: data}\r\n        }\r\n\r\n        if (!drawerData.taskId) {\r\n            props.createNewTaskList(newTaskList)\r\n        } else {\r\n            props.updateTaskList(newTaskList, drawerData.taskId)\r\n        }\r\n    }\r\n\r\n    const onAdd = () => {\r\n        if (props.selectedTasks.length !== 0) {\r\n            console.log(\r\n                props.taskList.filter( item=> item.id === Number(props.selectedTasks[props.selectedTasks.length - 1]))[0].name\r\n            )\r\n            setDrawerData({ \r\n                header: props.taskList.filter( item=> item.id === Number(props.selectedTasks[props.selectedTasks.length - 1]))[0].name,\r\n                taskId: false \r\n            })\r\n            setInitialFormValues({ ...getInitialValues(props.taskList), parent_id: Number(props.selectedTasks[props.selectedTasks.length - 1]) })\r\n        } else {\r\n            \r\n            setDrawerData({ \r\n                header: 'Task Tree',\r\n                taskId: false \r\n            })\r\n            setInitialFormValues({...getInitialValues(props.taskList), parent_id: initialFormValues.parent_id })\r\n        }\r\n\r\n        setVisible(!visible)\r\n    }\r\n\r\n    const showDrawer = () => {\r\n        setVisible(true)\r\n    }\r\n\r\n    const onBack = () => {\r\n        if (props.selectedTasks.length > 1) {\r\n            const taskId = props.selectedTasks[props.selectedTasks.length-2]\r\n            const taskName = props.taskList.filter( item => item.id === taskId)[0].name\r\n            setDrawerData({ header: taskName, taskId: taskId })\r\n        } else {\r\n            setDrawerData({ header: 'Task Tree', taskId: false })\r\n        }\r\n        props.backSelectedTasks()\r\n    }\r\n\r\n    const onRunTask = (values: number) => {\r\n        console.log(values)\r\n        // setRunTaskVisible(true)\r\n        // setRunData(\r\n        //     props.taskList.filter( (item: TaskListType)=> {\r\n        //             return (item.id === values)\r\n        //     })[0]\r\n        // )\r\n    }\r\n\r\n    return (\r\n        <WingBlank size=\"lg\">\r\n            <WhiteSpace size=\"lg\" />\r\n            <Card>\r\n                <Card.Header\r\n                    title={\r\n                        drawerData.header === 'Tasks Tree' ?\r\n                        <h5 className=\"w-100 text-center\">{drawerData.header}</h5>\r\n                        :\r\n                        <h5>{drawerData.header}</h5>\r\n                    }\r\n                    extra={\r\n                        <div className=\"d-flex flex-row\">\r\n                            {props.selectedTasks.length > 0 && !visible ?\r\n                                <Button\r\n                                    inline\r\n                                    size=\"small\"\r\n                                    className=\"mx-3 my-2\"\r\n                                    onClick={onBack}\r\n                                    type=\"primary\"\r\n                                >\r\n                                    Back\r\n                                    </Button>\r\n                                :\r\n                                null\r\n                            }\r\n                            <Button\r\n                                inline\r\n                                size=\"small\"\r\n                                className=\"mx-3 my-2\"\r\n                                onClick={onAdd}\r\n                                type=\"primary\"\r\n                            >\r\n                                {visible ? 'Close' : 'Add'}\r\n                            </Button>\r\n                        </div>\r\n                    }\r\n                >\r\n                </Card.Header>\r\n                <Drawer\r\n                    className=\"my-drawer\"\r\n                    style={{ minHeight: document.documentElement.clientHeight }}\r\n                    contentStyle={{ color: '#A6A6A6', textAlign: 'center', paddingTop: 0, width: \"100%\" }}\r\n                    sidebar={\r\n                        <div className=\"mt-4\">\r\n                            <Formik\r\n                                initialValues={initialFormValues}\r\n                                onSubmit={handleSubmit}\r\n                                enableReinitialize={true}\r\n                            >\r\n                                {NewTaskTreeForm}\r\n                            </Formik>\r\n                        </div>\r\n                    }\r\n                    open={visible}\r\n                    onOpenChange={onAdd}\r\n                >\r\n                    <List>\r\n                        {props.taskList !== undefined ?\r\n                            props.taskList\r\n                            .map((item: TaskListType) => {\r\n                                let parentId: number\r\n                                if (props.selectedTasks.length !== 0) {\r\n                                    parentId = props.selectedTasks[props.selectedTasks.length - 1]\r\n                                    if (item.parent_id === parentId) {\r\n                                        return (\r\n                                            <TaskTreeItemMobile\r\n                                                key={item.id.toString()}\r\n                                                taskItem={item}\r\n                                                deleteTaskList={props.deleteTaskList}\r\n                                                showDrawer={showDrawer}\r\n                                                setDrawerData={setDrawerData}\r\n                                                initialFormValues={initialFormValues}\r\n                                                setInitialFormValues={setInitialFormValues}\r\n                                                updateTaskList={props.updateTaskList}\r\n                                                onRunTask={onRunTask}\r\n                                            />\r\n                                        )\r\n                                    } else {\r\n                                        return null\r\n                                    }\r\n                                } else {\r\n                                    if (item.parent_id === null) {\r\n                                        return (\r\n                                            <TaskTreeItemMobile\r\n                                                key={item.id.toString()}\r\n                                                taskItem={item}\r\n                                                deleteTaskList={props.deleteTaskList}\r\n                                                showDrawer={showDrawer}\r\n                                                setDrawerData={setDrawerData}\r\n                                                initialFormValues={initialFormValues}\r\n                                                setInitialFormValues={setInitialFormValues}\r\n                                                updateTaskList={props.updateTaskList}\r\n                                                onRunTask={onRunTask}\r\n                                            />\r\n                                        )\r\n                                    } else {\r\n                                        return null\r\n                                    }\r\n                                }\r\n\r\n                            })\r\n                            :\r\n                            null\r\n                        }\r\n                    </List>\r\n                </Drawer>\r\n            </Card>\r\n        </WingBlank>\r\n    )\r\n}\r\n\r\nexport default TasksTreeMobile","import {connect} from 'react-redux'\r\nimport { AppStateType } from '../../redux/store'\r\nimport {getTaskList, createNewTaskList, deleteTaskList, updateTaskList, actions} from './../../redux/TaskListReducer'\r\nimport {createNewTask as createNewToDo} from './../../redux/taskReducer'\r\nimport { isMobile } from 'react-device-detect'\r\nimport TasksTreeBrowser from './TasksTreeBrowser'\r\nimport TasksTreeMobile from './TasksTreeMobile'\r\nimport { NewTaskDataType, NewTaskListType } from '../../Types/types'\r\n\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    getTaskList: ()=>void,\r\n    createNewTaskList: (values: NewTaskListType)=>void,\r\n    deleteTaskList: (taskId: number)=>void,\r\n    updateTaskList: (values: NewTaskListType, taskId: number)=> void,\r\n    backSelectedTasks: ()=>void,\r\n    createNewToDo: (values: NewTaskDataType, reload?:boolean)=> void,\r\n}\r\n\r\ntype OwnTasksTreePropsType = {\r\n\r\n}\r\n\r\nexport type TasksTreePropsType = MapPropsType & MapDispatchPropsType & OwnTasksTreePropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        taskList: state.taskList.taskList,\r\n        userId: state.auth.user?.id,\r\n        isTaskListLoaded: state.taskList.isTaskListLoaded,\r\n        selectedTasks: state.taskList.selectedTasks\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnTasksTreePropsType, AppStateType>(mapStateToProps, \r\n    {getTaskList, createNewTaskList, deleteTaskList, updateTaskList, backSelectedTasks: actions.backSelectedTasks, createNewToDo}) \r\n    (isMobile ? TasksTreeMobile : TasksTreeBrowser)\r\n    \r\ntype TaskTreeTypesItemType = {\r\n    name: string,\r\n    label?: string,\r\n    value: string | number | null,\r\n    isSubform: boolean,\r\n    childTypes?: Array<TaskTreeTypesItemType> \r\n    component?: string,\r\n    type?: string,\r\n    validate?: string,\r\n    hasFeedback?: true,\r\n\r\n}\r\ntype TaskTreeTypesType = Array<TaskTreeTypesItemType>\r\n\r\nexport const taskTreeTypes: TaskTreeTypesType = [\r\n    {\r\n        name: 'Простая задача',\r\n        value: 1,\r\n        isSubform: false,\r\n        childTypes: []\r\n    },\r\n    {\r\n        name: 'Звонок',\r\n        value: 2,\r\n        isSubform: true,\r\n        childTypes: [\r\n            {\r\n                label: 'телефонный номер',\r\n                value: null,\r\n                name: 'phone_number',\r\n                component: 'AntInput',\r\n                type: \"text\",\r\n                validate: 'validateRequired',\r\n                hasFeedback: true,\r\n                isSubform: false,\r\n            },\r\n            {\r\n                label: 'Имя абонента',\r\n                value: null,\r\n                name: 'lead_name',\r\n                component: 'AntInput',\r\n                type: \"text\",\r\n                validate: 'validateRequired',\r\n                hasFeedback: true,\r\n                isSubform: false,\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        name: 'Разработка',\r\n        value: 3,\r\n        isSubform: true,\r\n        childTypes: []\r\n    }\r\n]\r\n","import React, { ReactNode } from 'react'\r\nimport { Form, Field, FormikProps } from \"formik\"\r\nimport { AntCheckbox, AntInput, AntInputPassword, AntSelect } from '../../utils/Formik/CreateAntField'\r\nimport { validateEmail, validateRequired } from '../../utils/Formik/ValidateFields'\r\n\r\nconst RegisterForm: ((props: FormikProps<{}>) => ReactNode) = (props) => {\r\n    return (\r\n        <Form\r\n            className=\"form-container\"\r\n            onSubmit={props.handleSubmit}\r\n        >\r\n            <Field\r\n                component={AntInput}\r\n                name=\"name\"\r\n                type=\"text\"\r\n                label=\"Name\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n            <Field\r\n                component={AntInput}\r\n                name=\"email\"\r\n                type=\"email\"\r\n                label=\"Email\"\r\n                validate={validateEmail}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n            <Field\r\n                component={AntInputPassword}\r\n                name=\"password\"\r\n                type=\"password\"\r\n                label=\"Password\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n\r\n            <Field\r\n                component={AntInputPassword}\r\n                name=\"c_password\"\r\n                type=\"password\"\r\n                label=\"Confirm\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n\r\n            <Field\r\n                component={AntCheckbox}\r\n                name=\"remember\"\r\n                label=\"Remember Me\"\r\n                submitCount={props.submitCount}\r\n            />\r\n\r\n            <Field\r\n                component={AntSelect}\r\n                selectOptions={statusOptions}\r\n                name=\"status\"\r\n                type=\"select\"\r\n                label=\"User Status\"\r\n                submitCount={props.submitCount}\r\n            />\r\n\r\n            <div className=\"submit-container\">\r\n                <button className=\"ant-btn ant-btn-primary\" type=\"submit\">\r\n                    Register\r\n                </button>\r\n            </div>\r\n\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default RegisterForm\r\n\r\ntype StatusOptionItemType = {\r\n    name: string,\r\n    value: string,\r\n    isSubform: boolean,\r\n}\r\n\r\ntype StatusOptionsType = Array<StatusOptionItemType>\r\n\r\nconst statusOptions: StatusOptionsType = [\r\n    {\r\n        name: 'Guest',\r\n        value: 'guest',\r\n        isSubform: false,\r\n    },\r\n    {\r\n        name: 'Admin',\r\n        value: 'admin',\r\n        isSubform: false,\r\n    },\r\n]","import { Formik } from 'formik'\r\nimport React, { useEffect } from 'react'\r\nimport RegisterForm from './RegisterForm'\r\nimport { RegisterPropsType } from './RegisterContainer'\r\nimport { useHistory } from 'react-router-dom'\r\nimport { message } from 'antd'\r\nimport { RegisterFormType } from '../../api/authAPI'\r\n\r\n\r\nexport type OwnRegisterPropsType = {}\r\n\r\nconst initialValues: RegisterFormType = {\r\n    email: '',\r\n    password: '',\r\n    name: '',\r\n    remember: false\r\n}\r\n\r\nconst Register: React.FC<RegisterPropsType> = (props) => {\r\n    let history = useHistory();\r\n    useEffect( () => {\r\n        if(props.isAuth) {\r\n            history.replace(props.appLocation+'toDoList')\r\n        }\r\n    }, [props.isAuth, history, props.appLocation])\r\n\r\n    useEffect(() => {\r\n        if (props.authError) {\r\n            message.error(props.authError)\r\n        }\r\n    }, [props.authError])\r\n    \r\n    const handleSubmit = (formProps: RegisterFormType) => {\r\n        props.register(formProps)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h1 className=\"mb-5 mx-auto\">Register Form</h1>\r\n            <Formik\r\n                initialValues={initialValues}\r\n                onSubmit={handleSubmit}\r\n            >\r\n                {RegisterForm}\r\n            </Formik>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Register","import {connect} from 'react-redux'\r\nimport Register, { OwnRegisterPropsType } from './Register'\r\nimport { AppStateType } from '../../redux/store'\r\nimport {register} from './../../redux/authReducer'\r\nimport { RegisterFormType } from '../../api/authAPI'\r\n\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    register: (creds: RegisterFormType)=>void\r\n}\r\n\r\nexport type RegisterPropsType = MapPropsType & MapDispatchPropsType & OwnRegisterPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n        appLocation: state.app.location,\r\n        authError: state.auth.authError\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnRegisterPropsType, AppStateType>(mapStateToProps, \r\n    {register}) \r\n    (Register)\r\n    \r\n\r\n","import { Col, Row } from 'antd'\r\nimport { Button } from 'antd'\r\nimport React, {useEffect} from 'react'\r\nimport { ListGroup } from 'react-bootstrap'\r\nimport {UsersPropsType} from './UsersContainer'\r\nimport { CaretRightOutlined } from '@ant-design/icons'\r\nimport { Link, useRouteMatch }from \"react-router-dom\";\r\n\r\nconst Users: React.FC<UsersPropsType> = (props) => {\r\n    useEffect( ()=> {\r\n        if (props.usersList.length === 0) {\r\n            props.getUsersList()\r\n        }\r\n    }, [props.usersList, props] )\r\n\r\n    let { url } = useRouteMatch();\r\n    \r\n    return (\r\n        <div>\r\n            <h5>Users</h5>\r\n            <ListGroup as=\"ul\">\r\n            {   props.usersList.map( (item: any) => {\r\n                    return(\r\n                        <ListGroup.Item as=\"li\" action className=\"\" key={item.id}>\r\n                            <Row className=\"px-0 ml-0 ml-sm-5\">\r\n                                <Col className=\"mx-2\">\r\n                                    {item.id}\r\n                                </Col>\r\n                                <Col className=\"mx-2\">\r\n                                    <Link to={url+'/'+item.id}>{item.name}</Link>\r\n                                </Col>\r\n                                {props.UserStatus === 'superAdmin' ?\r\n                                <Col className=\"mr-auto ml-0 mr-sm-2 ml-sm-auto\">\r\n                                <Button\r\n                                    type=\"primary\"\r\n                                    shape=\"circle\"\r\n                                    size=\"small\"\r\n                                    style={{ marginLeft: 10 }}\r\n                                    onClick={()=>{\r\n                                        // console.log('onClick')\r\n                                    }}\r\n                                    icon={\r\n                                        <div className=\"d-flex flex-wrap align-content-start\">\r\n                                            <CaretRightOutlined className=\"ml-1\" style={{ fontSize: '14px' }} />\r\n                                        </div>\r\n                                    }\r\n                                />\r\n                                </Col>\r\n                                    :\r\n                                    null\r\n                                }\r\n                            </Row>\r\n                        </ListGroup.Item>\r\n                    )\r\n                })\r\n            }\r\n            </ListGroup>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Users","import React, { useEffect } from 'react'\r\nimport {UsersPropsType} from './UsersContainer'\r\nimport { List } from 'antd-mobile'\r\nimport { Link, useRouteMatch } from 'react-router-dom'\r\n\r\nconst Item = List.Item\r\n\r\nconst UsersMobile: React.FC<UsersPropsType> = (props) => {\r\n    useEffect( ()=> {\r\n        if (props.usersList.length === 0) {\r\n            props.getUsersList()\r\n        }\r\n    }, [props.usersList, props] )\r\n    \r\n    let { url } = useRouteMatch();\r\n    return (\r\n        <div>\r\n            <List renderHeader={() => 'Users:'} className=\"my-list\">\r\n                {   props.usersList.map( (item: any) => {\r\n                        return(\r\n                            <Item \r\n                                key={item.id.toString()}\r\n                                onClick={() => {console.log('onClick')}}\r\n                            >\r\n                                <Link to={url+'/'+item.id}>{item.name}</Link>\r\n                            </Item>\r\n                        )\r\n                    })\r\n                }\r\n            </List>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UsersMobile","import {createSelector} from 'reselect'\r\nimport {AppStateType} from './store'\r\n\r\nconst UsersItemsSelector = (state: AppStateType) => state.users.usersList\r\n\r\nexport const getUsersListSelector = createSelector(UsersItemsSelector,\r\n    (users) => {\r\n        return users\r\n    }\r\n)","import {connect} from 'react-redux'\r\nimport Users from './Users'\r\nimport UsersMobile from './UsersMobile'\r\nimport { AppStateType } from '../../redux/store'\r\nimport { isMobile } from 'react-device-detect'\r\nimport {getUsersList} from '../../redux/usersReducer'\r\nimport {getUsersListSelector} from './../../redux/usersSelector'\r\n\r\n\r\ntype OwnUsersPropsType = {}\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    getUsersList: ()=>void,\r\n}\r\n\r\nexport type UsersPropsType = MapPropsType & MapDispatchPropsType & OwnUsersPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        usersList: getUsersListSelector(state),\r\n        UserStatus: state.auth.user?.status\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnUsersPropsType, AppStateType>(mapStateToProps, \r\n    {getUsersList}) \r\n    (isMobile ? UsersMobile : Users)\r\n    \r\n\r\n","import { Formik, FormikProps, Form, Field } from 'formik'\r\nimport React, { ReactNode, useState } from 'react'\r\nimport { AntInput, AntSelect } from '../../../utils/Formik/CreateAntField'\r\nimport { validateRequired, validatePhone } from '../../../utils/Formik/ValidateFields'\r\n\r\ntype userData = {\r\n    userData: any,\r\n    updateUser: (values: any, userId: number)=>void\r\n}\r\n\r\nconst UserDataForm: React.FC<userData> = (props) => {\r\n\r\n    type InitialFormValuesType = {\r\n        id: number,\r\n        created_at: string,\r\n        updated_at: string,\r\n        name: string,\r\n        email: string,\r\n        phone: string,\r\n        status: string\r\n    }\r\n    const initialFormValues: InitialFormValuesType = {\r\n        id: props.userData.id,\r\n        created_at: props.userData.created_at,\r\n        updated_at: props.userData.updated_at,\r\n        name: props.userData.name,\r\n        email: props.userData.email,\r\n        phone: props.userData.phone,\r\n        status: props.userData.status\r\n    }\r\n\r\n    const handleSubmit = (values: any, actions: any) => {\r\n        delete values['created_at']\r\n        delete values['updated_at']\r\n        props.updateUser(values, props.userData.id)\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Formik\r\n                initialValues={initialFormValues}\r\n                onSubmit={handleSubmit}\r\n                enableReinitialize={true}\r\n            >\r\n                {FormFielsd}\r\n            </Formik>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UserDataForm\r\n\r\nconst FormFielsd: ((props: FormikProps<{}>) => ReactNode) = (props) => {\r\n\r\n    const [isChanged, setIsChanged] = useState(false)\r\n\r\n    const submitPosible = () => {\r\n        setIsChanged(true)\r\n    }\r\n\r\n    const statusOptions = [\r\n        {\r\n            name: 'Guest',\r\n            value: 'guest'\r\n        },\r\n        {\r\n            name: 'Admin',\r\n            value: 'admin'\r\n        },\r\n        {\r\n            name: 'Super Admin',\r\n            value: 'superAdmin'\r\n        },\r\n\r\n    ]\r\n\r\n    return (\r\n        <Form\r\n            className=\"form-container mt-2\"\r\n            onSubmit={props.handleSubmit}\r\n        >\r\n            <Field\r\n                component={AntInput}\r\n                name=\"id\"\r\n                type=\"text\"\r\n                label=\"ID\"\r\n                disabled\r\n            />\r\n\r\n            <Field\r\n                component={AntInput}\r\n                name=\"created_at\"\r\n                type=\"text\"\r\n                label=\"Created at\"\r\n                disabled\r\n            />\r\n\r\n            <Field\r\n                component={AntInput}\r\n                name=\"updated_at\"\r\n                type=\"text\"\r\n                label=\"Updated at\"\r\n                disabled\r\n            />\r\n\r\n            <Field\r\n                component={AntInput}\r\n                name=\"email\"\r\n                type=\"text\"\r\n                label=\"Email\"\r\n                disabled\r\n            />\r\n\r\n            <Field\r\n                component={AntInput}\r\n                name=\"name\"\r\n                type=\"text\"\r\n                label=\"Name\"\r\n                validate={validateRequired}\r\n                onChange={submitPosible}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n            \r\n            <Field\r\n                component={AntInput}\r\n                name=\"phone\"\r\n                type=\"text\"\r\n                label=\"Phone number\"\r\n                validate={validatePhone}\r\n                onChange={submitPosible}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n            <Field\r\n                component={AntSelect}\r\n                selectOptions={statusOptions}\r\n                name=\"status\"\r\n                type=\"select\"\r\n                label=\"Status\"\r\n                validate={validateRequired}\r\n                onChange={submitPosible}\r\n                submitCount={props.submitCount}\r\n            />\r\n            { isChanged ?\r\n                <div className=\"submit-container\">\r\n                    <button className=\"ant-btn ant-btn-primary mb-4\" type=\"submit\">\r\n                        Save\r\n                    </button>\r\n                </div>\r\n                :\r\n                null\r\n            }\r\n        </Form>\r\n    )\r\n}","import { Collapse, Spin, List, Pagination, Button, Drawer } from 'antd'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { TaskType } from '../../../Types/types'\r\nimport TimeScale from './../../ToDo/TimeScale/TimeScale'\r\nimport ToDoHeader from '../../ToDo/ToDoHeader/ToDoHeader'\r\nimport { CurrentUserPropsType } from './CurrentUserContainer'\r\nimport UserDataForm from './UserDataForm'\r\nimport moment from 'moment'\r\nimport { Formik } from 'formik'\r\nimport { initialValues, InitialValuesType } from './../../ToDo/ToDoBrowser'\r\nimport ToDoForm from '../../ToDo/ToDoForm/ToDoForm'\r\nimport { UserType } from '../../../redux/authReducer'\r\n\r\nconst { Panel } = Collapse\r\n\r\nexport const getTargetUser = (usersList: Array<UserType> ,userId: string):UserType  => {\r\n    return usersList.filter((item: UserType) => item.id.toString() === userId )[0]\r\n}\r\n\r\nexport const toDoPart = (\r\n    toDoList: Array<TaskType>,\r\n    currentPage: number,\r\n    defaultPageSize: number\r\n    ): Array<TaskType> => {\r\n    let toDoPart: Array<TaskType> = []\r\n    if (toDoList) {\r\n        const startIndex = (currentPage - 1) * defaultPageSize\r\n        const endIndex = startIndex + defaultPageSize\r\n        for (let index = 0; index < toDoList.length; index++) {\r\n            const element = toDoList[index];\r\n            if (index >= startIndex && index < endIndex) {\r\n                toDoPart.push(element)\r\n            }\r\n\r\n        }\r\n    }\r\n    return toDoPart\r\n}\r\n\r\nconst CurrentUser: React.FC<CurrentUserPropsType> = (props) => {\r\n    useEffect(() => {\r\n        const getUsersList = () => props.getUsersList\r\n        const setUsersDataChanged = () => props.setUsersDataChanged\r\n\r\n        if (props.usersList.length === 0) {\r\n            getUsersList()()\r\n        }\r\n        if (props.isUsersDataChanged) {\r\n            getUsersList()()\r\n            setUsersDataChanged()(false)\r\n        }\r\n    }, [props.usersList, props.getUsersList, props.isUsersDataChanged, props.setUsersDataChanged])\r\n\r\n    const [defaultPageSize, setDefaultPageSize] = useState(10)\r\n    const [currentPage, setCurrentPage] = useState(1)\r\n    const [toDoFormVisible, setToDoFormVisible]= useState(false)\r\n    const [initialFormValues, setInitialFormValues] = useState(initialValues)\r\n    const [taskList, setTaskList] = useState<Array<TaskType> | null>(null)\r\n    const [isInterval, setIsInterval] = useState(false)\r\n    \r\n\r\n    const user = getTargetUser(props.usersList, props.match.params.userId)\r\n\r\n    const callback = () => { }\r\n\r\n    const onTaskEdit = () => { }\r\n\r\n    const onPagination = (currentPage: number) => {\r\n        setCurrentPage(currentPage)\r\n    }\r\n\r\n    const onShowSizeChange = (current: number, size: number) => {\r\n        setDefaultPageSize(size)\r\n    }\r\n\r\n    type DateIntervalType = {\r\n        startDate: moment.Moment,\r\n        endDate: moment.Moment\r\n    }\r\n    const [dateInterval, setDateInterval] = useState<DateIntervalType>({\r\n        startDate: moment(),\r\n        endDate: moment()\r\n    })\r\n\r\n    \r\n\r\n    const getTaskList = (startDate: string, endDate: string) => {\r\n        let tasklist: Array<TaskType> = []\r\n        if (user.toDoList) {\r\n\r\n            for (let index = 0; index < user.toDoList.length; index++) {\r\n                const toDo = user.toDoList[index];\r\n                if (moment(toDo.date).isBetween(\r\n                    moment(dateInterval.startDate.format('YYYY-MM-DD')).add(-1, 'day'),\r\n                    moment(dateInterval.endDate.format('YYYY-MM-DD')).add(1, 'day'),\r\n                    'day')) {\r\n                    tasklist.push(toDo)\r\n                }\r\n            }\r\n        }\r\n        setTaskList(tasklist)\r\n    }\r\n\r\n    const setIsIntervalValues = (isInterval: boolean, date: { startDate: moment.Moment, endDate: moment.Moment }) => {\r\n        console.log('setIsIntervalValues', isInterval)\r\n        setIsInterval(isInterval)\r\n        setDateInterval(date)\r\n    }\r\n\r\n    const onToDoFormClose = () => {\r\n        setInitialFormValues(initialValues)\r\n        setToDoFormVisible(false)\r\n    }\r\n\r\n    const handleSubmitToDoForm = () => {\r\n    }\r\n\r\n\r\n    if (user) {\r\n        return (\r\n            <div className=\"mt-2\">\r\n                <h5>Name: {user.name}</h5>\r\n                <p>User id: {props.match.params.userId}</p>\r\n\r\n                <Collapse defaultActiveKey={[]} onChange={callback}>\r\n                    <Panel header=\"User data\" key=\"1\">\r\n                        <UserDataForm userData={user} updateUser={props.updateUser} />\r\n                    </Panel>\r\n                    <Panel header=\"ToDo List\" key=\"2\">\r\n                        <List>\r\n                            {user.toDoList ? toDoPart(user.toDoList, currentPage, defaultPageSize).map((item: TaskType) => {\r\n                                return <TodoItem \r\n                                    key={item.id.toString()} \r\n                                    item={item} \r\n                                    setToDoFormVisible={setToDoFormVisible}\r\n                                    setInitialFormValues={setInitialFormValues}\r\n                                    />\r\n                            })\r\n                                :\r\n                                null\r\n                            }\r\n                        </List>\r\n                        <Pagination\r\n                            total={user.toDoList?.length}\r\n                            showTotal={(total, range) => `${range[0]}-${range[1]} of ${total} items`}\r\n                            defaultPageSize={10}\r\n                            defaultCurrent={1}\r\n                            onChange={onPagination}\r\n                            onShowSizeChange={onShowSizeChange}\r\n                        />\r\n                    </Panel>\r\n                    <Panel header=\"Schedule\" key=\"3\">\r\n                        <h3>Schedule for {user.name}:</h3>\r\n                        <ToDoHeader\r\n                            dateInterval={dateInterval}\r\n                            setIsInterval={setIsIntervalValues}\r\n                            isReadOnly={true}\r\n                        />\r\n                            <TimeScale\r\n                                onEdit={onTaskEdit}\r\n                                dateInterval={dateInterval}\r\n                                errorMessage={props.errorMessage}\r\n                                getTaskList={getTaskList}\r\n                                isInterval={isInterval}\r\n                                settings={props.settings}\r\n                                taskList={taskList}\r\n                                taskListIsFetching={false}\r\n                                taskSaveStatus={props.taskSaveStatus}\r\n                                isReadOnly={true}\r\n                            />            \r\n                    </Panel>\r\n                    <Panel header=\"Related users\" key=\"4\"></Panel>\r\n                    <Panel header=\"Permissions\" key=\"5\"></Panel>\r\n                </Collapse>\r\n\r\n                <Drawer\r\n                    title={initialFormValues.name}\r\n                    placement=\"right\"\r\n                    closable={true}\r\n                    onClose={onToDoFormClose}\r\n                    visible={toDoFormVisible}\r\n                    width=\"90%\"\r\n                >\r\n                    <Formik\r\n                        initialValues={initialFormValues}\r\n                        onSubmit={handleSubmitToDoForm}\r\n                        enableReinitialize={true}\r\n                        initialStatus={'readOnly'}\r\n                    >\r\n                        {ToDoForm}\r\n                    </Formik>\r\n                </Drawer>\r\n\r\n            </div >\r\n        )\r\n    } else {\r\n        return <Spin key=\"spin\" size=\"large\" />\r\n    }\r\n}\r\n\r\nexport default CurrentUser\r\n\r\ntype TodoItemPropsType = {\r\n    item: TaskType,\r\n    key: string,\r\n    setToDoFormVisible:  React.Dispatch<React.SetStateAction<boolean>>,\r\n    setInitialFormValues: React.Dispatch<React.SetStateAction<InitialValuesType>>\r\n}\r\nconst TodoItem: React.FC<TodoItemPropsType> = (props) => {\r\n    const showDrawer = (item: TaskType) => {\r\n        props.setToDoFormVisible(true)\r\n        const timeParts = item.time.split(':')\r\n        const splitTime_to_complete = item.time_to_complete.split(/:/)\r\n        props.setInitialFormValues({\r\n            name: item.name,\r\n            time: moment().hours(Number(timeParts[0])).minutes(Number(timeParts[1])).seconds(Number(timeParts[2])),\r\n            date: moment(item.date),\r\n            time_to_complete: moment().hours(Number(splitTime_to_complete[0])).minutes(Number(splitTime_to_complete[1])).seconds(Number(splitTime_to_complete[2])),\r\n            descriptions: item.descriptions ? item.descriptions : null\r\n        })\r\n    }\r\n    return (\r\n        <List.Item\r\n            key={props.item.id}\r\n            actions={[<Button onClick={() => { showDrawer(props.item) }} type=\"link\" block>Show</Button>]}\r\n        >\r\n            {props.item.name}\r\n        </List.Item>\r\n    )\r\n}","import { Spin } from 'antd'\r\nimport React, { useCallback, useEffect, useState } from 'react'\r\nimport { getTargetUser, toDoPart } from './CurrentUser'\r\nimport { CurrentUserPropsType } from './CurrentUserContainer'\r\nimport { Accordion, LocaleProvider, Pagination, List, NavBar, Icon, Drawer, Button } from 'antd-mobile'\r\nimport UserDataForm from './UserDataForm'\r\nimport enUS from 'antd-mobile/lib/locale-provider/en_US'\r\nimport './Pagination.css'\r\nimport { useHistory } from 'react-router-dom'\r\nimport ToDoHeaderMobile from '../../ToDo/ToDoHeader/ToDoHeaderMobile'\r\nimport moment from 'moment'\r\nimport { Formik } from 'formik'\r\nimport { initialValues } from '../../ToDo/ToDoMobile'\r\nimport ToDoForm from '../../ToDo/ToDoForm/ToDoForm'\r\nimport { NewTimeByString } from '../../../utils/Date/NewDeteByString'\r\nimport {TasksOnly} from './../../ToDo/ToDoMobile'\r\nimport { TaskType } from '../../../Types/types'\r\n\r\nconst Item = List.Item\r\n\r\nconst CurrentUserMobile: React.FC<CurrentUserPropsType> = (props) => {\r\n    const [currentPage, setCurrentPage] = useState(1)\r\n    const [toDoFormVisible, setToDoFormVisible]= useState(false)\r\n    const [initialFormValues, setInitialFormValues] = useState(initialValues)\r\n    const [taskList, setTaskList] = useState<Array<TaskType> | null>(null)\r\n    const [dateInterval, setDateInterval] = useState<DateIntervalType>({\r\n        startDate: moment(),\r\n        endDate: moment()\r\n    })\r\n    \r\n    const user = getTargetUser(props.usersList, props.match.params.userId)\r\n\r\n    const getTaskListCallback = useCallback(\r\n        (startDate: string, endDate: string) => {\r\n            if (user) {\r\n                let taskList: Array<TaskType> = []\r\n                if (user.toDoList) {\r\n                    for (let index = 0; index < user.toDoList.length; index++) {\r\n                        const toDo = user.toDoList[index];\r\n                        if (moment(toDo.date).isBetween(\r\n                            moment(startDate).add(-1, 'day'),\r\n                            moment(endDate).add(1, 'day'),\r\n                            'day')) {\r\n                                taskList.push(toDo)\r\n                        }\r\n                    }\r\n                }\r\n                setTaskList(taskList)\r\n            } else {\r\n                setTaskList(null)\r\n            }\r\n        },\r\n        [setTaskList, user],\r\n    )\r\n\r\n    useEffect(() => {\r\n        const getUsersList = () => props.getUsersList\r\n        const setUsersDataChanged = () => props.setUsersDataChanged\r\n\r\n        console.log(props.isUsersDataChanged)\r\n        if (props.usersList.length === 0) {\r\n            getUsersList()()\r\n        }\r\n        if (props.isUsersDataChanged) {\r\n            getUsersList()()\r\n            setUsersDataChanged()(false)\r\n        }\r\n        if (user && taskList === null) {\r\n            getTaskListCallback(dateInterval.startDate.format('YYYY-MM-DD'), dateInterval.endDate.format('YYYY-MM-DD'))\r\n        }\r\n        \r\n    }, [props.usersList, props.getUsersList, dateInterval, user, taskList, getTaskListCallback, props.isUsersDataChanged, props.setUsersDataChanged])\r\n    \r\n    let history = useHistory()\r\n\r\n    type DateIntervalType = {\r\n        startDate: moment.Moment,\r\n        endDate: moment.Moment\r\n    }\r\n\r\n    const setIsInterval = (isInterval: boolean, date: { startDate: moment.Moment, endDate: moment.Moment }) => {\r\n        setDateInterval(date)\r\n        getTaskListCallback(date.startDate.format('YYYY-MM-DD'), date.endDate.format('YYYY-MM-DD'))\r\n    }\r\n\r\n    const onChange = () => {\r\n\r\n    }\r\n\r\n    const onPagination = (currentPage: number) => {\r\n        setCurrentPage(currentPage)\r\n    }\r\n\r\n    const onTaskOpen = (task: TaskType) => {\r\n        setToDoFormVisible(!toDoFormVisible)\r\n        let time = NewTimeByString(task.time)\r\n\r\n        const splitDate = task.date.split(/-/)\r\n        let date = new Date()\r\n        date.setFullYear(parseInt(splitDate[0]))\r\n        date.setMonth(parseInt(splitDate[1])-1)\r\n        date.setDate(parseInt(splitDate[2]))\r\n\r\n        setInitialFormValues({\r\n            name: task.name,\r\n            time: time,\r\n            date: date,\r\n            descriptions: task.descriptions ? task.descriptions : null,\r\n            time_to_complete: NewTimeByString(task.time_to_complete)\r\n        })\r\n    }\r\n\r\n    const onTaskClose = () => {\r\n        setToDoFormVisible(!toDoFormVisible)\r\n    }\r\n\r\n    const handleSubmit = () => {\r\n        \r\n    }\r\n\r\n    if (user) {\r\n        return (\r\n            <div>\r\n                <NavBar\r\n                    mode=\"light\"\r\n                    icon={<Icon type=\"left\" />}\r\n                    onLeftClick={() => history.replace(props.appLocation+'users')}\r\n                    rightContent={[\r\n                       <span key=\"UserId\" >User id: {props.match.params.userId}</span>\r\n                    ]}\r\n                >\r\n                    <span className=\"text-dark\">{user.name}</span>\r\n                </NavBar>\r\n\r\n                <Accordion defaultActiveKey=\"\" className=\"my-accordion\" onChange={onChange} >\r\n                    <Accordion.Panel header=\"User data\">\r\n                        <UserDataForm userData={user} updateUser={props.updateUser} />\r\n                    </Accordion.Panel>\r\n                    <Accordion.Panel header=\"ToDo List\">\r\n                    <Drawer\r\n                    className=\"my-drawer\"\r\n                    style={{ minHeight: document.documentElement.clientHeight }}\r\n                    contentStyle={{ color: '#A6A6A6', textAlign: 'center', paddingTop: 0, width: \"100%\" }}\r\n                    sidebar={\r\n                        <>\r\n                        <Button\r\n                                inline\r\n                                size=\"small\"\r\n                                className=\"ml-3 mt-3 mb-5\"\r\n                                onClick={onTaskClose}\r\n                                type=\"primary\"\r\n                            >\r\n                                Close\r\n                            </Button>\r\n\r\n                        <div className=\"mt-1\">\r\n                            <Formik\r\n                                initialValues={initialFormValues}\r\n                                onSubmit={handleSubmit}\r\n                                enableReinitialize={true}\r\n                                initialStatus={'readOnly'}\r\n                            >\r\n                                {ToDoForm}\r\n                            </Formik>\r\n                        </div>\r\n                        </>\r\n                    }\r\n                    open={toDoFormVisible}\r\n                >\r\n                        <List>\r\n                            {user.toDoList ? toDoPart(user.toDoList, currentPage, 10).map((item: TaskType) => {\r\n                                return (\r\n                                <Item \r\n                                    key={item.id.toString()} \r\n                                    onClick={()=>{onTaskOpen(item)}}\r\n                                >\r\n                                    {item.name}\r\n                                </Item>\r\n                                )\r\n                            })\r\n                                :\r\n                                null\r\n                            }\r\n                        </List>\r\n\r\n                        <LocaleProvider locale={enUS}>\r\n                            <div className=\"pagination-container\" >\r\n                                <Pagination\r\n                                    className=\"m-2\"\r\n                                    total={user.toDoList ? Math.ceil(user.toDoList?.length / 10) : 0}\r\n                                    current={currentPage}\r\n                                    onChange={onPagination}\r\n                                />\r\n                            </div>\r\n                        </LocaleProvider>\r\n                        </Drawer>\r\n                    </Accordion.Panel>\r\n                    <Accordion.Panel header=\"Schedule\">\r\n                        <ToDoHeaderMobile\r\n                            dateInterval={dateInterval}\r\n                            setIsInterval={setIsInterval}\r\n                            isReadOnly={true}\r\n                        />\r\n                        <TasksOnly \r\n                            dateInterval={dateInterval}\r\n                            taskList={taskList}\r\n                            isReadOnly={true}\r\n                        />\r\n                    </Accordion.Panel>\r\n                    <Accordion.Panel header=\"Related users\"></Accordion.Panel>\r\n                    <Accordion.Panel header=\"Permissions\"></Accordion.Panel>\r\n                </Accordion>\r\n            </div>\r\n        )\r\n    } else {\r\n        return <Spin key=\"spin\" size=\"small\" />\r\n    }\r\n\r\n}\r\n\r\nexport default CurrentUserMobile","import {connect} from 'react-redux'\r\nimport CurrentUser from './CurrentUser'\r\nimport { AppStateType } from './../../../redux/store'\r\nimport { isMobile } from 'react-device-detect'\r\nimport { getUsersList, updateUser, actions } from './../../../redux/usersReducer'\r\nimport { UserType } from '../../../redux/authReducer'\r\nimport CurrentUserMobile from './CurrentUserMobile'\r\n\r\ntype OwnCurrentUserPropsType = {\r\n    match: any\r\n    location: any\r\n    history: any\r\n}\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    getUsersList: ()=>void,\r\n    updateUser: (values: UserType, userId: number)=>void,\r\n    setUsersDataChanged: (isUsersDataChanged: boolean)=>void\r\n}\r\n\r\nexport type CurrentUserPropsType = MapPropsType & MapDispatchPropsType & OwnCurrentUserPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        usersList: state.users.usersList,\r\n        dateInterval: state.task.dateInterval,\r\n        errorMessage: state.task.errorMessage,\r\n        isInterval: state.task.isInterval,\r\n        taskSaveStatus: state.task.taskSaveStatus,\r\n        settings:state.auth.viewSettings,\r\n        appLocation: state.app.location,\r\n        viewSettings: state.auth.viewSettings,\r\n        isUsersDataChanged: state.users.isUsersDataChanged\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnCurrentUserPropsType, AppStateType>(mapStateToProps, \r\n    {getUsersList, updateUser, setUsersDataChanged: actions.setUsersDataChanged}) \r\n    (isMobile ? CurrentUserMobile : CurrentUser)\r\n    \r\n\r\n","import { List } from 'antd'\r\nimport React, { useEffect } from 'react'\r\nimport { Link, useRouteMatch } from 'react-router-dom'\r\nimport { ProjectsPropsType } from './ProjectsContainer'\r\n\r\nexport type OwnProjectsPropsType = {}\r\n\r\nconst Projects: React.FC<ProjectsPropsType> = (props) => {\r\n    useEffect(() => {\r\n        if (!props.isProjectListLoaded) {\r\n            props.getProjectList()\r\n        }\r\n    }, [props, props.isProjectListLoaded, props.projectList])\r\n\r\n    // const [projectList, setProjectList] = useState<Array<any>>()\r\n\r\n    let { url } = useRouteMatch();\r\n    \r\n    console.log(props)\r\n\r\n    return (\r\n        <>\r\n            <h4>Projects</h4>\r\n            <li>Add project</li>\r\n            <List\r\n                // header={<div>Header</div>}\r\n                // footer={<div>Footer</div>}\r\n                bordered\r\n                dataSource={props.projectList}\r\n                renderItem={item => (\r\n                    <List.Item\r\n                        // actions={[<a href=\"#\" key=\"list-loadmore-edit\">show</a>,]}\r\n                    >\r\n                         <Link to={url+'/'+item.id}>{item.name}</Link>\r\n                    </List.Item>\r\n                )}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Projects","import {connect} from 'react-redux'\r\nimport Projects, { OwnProjectsPropsType } from './Projects'\r\nimport { AppStateType } from '../../../redux/store'\r\nimport {getProjectList} from './../../../redux/projectReducer'\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    getProjectList: ()=>void,\r\n}\r\n\r\nexport type ProjectsPropsType = MapPropsType & MapDispatchPropsType & OwnProjectsPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        projectList: state.projects.projectList,\r\n        isProjectListLoaded: state.projects.isProjectLoaded\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnProjectsPropsType, AppStateType>(mapStateToProps, \r\n    {getProjectList}) \r\n    (Projects)\r\n    \r\n\r\n","import { Field, Form, FormikProps } from \"formik\"\r\nimport React, { ReactNode, useState } from \"react\"\r\nimport { AntInput } from \"../../../../../../utils/Formik/CreateAntField\"\r\nimport { validateRequired } from \"../../../../../../utils/Formik/ValidateFields\"\r\n\r\n\r\nconst InstansesForm: ((props: FormikProps<{}>) => ReactNode) = (props) => {\r\n    const [isDataChanged, setIsDataChanged] = useState(false)\r\n\r\n    const onChange = (val:any) => {\r\n        setIsDataChanged(true)\r\n    }\r\n    return(\r\n        <Form\r\n            className=\"form-container mt-2\"\r\n            onSubmit={props.handleSubmit}\r\n        >\r\n            <Field\r\n                component={AntInput}\r\n                name=\"name\"\r\n                type=\"text\"\r\n                label=\"Name\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n                onChange={onChange}\r\n            />\r\n            <Field\r\n                component={AntInput}\r\n                name=\"url\"\r\n                type=\"text\"\r\n                label=\"URL\"\r\n                submitCount={props.submitCount}\r\n                onChange={onChange}\r\n            />\r\n            <Field\r\n                component={AntInput}\r\n                name=\"ip\"\r\n                type=\"text\"\r\n                label=\"IP\"\r\n                submitCount={props.submitCount}\r\n                onChange={onChange}\r\n            />\r\n            <Field\r\n                component={AntInput}\r\n                name=\"login\"\r\n                type=\"text\"\r\n                label=\"Login\"\r\n                submitCount={props.submitCount}\r\n                onChange={onChange}\r\n            />\r\n            <Field\r\n                component={AntInput}\r\n                name=\"password\"\r\n                type=\"text\"\r\n                label=\"Password\"\r\n                submitCount={props.submitCount}\r\n                onChange={onChange}\r\n            />\r\n            <Field\r\n                component={AntInput}\r\n                name=\"folder\"\r\n                type=\"text\"\r\n                label=\"folder on server\"\r\n                submitCount={props.submitCount}\r\n                onChange={onChange}\r\n            />\r\n            {isDataChanged ?\r\n            <div className=\"submit-container\">\r\n                <button className=\"ant-btn ant-btn-primary\" type=\"submit\">\r\n                    Save\r\n                </button>\r\n            </div>\r\n            : null}\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default InstansesForm","import { Button } from 'antd'\r\nimport React from 'react'\r\nimport { FieldListPropsType } from './FieldListContainer'\r\n\r\n// type FieldListPropsType = {\r\n//     fields: Array<any>\r\n//     openModalToAddField: (target: any | null)=>void,\r\n//     deleteField:(fieldId: number)=>void\r\n// }\r\n\r\nconst FieldList: React.FC<FieldListPropsType> = (props) => {\r\n\r\n    const showCode = () => {\r\n        console.log(props)\r\n        props.setShowCodeModal(true, 'model', props.fields, props.targetName, [])\r\n    }\r\n\r\n    return(\r\n        <div key=\"fieldList\">\r\n            <div className=\"w-100 d-flex flex-row mt-2 mb-2\">\r\n                <Button type=\"primary\" className=\"mr-1 ml-auto\" onClick={()=>{console.log('check')}} >Check</Button>\r\n                <Button type=\"primary\" className=\"mr-4 ml-1\" onClick={showCode} >Code</Button>\r\n            </div>\r\n        {\r\n            props.fields.map( (item: any) => {\r\n                return(\r\n                    <div key={item.name}>\r\n                    <FieldRow \r\n                        fieldName={item.name}\r\n                        fieldType={item.type}\r\n                        isNulleble={item.isNulleble}\r\n                        isPrimary={item.isPrimary}\r\n                        isNew={false}\r\n                        openModalToAddField={props.openModalToAddField}\r\n                        fieldId={item.id}\r\n                        deleteField={props.deleteField}\r\n                        fieldParam={item.fieldParam}\r\n                    />\r\n                    </div>\r\n                ) \r\n            })\r\n        }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FieldList\r\n\r\ntype FieldRowPropsType = {\r\n    fieldName: string | undefined,\r\n    fieldType: string | undefined,\r\n    isNulleble?: boolean,\r\n    isPrimary?: boolean,\r\n    isNew: boolean,\r\n    fieldId: number,\r\n    fieldParam: string\r\n\r\n    openModalToAddField: (target: any | null)=>void,\r\n    deleteField:(fieldId: number)=>void\r\n}\r\n\r\nconst FieldRow: React.FC<FieldRowPropsType> = (props) => {\r\n\r\n    const deleteField = (fieldId: number) => {\r\n        props.deleteField(fieldId)\r\n    }\r\n    const rowBG = props.isPrimary ? 'bg-light' : null\r\n\r\n    return(\r\n        <div className={'row py-2 border '+rowBG}>\r\n            <div className=\"col\">{props.fieldName}</div>\r\n            <div className=\"col\">{props.fieldType}</div>\r\n            <div className=\"col\">{props.isNulleble ? 'null' : null}</div>\r\n            <div className=\"col\">\r\n                <Button type=\"ghost\" className=\"ml-2\" size=\"small\" onClick={()=>{props.openModalToAddField({...props})}}>Edit</Button>\r\n                <Button type=\"primary\" size=\"small\" className=\"ml-2\" onClick={()=>{ deleteField(props.fieldId) }}>Delete</Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import {connect} from 'react-redux'\r\nimport { AppStateType } from '../../../../../../redux/store'\r\nimport FieldList from './FieldList'\r\nimport {actions, codeTypeList} from './../../../../../../redux/codeReducer'\r\n\r\ntype OwnFieldListPropsType = {\r\n    fields: Array<any>\r\n    openModalToAddField: (target: any | null)=>void,\r\n    deleteField:(fieldId: number)=>void,\r\n    targetName: string,\r\n    targetData: Array<any>\r\n}\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    setShowCodeModal: (isShow: boolean, codeType: codeTypeList, codeRowsArray: Array<any>, codeTargetName: string, codeData: Array<any>) => void,\r\n}\r\n\r\nexport type FieldListPropsType = MapPropsType & MapDispatchPropsType & OwnFieldListPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnFieldListPropsType, AppStateType>(mapStateToProps, \r\n    {setShowCodeModal: actions.setShowCodeModal}) \r\n    (FieldList)\r\n    \r\n\r\n","import { Form, Field, FormikProps } from 'formik'\r\nimport React, { ReactNode, useState, useEffect } from 'react'\r\nimport { AntCheckbox, AntInput, AntSelect } from '../../../../../../utils/Formik/CreateAntField'\r\nimport { validateRequired } from '../../../../../../utils/Formik/ValidateFields'\r\nimport { SelectOptionType } from '../../../../../../Types/types'\r\nimport { Radio } from 'antd'\r\n// import { AntInput, AntSelect, AntTextArea, AntTimePicker } from '../../../utils/Formik/CreateAntField'\r\n// import { validateRequired } from '../../../utils/Formik/ValidateFields'\r\n// import ProjectForm from './Project/ProjectForm'\r\n\r\n\r\nconst FieldForm: ((props: FormikProps<{}>) => ReactNode) = (props) => {\r\n    // @ts-ignore\r\n    const [radioValue, setRadioValue] = useState(props.initialValues.fieldParam)\r\n\r\n    useEffect( ()=> {\r\n        // @ts-ignore\r\n        setRadioValue(props.initialValues.fieldParam)\r\n    },[props.initialValues])\r\n\r\n    const onRadioChange = (e: any) => {\r\n        setRadioValue(e.target.value)\r\n        props.setValues({ ...props.values, fieldParam: e.target.value })\r\n        console.log('Добавили значение fieldParam: ',e.target.value)\r\n    }\r\n    const newFieldTypepOtions: Array<SelectOptionType> = [\r\n        {\r\n            name: 'BOOLEAN',\r\n            value: 'boolean'\r\n        },\r\n        {\r\n            name: 'BIGINT',\r\n            value: 'bigint'\r\n        },\r\n        {\r\n            name: 'VARCHAR',\r\n            value: 'varchar'\r\n        },\r\n        {\r\n            name: 'JSON',\r\n            value: 'json'\r\n        },\r\n        {\r\n            name: 'TIMESTAMP',\r\n            value: 'timestamp'\r\n        },\r\n        {\r\n            name: 'TEXT',\r\n            value: 'text'\r\n        }\r\n\r\n    ]\r\n\r\n    console.log(props.initialValues)\r\n    console.log(radioValue)\r\n\r\n    return (\r\n        <Form\r\n            className=\"form-container\"\r\n            onSubmit={props.handleSubmit}\r\n        >\r\n            <Field\r\n                component={AntInput}\r\n                name=\"newFieldName\"\r\n                type=\"text\"\r\n                label=\"New fieldName\"\r\n                validate={validateRequired}\r\n                hasFeedback\r\n            // onChange={onChangeNewFieldName}\r\n            />\r\n            <Field\r\n                component={AntSelect}\r\n                selectOptions={newFieldTypepOtions}\r\n                name=\"newFieldType\"\r\n                type=\"select\"\r\n                label=\"Field type\"\r\n                submitCount={props.submitCount}\r\n            />\r\n            <Field\r\n                component={AntCheckbox}\r\n                name=\"isNulleble\"\r\n                type=\"checkbox\"\r\n                label=\"isNulleble\"\r\n                submitCount={props.submitCount}\r\n            // onClick={submitBackEnd}\r\n            // onSelect={submitBackEnd}\r\n            />\r\n            <Field\r\n                component={AntCheckbox}\r\n                name=\"isPrimary\"\r\n                type=\"checkbox\"\r\n                label=\"isPrimary\"\r\n                submitCount={props.submitCount}\r\n            />\r\n\r\n            {/* <Radio.Group onChange={onRadioChange} value={radioValue} name=\"fieldParam\">\r\n                <Radio value={'fillable'}>Fillable</Radio>\r\n                <Radio value={'hidden'}>Hidden</Radio>\r\n                <Radio value={'readOnly'}>ReadOnly</Radio>\r\n            </Radio.Group> */}\r\n\r\n            <div className=\"ant-row ant-form-item\">\r\n                <div className=\"ant-col ant-form-item-label\">\r\n                    <label>\r\n                        Picked\r\n                    </label>\r\n                </div>\r\n                <div className=\"mt-1\">\r\n                    <Radio.Group onChange={onRadioChange} value={radioValue} name=\"fieldParam\">\r\n                        <Radio value={'fillable'}>Fillable</Radio>\r\n                        <Radio value={'hidden'}>Hidden</Radio>\r\n                        <Radio value={'readOnly'}>ReadOnly</Radio>\r\n                    </Radio.Group>\r\n                </div>\r\n                \r\n            {/* <div role=\"group\" aria-labelledby=\"my-radio-group\">\r\n                    <label>\r\n                        <Field type=\"radio\" name=\"picked\" value=\"One\" label=\"one\" />\r\n                        One\r\n                    </label>\r\n                    <label>\r\n                        <Field type=\"radio\" name=\"picked\" value=\"Two\" />\r\n                        Two\r\n                    </label>\r\n                </div>*/}\r\n            </div> \r\n\r\n            <div className=\"submit-container\" >\r\n                <button className=\"ant-btn ant-btn-primary\" type=\"submit\">\r\n                    Save\r\n                </button>\r\n            </div>\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default FieldForm","import { Form, Field, FormikProps } from 'formik'\r\nimport React, { ReactNode, useState, useEffect } from 'react'\r\nimport { AntCheckbox, AntInput, AntSelect } from '../../../../../../utils/Formik/CreateAntField'\r\nimport { validateRequired } from '../../../../../../utils/Formik/ValidateFields'\r\nimport {SelectOptionType} from '../../../../../../Types/types'\r\n// import { AntInput, AntSelect, AntTextArea, AntTimePicker } from '../../../utils/Formik/CreateAntField'\r\n// import { validateRequired } from '../../../utils/Formik/ValidateFields'\r\n// import ProjectForm from './Project/ProjectForm'\r\n\r\n\r\nconst ModelForm: ((props: FormikProps<{}>) => ReactNode) = (props) => {\r\n    return (\r\n        <Form\r\n            className=\"form-container\"\r\n            onSubmit={props.handleSubmit}\r\n        >\r\n            <Field\r\n                component={AntInput}\r\n                name=\"name\"\r\n                type=\"text\"\r\n                label=\"Model name\"\r\n                validate={validateRequired}\r\n                hasFeedback\r\n                // onChange={onChangeNewFieldName}\r\n            />\r\n            <Field\r\n                component={AntInput}\r\n                name=\"folder\"\r\n                type=\"text\"\r\n                label=\"Model folder\"\r\n                // validate={validateRequired}\r\n                // hasFeedback\r\n                // onChange={onChangeNewFieldName}\r\n            />\r\n            <div className=\"submit-container\">\r\n                <button className=\"ant-btn ant-btn-primary\" type=\"submit\">\r\n                    Save1\r\n                </button>\r\n            </div>\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default ModelForm","import React, {useEffect} from 'react'\r\nimport { FieldType } from '../../../../api/projectAPI'\r\nimport {ModelCodePropsType} from './ModelCodeContainer'\r\n\r\nconst ModelCode: React.FC<ModelCodePropsType> = (props) => {\r\n    useEffect( ()=> {\r\n        console.log('props.codeTargetName changed')\r\n    },[props.codeTargetName])\r\n\r\n    console.log(props)\r\n\r\n    // str[0].toUpperCase() + str.slice(1)\r\n    return(\r\n        <div>\r\n            <li>!!!table name</li>\r\n            <li>Field type</li>\r\n            <li>namespace</li>\r\n\r\n            <h5>ModelCode:</h5>\r\n\r\n            <code>{'<?php'}</code>\r\n            <br/><br/>\r\n            <code>{'namespace App;'}</code>\r\n            <br/><br/>\r\n            <code>{'use Illuminate\\\\Database\\\\Eloquent\\\\Model;'}</code><br/>\r\n            {props.codeData.soft_delete ? \r\n                <><code>{'use Illuminate\\\\Database\\\\Eloquent\\\\SoftDeletes;'}</code><br/></>\r\n            :\r\n                null\r\n            }\r\n            {props.codeData.db ? \r\n                <><code>{'use Illuminate\\\\Support\\\\Facades\\\\DB;'}</code><br/></>\r\n            :\r\n                null\r\n            }\r\n            \r\n            \r\n            <br/>\r\n            <code>{'class '+props.codeTargetName[0].toUpperCase()+props.codeTargetName.slice(1)+' extends Model'}</code><br/>\r\n            \r\n            <code>{'{'}</code><br/>\r\n\r\n            {props.codeData.soft_delete ? \r\n                <><code>{tab(1,'use SoftDeletes;')}</code><br/><br/></>\r\n            :\r\n                null\r\n            }\r\n            \r\n            {/* 'protected $table = 'Models_instanses';' */}\r\n            <code>{tab(1,'protected $table = \"'+props.codeTargetName+'\";')}</code><br/>\r\n\r\n            <Fillable codeRowsArray={props.codeRowsArray}/>\r\n\r\n            <Hidden codeRowsArray={props.codeRowsArray}/>\r\n\r\n            <code>{'}'}</code><br/>\r\n\r\n            {/* {props.codeRowsArray.map( (item: any) => {\r\n                return(\r\n                    <div>\r\n                        {item.name}\r\n                    </div>\r\n                )\r\n            })} */}\r\n\r\n            <h5>Migration code:</h5>\r\n\r\n            <code>{'<?php'}</code>\r\n            <br/><br/>\r\n            <code>{'use Illuminate\\\\Database\\\\Migrations\\\\Migration;'}</code><br/>\r\n            <code>{'use Illuminate\\\\Database\\\\Schema\\\\Blueprint;'}</code><br/>\r\n            <code>{'use Illuminate\\\\Support\\\\Facades\\\\Schema;'}</code><br/>\r\n            <br/>\r\n            <code>{'class Create'+props.codeTargetName[0].toUpperCase()+props.codeTargetName.slice(1)+'Table extends Migration'}</code><br/>\r\n            <code>{'{'}</code><br/>\r\n            <code>{tab(1,'public function up()')}</code><br/>\r\n            <code>{tab(1,'{')}</code><br/>\r\n            <code>{tab(2,'Schema::create(\"'+props.codeTargetName+'\", function (Blueprint $table) {')}</code><br/>\r\n\r\n                {props.codeRowsArray.map( (item: any) => {\r\n                    const isNulleble = item.isNulleble ? '->nullable()' : ''\r\n                    return(\r\n                        <><code>{tab(3,'$table->'+getFieldtype(item)+'(\"'+item.name+'\")'+isNulleble+';')}</code><br/></>\r\n                    )\r\n                })}\r\n                {props.codeData.soft_delete ? \r\n                <><code>{tab(3,'$table->softDeletes();')}</code><br/></>\r\n                : null}\r\n                <><code>{tab(3,'$table->timestamps();')}</code><br/></>\r\n\r\n            <code>{tab(2,'});')}</code><br/>\r\n            <code>{tab(1,'}')}</code><br/>\r\n\r\n            <code>{tab(1,'}')}</code><br/>\r\n\r\n            <br/>\r\n            <code>{tab(1,'public function down()')}</code><br/>\r\n            <code>{tab(1,'{')}</code><br/>\r\n            <code>{tab(2,'Schema::dropIfExists(\"'+props.codeTargetName+'\");')}</code><br/>\r\n            <code>{tab(1,'}')}</code><br/>\r\n            <code>{'}'}</code><br/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ModelCode\r\n\r\ntype FillableType = {\r\n    codeRowsArray: Array<any>\r\n}\r\n\r\nconst Fillable: React.FC<any> = (props) => {\r\n    const fields: Array<any> = props.codeRowsArray.filter( (item: any) => item.fieldParam === 'fillable')\r\n    if (fields.length > 0) {\r\n        return(\r\n            <div>\r\n                <br/>\r\n                <code>{tab(1,'protected $fillable = [')}</code><br/>\r\n                \r\n                {fields.map( (item: any) => {\r\n                    return(\r\n                        <div key={item.name}>\r\n                        <>&nbsp;&nbsp;&nbsp;&nbsp;</>\r\n                        <>&nbsp;&nbsp;&nbsp;&nbsp;</>\r\n                        <>&nbsp;&nbsp;&nbsp;&nbsp;</>\r\n                        <>&nbsp;&nbsp;&nbsp;&nbsp;</>\r\n                        <code>{'\"'+item.name+'\", '}</code><br/>\r\n                        </div>\r\n                    )\r\n                })}\r\n                \r\n                <code>{tab(1,'];')}</code><br/>\r\n            </div>\r\n        )\r\n    } else {\r\n        return <></>\r\n    }\r\n}\r\n\r\nconst Hidden: React.FC<any> = (props) => {\r\n    const fields: Array<any> = props.codeRowsArray.filter( (item: any) => item.fieldParam === 'hidden')\r\n    if (fields.length > 0) {\r\n        return(\r\n            <>\r\n            <br/>\r\n            <code>{ tab(1,'protected $hidden = [') }</code><br/>\r\n            \r\n            {fields.map( (item: any) => {\r\n                return(\r\n                    <>\r\n                    <>&nbsp;&nbsp;&nbsp;&nbsp;</>\r\n                    <>&nbsp;&nbsp;&nbsp;&nbsp;</>\r\n                    <>&nbsp;&nbsp;&nbsp;&nbsp;</>\r\n                    <>&nbsp;&nbsp;&nbsp;&nbsp;</>\r\n                    <code>{'\"'+item.name+'\", '}</code><br/></>\r\n                )\r\n            })}\r\n            \r\n            <code>{tab(1,'];')}</code><br/>\r\n            </>\r\n        )\r\n    } else {\r\n        return <></>\r\n    }\r\n}\r\n\r\nexport const tab = (count: number, text?: string) => {\r\n    const getTabs = ():Array<JSX.Element> => {\r\n        let i = 1\r\n        let tabs: Array<JSX.Element> = []\r\n        while (i<=count) {\r\n            i++\r\n            tabs.push(\r\n                <span key={i}>\r\n                    &nbsp;&nbsp;&nbsp;&nbsp;\r\n                </span>\r\n            )\r\n        }\r\n        return tabs\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {getTabs()}\r\n            {text}\r\n        </>\r\n    )\r\n}\r\n\r\nconst getFieldtype = (field: FieldType ) => {\r\n    console.log(field.name, '=',field.type)\r\n    if (field.isPrimary) {\r\n        return 'bigIncrements'\r\n    } else {\r\n        switch (field.type) {\r\n            case 'bigint':\r\n                return 'bigInteger'\r\n    \r\n            case 'varchar':\r\n                return 'string'\r\n    \r\n            default:\r\n                return field.type\r\n        }\r\n    }\r\n}","import {connect} from 'react-redux'\r\nimport { AppStateType } from './../../../../redux/store'\r\nimport ModelCode from './ModelCode'\r\nimport {actions, codeTypeList} from './../../../../redux/codeReducer'\r\n\r\ntype OwnModelCodePropsType = {\r\n    \r\n}\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    setShowCodeModal: (isShow: boolean, codeType: codeTypeList, codeRowsArray: Array<any>, codeTargetName: string, codeData: Array<any>) => void,\r\n}\r\n\r\nexport type ModelCodePropsType = MapPropsType & MapDispatchPropsType & OwnModelCodePropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        isModalVisible: state.code.isModalVisible,\r\n        codeRowsArray: state.code.codeRowsArray,\r\n        codeType: state.code.codeType,\r\n        codeTargetName: state.code.codeTargetName,\r\n        codeData: state.code.codeData\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnModelCodePropsType, AppStateType>(mapStateToProps, \r\n    {setShowCodeModal: actions.setShowCodeModal}) \r\n    (ModelCode)\r\n    \r\n\r\n","import {Modal} from 'antd'\r\nimport React, {useState, useEffect} from 'react'\r\nimport { CodeModalPropsType } from './CodeModalContainer'\r\nimport ModelCodeContainer from './Model/ModelCodeContainer'\r\n\r\nconst CodeModal: React.FC<CodeModalPropsType> = (props) => {\r\n    const onClose = () => {\r\n        props.setShowCodeModal(false, props.codeType, props.codeRowsArray, props.codeTargetName, [])\r\n    }\r\n\r\n    const getTargetComponennt = () => {\r\n        switch (props.codeType) {\r\n            case 'model':\r\n                return <ModelCodeContainer />\r\n        \r\n            default:\r\n                return <div>No data</div>\r\n        }\r\n    }\r\n\r\n    return(\r\n        <Modal title=\"Code modal\" visible={props.isModalVisible} onOk={onClose} onCancel={onClose} width={1000}>\r\n            {getTargetComponennt()}\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default CodeModal\r\n\r\n","import {connect} from 'react-redux'\r\nimport { AppStateType } from './../../../redux/store'\r\nimport CodeModal from './CodeModal'\r\nimport {actions, codeTypeList} from './../../../redux/codeReducer'\r\n\r\ntype OwnCodeModalPropsType = {\r\n    \r\n}\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    setShowCodeModal: (isShow: boolean, codeType: codeTypeList, codeRowsArray: Array<any>, codeTargetName: string, codeData: Array<any>) => void,\r\n}\r\n\r\nexport type CodeModalPropsType = MapPropsType & MapDispatchPropsType & OwnCodeModalPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        isModalVisible: state.code.isModalVisible,\r\n        codeRowsArray: state.code.codeRowsArray,\r\n        codeType: state.code.codeType,\r\n        codeTargetName: state.code.codeTargetName\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnCodeModalPropsType, AppStateType>(mapStateToProps, \r\n    {setShowCodeModal: actions.setShowCodeModal}) \r\n    (CodeModal)\r\n    \r\n\r\n","import { Button, Collapse, Empty  } from 'antd'\r\nimport Modal from 'antd/lib/modal/Modal'\r\nimport { Field, Form, Formik, FormikProps, FormikValues } from 'formik'\r\nimport React, { ReactNode, useEffect, useState } from 'react'\r\nimport { FieldType, ModelsType } from '../../../../../../api/projectAPI'\r\nimport { AntCheckbox, AntInput } from '../../../../../../utils/Formik/CreateAntField'\r\nimport { validateRequired } from '../../../../../../utils/Formik/ValidateFields'\r\nimport FieldList from './FieldListContainer'\r\nimport FieldForm from './FieldForm'\r\nimport { ModelsPropsType } from './ModelsContainer'\r\nimport ModelForm from './ModelForm'\r\nimport CodeModalContainer from '../../../../Code/CodeModalContainer'\r\nimport { useDispatch } from 'react-redux'\r\nimport {createController as createControllerThunk } from './../../../../../../redux/projectReducer'\r\n\r\nconst { Panel } = Collapse\r\n\r\nconst Models: React.FC<ModelsPropsType> = (props) => {\r\n    useEffect( ()=>{\r\n        props.getModelsList(props.backendId)\r\n    }, [])\r\n\r\n    const [isModalVisible, setIsModalVisible] = useState(false)\r\n    const [isCodeVisible, setIsCodeVisible] = useState(false)\r\n\r\n    const addModel = () => {\r\n        console.log('addModel')\r\n        setIsModalVisible(!isModalVisible)\r\n    }\r\n\r\n    const handleOk = () => {setIsModalVisible(!isModalVisible)}\r\n    const handleCancel = () => {setIsModalVisible(!isModalVisible)}\r\n\r\n    const handleSubmit = (vals: any) => {\r\n        console.log(vals)\r\n        console.log(props)\r\n        props.createModel({\r\n            ...vals,\r\n            backend_id: props.backendId\r\n        })\r\n    }\r\n\r\n    const callback = (key:any) => {\r\n        console.log(key)\r\n        console.log(props.modelsList)\r\n        console.log(props.modelsList.filter(item => item.id === Number(key[0]))[0])\r\n        const target = props.modelsList.filter(item => item.id === Number(key[0]))[0]\r\n        if (target) {\r\n            props.setCodeTarget(\r\n                target.name,\r\n                {\r\n                    db: target.db, \r\n                    soft_delete: target.soft_delete\r\n                }\r\n            )\r\n        }\r\n        \r\n    }\r\n\r\n    return(\r\n        <>\r\n            <div className=\"w-100 d-flex flex-row-reverse\">\r\n                <Button className=\"mr-4 ml-auto mb-3\" type=\"primary\" onClick={addModel}>Add Model</Button>\r\n            </div>\r\n\r\n            <Collapse defaultActiveKey={[]} onChange={callback}>\r\n                {\r\n                    props.modelsList ?\r\n                    props.modelsList.map(item => {\r\n                        return(\r\n                            <Panel header={item.name} key={item.id ? item.id.toString() : 'null'}>\r\n                                <ModelFormItem modelItem={item} changePanel={props.changePanel} updateModel={props.updateModel} />\r\n                            </Panel>\r\n                        )\r\n                    })\r\n                    : <div>No DATA</div>\r\n                }\r\n            </Collapse>\r\n            <Modal title=\"Create new Model\" visible={isModalVisible} onOk={handleOk} onCancel={handleCancel}>\r\n                <Formik\r\n                    // initialValues={initialModalValues}\r\n                    initialValues={{}}\r\n                    onSubmit={handleSubmit}\r\n                    enableReinitialize={true}\r\n                >\r\n                    {ModelForm}\r\n                </Formik>\r\n            </Modal>\r\n\r\n            <CodeModalContainer />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Models\r\n\r\ntype ModelFormItemPropsType = {\r\n    modelItem: ModelsType,\r\n    updateModel: (values: ModelsType, modelId: number) => void,\r\n    changePanel: (closeKey: string, openKey: Array<string>) => void,\r\n}\r\n\r\nconst ModelFormItem: React.FC<ModelFormItemPropsType> = (props) => {\r\n    console.log(props)\r\n    let fields: Array<FieldType>\r\n    if (Array.isArray(props.modelItem.fields)) {\r\n        fields = props.modelItem.fields\r\n    } else {\r\n        fields = JSON.parse(props.modelItem.fields)\r\n    }\r\n\r\n    type fieldsDataType = {[name: string]: string}\r\n    let fieldsdata: Array<FieldType> = []\r\n    let fieldInit:fieldsDataType = {}\r\n    if (fields) {\r\n        for (let index = 0; index < fields.length; index++) {\r\n            const field = fields[index];\r\n            fieldsdata.push(field)\r\n            fieldInit['field_'+field.name] = field.type\r\n        }\r\n    }\r\n\r\n    const handleSubmit = (formValues:any) => {\r\n        const oldValue = {...props.modelItem, fields: fieldsdata, ...fieldInit}\r\n        console.log('formValues: ', formValues)\r\n\r\n        // compere model\r\n        let ismodelChange = false\r\n        if ( \r\n            oldValue.name !== formValues.name\r\n            || oldValue.db !== formValues.db\r\n            || oldValue.soft_delete !== formValues.soft_delete\r\n            ) {\r\n            ismodelChange = true\r\n        }\r\n\r\n        console.log(props.modelItem)\r\n\r\n        const newFieldData: ModelsType = {\r\n            // ...props.modelItem,\r\n            fields: JSON.stringify(formValues.fields),\r\n            name: formValues.name,\r\n            backend_id: props.modelItem.backend_id,\r\n            id: props.modelItem.id,\r\n            db: formValues.db,\r\n            soft_delete: formValues.soft_delete\r\n        }\r\n\r\n        console.log(newFieldData)\r\n        props.updateModel(newFieldData, props.modelItem.id ? props.modelItem.id : 0)\r\n    }\r\n\r\n    console.log({...props.modelItem, fields: fieldsdata, ...fieldInit})\r\n    console.log(props.changePanel)\r\n    return(\r\n        <Formik\r\n            enableReinitialize={true}\r\n            initialValues={ {...props.modelItem, fields: fieldsdata, ...fieldInit, changePanel: props.changePanel} }\r\n            onSubmit={handleSubmit}\r\n            own={props.changePanel}\r\n        >\r\n            {ModelView}\r\n        </Formik>\r\n    )\r\n}\r\n\r\ntype OwnModelViewPropsType = {\r\n    own: any\r\n}\r\n\r\nconst ModelView: ((props: OwnModelViewPropsType & FormikProps<FormikValues>) => ReactNode) = (props) => {\r\n    const [initialFieldValues, setInitialFieldValues] = useState(props.initialValues)\r\n\r\n    type InitialModalValuesType = {\r\n        newFieldName: string,\r\n        newFieldType: string,\r\n        isNulleble: boolean,\r\n        isPrimary: boolean,\r\n        isNew: boolean,\r\n        id?: number,\r\n        fieldParam?: string,\r\n    }\r\n    const emptyInitialModalValues: InitialModalValuesType = {\r\n        newFieldName: '',\r\n        newFieldType: '',\r\n        isNulleble: false,\r\n        isPrimary: false,\r\n        isNew: true,\r\n        fieldParam: '',\r\n    }\r\n\r\n    const [initialModalValues, setInitialModalValues] = useState<InitialModalValuesType>(emptyInitialModalValues)\r\n    const [initialValues2 , setInitialValues2] = useState(props.initialValues)\r\n\r\n    useEffect( ()=>{\r\n    }, [initialModalValues])\r\n\r\n    const onChange = (val:any) => {\r\n        console.log('onChange in Models')\r\n        setIsDataChanged(true)\r\n    }\r\n\r\n    const openModalToAddField = (target: any | null) => {\r\n        console.log('openModalToAddField', target)\r\n\r\n        if (!target.isNew) {\r\n            console.log('ОБНУЛЯЕМ ФОРМУ', target)\r\n            setInitialModalValues({\r\n                newFieldName: target.fieldName,\r\n                newFieldType: target.fieldType,\r\n                isNulleble: target.isNulleble,\r\n                isPrimary: target.isPrimary,\r\n                isNew: false,\r\n                id: target.fieldId,\r\n                fieldParam: target.fieldParam\r\n            })\r\n        } else {\r\n            setInitialModalValues({...emptyInitialModalValues})\r\n            console.log('СОЗДАЕМ НОВЫЙ ФИЛД', initialModalValues)\r\n            \r\n        }\r\n        \r\n        setIsModalVisible(true)\r\n    }\r\n\r\n    const [isDataChanged, setIsDataChanged] = useState(false)\r\n\r\n    const [isModalVisible, setIsModalVisible] = useState(false)\r\n\r\n    const handleOk = () => {\r\n        console.log('handleOk')\r\n        setIsModalVisible(false)\r\n    }\r\n\r\n    const handleCancel = () => {\r\n        console.log('handleCancel')\r\n        setInitialModalValues(emptyInitialModalValues)\r\n        console.log(initialModalValues)\r\n        setIsModalVisible(false)\r\n    }\r\n\r\n    const deleteField = (fieldId: number) => {\r\n        console.log('deleteField', fieldId)\r\n        console.log(props)\r\n        \r\n        // @ts-ignore\r\n        const fields = initialFieldValues.fields.filter( field => field.id !== fieldId ) \r\n        console.log(fields)\r\n        setInitialValues2( {...props.initialValues, fields: fields} )\r\n        setInitialFieldValues( {...initialFieldValues, fields: fields} )\r\n        props.setValues({\r\n            ...props.values,\r\n            fields: fields\r\n        })\r\n        props.handleSubmit()\r\n    }\r\n\r\n    const handleSubmit = (modalFieldFormValues:any, actions: any) => {\r\n        console.log('handleSubmit', modalFieldFormValues)\r\n        if (!modalFieldFormValues.isNew) {\r\n            let isUpdate = false\r\n            // @ts-ignore\r\n            const newFields = initialFieldValues.fields.map( (item) => {\r\n                if (modalFieldFormValues.id === item.id) {\r\n                    if (item.name !== modalFieldFormValues.newFieldName || \r\n                        item.type !== modalFieldFormValues.newFieldType ||\r\n                        item.isNulleble !== modalFieldFormValues.isNulleble ||\r\n                        item.isPrimary !== modalFieldFormValues.isPrimary ||\r\n                        item.fieldParam !== modalFieldFormValues.fieldParam\r\n                        ) {\r\n                        isUpdate = true\r\n                        return {\r\n                            description: \"\",\r\n                            id: modalFieldFormValues.id,\r\n                            name: modalFieldFormValues.newFieldName,\r\n                            isPrimary: modalFieldFormValues.isPrimary,\r\n                            type: modalFieldFormValues.newFieldType,\r\n                            isNulleble: modalFieldFormValues.isNulleble,\r\n                            fieldParam: modalFieldFormValues.fieldParam\r\n                        }\r\n                    } else {\r\n                        return item\r\n                    }\r\n                }\r\n                return item\r\n            } )\r\n\r\n            if (isUpdate) {\r\n                setInitialValues2( {...props.initialValues, fields: newFields} )\r\n                setInitialFieldValues( {...initialFieldValues, fields: newFields} )\r\n                console.log('NEED DML!!!!', props)\r\n                props.setValues({\r\n                    ...props.values,\r\n                    fields: newFields\r\n                })\r\n                props.handleSubmit()\r\n            }\r\n        } else {\r\n            console.log('NEW FIELD')\r\n            // @ts-ignore\r\n            let newFields = initialFieldValues.fields\r\n            newFields.push({               \r\n                // @ts-ignore\r\n                id: props.initialValues.fields.length+1,\r\n                name: modalFieldFormValues.newFieldName,\r\n                isPrimary: modalFieldFormValues.isPrimary,\r\n                type: modalFieldFormValues.newFieldType,\r\n                isNulleble: modalFieldFormValues.isNulleble,\r\n                fieldParam: modalFieldFormValues.fieldParam,\r\n                description: \"\",\r\n            })\r\n            setInitialValues2( {...props.initialValues, fields: newFields} )\r\n\r\n            console.log('NEED DML!!!!', props)\r\n            props.setValues({\r\n                ...props.values,\r\n                fields: newFields\r\n            })\r\n            props.handleSubmit()\r\n        }\r\n        actions.resetForm()\r\n        setInitialModalValues(modalFieldFormValues)\r\n    }\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const createController = () => {\r\n\r\n        // console.log('createController: ', props)\r\n        let newController = {\r\n            name: props.initialValues.name+'Controller',\r\n            models: JSON.stringify([props.initialValues.id]) ,\r\n            backend_id: props.initialValues.backend_id,\r\n            isResource: true\r\n        }\r\n        // console.log('newController', newController)\r\n        props.initialValues.changePanel('', ['3'])\r\n        dispatch(createControllerThunk(newController))\r\n    }\r\n\r\n    return(\r\n        <>\r\n        <Form\r\n            className=\"form-container mt-2\"\r\n            onSubmit={props.handleSubmit}\r\n        >\r\n            <Field\r\n                component={AntInput}\r\n                name=\"name\"\r\n                type=\"text\"\r\n                label=\"Name\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n                onChange={onChange}\r\n            />\r\n            <Field\r\n                component={AntInput}\r\n                name=\"folder\"\r\n                type=\"text\"\r\n                label=\"Folder\"\r\n                submitCount={props.submitCount}\r\n                onChange={onChange}\r\n            />\r\n\r\n            <Field\r\n                component={AntCheckbox}\r\n                name=\"soft_delete\"\r\n                type=\"checkbox\"\r\n                label=\"Soft delete\"\r\n                onChange={onChange}\r\n                submitCount={props.submitCount}\r\n            />\r\n\r\n            <Field\r\n                component={AntCheckbox}\r\n                name=\"db\"\r\n                type=\"checkbox\"\r\n                label=\"Use DB\"\r\n                onChange={onChange}\r\n                submitCount={props.submitCount}\r\n            />\r\n\r\n            {isDataChanged ?\r\n                <div className=\"submit-container\">\r\n                    <button className=\"ant-btn ant-btn-primary\" type=\"submit\">\r\n                        Save\r\n                    </button>\r\n                </div>\r\n            : null}\r\n\r\n            <div className=\"w-100 d-flex flex-row mt-2 mb-2\">\r\n                <h5>Field List:</h5>\r\n                {/* <Button type=\"primary\" className=\"mr-1 ml-auto\" onClick={showCode} >Code</Button> */}\r\n                <Button className=\"mr-4 ml-auto\" type=\"primary\" onClick={()=>{openModalToAddField({isNew: true})}}>\r\n                    Add Field\r\n                </Button>\r\n            </div>\r\n            \r\n            <FieldList \r\n                fields={\r\n                // @ts-ignore\r\n                initialValues2.fields\r\n                }\r\n                openModalToAddField={openModalToAddField}\r\n                deleteField={deleteField}\r\n                targetName='user'\r\n                targetData={[]}\r\n            />\r\n\r\n            <div className=\"w-100 d-flex flex-row mt-5 mb-2\">\r\n                <h5>Methods:</h5><Button className=\"mr-4 ml-auto\" type=\"primary\">Add method</Button>\r\n            </div>\r\n\r\n            <div className=\"w-100 d-flex flex-row mt-5 mb-2\">\r\n                \r\n                <h5 className=\"mr-auto ml-auto\">Create : {\r\n                    // @ts-ignore\r\n                    props.initialValues.name\r\n                }Controller\r\n                <Button onClick={createController} className=\"ml-4\" type=\"primary\">Create</Button>\r\n                </h5>\r\n            </div>\r\n        </Form>\r\n\r\n        <Modal title=\"New Field Form\" visible={isModalVisible} onOk={handleOk} onCancel={handleCancel}>\r\n            <Formik\r\n                initialValues={initialModalValues}\r\n                onSubmit={handleSubmit}\r\n                enableReinitialize={true}\r\n            >\r\n                {FieldForm}\r\n            </Formik>\r\n        </Modal>\r\n\r\n        </>\r\n    )\r\n}","import {connect} from 'react-redux'\r\nimport Models from './Models'\r\nimport { AppStateType } from '../../../../../../redux/store'\r\nimport { getModelsList, updateModel, createModel } from '../../../../../../redux/projectReducer'\r\nimport { ModelsType } from '../../../../../../api/projectAPI'\r\nimport {actions} from './../../../../../../redux/codeReducer'\r\n\r\ntype OwnModelsPropsType = {\r\n    backendId: number,\r\n    changePanel: (closeKey: string, openKey: Array<string>) => void,\r\n}\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    getModelsList: (backendId: number) => void\r\n    updateModel: (values: ModelsType, modelId: number) => void,\r\n    createModel: (values: ModelsType) => void\r\n    setCodeTarget: (codeTargetName: string, codeData: any) => void\r\n}\r\n\r\nexport type ModelsPropsType = MapPropsType & MapDispatchPropsType & OwnModelsPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        modelsList: state.projects.modelsList\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnModelsPropsType, AppStateType>(mapStateToProps, \r\n    {getModelsList, updateModel, createModel, setCodeTarget: actions.setCodeTarget}) \r\n    (Models)\r\n    \r\n\r\n","import { Form, Field, FormikProps } from 'formik'\r\nimport React, { ReactNode, useState, useEffect } from 'react'\r\nimport { AntCheckbox, AntInput, AntSelect } from '../../../../../../utils/Formik/CreateAntField'\r\nimport { validateRequired } from '../../../../../../utils/Formik/ValidateFields'\r\nimport {SelectOptionType} from '../../../../../../Types/types'\r\n\r\nconst ControllerForm: ((props: FormikProps<{}>) => ReactNode) = (props) => {\r\n    return (\r\n        <Form\r\n            className=\"form-container\"\r\n            onSubmit={props.handleSubmit}\r\n        >\r\n            <Field\r\n                component={AntInput}\r\n                name=\"name\"\r\n                type=\"text\"\r\n                label=\"Controller name\"\r\n                validate={validateRequired}\r\n                hasFeedback\r\n            />\r\n            <Field\r\n                component={AntInput}\r\n                name=\"folder\"\r\n                type=\"text\"\r\n                label=\"Model folder\"\r\n            />\r\n\r\n            {/* <Field\r\n                component={AntSelect}\r\n                name=\"models\"\r\n                type=\"select\"\r\n                label=\"Including Models\"\r\n                mode=\"multiple\"\r\n                selectOptions={modelsListOptions}\r\n                // onSelect = {onSelect}\r\n            /> */}\r\n\r\n            <div className=\"submit-container\">\r\n                <button className=\"ant-btn ant-btn-primary\" type=\"submit\">\r\n                    Save\r\n                </button>\r\n            </div>\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default ControllerForm\r\n\r\nconst modelsListOptions = [\r\n    {\r\n        name: 'Old',\r\n        value: 1\r\n    },\r\n    {\r\n        name: 'New',\r\n        value: 2\r\n    },\r\n    {\r\n        name: 'Load From SRC',\r\n        value: 3\r\n    },\r\n]","import React from 'react'\r\nimport { ControllerMethodsType } from '../../../../../../../api/ControllerMethodsAPI'\r\nimport { ControllersType } from '../../../../../../../api/projectAPI'\r\nimport { tab } from '../../../../../Code/Model/ModelCode'\r\nimport { ResponreItemsType, ResponseType } from './ControllerMethodsForm'\r\n\r\ntype ControllerMethodsCodePropsType = {\r\n    methodData: ControllerMethodsType | null,\r\n    controllerData: ControllersType\r\n}\r\n\r\nconst ControllerMethodsCode: React.FC<ControllerMethodsCodePropsType> = (props) => {\r\n\r\n    let request: Array<any> = []\r\n    if (props.methodData?.request) {\r\n        // console.log(JSON.parse(props.methodData?.request))\r\n        request = JSON.parse(props.methodData?.request)\r\n    }\r\n\r\n    console.log('ControllerMethodsCode props:',props)\r\n\r\n    return (\r\n        <div>\r\n            {/* <h5>ControllerMethodsCode:</h5> */}\r\n            <code>{tab(1, '/**')}</code><br />\r\n            <code>{tab(1, '* Descriptions')}</code><br />\r\n            {request.map(item => {\r\n                return (\r\n                    <div key={item.name}>\r\n                        <code key={item.name}>{tab(1, '* @param  \\\\Illuminate\\\\Http\\\\' + item.type + '  $' + item.name)}</code><br />\r\n                    </div>\r\n                )\r\n            })}\r\n            <code>{tab(1, '* @return \\\\Illuminate\\\\Http\\\\Response')}</code><br />\r\n            <code>{tab(1, '*/')}</code><br />\r\n\r\n            <code>{tab(1, 'public function ' + props.methodData?.name + '(')}</code>\r\n\r\n            {request.length > 0 ?\r\n                request.map( (item, index: number) => {\r\n                    // return (\r\n                    //     <code key={item.name}>{tab(0, '' + item.type + '  $' + item.name)}</code>\r\n                    // )\r\n                    if (index > 0 ) {\r\n                        return (\r\n                            <code key={item.name}>{tab(0, ', ' + item.type + '  $' + item.name)}</code>\r\n                        )\r\n                    } else {\r\n                        return (\r\n                            <code key={item.name}>{tab(0, '' + item.type + '  $' + item.name)}</code>\r\n                        )\r\n                    }\r\n                })\r\n                :\r\n                null\r\n            }\r\n\r\n            <code>{tab(0, ')')}</code><br />\r\n            <code>{tab(1, '{')}</code><br />\r\n\r\n            \r\n            {/* ПОЛУЧАЕМ BODY */}\r\n            {\r\n                props.methodData !== null && props.methodData.body_actions?\r\n                <><br />\r\n                <pre className=\"ml-5\">{props.methodData?.body_actions}</pre>\r\n                </>\r\n                : <><code>{tab(2, '//...')}</code><br /></>\r\n            }\r\n\r\n\r\n            {/* <code>{tab(2, 'return response()->json([')}</code><br /> */}\r\n\r\n            {/* Получаем RESPONSE */}\r\n            {/* <code>{tab(3, getResponse( props.methodData !== null ? JSON.parse(props.methodData.response) : null))}</code><br />  */}\r\n\r\n            {\r\n                 props.methodData !== null && props.methodData.response?\r\n                getResponse(2, props.methodData !== null ? JSON.parse(props.methodData.response) : null )\r\n                : <><code>{tab(2, '//...')}</code><br /></>\r\n            }\r\n\r\n\r\n            {/* <code>{tab(2, '], 200);')}</code><br /> */}\r\n\r\n            {/* { props.methodData !== null ? getResponse( JSON.parse(props.methodData.response)) : null} */}\r\n\r\n            <code>{tab(1, '}')}</code><br />\r\n\r\n            {/* <li>Какой код возвращает метод,</li> */}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ControllerMethodsCode\r\n\r\nconst getResponse = (tab: number, responseData: ResponseType) => {\r\n    switch (responseData.type) {\r\n        case 'method':\r\n            return getMetodResponse(tab, responseData)\r\n    \r\n        case 'Response':\r\n            const responseArray: Array<JSX.Element> = getResponseResponse(tab, responseData)\r\n            return responseArray\r\n        default:\r\n            break;\r\n    }\r\n}\r\n\r\nconst getMetodResponse = (tabIndex: number, response: ResponseType) => {\r\n    const methodName = response.methodName\r\n    console.log('methodName: ', methodName)\r\n    // return <>{'return self::'+methodName+'();'}</>\r\n    return [<><code>{tab(tabIndex, 'return self::'+methodName+'();')}</code><br/></>]\r\n}\r\n\r\nconst getResponseResponse = (tabIndex: number, response: ResponseType) => {\r\n    console.log('response: ', response)\r\n    let responseBlock: Array<JSX.Element> = []\r\n    responseBlock.push(<><code>{tab(tabIndex, 'return response()->json([')}</code><br /></>)\r\n\r\n    if (response.responseItems) {\r\n        console.log(response.responseItems)\r\n        response.responseItems.map( (item: ResponreItemsType, index) => {          \r\n            // if (index > 0) {\r\n            //     responseBlock.push(<><code>{tab(tabIndex, '\"'+item.key+'\"=> $'+item.variable)}</code><br/></>)\r\n            // } else {\r\n                responseBlock.push(<><code>{tab(tabIndex+1, '\"'+item.key+'\"=> $'+item.variable+', ')}</code><br/></>)\r\n            // }\r\n        })\r\n    } else {\r\n        console.log(response.responseItems)\r\n    }\r\n\r\n    responseBlock.push(<><code>{tab(tabIndex, '], 200);')}</code><br /></>)\r\n    console.log('responseBlock: ', responseBlock)\r\n    return responseBlock\r\n}\r\n\r\nconst getBody = (tabIndex: number, body: string) => {\r\n    return <><pre>{ tab( tabIndex, body) }</pre><br /></>\r\n}","import { Input, TreeSelect } from 'antd'\r\nimport { TreeNode } from 'rc-tree-select'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { RequestType } from './ControllerMethodsForm'\r\n\r\ntype RequestItemPropsType = {\r\n    item: RequestType,\r\n    initialValues: any,\r\n    onRowChange: (id: number, type: string, name: string)=>void\r\n}\r\n\r\nconst RequestItem: React.FC<RequestItemPropsType> = (props) => {\r\n    const [value, setValue] = useState<RequestType>(props.item)\r\n\r\n    useEffect( () => {\r\n        setValue(props.item)\r\n    },[props.initialValues])\r\n\r\n    const onRequestTypeChange = (typeValue: string, labelList: React.ReactNode[], extra: any) => {\r\n        setValue({...value, type: typeValue})\r\n        if (typeValue) {\r\n            props.onRowChange(props.item.id, typeValue, props.item.name)\r\n        } else {\r\n            props.onRowChange(props.item.id, '', props.item.name)\r\n        }\r\n        \r\n    }\r\n\r\n    const onRequestNameChange = (event: any) => {\r\n        setValue({...value, name: event.target.value})\r\n        props.onRowChange(props.item.id, props.item.type, event.target.value)\r\n    }\r\n\r\n    return (\r\n        <div key={props.item.id} className=\"row mt-1\">\r\n            <div className=\"ant-col ant-form-item-label mt-2\">\r\n                {props.item.label}\r\n            </div>\r\n\r\n            <div className=\"col-4\">\r\n                <TreeSelect\r\n                    className=\" ml-2 TreeSelect_Request_Type\"\r\n                    style={{ width: '100%' }}\r\n                    showSearch\r\n                    value={value.type}\r\n                    dropdownStyle={{ maxHeight: 400, overflow: 'auto' }}\r\n                    placeholder=\"Reqest type\"\r\n                    allowClear\r\n                    showCheckedStrategy={'SHOW_PARENT'}\r\n                    onChange={onRequestTypeChange}\r\n                >\r\n                    <TreeNode selectable={false} per_id={props.item.id} value=\"model\" title=\"Model\">\r\n                        {\r\n                            // @ts-ignore\r\n                            props.initialValues.modelsList.map((model: ModelsType) => {\r\n                                return (\r\n                                    <TreeNode key={model.name} per_id={props.item.id} value={model.name} title={model.name}></TreeNode>\r\n                                )\r\n                            })\r\n\r\n                        }\r\n                    </TreeNode>\r\n                    <TreeNode per_id={props.item.id} value=\"Request\" title=\"Request\"></TreeNode>\r\n                    <TreeNode selectable={false} per_id={props.item.id} value=\"list\" title=\"List\"></TreeNode>\r\n                </TreeSelect>\r\n            </div>\r\n            <div className=\"col-4\">\r\n                <Input className=\"w-100 ml-2\" value={value.name} name={props.item.id.toString()} onChange={onRequestNameChange} placeholder=\"Param name\" />\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RequestItem","import { Button, Input, TreeSelect } from 'antd'\r\nimport { TreeNode } from 'rc-tree-select'\r\nimport React, {useState, useEffect} from 'react'\r\nimport { ControllerMethodsType } from '../../../../../../../api/ControllerMethodsAPI'\r\nimport { ResponreItemsType } from './ControllerMethodsForm'\r\n\r\ntype ValueType = {\r\n    type: 'Response' | 'method' | '',\r\n    methodId?: number,\r\n    methodName?: string,\r\n    responseItems?: Array<ResponreItemsType>\r\n}\r\n\r\ntype ResponseItemPropsType = {\r\n    responseInit: ValueType\r\n    initialValues: any,\r\n    setResponseValues: (responseValues: ValueType)=>void\r\n    // methodList !!!!!\r\n}\r\n\r\nconst ResponseItem: React.FC<ResponseItemPropsType> = (props) => {\r\n    const [value, setValue] = useState<ValueType>(props.responseInit)\r\n    // console.log(props)\r\n\r\n    useEffect( () => {\r\n        setValue(props.responseInit)\r\n    },[props.responseInit])\r\n\r\n    const onResponseTypeChange = (typeValue: 'Response'|'method'|'', labelList: React.ReactNode[], extra: any) => {\r\n        let newResponse: Array<ResponreItemsType> = []\r\n        let methodId: number = 0\r\n        let methodName: string = ''\r\n        let type: 'Response'|'method'|'' = ''\r\n\r\n        if(typeValue === 'Response') {\r\n            type = typeValue\r\n            // if(value.responseItems && value.responseItems.length === 0) {\r\n                newResponse.push({\r\n                    key: '',\r\n                    variable: ''\r\n                })\r\n            // }\r\n        } else {\r\n            // console.log('GO TO METHOD!!!',typeValue)\r\n            // console.log(props)\r\n            methodId = props.initialValues.controllerMethodsList.filter( (item: any) => item.name === typeValue )[0].id\r\n            methodName = props.initialValues.controllerMethodsList.filter( (item: any) => item.name === typeValue )[0].name\r\n            // console.log(methodId)\r\n\r\n            type = 'method'\r\n        }\r\n\r\n        setValue({...value, type: type, responseItems: newResponse, methodId: methodId, methodName: methodName})\r\n        props.setResponseValues({...value, type: type, responseItems: newResponse, methodId: methodId, methodName: methodName})\r\n\r\n        // console.log(typeValue)\r\n        // console.log(labelList)\r\n        // console.log(extra.triggerValue)\r\n    }\r\n\r\n    const onRowChange = (rowValue: string, elementNumber: number, param: 'key'|'variable') => {\r\n        // console.log(rowValue)\r\n        // console.log(elementNumber)\r\n        // console.log(param)\r\n\r\n        let responseItems: Array<ResponreItemsType> = value.responseItems ? value.responseItems : []\r\n        if (responseItems[elementNumber]) {\r\n            responseItems[elementNumber][param] = rowValue\r\n        }\r\n        setValue({\r\n            ...value,\r\n            responseItems: responseItems\r\n        })\r\n        props.setResponseValues({\r\n            ...value,\r\n            responseItems: responseItems\r\n        })\r\n    }\r\n\r\n    const addParam = () => {\r\n        let responseItems: Array<ResponreItemsType> = value.responseItems ? [... value.responseItems] : []\r\n        responseItems.push({key:'', variable:''})\r\n        setValue({...value, responseItems: responseItems })\r\n    }\r\n\r\n    const dellParam = () => {\r\n        let responseItems: Array<ResponreItemsType> = value.responseItems ? [... value.responseItems] : []\r\n        responseItems.pop()\r\n        setValue({...value, responseItems: responseItems })\r\n    }\r\n\r\n    console.log('ResponseItem value: ', value)\r\n    console.log('ResponseItem props: ', props)\r\n\r\n    return(\r\n        <>\r\n        <div className=\"row mt-1 mb-3\">\r\n            <div className=\"ant-col ant-form-item-label mt-2\">\r\n                Response:\r\n            </div>\r\n            <div className=\"col-4\">\r\n                <TreeSelect\r\n                    className=\" ml-2 TreeSelect_Request_Type\"\r\n                    style={{ width: '100%' }}\r\n                    showSearch\r\n                    value={value.type === 'method' ?  \r\n                    props.initialValues.controllerMethodsList.filter((controllerMethod: ControllerMethodsType)=>controllerMethod.id === value.methodId)[0].name\r\n                    : value.type\r\n                    }\r\n                    dropdownStyle={{ maxHeight: 400, overflow: 'auto' }}\r\n                    placeholder=\"Reqest type\"\r\n                    allowClear\r\n                    showCheckedStrategy={'SHOW_PARENT'}\r\n                    onChange={onResponseTypeChange}\r\n\r\n                    // treeCheckable={true}\r\n                >\r\n                    <TreeNode\r\n                        // selectable={false} \r\n                        // per_id={props.item.id} \r\n                        value=\"Response\" \r\n                        title=\"Response\"\r\n                    ></TreeNode>\r\n                    <TreeNode\r\n                        selectable={false} \r\n                        // per_id={props.item.id} \r\n                        value=\"method\" \r\n                        title=\"Method\"\r\n                    >\r\n                        {\r\n                            props.initialValues.controllerMethodsList !== undefined ?\r\n                            // @ts-ignore\r\n                            props.initialValues.controllerMethodsList.filter((controllerMethod: ControllerMethodsType)=>controllerMethod.name !== props.initialValues.name)\r\n                                .map(( controllerMethod: ControllerMethodsType ) => {\r\n                                return (\r\n                                    <TreeNode \r\n                                        key={controllerMethod.name}\r\n                                        // per_id={props.item.id} \r\n                                        value={controllerMethod.name} \r\n                                        title={controllerMethod.name}\r\n                                    ></TreeNode>\r\n                                )\r\n                            })\r\n                            : null\r\n                        }\r\n                    </TreeNode>\r\n                </TreeSelect>\r\n            </div>\r\n            <div className=\"col-4\">\r\n                {value.type === 'Response' ? \r\n                    <>\r\n                        <Button className=\"ml-2\" type=\"primary\" onClick={addParam}>Add param</Button>\r\n                        <Button className=\"ml-2\" type=\"primary\" onClick={dellParam}>Del param</Button>\r\n                    </>\r\n                :null}\r\n            </div>\r\n        </div>\r\n        {value.type === 'Response' ?\r\n            <div className=\"row mt-1 mb-3\">\r\n                <ResponseRows \r\n                    responseRows={value.responseItems ? value.responseItems : []}\r\n                    onRowChange={onRowChange}\r\n                />\r\n            </div>\r\n        :\r\n        null}\r\n        {value.type === 'method' ?\r\n            <div className=\"row mt-1 mb-3\">\r\n                methodId: {value.methodId}\r\n            </div>\r\n        :\r\n        null}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ResponseItem\r\n\r\ntype ResponseRowsPropsType = {\r\n    responseRows: Array<ResponreItemsType>\r\n    onRowChange: (value: string, elementNumber: number, param: 'key'|'variable')=>void\r\n}\r\n\r\nconst ResponseRows: React.FC<ResponseRowsPropsType> = (props) => {\r\n    // console.log(props)\r\n\r\n    const onNameChange = (event: any) => {\r\n        props.onRowChange(event.target.value, Number(event.target.name), 'key')\r\n    }\r\n\r\n    const onVariableChange = (event: any) => {\r\n        props.onRowChange(event.target.value, Number(event.target.name), 'variable')\r\n    }\r\n\r\n    return(\r\n        <>\r\n            {props.responseRows.map( (item, index: number)=> {\r\n                return(\r\n                // <>\r\n                <div key={index.toString()} className=\"row w-100\" >\r\n                        <div className=\"ant-col ant-form-item-label pr-2 mt-3\">\r\n                            param {index+1}:\r\n                        </div>\r\n                    <div className=\"col-4 mt-2\">\r\n                        <Input \r\n                            className=\"w-100 ml-2\" \r\n                            value={item.key} \r\n                            name={index.toString()}  \r\n                            onChange={onNameChange} \r\n                            placeholder=\"Param name\" \r\n                        />\r\n                    </div>\r\n                    <div className=\"col-4 mt-2\">\r\n                        <Input \r\n                            className=\"w-100 ml-2\" \r\n                            value={item.variable} \r\n                            name={index.toString()} \r\n                            onChange={onVariableChange} \r\n                            placeholder=\"Param variable\" \r\n                        />\r\n                    </div>\r\n                </div>\r\n                // </>\r\n                )\r\n            })}\r\n        </>\r\n    )\r\n}","import { Form, Field, FormikProps } from 'formik'\r\nimport React, { ReactNode, useState, useEffect } from 'react'\r\nimport { AntCheckbox, AntInput, AntSelect } from '../../../../../../../utils/Formik/CreateAntField'\r\nimport { validateRequired } from '../../../../../../../utils/Formik/ValidateFields'\r\nimport {SelectOptionType} from '../../../../../../../Types/types'\r\nimport { Button, Checkbox, Input, TreeSelect } from 'antd'\r\nimport { ModelsType } from '../../../../../../../api/projectAPI'\r\nimport RequestItem from './RequestItem'\r\nimport ResponseItem from './ResponseItem'\r\nimport TextArea from 'antd/lib/input/TextArea'\r\n\r\nexport type RequestType = {\r\n    label: string,\r\n    type: string,\r\n    name: string,\r\n    id: number\r\n}\r\n\r\nexport type ResponreItemsType = {\r\n    key: string,\r\n    variable: string,\r\n}\r\n\r\nexport type ResponseType = {\r\n    type: 'Response' | 'method' | '',\r\n    methodId?: number,\r\n    methodName?: string,\r\n    responseItems?: Array<ResponreItemsType>\r\n}\r\n\r\nconst ControllerMethodsForm: ((props: FormikProps<{}>) => ReactNode) = (props) => {\r\n    // @ts-ignore\r\n    const [request, setRequest] = useState<Array<RequestType>>(props.initialValues.request !== undefined ? props.initialValues.request : [])\r\n    // @ts-ignore\r\n    const [isRequest, setIsRequest] = useState(props.initialValues.request && props.initialValues.request.length !== 0 ? true : false)\r\n\r\n    // @ts-ignore\r\n    const [response, setResponse] = useState<ResponseType | undefined>(props.initialValues.response)\r\n    // @ts-ignore\r\n    const [isResponse, setIsResponse] = useState(props.initialValues.response? true : false)\r\n    console.log('isResponse: ', isResponse)\r\n\r\n    // @ts-ignore\r\n    const [body_actions, setBody_actions] = useState<string>(props.initialValues.body_actions)\r\n    // @ts-ignore\r\n    const [isBody_actions, setIsBody_actions] = useState(props.initialValues.body_actions ? true : false)\r\n    \r\n    const [value, setValue] = useState(undefined)\r\n\r\n    useEffect( () => {\r\n        // @ts-ignore\r\n        // console.log('!!!!!!!!!!!!useEffect ControllerMethodsForm', props.initialValues.response.responseItems)\r\n        // @ts-ignore\r\n        setRequest(props.initialValues.request !== undefined ? props.initialValues.request : [])\r\n        // @ts-ignore\r\n        setIsRequest(props.initialValues.request && props.initialValues.request.length !== 0 ? true : false)\r\n        // @ts-ignore\r\n        setResponse(props.initialValues.response ? props.initialValues.response : undefined)\r\n        // @ts-ignore\r\n        setBody_actions(props.initialValues.body_actions ? props.initialValues.body_actions : '')\r\n        // @ts-ignore\r\n        setIsBody_actions(props.initialValues.body_actions ? true : false)\r\n    },[props.initialValues])\r\n\r\n    const onRequest = (val: any) => {\r\n        console.log(val.target.checked)\r\n        console.log(request)\r\n\r\n        if (val.target.checked) {\r\n            if (request!==undefined && request.length === 0) {\r\n\r\n            }\r\n        }\r\n\r\n        if (request!==undefined && request.length === 0) {\r\n            console.log('onAddRequest')\r\n            onAddRequest()\r\n        } else {\r\n            console.log('setRequest')\r\n            setRequest([])\r\n        }\r\n        setIsRequest(!isRequest)\r\n    }\r\n\r\n    const onAddRequest = () => {\r\n        console.log('onAddRequest:', request)\r\n        let newRequest = [...request]\r\n\r\n        newRequest.push({\r\n            label: 'param '+ (request.length+1),\r\n            type: '',\r\n            name: '',\r\n            id: request.length\r\n        })\r\n        setRequest(newRequest)\r\n        props.setValues({...props.values, request: newRequest})\r\n    }\r\n\r\n    const onDeleteRequest = () => {\r\n        let newRequest = [...request]\r\n        newRequest.pop()\r\n        setRequest(newRequest)\r\n        if (newRequest.length === 0) {\r\n            setIsRequest(false)\r\n        }\r\n        props.setValues({...props.values, request: newRequest})\r\n    }\r\n\r\n    const onResponse = () => {\r\n        console.log('onResponse', isResponse)\r\n        setIsResponse(!isResponse)\r\n        console.log('response: ', response)\r\n        if (!response) {\r\n            setResponse({\r\n                type: ''\r\n            })\r\n        } else {\r\n            setResponse(undefined)\r\n        }\r\n    }\r\n\r\n    const onBodyActions = () => {\r\n        setIsBody_actions(!isBody_actions)\r\n    }\r\n\r\n    const onAddResponse = () => {\r\n        \r\n    }\r\n\r\n    const onRowChange = (id: number, type: string, name: string) => {\r\n        let requestCopy = [...request]\r\n\r\n        for (let index = 0; index < request.length; index++) {\r\n            const element = request[index];\r\n            if (element.id === id) {\r\n                requestCopy[index] = {...element, name: name, type: type}\r\n            }\r\n        }\r\n        setRequest(requestCopy)\r\n        props.setValues({...props.values, request: requestCopy})\r\n    }\r\n\r\n    const setResponseValues = (responseValues: ResponseType) => {\r\n        // console.log('setResponseValues:', responseValues)\r\n        props.setValues({...props.values, response: responseValues})\r\n    }\r\n\r\n    console.log('props.initialValues: ',props.initialValues)\r\n    // console.log(response)\r\n\r\n    // if (response !== undefined && response.type !== undefined) {\r\n    //     console.log('show response')\r\n    // }\r\n\r\n    const onKeyDown = (v: any) => {\r\n        if (v.keyCode === 9) {\r\n            v.preventDefault()\r\n\r\n            const before = body_actions.substr(0, v.target.selectionEnd)\r\n            const after = body_actions.substr(v.target.selectionEnd)\r\n\r\n            setBody_actions(before+'    '+after)\r\n            props.setValues({...props.values, body_actions: v.target.value})\r\n\r\n            const newStart = v.target.selectionStart+4\r\n            const newEnd = v.target.selectionEnd+4\r\n\r\n            setTimeout( ()=> {\r\n                v.target.selectionStart = newStart\r\n                v.target.selectionEnd = newEnd\r\n            }, 0)\r\n            \r\n        }\r\n    }\r\n\r\n    const onBodyChange = (v: any) => {\r\n        setBody_actions(v.target.value)\r\n        props.setValues({...props.values, body_actions: v.target.value})\r\n    }\r\n\r\n    console.log('ResponseItem:', response)\r\n\r\n    return (\r\n        <Form\r\n            className=\"form-container\"\r\n            onSubmit={props.handleSubmit}\r\n        >\r\n            <Field\r\n                component={AntInput}\r\n                name=\"name\"\r\n                type=\"text\"\r\n                label=\"Method name\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n            />\r\n            <Field\r\n                component={AntSelect}\r\n                name=\"rest_type\"\r\n                type=\"select\"\r\n                label=\"REST Type\"\r\n                selectOptions={RestTypeOtions}\r\n                validate={validateRequired}\r\n                hasFeedback\r\n            /> \r\n\r\n            <div className=\"ant-row ant-form-item \">\r\n                <div className=\"ant-col ant-form-item-label pr-2\">Request:</div>\r\n                <div className=\"ant-col ant-form-item-control\">\r\n                    <Checkbox onChange={onRequest} checked={isRequest}></Checkbox>\r\n                </div>\r\n            </div>\r\n\r\n            {request && request.length>0 ? \r\n                request.map( (item: RequestType) => {\r\n                    return <RequestItem key={item.id} item={item} initialValues={props.initialValues} onRowChange={onRowChange}/>\r\n                })\r\n            :\r\n                null\r\n            }\r\n            {request && request.length>=1 ? \r\n            <div className=\"my-2\">\r\n                <Button className=\"mr-3\" type=\"primary\" size=\"small\" onClick={onAddRequest}>Add</Button> \r\n                <Button className=\"mr-3\" type=\"primary\" size=\"small\" onClick={onDeleteRequest}>del</Button>\r\n            </div>\r\n            : null}\r\n\r\n            <div className=\"ant-row ant-form-item\">\r\n                <div className=\"ant-col ant-form-item-label pr-2\">body_actions:</div>\r\n                <div className=\"ant-col ant-form-item-control\">\r\n                    <Checkbox onChange={onBodyActions} checked={isBody_actions}></Checkbox>\r\n                </div>\r\n            </div>\r\n\r\n            {isBody_actions ? \r\n                <TextArea \r\n                    onKeyDown={onKeyDown} \r\n                    // onBlur={onBlur} \r\n                    rows={4} \r\n                    value={body_actions}\r\n                    onChange={onBodyChange}\r\n                />\r\n            : null }\r\n\r\n\r\n\r\n\r\n            <div className=\"ant-row ant-form-item \">\r\n                <div className=\"ant-col ant-form-item-label pr-2\">Response:</div>\r\n                <div className=\"ant-col ant-form-item-control\">\r\n                    <Checkbox onChange={onResponse} checked={isResponse}></Checkbox>\r\n                </div>\r\n            </div>\r\n\r\n            {response !== undefined && response.type !== undefined ? \r\n                <ResponseItem \r\n                    responseInit={response} \r\n                    initialValues={props.initialValues}\r\n                    setResponseValues={setResponseValues}\r\n                />\r\n            :\r\n            null\r\n            }\r\n\r\n\r\n\r\n\r\n\r\n            <Field\r\n                component={AntCheckbox}\r\n                name=\"isMiddleware\"\r\n                type=\"checkbox\"\r\n                label=\"isMiddleware\"\r\n                submitCount={props.submitCount}\r\n            />\r\n\r\n            <div className=\"submit-container\">\r\n                <button className=\"ant-btn ant-btn-primary\" type=\"submit\">\r\n                    Save\r\n                </button>\r\n            </div>\r\n\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default ControllerMethodsForm\r\n\r\nconst RestTypeOtions = [\r\n    {\r\n        name: 'GET',\r\n        value: 'get'\r\n    },\r\n    {\r\n        name: 'POST',\r\n        value: 'post'\r\n    },\r\n    {\r\n        name: 'PUT',\r\n        value: 'put'\r\n    },\r\n    {\r\n        name: 'DELETE',\r\n        value: 'delete'\r\n    },\r\n]","import { Button, List, Modal } from 'antd'\r\nimport { Formik } from 'formik'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { ControllerMethodsType, rest_typeType } from '../../../../../../api/ControllerMethodsAPI'\r\nimport { ModelsType } from '../../../../../../api/projectAPI'\r\nimport { ControllerMethodsPropsType } from './ControllerMethodsContainer'\r\nimport ControllerMethodsCode from './ControllerMethodsForm/ControllerMethodsCode'\r\nimport ControllerMethodsForm, { RequestType } from './ControllerMethodsForm/ControllerMethodsForm'\r\n\r\nexport type initialValuesType = {\r\n    modelsList: Array<ModelsType>,\r\n    controllerMethodsList: Array<ControllerMethodsType>,\r\n    body_actions?: string\r\n    name: string,\r\n    rest_type?: rest_typeType,\r\n    request?: Array<RequestType>,\r\n    response?: any,\r\n    id?: number\r\n}\r\n\r\nconst ControllerMethods: React.FC<ControllerMethodsPropsType> = (props) => {\r\n\r\n    let emptyInitialValues: initialValuesType = {\r\n        modelsList: props.modelsList,\r\n        name: '',\r\n        controllerMethodsList: props.controllerMethodsList\r\n    }\r\n\r\n    const [methodData, setMethodData] = useState<ControllerMethodsType | null>(null)\r\n    const [initialValues, setinitialValues] = useState<initialValuesType>(emptyInitialValues)\r\n    const [modalTitle, setModalTitle] = useState<string>('Controller Method form')\r\n\r\n    useEffect(() => {\r\n        if (props.controllerMethodsList.length === 0) {\r\n            props.getControllerMethodsList()\r\n        }\r\n    }, [])\r\n\r\n    // console.log('props.controllerMethodsList', props.controllerMethodsList)\r\n        \r\n    useEffect(() => {\r\n        console.log('useEffect, setinitialValues for: ', props.controllerData.id)\r\n        const newControllerMethodsList = props.controllerMethodsList.filter(item=> item.controller_id === props.controllerData.id)\r\n        console.log('newControllerMethodsList', newControllerMethodsList)\r\n        setinitialValues({\r\n            ...initialValues,\r\n            controllerMethodsList: newControllerMethodsList\r\n        })\r\n        // emptyInitialValues.controllerMethodsList = props.controllerMethodsList\r\n    }, [props.controllerMethodsList])\r\n\r\n    const [isModalVisible, setIsModalVisible] = useState(false)\r\n\r\n    const showMethod = (id: number) => {\r\n        const target = props.controllerMethodsList.filter( (item) => item.id === id)[0]\r\n        console.log('target of method', target)\r\n        setModalTitle('Edit Controller Method '+ target.name)\r\n        setMethodData({\r\n            body_actions: target.body_actions,\r\n            controller_id: target.controller_id,\r\n            id: id,\r\n            isMiddleware: false,\r\n            name: target.name,\r\n            request: target.request,\r\n            response: target.response,\r\n            rest_type: target.rest_type\r\n        })\r\n        setIsModalVisible(true)\r\n        setinitialValues({\r\n            ...initialValues,\r\n            name: target.name,\r\n            request: target.request ? JSON.parse(target.request) : [],\r\n            response: target.response ? JSON.parse(target.response) : undefined,\r\n            body_actions: target.body_actions,\r\n            rest_type: target.rest_type,\r\n            id: target.id\r\n        })\r\n    }\r\n\r\n    const addMethod = () => {\r\n        setinitialValues(emptyInitialValues)\r\n        setModalTitle('Controller Method form')\r\n        setIsModalVisible(true)\r\n    }\r\n\r\n    const onOk = () => {\r\n        console.log('onOk')\r\n        setIsModalVisible(false)\r\n    }\r\n\r\n    const onHandleSubmit = (values: initialValuesType) => {\r\n        console.log('onHandleSubmit values:',values)\r\n        console.log('props: ', props)\r\n\r\n        const controllerMethods: ControllerMethodsType = {\r\n            body_actions: values.body_actions? values.body_actions : '',\r\n            controller_id: props.controllerData.id,\r\n            id: values.id ? values.id : 0,\r\n            isMiddleware: false,\r\n            name: values.name,\r\n            request: JSON.stringify(values.request),\r\n            response: JSON.stringify(values.response),\r\n            rest_type: values.rest_type ? values.rest_type : null\r\n        }\r\n\r\n        console.log(controllerMethods)\r\n\r\n        setMethodData(controllerMethods)\r\n\r\n        if(values.id) {\r\n            console.log('UPDATE: ', controllerMethods)\r\n            props.updateControllerMethodsList(controllerMethods, values.id)\r\n        } else {\r\n            console.log('CREATE: ', controllerMethods)\r\n            props.createControllerMethodsList(controllerMethods)\r\n        }\r\n    }\r\n\r\n    console.log('ControllerMethods props', props)\r\n    console.log('ControllerMethods initialValues: ', initialValues)\r\n\r\n    return (\r\n        <>\r\n            <div className=\"w-100 d-flex flex-row-reverse\">\r\n                <Button type=\"primary\" onClick={addMethod}>Add Method</Button>\r\n            </div>\r\n\r\n            {\r\n            // props.controllerMethodsList.length !== 0 ?\r\n                <>\r\n                    <List\r\n                        className=\"mt-2\"\r\n                        header={<div>Controller Methods List:</div>}\r\n                        // footer={<div>Footer</div>}\r\n                        bordered\r\n                        dataSource={initialValues.controllerMethodsList}\r\n                        renderItem={item => (\r\n                            <List.Item\r\n                                actions={[<a key=\"list-loadmore-edit\" onClick={()=>{showMethod(item.id)}}>edit</a>, <a key=\"list-loadmore-more\">code</a>]}\r\n                            >\r\n                                {/* {item.name} */}\r\n                                <div className=\"row w-100\">\r\n                                    <div className=\"col-6\">{item.name}</div>\r\n                                    <div className=\"col-3\">{item.rest_type}</div>\r\n                                </div>\r\n                            </List.Item>\r\n                        )}\r\n                    />\r\n                </>\r\n                // :\r\n                // null\r\n            }\r\n\r\n            <Modal title={modalTitle} visible={isModalVisible} onOk={onOk} onCancel={() => { setIsModalVisible(false) }} width={1000}>\r\n                <Formik\r\n                    initialValues={initialValues}\r\n                    onSubmit={onHandleSubmit}\r\n                    enableReinitialize={true}\r\n                >\r\n                    {ControllerMethodsForm}\r\n                </Formik>\r\n\r\n                <ControllerMethodsCode methodData={methodData} controllerData={props.controllerData}/>\r\n\r\n            </Modal>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ControllerMethods","import {connect} from 'react-redux'\r\nimport ControllerMethods from './ControllerMethods'\r\nimport { AppStateType } from '../../../../../../redux/store'\r\nimport { getControllersList, createControllerMethodsList, updateControllerMethodsList, getControllerMethodsList } from '../../../../../../redux/projectReducer'\r\nimport { ControllersType } from '../../../../../../api/projectAPI'\r\n// import { ModelsType } from '../../../.././../api/projectAPI'\r\n\r\ntype OwnControllerMethodsPropsType = {\r\n    controllerData: ControllersType\r\n}\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    getControllerMethodsList: ()=>void,\r\n    updateControllerMethodsList: (values: any, controllerMethodId: number)=>void,\r\n    createControllerMethodsList: (values: any)=> void,\r\n    // getControllersList: (backendId: number) => void\r\n    // createController: (values: any) => void,\r\n    // getModelsList: (backendId: number) => void,\r\n}\r\n\r\nexport type ControllerMethodsPropsType = MapPropsType & MapDispatchPropsType & OwnControllerMethodsPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        controllersList: state.projects.controllersList,\r\n        modelsList: state.projects.modelsList,\r\n        controllerMethodsList: state.projects.controllerMethodsList\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnControllerMethodsPropsType, AppStateType>(mapStateToProps, \r\n    {getControllerMethodsList, updateControllerMethodsList, createControllerMethodsList}) \r\n    (ControllerMethods)\r\n    \r\n\r\n","import React, { useEffect, useState } from 'react'\r\nimport { ControllerMethodsType } from '../../../../../../../api/ControllerMethodsAPI'\r\nimport { ControllersType } from '../../../../../../../api/projectAPI'\r\nimport { tab } from '../../../../../Code/Model/ModelCode'\r\nimport { FullControllerMethodCodePropsType } from './FullControllerMethodCodeContainer'\r\nimport ControllerMethodsCode from './../ControllerMethodsForm/ControllerMethodsCode'\r\n\r\nconst FullControllerMethodCode:React.FC<FullControllerMethodCodePropsType> = (props) => {\r\n    const [methods, setMethods] = useState<Array<ControllerMethodsType>>()\r\n    useEffect(() => {\r\n        if (props.controllerMethodsList.length === 0) {\r\n            props.getControllerMethodsList()\r\n        }\r\n    }, [])\r\n    useEffect(() => {\r\n        setMethods(props.controllerMethodsList.filter(item=> item.controller_id === props.controllerData.id))\r\n    }, [props.controllerMethodsList])\r\n\r\n    console.log(props)\r\n    console.log(methods)\r\n\r\n    return(\r\n        <div className=\"text-left\">\r\n            <code>{tab(0, '<?php')}</code><br/>\r\n            <br/>\r\n            <code>{tab(0, 'namespace App\\\\Http\\\\Controllers;')}</code><br/>\r\n            <br/>\r\n            <code>{tab(0, 'use App\\\\'+props.controllerData.models[0].name+';')}</code><br/>\r\n            <code>{tab(0, 'use Illuminate\\\\Http\\\\Request;')}</code><br/>\r\n            <br/>\r\n            <code>{tab(0, 'class '+props.controllerData.name+' extends Controller')}</code><br/>\r\n            <code>{tab(0, '{')}</code><br/>\r\n            <code>{tab(1, '//...')}</code><br/>\r\n            {\r\n                methods?.map(method => {\r\n                    return (\r\n                        <ControllerMethodsCode\r\n                            methodData={method}\r\n                            controllerData={props.controllerData}\r\n                        />\r\n                    ) \r\n                })\r\n            }\r\n            <code>{tab(0, '}')}</code><br/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FullControllerMethodCode","import {connect} from 'react-redux'\r\nimport FullControllerMethodCode from './FullControllerMethodCode'\r\nimport { AppStateType } from '../../../../../../../redux/store'\r\nimport { getControllersList, createControllerMethodsList, updateControllerMethodsList, getControllerMethodsList } from '../../../../../../../redux/projectReducer'\r\nimport { ControllersType } from '../../../../../../../api/projectAPI'\r\n// import { ModelsType } from '../../../.././../api/projectAPI'\r\n\r\ntype OwnFullControllerMethodCodePropsType = {\r\n    controllerData: ControllersType\r\n}\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    getControllerMethodsList: ()=>void,\r\n    updateControllerMethodsList: (values: any, controllerMethodId: number)=>void,\r\n    createControllerMethodsList: (values: any)=> void,\r\n    // getControllersList: (backendId: number) => void\r\n    // createController: (values: any) => void,\r\n    // getModelsList: (backendId: number) => void,\r\n}\r\n\r\nexport type FullControllerMethodCodePropsType = MapPropsType & MapDispatchPropsType & OwnFullControllerMethodCodePropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        controllersList: state.projects.controllersList,\r\n        modelsList: state.projects.modelsList,\r\n        controllerMethodsList: state.projects.controllerMethodsList\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnFullControllerMethodCodePropsType, AppStateType>(mapStateToProps, \r\n    {getControllerMethodsList, updateControllerMethodsList, createControllerMethodsList}) \r\n    (FullControllerMethodCode)\r\n    \r\n\r\n","import { Button, Collapse, Empty } from 'antd'\r\nimport Modal from 'antd/lib/modal/Modal'\r\nimport { Field, Form, Formik, FormikProps } from 'formik'\r\nimport React, { ReactNode, useEffect, useState } from 'react'\r\nimport { ControllersPropsType } from './ControllersContainer'\r\nimport ControllerForm from './ControllerForm'\r\nimport { AntCheckbox, AntSelect } from '../../../../../../utils/Formik/CreateAntField'\r\nimport { ControllersType, ModelsType } from '../../../../../../api/projectAPI'\r\nimport {SelectOptionType} from './../../../../../../Types/types'\r\nimport { initialValues } from '../../../../../ToDo/ToDoMobile'\r\nimport Item from 'antd/lib/list/Item'\r\nimport ControllerMethods from './ControllerMethodsContainer'\r\nimport FullControllerMethodCode from './FullControllerMethodCode/FullControllerMethodCodeContainer'\r\n\r\nconst { Panel } = Collapse\r\n\r\nconst Controllers: React.FC<ControllersPropsType> = (props) => {\r\n    useEffect(() => {\r\n        props.getControllersList(props.backendId)\r\n\r\n        if (props.modelsList.length === 0) {\r\n            // console.log('getModelsList')\r\n            props.getModelsList(props.backendId)\r\n        }\r\n\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n    }, [props.controllersList])\r\n\r\n    const [isModalVisible, setIsModalVisible] = useState(false)\r\n\r\n    if (props.modelsList.length > 0) {\r\n        const modelsListOptions = props.modelsList.map( (item: ModelsType) => {\r\n            return ( {\r\n                name: item.name,\r\n                value: item.id\r\n            } )\r\n        })\r\n    }\r\n    \r\n\r\n    const addController = () => {\r\n        setIsModalVisible(true)\r\n    }\r\n\r\n    const handleOk = () => { setIsModalVisible(!isModalVisible) }\r\n    const handleCancel = () => { setIsModalVisible(!isModalVisible) }\r\n\r\n    const handleSubmit = (vals: any) => {\r\n        // console.log(vals)\r\n        // console.log(props)\r\n\r\n        props.createController({\r\n            ...vals,\r\n            backend_id: props.backendId\r\n        })\r\n    }\r\n\r\n    // console.log(props)\r\n\r\n    // if (props.controllersList.length > 0) {\r\n        return (\r\n            <div>\r\n                <div className=\"w-100 d-flex flex-row-reverse\">\r\n                    <Button className=\"mr-4 ml-auto mb-3\" type=\"primary\" onClick={addController}>Add Controller</Button>\r\n                </div>\r\n\r\n                {\r\n                    props.controllersList.length > 0 ?\r\n                    <Collapse defaultActiveKey={[]}>\r\n                        {props.controllersList.map((item: ControllersType) => {\r\n                            return (\r\n                                <Panel \r\n                                    key={item.name}\r\n                                    header={item.name} \r\n                                    // extra={[<div key={'any_'+item.name}>any</div>]}\r\n                                >\r\n                                    <ControllerItem item={item} modelsList={props.modelsList} updateController={props.updateController}/>\r\n                                </Panel>\r\n                            )\r\n                        })}\r\n                    </Collapse>\r\n                    : <Empty />\r\n                }\r\n\r\n                <Modal title=\"Create new Controller\" visible={isModalVisible} onOk={handleOk} onCancel={handleCancel}>\r\n                    <Formik\r\n                        // initialValues={initialModalValues}\r\n                        initialValues={{}}\r\n                        onSubmit={handleSubmit}\r\n                        enableReinitialize={true}\r\n                    >\r\n                        {ControllerForm}\r\n                    </Formik>\r\n                </Modal>\r\n            </div>\r\n        )\r\n    // } \r\n    // else {\r\n    //     return(\r\n    //         <>\r\n    //             <div className=\"w-100 d-flex flex-row-reverse\">\r\n    //                 <Button className=\"mr-4 ml-auto mb-3\" type=\"primary\" onClick={addController}>Add Controller</Button>\r\n    //             </div>\r\n    //             <div>No Data</div>\r\n    //         </>\r\n    //     ) \r\n    // }\r\n}\r\n\r\nexport default Controllers\r\n\r\ntype ControllerItemType = {\r\n    item: ControllersType,\r\n    modelsList: Array<ModelsType>,\r\n    updateController: (values: ControllersType, controllerId: number) => void\r\n}\r\n\r\nconst ControllerItem:React.FC<ControllerItemType> = (props) => {\r\n    console.log('ControllerItem props', props)\r\n\r\n    type initialFormValuesType = {\r\n        isResurce: boolean,\r\n        modelsOptions: Array<SelectOptionType>,\r\n        models: Array<number>\r\n    }\r\n\r\n    const getOptions = ():Array<SelectOptionType> => {\r\n        let options:Array<SelectOptionType> = []\r\n        for (let index = 0; index < props.modelsList.length; index++) {\r\n            const element = props.modelsList[index];\r\n            options.push({\r\n                name: element.name,\r\n                value: element.id ? Number(element.id) : 0\r\n            })\r\n        }\r\n        return options\r\n    }\r\n\r\n    const initialFormValues: initialFormValuesType = {\r\n        isResurce: props.item.isResource,\r\n        modelsOptions: getOptions(),\r\n        models: props.item.models.length>0 ? props.item.models.map( (i: ModelsType) => i.id ) : []\r\n    }\r\n\r\n    // console.log(props)\r\n\r\n    const onControllerInstanseSubmit = (values: any) => {\r\n        // console.log(values)\r\n\r\n        props.updateController({\r\n            models: values.models,\r\n            backend_id: props.item.backend_id,\r\n            folder: props.item.folder,\r\n            id: props.item.id,\r\n            isResource: values.isResurce,\r\n            model_id: props.item.model_id,\r\n            name: props.item.name,\r\n        }, props.item.id)\r\n    }\r\n\r\n    return(\r\n    <div key={props.item.name}>\r\n        <h4>{props.item.name}</h4>\r\n        <Collapse defaultActiveKey={[]} ghost>\r\n            <Panel header=\"Instanses\" key=\"instanse\">\r\n                <Formik\r\n                    initialValues={initialFormValues}\r\n                    // initialValues={{}}\r\n                    onSubmit={onControllerInstanseSubmit}\r\n                    enableReinitialize={true}\r\n                >\r\n                    {ControllerInstansesForm}\r\n                </Formik>\r\n                \r\n            </Panel>\r\n            <Panel header=\"Methods\" key=\"methods\">\r\n                <ControllerMethods controllerData={props.item}/>\r\n            </Panel>\r\n            <Panel header=\"Full code\" key=\"code\">\r\n                <FullControllerMethodCode controllerData={props.item}/>\r\n            </Panel>\r\n            <Panel header=\"Actions to create\" key=\"actions\">\r\n                {\r\n                    props.item.models[0] ?\r\n                    <h5>php artisan make:model {props.item.models[0].name} -mcr</h5>\r\n                    : <h5>No Model</h5>\r\n                }\r\n                <br/>\r\n                {\r\n                     props.item.models[0] ?\r\n                     <>\r\n                    <h5>php artisan make:controller {props.item.name} --resource</h5>\r\n                    <h5>php artisan make:model {props.item.models[0].name} --migration</h5>\r\n                    </>\r\n                    : <h5>No Model</h5>\r\n                }\r\n            </Panel>\r\n        </Collapse>\r\n    </div>\r\n    )\r\n}\r\n\r\nconst ControllerInstansesForm: ((props: FormikProps<{}>) => ReactNode) = (props) => {\r\n\r\n    // console.log(props.initialValues)\r\n\r\n    return (\r\n        <Form\r\n            className=\"form-container\"\r\n            onSubmit={props.handleSubmit}\r\n        >\r\n            <Field\r\n                component={AntCheckbox}\r\n                name=\"isResurce\"\r\n                type=\"checkbox\"\r\n                label=\"isResurce\"\r\n                submitCount={props.submitCount}\r\n                // onClick={submitBackEnd}\r\n                // onSelect={submitBackEnd}\r\n            />\r\n\r\n            <Field\r\n                component={AntSelect}\r\n                name=\"models\"\r\n                type=\"select\"\r\n                label=\"Including Models\"\r\n                mode=\"multiple\"\r\n                selectOptions={\r\n                    // @ts-ignore\r\n                    props.initialValues.modelsOptions\r\n                }\r\n                // onSelect = {onSelect}\r\n            />\r\n\r\n            <div className=\"submit-container\">\r\n                <button className=\"ant-btn ant-btn-primary\" type=\"submit\">\r\n                    Save\r\n                </button>\r\n            </div>\r\n\r\n        </Form>\r\n    )\r\n}\r\n\r\n\r\n","import {connect} from 'react-redux'\r\nimport Controllers from './Controllers'\r\nimport { AppStateType } from '../../../../../../redux/store'\r\nimport { getControllersList, createController, getModelsList, updateController } from '../../../../../../redux/projectReducer'\r\nimport { ControllersType } from '../../../../../../api/projectAPI'\r\n// import { ModelsType } from '../../../.././../api/projectAPI'\r\n\r\ntype OwnControllersPropsType = {\r\n    backendId: number\r\n}\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    getControllersList: (backendId: number) => void\r\n    createController: (values: any) => void,\r\n    getModelsList: (backendId: number) => void,\r\n    updateController:(values: ControllersType, controllerId: number) => void,\r\n}\r\n\r\nexport type ControllersPropsType = MapPropsType & MapDispatchPropsType & OwnControllersPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        controllersList: state.projects.controllersList,\r\n        modelsList: state.projects.modelsList\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnControllersPropsType, AppStateType>(mapStateToProps, \r\n    {getControllersList, createController, getModelsList, updateController}) \r\n    (Controllers)\r\n    \r\n\r\n","import React, { useEffect, useState } from 'react'\r\nimport {BackendPropsType} from './BackendContainer'\r\nimport {getTargetProject} from './../CurrentProject'\r\nimport { Collapse, Spin } from 'antd'\r\nimport { Formik } from 'formik'\r\nimport InstansesForm from './Instanses/InstansesForm'\r\nimport Models from './Models/ModelsContainer'\r\nimport Controllers from './Controllers/ControllersContainer'\r\n\r\nconst { Panel } = Collapse\r\n\r\nconst Backend: React.FC<BackendPropsType> = (props) => {\r\n    const [activeKey, setActiveKey] = useState<Array<string>>()\r\n\r\n    useEffect( ()=>{\r\n        props.getBackendData(1)\r\n    }, [])\r\n\r\n    const project = getTargetProject(props.projectsList, props.projectId.toString())\r\n\r\n    // console.log('project', project)\r\n\r\n    const instansesInitialValues = {\r\n        name: project.backendData ? project.backendData.name : null,\r\n        url: project.backendData ? project.backendData.url : null,\r\n        ip: project.backendData ? project.backendData.ip : null,\r\n        login: project.backendData ? project.backendData.login : null,\r\n        password: project.backendData ? project.backendData.password : null,\r\n        folder: project.backendData ? project.backendData.folder : null,\r\n    }\r\n\r\n    // console.log(props)\r\n\r\n    const instansesHandleSubmit = (val: any) => {\r\n        // console.log(project.backendData ? project.backendData.id : undefined)\r\n        // console.log(val)\r\n        if (project.backendData) {\r\n            props.updateBackend(val, project.backendData.id)\r\n        }\r\n    }\r\n\r\n    const changePanel = (closeKey: string, openKey: Array<string>) => {\r\n        console.log(openKey)\r\n        if (openKey) {\r\n            setActiveKey(openKey)\r\n        } else {\r\n            setActiveKey([])\r\n        }\r\n        \r\n    }\r\n\r\n    const onCollapseChange = (v:any) => {\r\n        console.log('onCollapseChange', v)\r\n        console.log('activeKey: ', [activeKey])\r\n        changePanel('', v)\r\n    }\r\n\r\n    // console.log(project)\r\n\r\n    if (project.backendData) {\r\n        return(\r\n            <>\r\n                <h5>{project.backendData.name}</h5>\r\n                <Collapse defaultActiveKey={[]} activeKey={activeKey} onChange={onCollapseChange}>\r\n                    <Panel header=\"Instanses\" key=\"1\">\r\n                        <Formik\r\n                            initialValues={instansesInitialValues}\r\n                            onSubmit={instansesHandleSubmit}\r\n                            enableReinitialize={true}\r\n                        >\r\n                            {InstansesForm}\r\n                        </Formik>\r\n                    </Panel>\r\n                    <Panel header=\"Models\" key=\"2\">\r\n                        <Models backendId={project.backend_id} changePanel={changePanel} />\r\n                    </Panel>\r\n                    <Panel header=\"Controllers\" key=\"3\">\r\n                        <Controllers backendId={project.backend_id}/>\r\n                    </Panel>\r\n                    <Panel header=\"Api\" key=\"4\">\r\n\r\n                    </Panel>\r\n                </Collapse>\r\n                <br/><br/><br/>\r\n\r\n                <li>Seeders</li>\r\n                <li>Fasades</li>\r\n                <li>Middleware</li>\r\n                <li>Services</li>\r\n                <li>Events</li>\r\n                <li>Workers</li>\r\n            </>\r\n        )\r\n    } else {\r\n        return <Spin key=\"spin\" size=\"large\" />\r\n    }\r\n    \r\n}\r\n\r\nexport default Backend","import {connect} from 'react-redux'\r\nimport Backend from './Backend'\r\nimport { AppStateType } from '../../../../../redux/store'\r\nimport { isMobile } from 'react-device-detect'\r\n// import { getUsersList, updateUser, actions } from '../../../../../../redux/usersReducer'\r\nimport { getProjectList, getBackendData, updateBackend } from '../../../../../redux/projectReducer'\r\nimport { UserType } from '../../../../../redux/authReducer'\r\nimport { BackendType } from '../../../../../api/projectAPI'\r\n// import CurrentUserMobile from './CurrentUserMobile'\r\n\r\ntype OwnBackendPropsType = {\r\n    projectId: number\r\n}\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    getProjectList: ()=>void,\r\n    getBackendData: (projectid: number)=>void,\r\n    updateBackend: (values: BackendType, backendId: number) =>void,\r\n    // updateUser: (values: UserType, userId: number)=>void,\r\n    // setUsersDataChanged: (isUsersDataChanged: boolean)=>void\r\n}\r\n\r\nexport type BackendPropsType = MapPropsType & MapDispatchPropsType & OwnBackendPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        projectsList: state.projects.projectList,\r\n        isProjectsLoaded: state.projects.isProjectLoaded\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnBackendPropsType, AppStateType>(mapStateToProps, \r\n    {getProjectList, getBackendData, updateBackend}) \r\n    (Backend)\r\n    \r\n\r\n","import { Button, Tree } from \"antd\"\r\nimport { Field, Form, FormikProps, FormikValues } from \"formik\"\r\nimport React, { ReactNode, useState } from \"react\"\r\nimport { AntInput } from \"../../../../../../utils/Formik/CreateAntField\"\r\nimport { validateRequired } from \"../../../../../../utils/Formik/ValidateFields\"\r\n\r\ntype OtherProps = {\r\n\r\n}\r\n\r\nconst InstansesFrontendForm: ((props: OtherProps & FormikProps<FormikValues>) => ReactNode) = (props) => {\r\n    const [isDataChanged, setIsDataChanged] = useState(false)\r\n\r\n    // const [srcTree, setSrcTree] = useState(props.initialValues.src_tree)\r\n    const [srcTree, setSrcTree] = useState(treeData)\r\n\r\n    const addTreeItem = (trace:Array<string>) => {\r\n        for (let index = 0; index < trace.length; index++) {\r\n            const key = trace[index]\r\n            console.log(key)\r\n        }\r\n    }\r\n\r\n    const onChange = (val: any) => {\r\n        setIsDataChanged(true)\r\n    }\r\n\r\n    return (\r\n        <Form\r\n            className=\"form-container mt-2\"\r\n            onSubmit={props.handleSubmit}\r\n        >\r\n            <Field\r\n                component={AntInput}\r\n                name=\"name\"\r\n                type=\"text\"\r\n                label=\"Name\"\r\n                validate={validateRequired}\r\n                submitCount={props.submitCount}\r\n                hasFeedback\r\n                onChange={onChange}\r\n            />\r\n\r\n            <TreeSRC addTreeItem={addTreeItem}/>\r\n\r\n            {isDataChanged ?\r\n                <div className=\"submit-container\">\r\n                    <button className=\"ant-btn ant-btn-primary\" type=\"submit\">\r\n                        Save\r\n                    </button>\r\n                </div>\r\n                : null}\r\n\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default InstansesFrontendForm\r\n\r\n\r\ntype TreeSRCPropsType = {\r\n    addTreeItem: (trace:Array<string>) => void,\r\n}\r\n\r\nconst TreeSRC: React.FC<TreeSRCPropsType> = (props) => {\r\n    const onSelect = (selectedKeys: React.Key[], info: any) => {\r\n        console.log('selected', selectedKeys, info);\r\n    }\r\n\r\n    const onCheck = (checkedKeys: any, info: any) => {\r\n        console.log('onCheck', checkedKeys, info);\r\n    }\r\n    return (\r\n        <div className=\"ant-row ant-form-item \">\r\n            <div className=\"ant-col ant-form-item-label pr-2\">SRC tree:</div>\r\n            <div className=\"ant-col ant-form-item-control\">\r\n            <Tree\r\n                checkable\r\n                defaultExpandedKeys={[]}\r\n                defaultSelectedKeys={['0-0-0', '0-0-1']}\r\n                defaultCheckedKeys={['0-0-0', '0-0-1']}\r\n                onSelect={onSelect}\r\n                onCheck={onCheck}\r\n                treeData={treeData}\r\n            />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype FolderRowPropsType = {\r\n    name: string,\r\n    trace: Array<string>\r\n    // addTreeItem: (trace:Array<string>) => void,\r\n    \r\n}\r\n\r\nexport const FolderRow:React.FC<FolderRowPropsType> = (props) => {\r\n    const onAdd = (v: Array<string>) => {\r\n        console.log(v)\r\n        // addTreeItem(trace).bind(props.trace)\r\n    }\r\n    return(\r\n        <div>{props.name}\r\n            <Button onClick={()=>{onAdd(props.trace)}} className=\"ml-2\" type=\"primary\" size=\"small\">Add</Button>\r\n            <Button className=\"ml-2\" type=\"primary\" size=\"small\">Dell</Button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport type treeDataItem = {\r\n    title: string | JSX.Element,\r\n    key: string,\r\n    disableCheckbox?: boolean,\r\n    disabled?: boolean,\r\n    children?: Array<treeDataItem>,\r\n    trace?: Array<string>,\r\n}\r\n\r\nconst treeData: Array<treeDataItem> = [\r\n    {\r\n        title: <FolderRow name=\"src\" trace={['src']}/>,\r\n        key: '0',\r\n        trace:['0'],\r\n        children: [\r\n        //     {\r\n        //         title: <FolderRow name=\"parent 1-0\"/>,\r\n        //         key: '0-0-0',\r\n        //         disabled: true,\r\n        //         children: [\r\n        //             {\r\n        //                 title: 'leaf0',\r\n        //                 key: '0-0-0-0',\r\n        //                 // disableCheckbox: true,\r\n        //             },\r\n        //             {\r\n        //                 title: 'leaf1',\r\n        //                 key: '0-0-0-1',\r\n        //             },\r\n        //         ],\r\n        //     },\r\n            {\r\n                title: <FolderRow name=\"Components\" trace={['src', 'Components']}/>,\r\n                key: '0-0-1',\r\n                children: [{ title: <FolderRow name=\"Development\" trace={['src', 'Components', 'Development']}/>,  key: '0-0-1-0' }],\r\n            },\r\n        ],\r\n    },\r\n];\r\n\r\n","import { Collapse } from 'antd'\r\nimport CollapsePanel from 'antd/lib/collapse/CollapsePanel'\r\nimport { Formik } from 'formik'\r\nimport React, {useEffect} from 'react'\r\nimport InstansesFrontendForm from './Instanses/InstansesFrontendForm'\r\n\r\ntype FrontendPropsType = {\r\n    projectId: number\r\n}\r\n\r\nconst Frontend:React.FC<FrontendPropsType> = (props) => {\r\n    useEffect( ()=> {\r\n        getCurrentFrontend(props.projectId)\r\n    },[])\r\n    console.log('Frontend props: ', props)\r\n    type InstansesInitialValuesType = {\r\n\r\n    }\r\n    const instansesInitialValues: InstansesInitialValuesType = {\r\n        \r\n    }\r\n\r\n    const instansesHandleSubmit = (values: InstansesInitialValuesType) => {\r\n        console.log(values)\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            <h5>Frontend</h5>\r\n            <Collapse defaultActiveKey={[]}>\r\n                <CollapsePanel header=\"Instanses\" key=\"1\">\r\n                    <li>1) Create new component \"FrontEnd\"</li>\r\n                    <li>1.1) Create model</li>\r\n                    <li>1.2) Create migrations</li>\r\n                    <li>1.3) Create controller</li>\r\n                    <Formik\r\n                        initialValues={instansesInitialValues}\r\n                        onSubmit={instansesHandleSubmit}\r\n                    >\r\n                        {InstansesFrontendForm}\r\n                    </Formik>\r\n                </CollapsePanel>\r\n                <CollapsePanel header=\"APIs\" key=\"2\"></CollapsePanel>\r\n                <CollapsePanel header=\"Reducers\" key=\"3\"></CollapsePanel>\r\n                <CollapsePanel header=\"Components\" key=\"4\">\r\n                    <li>1) Create new component</li>\r\n                    <li>1.1) Create model</li>\r\n                    <li>1.2) Create migrations</li>\r\n                    <li>1.3) Create controller</li>\r\n                    <li>2) Get componentList</li>\r\n                   \r\n                </CollapsePanel>\r\n            </Collapse>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Frontend\r\n\r\nexport const getCurrentFrontend = (projectId: Number) => {\r\n    console.log('getCurrentFrontend for: '+projectId)\r\n}","import { Collapse, Spin } from 'antd'\r\nimport React, { useEffect } from 'react'\r\nimport { ProjectItemType } from '../../../../redux/projectReducer'\r\nimport Backend from './Backend/BackendContainer'\r\nimport { CurrenProjectPropsType } from './CurrentProjectContainer'\r\nimport Frontend from './Frontend/Frontend'\r\n\r\nconst { Panel } = Collapse\r\n\r\nexport const getTargetProject = (projectList: Array<ProjectItemType>, userId: string): ProjectItemType => {\r\n    return projectList.filter((item: ProjectItemType) => item.id.toString() === userId)[0]\r\n}\r\n\r\nconst CurrentProject: React.FC<CurrenProjectPropsType> = (props) => {\r\n    useEffect(() => {\r\n        if (!props.isProjectsLoaded) {\r\n            props.getProjectList()\r\n        }\r\n    }, [props.isProjectsLoaded])\r\n\r\n    const project = getTargetProject(props.projectsList, props.match.params.userId)\r\n\r\n    if (project) {\r\n        return (\r\n            <>\r\n                <h3>{project.name}</h3>\r\n                <Collapse defaultActiveKey={[]}>\r\n                    {project.backend_id ?\r\n                        <Panel header=\"Backend\" key=\"1\">\r\n                            Backend data to {project.backend_id}\r\n                            <Backend projectId={Number(props.match.params.userId)}/>\r\n                        </Panel>\r\n                        :\r\n                        null\r\n                    }\r\n                    {project.frontend_id ?\r\n                        <Panel header=\"Frontend\" key=\"2\">\r\n                            <Frontend projectId={Number(props.match.params.userId)}/>\r\n                        </Panel>\r\n                        :\r\n                        null\r\n                    }\r\n                </Collapse>\r\n            </>\r\n        )\r\n    } else {\r\n        return <Spin key=\"spin\" size=\"large\" />\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default CurrentProject","import {connect} from 'react-redux'\r\nimport CurrentProject from './CurrentProject'\r\nimport { AppStateType } from '../../../../redux/store'\r\nimport { isMobile } from 'react-device-detect'\r\nimport { getUsersList, updateUser, actions } from '../../../../redux/usersReducer'\r\nimport { getProjectList } from '../../../../redux/projectReducer'\r\nimport { UserType } from '../../../../redux/authReducer'\r\n// import CurrentUserMobile from './CurrentUserMobile'\r\n\r\ntype OwnCurrentProjectPropsType = {\r\n    match: any\r\n    location: any\r\n    history: any\r\n}\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    getProjectList: ()=>void,\r\n    updateUser: (values: UserType, userId: number)=>void,\r\n    // setUsersDataChanged: (isUsersDataChanged: boolean)=>void\r\n}\r\n\r\nexport type CurrenProjectPropsType = MapPropsType & MapDispatchPropsType & OwnCurrentProjectPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        projectsList: state.projects.projectList,\r\n        isProjectsLoaded: state.projects.isProjectLoaded\r\n        // errorMessage: state.task.errorMessage,\r\n        // isInterval: state.task.isInterval,\r\n        // taskSaveStatus: state.task.taskSaveStatus,\r\n        // settings:state.auth.viewSettings,\r\n        // appLocation: state.app.location,\r\n        // viewSettings: state.auth.viewSettings,\r\n        // isUsersDataChanged: state.users.isUsersDataChanged\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnCurrentProjectPropsType, AppStateType>(mapStateToProps, \r\n    {getProjectList, updateUser}) \r\n    (isMobile ? CurrentProject : CurrentProject)\r\n    \r\n\r\n","import { Button } from 'antd'\r\nimport React, {useState} from 'react'\r\nimport SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition'\r\nimport { TreningPropsType } from './TreningContainer'\r\n\r\nconst Trening: React.FC<TreningPropsType> = (props) => {\r\n    const speechSynthesis = require('speech-synthesis')\r\n\r\n    const [targetIndex, setTargetIndex] = useState(0)\r\n    const [answer, setAnswer] = useState(false)\r\n    const [isSpeaking, setIsSpeaking] = useState<number| null>(null)\r\n\r\n    const commands = [\r\n        {\r\n            command: 'clear',\r\n            // @ts-ignore\r\n            callback: (  { resetTranscript }  ) => {\r\n                console.log('clear')\r\n                resetTranscript()\r\n            },\r\n            \r\n        },\r\n        {\r\n            command: 'next',\r\n            // @ts-ignore\r\n            callback: (  { resetTranscript }  ) => {\r\n                console.log('next go to props')\r\n                setAnswer(false)\r\n                setTargetIndex(targetIndex+1)\r\n                \r\n                resetTranscript()\r\n            },\r\n            \r\n        },\r\n        {\r\n            command: 'show',\r\n            // @ts-ignore\r\n            callback: (  { resetTranscript }  ) => {\r\n                console.log('next go to props')\r\n                setAnswer(!answer) // скрыл показал answer\r\n                resetTranscript() // очистил кэш\r\n            },\r\n            \r\n        }\r\n    ]\r\n\r\n    // const { transcript, resetTranscript } = useSpeechRecognition({commands})\r\n\r\n    if (!SpeechRecognition.browserSupportsSpeechRecognition()) {\r\n        return null\r\n    }\r\n\r\n    const onStartRus = () => {\r\n        SpeechRecognition.stopListening()\r\n        SpeechRecognition.startListening({ language: 'ru-RU', continuous: true })\r\n    }\r\n    const onStart = () => {\r\n        SpeechRecognition.stopListening()\r\n        SpeechRecognition.startListening({ language: 'en-US', continuous: true })\r\n    }\r\n\r\n    const onStop = () => {\r\n        SpeechRecognition.stopListening()\r\n    }\r\n\r\n    const showAnswer = () => {\r\n        setAnswer(!answer)\r\n    }\r\n\r\n    const onNext = (step:number) => {\r\n        setAnswer(false)\r\n        setTargetIndex(targetIndex+step)\r\n        // resetTranscript()\r\n    }\r\n\r\n    console.log(props)\r\n    console.log(targetIndex)\r\n\r\n    // if (isSpeaking !== targetIndex && props.toLern.length !== 0) {\r\n    //     speechSynthesis(props.toLern[targetIndex].name, 'ru-RU')\r\n    //     setIsSpeaking(targetIndex)\r\n    // }\r\n     \r\n\r\n    if (props.toLern.length !== 0) {\r\n        return (\r\n            <div>\r\n                <div>v1.6</div>\r\n                <Button className=\"m-2\" type=\"primary\" onClick={onStartRus}>StartRus</Button>\r\n                <Button className=\"m-2\" type=\"primary\" onClick={onStart}>StartEng</Button>\r\n                <Button className=\"m-2\" type=\"primary\" onClick={onStop}>Stop</Button>\r\n                {/* <Button className=\"m-2\" type=\"primary\" onClick={resetTranscript}>Reset</Button> */}\r\n                {/* <h1>{transcript}</h1> */}\r\n    \r\n                <h1>{props.toLern.length >= targetIndex-1 ? props.toLern[targetIndex].name : null}</h1>\r\n                <Button className=\"m-2\" type=\"primary\" onClick={()=>{onNext(-1)}}>Prev</Button>\r\n                <Button className=\"m-2\" type=\"primary\" onClick={showAnswer}>Show</Button>\r\n                <Button className=\"m-2\" type=\"primary\" onClick={()=>{onNext(1)}}>Next</Button>\r\n    \r\n                <h1>{answer ? props.toLern[targetIndex].name : null}</h1>\r\n            </div>\r\n        )\r\n    } else {\r\n        return <div>spin</div>\r\n    }\r\n    \r\n}\r\n\r\nexport default Trening","import {connect} from 'react-redux'\r\nimport Trening from './Trening'\r\n// import {actions} from '../../redux/authReducer'\r\nimport { AppStateType } from '../../../redux/store'\r\nimport {updateVocabulary} from './../../../redux/vocabularyReducer'\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype OwnEnglishType = {\r\n\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    updateVocabulary: (values: any, vocabularyId: number)=>void\r\n}\r\n\r\nexport type TreningPropsType = MapPropsType & MapDispatchPropsType & OwnEnglishType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        vocabularyList: state.vocabulary.vocabularyList,\r\n        part: state.vocabulary.part,\r\n        count: state.vocabulary.count,\r\n        toLern: state.vocabulary.toLern,\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnEnglishType, AppStateType>(mapStateToProps, \r\n    {updateVocabulary}) \r\n    (Trening)\r\n    \r\n\r\n","import React, { ReactNode, useState } from 'react'\r\nimport { Form, Field, FormikProps } from \"formik\"\r\nimport { AntInput} from '../../../utils/Formik/CreateAntField'\r\nimport { validateRequired } from '../../../utils/Formik/ValidateFields'\r\nimport { Switch } from 'antd'\r\n\r\nconst CarTrenerSettingsForm: ((props: FormikProps<{}>) => ReactNode) = (props) => {\r\n    const [checkType, setCheckType] = useState<'say'|'check'|'write'>('check')\r\n\r\n    const onCheckTypeChange = (checkType: 'say'|'check'|'write') => {\r\n        setCheckType(checkType)\r\n        console.log(checkType)\r\n        // props.values.checkType = checkType\r\n        props.setValues({\r\n            ...props.values,\r\n            checkType\r\n        })\r\n        props.submitForm()\r\n    }\r\n    return (\r\n        <Form \r\n            className=\"form-container mt-3\"\r\n            onSubmit={props.handleSubmit}\r\n        >\r\n            {/* <Field\r\n                component={AntInputNumber}\r\n                name=\"name\"\r\n                type=\"number\"\r\n                label=\"Words compare count\"\r\n                validate={validateRequired}\r\n                hasFeedback\r\n            /> */}\r\n            <Field\r\n                component={AntInput}\r\n                name=\"compareCount\"\r\n                type=\"number\"\r\n                label=\"Words compare count\"\r\n                validate={validateRequired}\r\n                hasFeedback\r\n            />\r\n            <Field\r\n                component={AntInput}\r\n                name=\"learnCount\"\r\n                type=\"number\"\r\n                label=\"Words learn count\"\r\n                validate={validateRequired}\r\n                hasFeedback\r\n            />\r\n\r\n                    <Switch key=\"1\" className=\"mx-1\" checkedChildren=\"check\" unCheckedChildren=\"check\" \r\n                        checked={checkType === 'check' ? true : false}\r\n                        onChange={()=>{onCheckTypeChange('check')}}\r\n                    />,\r\n                    <Switch key=\"2\" className=\"mx-1\" checkedChildren=\"say\" unCheckedChildren=\"say\"\r\n                        checked={checkType === 'say' ? true : false}\r\n                        onChange={()=>{onCheckTypeChange('say')}}\r\n                    />,\r\n                    <Switch key=\"3\" className=\"mx-1\" checkedChildren=\"write\" unCheckedChildren=\"write\"\r\n                        checked={checkType === 'write' ? true : false}\r\n                        onChange={()=>{onCheckTypeChange('write')}}\r\n                    />\r\n            <ul>\r\n                <h3>Заучивание слов</h3>\r\n                <li>1. Выбор изсписка</li>\r\n                <li>2. Написание слова</li>\r\n                <li>3. Произнесение слова</li>\r\n            </ul>\r\n            \r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default CarTrenerSettingsForm","import React, { useState, useEffect } from 'react'\r\nimport { LerningWordsPropsType } from '../LerningWords/LerningWordsContainer'\r\n\r\n// import SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition'\r\nimport { Button } from 'antd'\r\nimport { ConsoleView } from 'react-device-detect';\r\n// import { ConsoleView } from 'react-device-detect'\r\n// import SpeechRecognition from 'react-speech-recognition';\r\n// const SpeechRecognition = window.SpeechRecognition\r\n\r\n// @ts-ignore\r\nconst SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\r\nvar synth = window.speechSynthesis;\r\n\r\n// SpeechRecognition.startListening()\r\n\r\nconst SayingWords: React.FC<LerningWordsPropsType> = (props) => {\r\n    const [record, setRecord] = useState<string>()\r\n    const [status, setStatus] = useState(false)  // запущен ли recognition\r\n    const [recognition, setRecognition] = useState(new SpeechRecognition())\r\n\r\n    const [tergetName, setTergetName] = useState<string>(props.rand ? props.target.name : props.target.relations[0].name)\r\n    const [targetAnswer, setTargetAnswer] = useState<string>(props.rand ? props.target.relations[0].name : props.target.name)\r\n    const [targetLang, setTargetLang] = useState<\"ru-RU\"|\"en-US\">()\r\n    const [ansswerLang, setAnswerLang] = useState<\"ru-RU\"|\"en-US\">()\r\n    \r\n    const [voices] = useState( window.speechSynthesis.getVoices() )\r\n    const [ok, setOk] = useState(false)\r\n\r\n    const [recognizing, setRecognizing] = useState(false)\r\n    // let recognizing = false;\r\n\r\n    const [speachResults, setSpeachResults] = useState<Array<string>>([])\r\n\r\n    useEffect(()=> {\r\n        console.log('!!!', recognizing, tergetName)\r\n        \r\n        if (!recognizing) {\r\n            // recognition.start()\r\n            // // console.log('!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!started')\r\n            // setRecognizing(true)\r\n            try {\r\n                recognition.start()\r\n            } catch (error) {\r\n                console.log('!!!!!!!!!!!!!!!!!!!error')\r\n                setRecognizing(false) // ?????\r\n            } finally {\r\n                setRecognizing(true)\r\n            }\r\n        }\r\n    },[recognizing])\r\n\r\n    useEffect(()=> {\r\n        console.log('!!!!!!!!!!!!!!!!!!!props.target changed')\r\n        setTergetName(props.rand ? props.target.name : props.target.relations[0].name)\r\n        setTargetAnswer(props.rand ? props.target.relations[0].name : props.target.name)\r\n        setTargetLang(!props.rand ? \"ru-RU\":\"en-US\")\r\n        setAnswerLang(props.rand ? \"ru-RU\":\"en-US\")\r\n        // setStatus(true)\r\n\r\n        // if (props.isShowAudio) {\r\n        //     speak(utterThis)\r\n        // }\r\n\r\n        const newSpechInstanse = newSpech(props.rand ? props.target.name : props.target.relations[0].name)\r\n        const lang = !props.rand ? \"ru-RU\":\"en-US\"\r\n        newSpechInstanse.voice = voices.filter(item => item.lang === lang)[0]\r\n        console.log('??????????????????????????????', newSpechInstanse)\r\n        speak(newSpechInstanse, true)\r\n\r\n        recognition.lang = props.rand ? \"ru-RU\":\"en-US\"\r\n\r\n    },[props.target])\r\n\r\n        recognition.interimResults = true\r\n        // recognition.lang = props.rand ? 'ru-RU' : 'en-US'\r\n\r\n        recognition.onaudiostart = function () {\r\n            setStatus(true)\r\n            // setRecognizing(true);\r\n            // console.log('setRecognizing(true)')\r\n            // console.log('onaudiostart')\r\n        }\r\n\r\n        recognition.onaudioend = ()=> {}\r\n\r\n        recognition.onresult = function(event) {\r\n            console.log('onresult: ')\r\n            for(let i=0; i<event.results.length; i++) {\r\n                // setStatus(false)\r\n                // recognition.abort()\r\n                // console.log('stop()')\r\n\r\n                // console.log('--------------------: ',event.results[i][0].transcript)\r\n                // console.log(i,')',event.results[i][0].transcript,': ',{...event.results[i]})\r\n                let speachResultsCopy = [...speachResults]\r\n                speachResultsCopy.push(event.results[i][0].transcript)\r\n                setSpeachResults(speachResultsCopy)\r\n                \r\n                // const newSpechInstanse = newSpech(event.results[i][0].transcript)\r\n                // const lang = !props.rand ? \"en-US\" : \"ru-RU\"\r\n                // newSpechInstanse.voice = voices.filter(item => item.lang === lang)[0]\r\n                // speak(newSpechInstanse, true)\r\n            }\r\n            // console.log(event.results)\r\n        }\r\n\r\n        recognition.onend = ()=> {\r\n            console.log('onend', recognizing)\r\n            // console.log('onend statusToSpeach: ', status)\r\n            // console.log(speachResults)\r\n            if (status) {\r\n                console.log('начинаем сравнивать')\r\n                // checking targetAnswer vs speachResults\r\n                let success = false;\r\n                speachResults.forEach(result => {\r\n                    // console.log(result)\r\n                    if (result.toLocaleLowerCase().includes(targetAnswer.toLocaleLowerCase()) ) {\r\n                        // console.log('!!!!!!!!!!',result)\r\n                        success = true\r\n                    }\r\n                })\r\n\r\n                const lastResult = speachResults[speachResults.length-1]\r\n                console.log('speachResults: ', [...speachResults])\r\n                // console.log('lastResult: ', lastResult)\r\n                setSpeachResults([])\r\n\r\n                if (success) {\r\n                    console.log('success = true')\r\n                    const correctResult = !props.rand ? '. Correct result!':'. Верно!'\r\n                    const newSpechInstanse = newSpech(lastResult + correctResult)\r\n                    const lang = !props.rand ? \"en-US\" : \"ru-RU\"\r\n                    newSpechInstanse.voice = voices.filter(item => item.lang === lang)[0]\r\n                    speak(newSpechInstanse, true)\r\n\r\n                    props.checkTestResult({\r\n                        result: 'success',\r\n                        checkMethod: !props.rand ? 'en_ru_s' : 'ru_en_s'\r\n                    }, props.target.id)\r\n                    console.log('props.next(1)')\r\n                    props.next(1)\r\n                    // setStatus(false)\r\n                } else {\r\n                    console.log('success = false')\r\n                    const isComand = lastResult !== undefined ? checkComands(lastResult) : ''\r\n\r\n                    if (isComand === '') {\r\n                        if (lastResult!== undefined) {\r\n                            console.log(lastResult.toLowerCase())\r\n\r\n                            const newSpechInstanse = newSpech(!props.rand ? 'wrong!':'Не верно!')\r\n                            const lang = !props.rand ? \"en-US\" : \"ru-RU\"\r\n                            newSpechInstanse.voice = voices.filter(item => item.lang === lang)[0]\r\n                            console.log(newSpechInstanse)\r\n                            speak(newSpechInstanse, true)\r\n                            // recognition.start()\r\n                            setRecognizing(true)\r\n                            console.log('!!!setRecognizing(true)', recognizing)\r\n                        } else {\r\n                            \r\n                            console.log('NOT COMAND BUT EMPTY')\r\n\r\n\r\n\r\n\r\n                            console.log('recognition', recognition)\r\n                            console.log('recognizing', recognizing)\r\n                            startLisent()\r\n                        }\r\n                    } else {\r\n                        console.log('isComand: ',isComand)\r\n                        recognition.abort() \r\n                        const newSpechInstanse = newSpech(isComand)\r\n                        const lang = !props.rand ? \"en-US\" : \"ru-RU\"\r\n                        newSpechInstanse.voice = voices.filter(item => item.lang === lang)[0]\r\n                        speak(newSpechInstanse, true)\r\n                    }\r\n                    \r\n                }\r\n\r\n                // setStatus(false)\r\n                // console.log('!!!!!!!!', status)\r\n                // recognition.start()\r\n            } else {\r\n                console.log('НАДО ЗАПУСТИТЬ')\r\n            }\r\n        }\r\n\r\n        recognition.onerror = function(event) {\r\n            console.log('Speech recognition error detected: ' + event.error);\r\n        }\r\n\r\n        recognition.onnomatch = function() {\r\n            console.log('Speech not recognized');\r\n        }\r\n        recognition.onsoundstart = function() {\r\n            // console.log('Some sound is being received');\r\n        }\r\n        recognition.onsoundend = function() {\r\n            console.log('Звук перестал приниматься', recognizing);\r\n        }\r\n\r\n        \r\n        // setStatus(true)\r\n\r\n        // console.log(tergetName)\r\n\r\n        const utterThis = new SpeechSynthesisUtterance(tergetName)\r\n        const lang = props.rand ? \"en-US\" : \"ru-RU\"\r\n        utterThis.voice = voices.filter(item => item.lang === lang)[0]\r\n        // \r\n        \r\n        const startLisent = (check: string|undefined = undefined ) => {\r\n            setRecognizing(false)\r\n        }\r\n\r\n        const newSpech = (text: string): SpeechSynthesisUtterance => {\r\n            return new SpeechSynthesisUtterance(text)\r\n        }\r\n        \r\n        const speak = (utterThisItem: SpeechSynthesisUtterance, need?: boolean) => {\r\n            recognition.abort()\r\n            if (!ok || need) {\r\n                window.speechSynthesis.speak(utterThisItem)\r\n                console.log('speechSynthesis.speak: ', utterThisItem.text)\r\n                setOk(true)\r\n                checkPendidng(window.speechSynthesis, startLisent)\r\n            }\r\n        }\r\n\r\n        // if (props.isShowAudio) {\r\n        //     speak(utterThis)\r\n        // }\r\n\r\n        // console.log('speachResults: ', speachResults)\r\n\r\n    return (\r\n        <div>\r\n            v1.34) SayingWords<br/>\r\n            <h4>tergetName: {tergetName}= targetAnswer:{targetAnswer}</h4>\r\n            <p>{record}</p>\r\n            <p>Язык на котором сказали текст: <b>{targetLang}</b> ({!targetLang})</p>\r\n            <p>Язык восприятия речи: <b>{ansswerLang}</b></p>\r\n            <p>Реальный Язык восприятия речи: <b>{recognition.lang}</b></p>\r\n            <p>Запись звука: {recognizing ? 'Да' : 'Нет'}</p>\r\n        \r\n        <Button className=\"btntooc\" type=\"primary\" onClick={()=>{startLisent()}}>speak</Button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SayingWords\r\n\r\nconst checkPendidng = (speechSynthesis: SpeechSynthesis, startLisent:()=>void) => {\r\n    setTimeout(() => {\r\n        if (speechSynthesis.speaking || speechSynthesis.pending) {\r\n            checkPendidng(speechSynthesis, startLisent)\r\n            console.log('WAIT')\r\n        } \r\n        else {\r\n            console.log('startLisent from checkPendidng')\r\n            startLisent()\r\n        }\r\n    }, 100);\r\n}\r\n\r\nconst checkComands = (lastResult:string): string => {\r\n    if (lastResult.toLocaleLowerCase().includes('next') ) {\r\n        return 'next'\r\n    }\r\n    if (lastResult.toLocaleLowerCase().includes('следующий') ) {\r\n        return 'следующий'\r\n    }\r\n\r\n    return ''\r\n}","import { Checkbox, List, Spin } from 'antd'\r\nimport { Button } from 'antd'\r\nimport { CheckboxChangeEvent } from 'antd/lib/checkbox'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { WordType } from '../../../../api/vocabularyAPI'\r\nimport SayingWords from '../SayingWords/SayingWords2'\r\nimport { LerningWordsPropsType } from './LerningWordsContainer'\r\n\r\n\r\ntype ParentIdType = {\r\n    parentId: number,\r\n    styles?: string,\r\n    checked: boolean\r\n}\r\ntype RelationsType = WordType & ParentIdType\r\n\r\nconst LerningWords: React.FC<LerningWordsPropsType> = (props) => {\r\n    // console.log('LerningWords props: ', props)\r\n    const [selectedWordsIds, setselectedWordsIds] = useState<Array<number>>([])\r\n    const [wordsToCompare, setWordsToCompare] = useState<Array<RelationsType>>([])\r\n\r\n    const error = 'bg-danger text-white'\r\n    const success = 'bg-success text-white'\r\n\r\n    useEffect( () => {},[wordsToCompare])\r\n\r\n    useEffect( () => {\r\n        // const rand = getRandomInt(2)\r\n        // const rand = 0\r\n        // console.log('!!!!!!!!!!!!', props.rand)\r\n        if (props.rand) {\r\n            setWordsToCompare( getWordsToCompare(props.wordsArray, props.wordsCount, props.target) )\r\n            setselectedWordsIds([])\r\n        } else {\r\n            const rus = reverseWordsArray(props.wordsArray, props.target)\r\n            setWordsToCompare( getWordsToCompare(rus.wordsRus, props.wordsCount, rus.targetRus) )\r\n            setselectedWordsIds([])\r\n        }\r\n        \r\n    },[props, props.target])\r\n\r\n    const choiseValues = (parentId: number, id: number, checked: boolean) => {\r\n        let wordsToCompareCopy = [...wordsToCompare].map( (i, index) => {\r\n            if ( i.id === id) {\r\n                return({ ...i, checked: !wordsToCompare[index].checked, styles: '' })\r\n            } else { return i }\r\n        })\r\n        console.log('wordsToCompareCopy: ', wordsToCompareCopy)\r\n        setWordsToCompare(wordsToCompareCopy)\r\n\r\n        let newNelectedWordsIds: Array<number> = []\r\n\r\n        if (checked) {\r\n            newNelectedWordsIds = [...selectedWordsIds]\r\n            newNelectedWordsIds.push(parentId)\r\n        } else {\r\n            newNelectedWordsIds = selectedWordsIds.filter( i => i !== parentId)\r\n        }\r\n        setselectedWordsIds(newNelectedWordsIds)\r\n    }\r\n\r\n    const onCheckEng = (lang: number) => {\r\n        console.log('selectedWordsIds: ', selectedWordsIds)\r\n        console.log('wordsToCompare: ', wordsToCompare)\r\n        const thisTarget = lang ? props.target : {...props.target.relations[0], relations: [props.target]}\r\n        console.log('thisTarget: ', thisTarget)\r\n\r\n        const check = selectedWordsIds.filter(i =>  i !== thisTarget.id)\r\n            // if (lang) {\r\n            //     console.log(i,'-1')\r\n            //     return i !== thisTarget.id\r\n            // } else {\r\n            //     console.log(i,'-0: ', thisTarget.relations[0].id, '-', thisTarget.id)\r\n            //     return i !== thisTarget.relations[0].id\r\n            // }\r\n        // })\r\n        console.log('check: ', check)\r\n\r\n        if (selectedWordsIds.length !== 0) {\r\n            if (check.length !== 0) {\r\n                // console.log(check)\r\n                const hits = selectedWordsIds.filter(i => i === thisTarget.id)\r\n                onError(check, hits)\r\n                props.checkTestResult({\r\n                    result: 'error',\r\n                    checkMethod: 'en_ru_c'\r\n                }, props.target.id)\r\n            } else {\r\n                // сохраняем результат в БД\r\n                if (props.target) {\r\n                    props.checkTestResult({\r\n                        result: 'success',\r\n                        checkMethod: 'en_ru_c'\r\n                    }, props.target.id)\r\n                }\r\n                \r\n                console.groupCollapsed('Данные для отправки на сервер');\r\n                    console.log('target: ', props.target)\r\n                console.groupEnd();\r\n                // Перешагиваем на другое слово\r\n                props.next(1)\r\n            }\r\n        } else {\r\n            alert('Please choise!')\r\n        }\r\n        \r\n    }\r\n\r\n    const onError = (errors: Array<number>, hits:Array<number>) => {\r\n        let wordsToCompareCopy = [...wordsToCompare]\r\n        for (let index = 0; index < wordsToCompare.length; index++) {\r\n            if (errors.includes(wordsToCompareCopy[index].parentId)) {\r\n                wordsToCompareCopy[index].styles = error\r\n            }\r\n            if (hits.includes(wordsToCompareCopy[index].parentId)) {\r\n                wordsToCompareCopy[index].styles = success\r\n            }\r\n        }\r\n        console.log(wordsToCompareCopy)\r\n        setWordsToCompare(wordsToCompareCopy)\r\n    }\r\n\r\n    console.log('checkType: ', props.checkType)\r\n\r\n    if (wordsToCompare.length === 0) {\r\n        console.log('wordsToCompare: ', wordsToCompare)\r\n        return <Spin size=\"large\" />\r\n    }\r\n    if (props.checkType === 'check') {\r\n        return (\r\n            <div>\r\n                <List\r\n                header={<span>Выберите правельные значения:</span>}\r\n                // footer={<div>Footer</div>}\r\n                size=\"small\"\r\n                bordered\r\n                dataSource={wordsToCompare}\r\n                renderItem={ item => (\r\n\r\n                        <h3 className={'my-1 '+item.styles}>\r\n                            <Checkbox \r\n                                onChange={(e: CheckboxChangeEvent)=>{ choiseValues(item.parentId, item.id, e.target.checked) }}\r\n                                checked={item.checked}\r\n                            >\r\n                                {item.name}\r\n                            </Checkbox>\r\n                        </h3>\r\n\r\n                )}\r\n                />\r\n                <Button className=\"mt-3\" onClick={()=>{onCheckEng(props.rand)}} type=\"primary\">Check</Button>\r\n            </div>\r\n    )\r\n    }\r\n    if (props.checkType === 'say') {\r\n        // alert('say')\r\n        return <SayingWords {...props} />\r\n    }\r\n\r\n    if (props.checkType === 'write') {\r\n        return <div>write</div>\r\n    }\r\n\r\n    return <div>?2??{props.checkType}???</div>\r\n}\r\n\r\nexport default LerningWords\r\n\r\nconst shuffle = (array: Array<any>): Array<any> => {\r\n    var currentIndex = array.length, temporaryValue, randomIndex;\r\n\r\n    while (0 !== currentIndex) {\r\n\r\n        randomIndex = Math.floor(Math.random() * currentIndex);\r\n        currentIndex -= 1;\r\n\r\n        temporaryValue = array[currentIndex];\r\n        array[currentIndex] = array[randomIndex];\r\n        array[randomIndex] = temporaryValue;\r\n    }\r\n\r\n    return array;\r\n}\r\n\r\nconst getWordsToCompare = (words: Array<WordType>, wordsCount: number, target: WordType | undefined): Array<RelationsType> => {\r\n    let wordsToCompare: Array<RelationsType> = []\r\n    let wordsToCompareLength = 0\r\n\r\n    words = [...words]\r\n    \r\n\r\n    // console.group('getWordsToCompare')\r\n    // console.log('words: ', words)\r\n    // console.log('wordsCount: ', wordsCount)\r\n    // console.log('target: ', target)\r\n\r\n    if (target) {\r\n        \r\n\r\n        while (wordsToCompareLength !== wordsCount) {\r\n            // console.log(wordsToCompare.length)\r\n            // console.log(words.length)\r\n            let index = getRandomInt(words.length)\r\n            let relations: Array<RelationsType> = []\r\n            if (words[index].id !== target.id) {\r\n                // console.log(words[index].id,' !== ',target.id)\r\n                if( words[index].relations) {\r\n                    relations = words[index].relations.map((item) => {\r\n                        // console.log(item.id,'=>',item.name, '(',target.id,')|', index,'-',words)\r\n                        return ({\r\n                            ...item,\r\n                            parentId: words[index].id,\r\n                            checked: false\r\n                        })\r\n                   })\r\n                   // Удаляем элемент\r\n                   words.splice(index, 1);\r\n               } \r\n   \r\n               wordsToCompare = wordsToCompare.concat(relations)\r\n               wordsToCompare = wordsToCompare.filter((v, i, arr) => arr.indexOf(v) === i)\r\n               wordsToCompareLength++\r\n            }\r\n        }\r\n        let targetRelations: Array<RelationsType> = []\r\n        if (target.relations) {\r\n            targetRelations = target.relations.map((item) => {\r\n                // console.log('!!!!!!!!!!!',item.id,'=>',item.name)\r\n                return ({\r\n                    ...item,\r\n                    parentId: target.id,\r\n                    checked: false\r\n                })\r\n            })\r\n        }\r\n        // console.log('targetRelations: ', targetRelations)\r\n\r\n        wordsToCompare = wordsToCompare.concat(targetRelations)\r\n        wordsToCompare = shuffle(wordsToCompare)\r\n    } \r\n\r\n    // console.log('wordsToCompare: ', wordsToCompare)\r\n    // console.groupEnd();\r\n\r\n    return wordsToCompare\r\n}\r\n\r\nconst getRandomInt = (max: number) => Math.floor(Math.random() * Math.floor(max))\r\n\r\nconst reverseWordsArray = (words: Array<WordType>, target: WordType) => {\r\n    const targetRus = {\r\n        ...target.relations[0],\r\n        relations: [target]\r\n    }\r\n\r\n    let wordsRus: Array<WordType> = []\r\n    words.map( word => {\r\n        const itemRelations = word.relations.map( item => {\r\n            return {\r\n                ...item,\r\n                relations: [word]\r\n            }\r\n        })\r\n        wordsRus = wordsRus.concat(itemRelations)\r\n    })\r\n\r\n    return {targetRus, wordsRus}\r\n}","import {connect} from 'react-redux'\r\nimport LerningWords from './LerningWords'\r\nimport {actions, checkTestResult, getWordsToLern} from '../../../../redux/vocabularyReducer'\r\nimport { AppStateType } from '../../../../redux/store'\r\nimport {updateVocabulary} from '../../../../redux/vocabularyReducer'\r\nimport { CheckTestResultDataType, WordType } from '../../../../api/vocabularyAPI'\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype OwnLerningWordsPropsType = {\r\n    englishWords: Array<WordType>,\r\n    wordsCount: number,\r\n    next: (num: number)=>void\r\n    target: WordType,\r\n    rand: number,\r\n    checkType?: 'check' | 'say' | 'write'\r\n    isShowRelations?: boolean\r\n    isShowAudio?: boolean\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    updateVocabulary: (values: any, vocabularyId: number)=>void,\r\n    setLerningTarget: (learningTarget: WordType) => void,\r\n    checkTestResult: (values: CheckTestResultDataType, wordId: number)=>void,\r\n    getWordsToLern: ()=>void,\r\n}\r\n\r\nexport type LerningWordsPropsType = MapPropsType & MapDispatchPropsType & OwnLerningWordsPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        // target: state.vocabulary.learningTarget,\r\n        wordsArray: state.vocabulary.toLern,\r\n        // wordsCount: state.vocabulary.count,\r\n        // toLern: state.vocabulary.toLern,\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnLerningWordsPropsType, AppStateType>(mapStateToProps, \r\n    {updateVocabulary, setLerningTarget: actions.setLerningTarget, checkTestResult, getWordsToLern}) \r\n    (LerningWords)\r\n    \r\n\r\n","import { Button, Collapse, Spin, Switch } from 'antd'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { NotificationOutlined } from '@ant-design/icons'\r\nimport { Formik } from 'formik'\r\nimport CarTrenerSettingsForm from './CarTrenerSettings'\r\nimport LerningWords from './LerningWords/LerningWordsContainer'\r\n// import { WordType } from '../../../api/vocabularyAPI'\r\nimport { CarTrenerPropsType } from './CarTrenerContainer'\r\n\r\nconst { Panel } = Collapse\r\nconst getRandomInt = (max: number) => Math.floor(Math.random() * Math.floor(max))\r\n\r\nconst CarTrener: React.FC<CarTrenerPropsType> = (props) => {\r\n    const [voices] = useState( window.speechSynthesis.getVoices() )\r\n    const [target, settarget] = useState<number>(0)\r\n    const [isShowRelations, setIsShowRelations] = useState(false)\r\n    const [isShowAudio, setIsShowAudio] = useState(false)\r\n    const [isLern, setIsLern] = useState(true)\r\n    const [checkType, setCheckType] = useState<'say'|'check'|'write'>('check')\r\n    \r\n    const rand = getRandomInt(2)\r\n\r\n    useEffect( ()=> {\r\n        if (props.toLern.length === 0) {\r\n            props.getWordsToLern()\r\n        } \r\n    },[props, props.toLern])\r\n\r\n    type InitialSettingsValuesType = {\r\n        compareCount: number,\r\n        learnCount: number,\r\n        checkType?: 'say'|'check'|'write'\r\n    }\r\n\r\n    const initialSettingsValues: InitialSettingsValuesType = {\r\n        compareCount: 5,\r\n        learnCount: 27\r\n    }\r\n\r\n    const onMove = (step: number) => {\r\n        if (target!==undefined) {\r\n            if ( target + step >= 0 && target + step <= props.englishWords.length - 1) {\r\n                if (props.toLern.length > target+1) {\r\n                    settarget(target + step)\r\n                } else {\r\n                    props.getWordsToLern()\r\n                    settarget(0)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    const handleSubmit = (values: InitialSettingsValuesType) => {\r\n        console.log('handleSubmit: ', values)\r\n        if (values.checkType !== undefined) {\r\n            setCheckType(values.checkType)\r\n        }\r\n    }\r\n\r\n    const skipWord = (val:any) => {\r\n        // console.log(val)\r\n        props.skipWord(val)\r\n        onMove(1)\r\n    }\r\n\r\n    if (props.toLern.length === 0) {\r\n        return <Spin size=\"large\" />\r\n    }\r\n    return (\r\n        <div>\r\n            <Collapse className=\"my-0\" defaultActiveKey={[]}>\r\n                <Panel header=\"Settings v 1.9\" key=\"1\" extra={[\r\n                    <Switch key=\"1\" className=\"mx-1\" checkedChildren=\"show\" unCheckedChildren=\"show\" checked={isShowRelations}\r\n                        onClick={(checked: boolean, event: Event) => {\r\n                            setIsShowRelations(!isShowRelations)\r\n                            event.stopPropagation();\r\n                        }}\r\n                    />,\r\n                    <Switch key=\"2\" className=\"mx-1\" checkedChildren=\"audio\" unCheckedChildren=\"audio\"\r\n                        onClick={(checked: boolean, event: Event) => {\r\n                            setIsShowAudio(!isShowAudio)\r\n                            event.stopPropagation();\r\n                        }}\r\n                    />,\r\n                    <Switch key=\"3\" className=\"mx-1\" checkedChildren=\"lern\" unCheckedChildren=\"lern\"\r\n                        checked = {isLern}\r\n                        onClick={(checked: boolean, event: Event) => {\r\n                            if (checked) {\r\n                                setIsShowRelations(false)\r\n                            }\r\n                            setIsLern(checked)\r\n                            event.stopPropagation();\r\n                        }}\r\n                    />,\r\n                ]}  >\r\n                    <Formik\r\n                        initialValues={initialSettingsValues}\r\n                        onSubmit={handleSubmit}\r\n                        enableReinitialize={true}\r\n                    >\r\n                        {CarTrenerSettingsForm}\r\n                    </Formik>\r\n\r\n                    {/* <h5>{utterThis ? utterThis.voice.name : null}</h5>\r\n\r\n                    {voices.map(item=> {\r\n                        return <p key={item.lang}>{item.lang}</p>\r\n                    } )} */}\r\n                </Panel>\r\n            </Collapse>\r\n            <div className=\"d-flex justify-content-center\">\r\n                <Button className=\"mr-5\" type=\"primary\" onClick={() => { onMove(-1) }}>prev</Button>\r\n                <Button className=\"mx-0\" type=\"ghost\" onClick={() => {skipWord(props.toLern[target].id)}}>Know it</Button>\r\n                <Button className=\"ml-5\" type=\"primary\" onClick={() => { onMove(1) }}>next</Button>\r\n            </div>\r\n\r\n\r\n            \r\n                <div className=\"d-flex flex-wrap align-content-start ml-1\">\r\n                    {isShowAudio ?\r\n                        <Button\r\n                            className=\"mt-4 mr-3\"\r\n                            type=\"ghost\"\r\n                            shape=\"round\"\r\n                            size=\"small\"\r\n                            style={{ marginLeft: 10 }}\r\n                            icon={\r\n                                <div className=\"d-flex flex-wrap align-content-start\">\r\n                                    <NotificationOutlined style={{ fontSize: '18px' }} />\r\n                                    <span className=\"my-1\" style={{ fontSize: '14px' }}></span>\r\n                                </div>}\r\n                        />\r\n                        : null}\r\n\r\n                        {props.toLern.length === 0 ? \r\n                            <Spin size=\"large\" />\r\n                        :\r\n                        <>\r\n                        <span className=\"mt-3 mr-3\">{props.toLern[target].id}</span>\r\n                        <h1 className=\"my-0 mt-1\">{rand ? props.toLern[target].name : props.toLern[target].relations[0].name}</h1>\r\n                        <span className=\"mt-3 ml-3\" > - {props.toLern[target].description}</span>\r\n                            \r\n                        </>\r\n                        }\r\n                        \r\n                </div>\r\n\r\n            {/* <div>\r\n                {isShowRelations ?\r\n                    props.toLern[target].relations.map((item: any) => {\r\n                        return <h4 key={item.id}>{props.toLern[target].name}- {item.name}</h4>\r\n                    })\r\n                    : null\r\n                }\r\n            </div> */}\r\n\r\n            {isLern && props.toLern.length !== 0 ?\r\n\r\n            <LerningWords \r\n                rand = {rand}\r\n                next={onMove} \r\n                englishWords={props.toLern} \r\n                wordsCount={initialSettingsValues.compareCount}\r\n                isShowRelations={isShowRelations}\r\n                target={props.toLern[target]}\r\n                checkType = {checkType}\r\n                isShowAudio={isShowAudio}\r\n            />\r\n\r\n            // <SayingWords />\r\n            // <></>\r\n            : null }\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CarTrener","import {connect} from 'react-redux'\r\nimport CarTrener from './CarTrener'\r\nimport {actions} from '../../../redux/vocabularyReducer'\r\nimport { AppStateType } from '../../../redux/store'\r\nimport {updateVocabulary, getWordsToLern, skipWord} from './../../../redux/vocabularyReducer'\r\nimport { WordType } from '../../../api/vocabularyAPI'\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype OwnCarTrenerPropsType = {\r\n    englishWords: Array<any>\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    updateVocabulary: (values: any, vocabularyId: number)=>void,\r\n    setLerningTarget: (learningTarget: WordType) => void,\r\n    getWordsToLern: ()=>void,\r\n    skipWord: (wordId: number) => void,\r\n}\r\n\r\nexport type CarTrenerPropsType = MapPropsType & MapDispatchPropsType & OwnCarTrenerPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        // learningTarget: state.vocabulary.learningTarget,\r\n        // part: state.vocabulary.part,\r\n        // count: state.vocabulary.count,\r\n        toLern: state.vocabulary.toLern,\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnCarTrenerPropsType, AppStateType>(mapStateToProps, \r\n    {updateVocabulary, setLerningTarget: actions.setLerningTarget, getWordsToLern, skipWord}) \r\n    (CarTrener)\r\n    \r\n\r\n","import { Button, List, Pagination, Tabs } from 'antd'\r\nimport React, { useEffect } from 'react'\r\nimport { EnglishPropsType } from './EnglishContainer'\r\nimport { WordType } from './../../api/vocabularyAPI'\r\n\r\nimport Trening from './Trening/TreningContainer'\r\nimport CarTrener from './CarTrener/CarTrenerContainer'\r\n\r\nconst { TabPane } = Tabs\r\n\r\nconst English: React.FC<EnglishPropsType> = (props) => {\r\n    useEffect(() => {\r\n        if (props.vocabularyList.length === 0) {\r\n            props.getVocabularyList(1)\r\n        }\r\n    }, [props])\r\n\r\n    useEffect(() => {\r\n        // props.getVocabularyList(1)\r\n    }, [props.vocabularyList, props.count, props.part])\r\n\r\n    const onPaginationChange = (pageNumber: number) => {\r\n        console.log(pageNumber)\r\n        props.getVocabularyList(pageNumber)\r\n    }\r\n\r\n    const onStatusChange = (id: number, status: string) => {\r\n        props.updateVocabulary({\r\n            status: status//'inProcess'\r\n        }, id)\r\n    }\r\n\r\n    return (\r\n        <Tabs defaultActiveKey=\"0\" >\r\n            <TabPane tab=\"Car Trener\" key=\"0\">\r\n                {props.vocabularyList.length !== 0 ?\r\n                <CarTrener \r\n                    englishWords={props.vocabularyList}\r\n                />\r\n                : null}\r\n                \r\n            </TabPane>\r\n            <TabPane tab=\"Vocabulary List\" key=\"1\">\r\n                <Pagination\r\n                    showQuickJumper\r\n                    // defaultCurrent={1} \r\n                    defaultPageSize={100}\r\n                    current={props.part}\r\n                    total={props.count}\r\n                    onChange={onPaginationChange}\r\n                />\r\n\r\n                <List\r\n                    size=\"small\"\r\n                    header={<div>Header</div>}\r\n                    footer={<div>Footer</div>}\r\n                    bordered\r\n                    dataSource={props.vocabularyList}\r\n                    renderItem={(item: WordType) =>\r\n                        <List.Item\r\n                        // actions={item.eng_sound ? [<a key={item.eng_sound} onClick={()=>{onPlay(item.eng_sound)}}>sound</a>] : []}\r\n                        >\r\n                            <div className=\"row w-100\">\r\n                                <div className=\"col-1 text-right\">{item.id}</div>\r\n                                <div className=\"col-2 text-right\">\r\n                                    {item.languige === 'eng' ? <b>{item.name}</b> : item.name}\r\n                                    \r\n                                </div>\r\n                                <div className=\"col-3 text-right\">\r\n                                    {item.name + ' ' + item.part_of_speech}\r\n                                </div>\r\n                            </div>\r\n                        </List.Item>\r\n                    }\r\n                />\r\n            </TabPane>\r\n\r\n            <TabPane tab=\"to Lern\" key=\"2\"></TabPane>\r\n            <TabPane tab=\"Active Vocabulary\" key=\"3\"></TabPane>\r\n            <TabPane tab=\"Trening\" key=\"4\">\r\n                <Trening />\r\n            </TabPane>\r\n        </Tabs>\r\n    )\r\n}\r\n\r\nexport default English","import {connect} from 'react-redux'\r\nimport English from './English'\r\nimport { AppStateType } from '../../redux/store'\r\nimport {getVocabularyList, updateVocabulary} from './../../redux/vocabularyReducer'\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype OwnEnglishType = {\r\n\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    getVocabularyList: (part: number)=>void,\r\n    updateVocabulary: (values: any, vocabularyId: number)=>void\r\n}\r\n\r\nexport type EnglishPropsType = MapPropsType & MapDispatchPropsType & OwnEnglishType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        vocabularyList: state.vocabulary.vocabularyList,\r\n        part: state.vocabulary.part,\r\n        count: state.vocabulary.count,\r\n        // isAuth: state.auth.isAuth,\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnEnglishType, AppStateType>(mapStateToProps, \r\n    {getVocabularyList, updateVocabulary}) \r\n    (English)\r\n    \r\n\r\n","import { Button, Checkbox, Input } from 'antd'\r\nimport { CheckboxValueType } from 'antd/lib/checkbox/Group'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { ContactType } from '../../../api/ProviderAPI'\r\nimport {ContactPropsType} from './ContactContainer'\r\n\r\nconst Contact: React.FC<ContactPropsType> = (props) => {\r\n    const [contacts, setContacts] = useState<Array<ContactType>>(props.contacts)\r\n\r\n    useEffect(()=>{\r\n        console.log('useEffect', props)\r\n        setContacts(props.contacts)\r\n    }, [props])\r\n    const addContact = () => {\r\n        console.log('addContact')\r\n        const newContact: ContactType = {\r\n            // id: contacts.length,\r\n            name: '',\r\n            phone: '',\r\n            status: 'new',\r\n            Skype: false,\r\n            Viber: false,\r\n            Telegram: false,\r\n            WhatsApp: false,\r\n        }\r\n        let contactsCopy = [...contacts]\r\n        contactsCopy.push(newContact)\r\n        setContacts(contactsCopy)\r\n    }\r\n\r\n    const saveNewContact = (contact: ContactType) => {\r\n        console.log('saveNewContact', contact)\r\n\r\n        let contactsCopy = [...contacts]\r\n\r\n        if (contact.id !== undefined) {\r\n            console.log(contactsCopy[contact.id])\r\n            contactsCopy[contact.id] = contact\r\n            contactsCopy[contact.id].status = 'old'\r\n        }\r\n\r\n        setContacts(contactsCopy)\r\n\r\n        console.log('props.parentId', props.parentId)\r\n        props.createNewContact({\r\n            ...contact,\r\n            Skype: null,\r\n            Viber: null,\r\n            Telegram: null,\r\n            WhatsApp: null,\r\n            providers_id: props.parentId\r\n        })\r\n    }\r\n\r\n    const onCancel = (index: number) => {\r\n        console.log(index)\r\n        let contactsCopy = [...contacts]\r\n        contactsCopy.splice(index, 1)\r\n        setContacts(contactsCopy)\r\n    }\r\n\r\n    const onEdit = () => {\r\n        console.log('onEdit')\r\n    }\r\n\r\n    console.log(props)\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"row \">\r\n                <div className=\"col-6 d-flex flex-row\">\r\n                    Contacts:\r\n                </div>\r\n                <div className=\"col-6 d-flex flex-row-reverse\">\r\n                    <Button disabled={!props.canAdd} onClick={addContact} size=\"small\" type=\"primary\">Add</Button>\r\n                </div>\r\n            </div>\r\n            {\r\n                contacts.map((contact, index: number) => {\r\n                    if(contact.status === 'new') {\r\n                        return <NewContactForm key={index} onCancel={onCancel} index={index} contact={contact} saveNewContact={saveNewContact}/>\r\n                    } else {\r\n                        return(\r\n                            <div key={index}>\r\n                                <div className=\"row mt-2 border p-2\">\r\n                                    <div className=\"col-3 d-flex flex-row-reverse mt-1\">\r\n                                        {contact.name}:\r\n                                    </div>\r\n                                    <div className=\"col-7 d-flex flex-row mt-1\">\r\n                                        {contact.phone}\r\n                                    </div>\r\n                                    <div className=\"col-2 d-flex flex-row\">\r\n                                        <Button onClick={onEdit} size=\"small\" type=\"ghost\">Edit</Button>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        ) \r\n                    }\r\n                })\r\n            }\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Contact\r\n\r\ntype NewContactFormPropsType = {\r\n    index: number\r\n    contact: ContactType\r\n    saveNewContact(contact: ContactType):void,\r\n    onCancel(index: number):void\r\n}\r\n\r\nconst NewContactForm: React.FC<NewContactFormPropsType> = (props) => {\r\n    const [contactData, setContactData] = useState<ContactType>({...props.contact, id: props.index})\r\n    const plainOptions = [\r\n        'Skype', \r\n        'Viber', \r\n        'Telegram', \r\n        'WhatsApp'\r\n    ]\r\n\r\n    const onChange = (checkedValue: CheckboxValueType[]) => {\r\n        console.log(checkedValue)\r\n        let contactDataCopy = {...contactData}\r\n        for (let index = 0; index < checkedValue.length; index++) {\r\n            const element = checkedValue[index];\r\n            // @ts-ignore\r\n            contactDataCopy[element] = true\r\n        }\r\n\r\n        setContactData(contactDataCopy)\r\n    }\r\n\r\n    const onSave = () => {\r\n        // return contactData\r\n        props.saveNewContact(contactData)\r\n    }\r\n    \r\n    const onNameChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        console.log(e)\r\n        setContactData({\r\n            ...contactData,\r\n            name: e.target.value\r\n        })\r\n    }\r\n\r\n    const onPhoneChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        console.log(e)\r\n        setContactData({\r\n            ...contactData,\r\n            phone: e.target.value\r\n        })\r\n    }\r\n\r\n    return(\r\n        <div className=\"mb-4\">\r\n            <div className=\"row mt-2\">\r\n                <div className=\"col-3 d-flex flex-row-reverse mt-2\">\r\n                    Name:\r\n                </div>\r\n                <div className=\"col-9 d-flex flex-row\">\r\n                    <Input onChange={onNameChange} value={contactData.name} className=\"w-100\"></Input>\r\n                </div>\r\n            </div>\r\n            <div className=\"row mt-2\">\r\n                <div className=\"col-3 d-flex flex-row-reverse mt-2\">\r\n                    Phone:\r\n                </div>\r\n                <div className=\"col-9 d-flex flex-row\">\r\n                    <Input onChange={onPhoneChange} value={contactData.phone} className=\"w-100\"></Input>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"row mt-2\">\r\n            <Checkbox.Group options={plainOptions} defaultValue={[]} onChange={onChange} />\r\n            </div>\r\n\r\n            <div className=\"row mt-2 mr-1 d-flex flex-row-reverse\">\r\n                <Button className=\"mx-2\" onClick={()=>{props.onCancel(props.index)}} size=\"small\" type=\"primary\">Cancel</Button>\r\n                <Button className=\"mx-2\" onClick={onSave} size=\"small\" type=\"primary\">Save</Button>\r\n            </div>\r\n        </div>\r\n        \r\n    )\r\n}","import {connect} from 'react-redux'\r\nimport Contact from './Contact'\r\nimport { AppStateType } from '../../../redux/store'\r\n// import {getProvidersList, createNewProvider, updateProvider} from './../../../redux/ProviderReducer'\r\nimport {createNewContact} from './../../../redux/ContactsReducer'\r\nimport { ContactType } from '../../../api/ProviderAPI'\r\n\r\ntype OwnContactPropsType = {\r\n    contacts: Array<ContactType>,\r\n    parentId?: number,\r\n    parentType?: string,\r\n    canAdd: boolean\r\n}\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    // getProvidersList: ()=> void\r\n    // createNewProvider: (values: any)=>void,\r\n    // updateProvider: (values: any, providerId: number)=>void\r\n    createNewContact: (values: any) => void\r\n}\r\n\r\nexport type ContactPropsType = MapPropsType & MapDispatchPropsType & OwnContactPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        providorsList: state.contacts.contactList\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnContactPropsType, AppStateType>(mapStateToProps, \r\n    {createNewContact}) \r\n    (Contact)\r\n    \r\n\r\n","import { Form, Field, FormikProps } from 'formik'\r\nimport React, { ReactNode } from 'react'\r\nimport Contact from '../../../utils/components/Contact/ContactContainer'\r\nimport { AntInput, AntTextArea } from '../../../utils/Formik/CreateAntField'\r\nimport { validateRequired } from '../../../utils/Formik/ValidateFields'\r\nimport {ContactType} from './../../../api/ProviderAPI'\r\n\r\nexport type initialvaluesType = {\r\n    name: string,\r\n    descriptions: string,\r\n    id?: number\r\n    contacts?: Array<ContactType>\r\n}\r\nconst ProviderForm: ((props: FormikProps<initialvaluesType>) => ReactNode) = (props) => {\r\n    console.log('initialValues:', props.initialValues)\r\n    return (\r\n        <Form\r\n            className=\"form-container\"\r\n            onSubmit={props.handleSubmit}\r\n        >\r\n            <Field\r\n                component={AntInput}\r\n                name=\"name\"\r\n                type=\"text\"\r\n                label=\"Provider name\"\r\n                validate={validateRequired}\r\n                hasFeedback\r\n            />\r\n\r\n            <Field\r\n                component={AntTextArea}\r\n                name=\"descriptions\"\r\n                type=\"textArea\"\r\n                label=\"Descriptions\"\r\n                hasFeedback\r\n            />\r\n\r\n            <Contact \r\n                contacts={props.initialValues.contacts !== undefined ? props.initialValues.contacts : []} \r\n                parentId={ props.initialValues.id}\r\n                canAdd={props.initialValues.id ? true : false}\r\n            />\r\n\r\n            <div className=\"submit-container\">\r\n                <button className=\"ant-btn ant-btn-primary\" type=\"submit\">\r\n                    Save\r\n                </button>\r\n            </div>\r\n\r\n            <li>Prices</li>\r\n            <li>BrendList</li>\r\n\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default ProviderForm","import { Button, List, Modal } from 'antd'\r\nimport { Formik } from 'formik'\r\nimport React, { useState, useEffect } from 'react'\r\nimport ProviderForm from './ProviderForm/ProviderForm'\r\nimport { ProvidersPropsType } from './ProvidersContainer'\r\nimport {initialvaluesType} from './ProviderForm/ProviderForm'\r\nimport { ProviderType } from '../../api/ProviderAPI'\r\n\r\nconst Providers: React.FC<ProvidersPropsType> = (props) => {\r\n    const [isModalVisible, setIsModalVisible] = useState(false)\r\n    const emptyInitialvalues: initialvaluesType = {\r\n        name: '',\r\n        descriptions: '',\r\n        contacts: []\r\n    }\r\n    const [initialvalues, setInitialvalues] = useState<initialvaluesType>(emptyInitialvalues)\r\n\r\n    useEffect( ()=> {\r\n        if (props.providorsList !== undefined && props.providorsList.length === 0) {\r\n            props.getProvidersList()\r\n        }\r\n    },[props])\r\n\r\n    const showModal = () => {\r\n        setInitialvalues(emptyInitialvalues)\r\n        setIsModalVisible(true)\r\n    }\r\n\r\n    const onEdit = (item: ProviderType) => {\r\n        setInitialvalues({\r\n            name: item.name,\r\n            descriptions: item.descriptions,\r\n            id: item.id,\r\n            contacts: item.contacts\r\n        })\r\n        setIsModalVisible(true)\r\n    }\r\n\r\n    const handleOk = () => {\r\n        setIsModalVisible(false);\r\n    }\r\n\r\n    const handleCancel = () => {\r\n        console.log('handleCancel ОБНУЛИЛ')\r\n        setIsModalVisible(false);\r\n        setInitialvalues(emptyInitialvalues)\r\n    }\r\n\r\n    const handleSubmit = (values: any) => {\r\n        console.log(values)\r\n        delete values.contacts\r\n        if(values.id === undefined) {\r\n            props.createNewProvider(values)\r\n        } else {\r\n            props.updateProvider(values, values.id)\r\n        }\r\n        \r\n    }\r\n\r\n    console.log(props)\r\n    console.log(initialvalues)\r\n    \r\n    return (\r\n        <div className=\"w-100\">\r\n            <div className=\"w-100 d-flex flex-row-reverse\">\r\n                <Button onClick={showModal} className=\"mt-2 ml-auto mr-2 mb-2\" type=\"primary\">New Provider</Button>\r\n            </div>\r\n \r\n            <List\r\n                size=\"small\"\r\n                header={<h3>Providers List</h3>}\r\n                bordered\r\n                dataSource={props.providorsList}\r\n                renderItem={item => (\r\n                    <List.Item className=\"\">\r\n                        {/* <Card className=\"w-100 py-0\" >{item.name}</Card> */}\r\n                        <div className=\"border bg-white p-2 w-100\">\r\n                            <div className=\"row \">\r\n                                <div className=\"col-6 d-flex flex-row\">\r\n                                    {item.id}). {item.name}\r\n                                </div>\r\n                                <div className=\"col-6 d-flex flex-row-reverse\">\r\n                                    <Button className=\"mr-2\" onClick={()=>{onEdit(item)}} size=\"small\" type=\"primary\">Edit</Button>\r\n                                    <Button className=\"mr-2\" onClick={()=>{}} size=\"small\" type=\"primary\">Prices(0)</Button>\r\n                                </div>\r\n                            </div>\r\n                            \r\n                            {/* <div className=\"w-100 d-flex flex-row-reverse\">\r\n                            \r\n                            </div> */}\r\n                            \r\n                        </div>\r\n                    </List.Item>\r\n                )}\r\n            />\r\n\r\n            <Modal title=\"Basic Modal\" visible={isModalVisible} onOk={handleOk} onCancel={handleCancel}>\r\n                <Formik\r\n                    initialValues={initialvalues}\r\n                    onSubmit={handleSubmit}\r\n                    enableReinitialize={true}\r\n                >\r\n                    {ProviderForm}\r\n                </Formik>\r\n            </Modal>\r\n\r\n            <li>Pagination</li>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Providers","import {connect} from 'react-redux'\r\nimport Providers from './Providers'\r\nimport { AppStateType } from '../../redux/store'\r\nimport {getProvidersList, createNewProvider, updateProvider} from './../../redux/ProviderReducer'\r\n\r\ntype OwnProvidersPropsType = {\r\n\r\n}\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    getProvidersList: ()=> void\r\n    createNewProvider: (values: any)=>void,\r\n    updateProvider: (values: any, providerId: number)=>void\r\n}\r\n\r\nexport type ProvidersPropsType = MapPropsType & MapDispatchPropsType & OwnProvidersPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        providorsList: state.providors.providersList\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnProvidersPropsType, AppStateType>(mapStateToProps, \r\n    {getProvidersList, createNewProvider, updateProvider}) \r\n    (Providers)\r\n    \r\n\r\n","import { Collapse } from 'antd'\r\nimport { Button } from 'antd-mobile'\r\nimport React from 'react'\r\nimport { CatalogListTreeItemType } from './../Products'\r\n\r\nconst { Panel } = Collapse\r\n\r\ntype ProductsCategoryTreePropsType = {\r\n    catalogListTree: CatalogListTreeItemType[] | undefined,\r\n    startCatalogItem: (itemId: string) => void,\r\n    startProductParamParsing: (catalogItemName: string) => void,\r\n    getProductDescriptions: (catalogItemName: string) => void\r\n}\r\n\r\nconst ProductsCategoryTree: React.FC<ProductsCategoryTreePropsType> = (props) => {\r\n    if (props.catalogListTree !== undefined) {\r\n        console.log('!!!!!!', props.catalogListTree)\r\n    }\r\n    \r\n\r\n    const callback = (key: Array<string> | string) => {\r\n        // console.log(key)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Collapse defaultActiveKey={[]} onChange={callback}>\r\n                { props.catalogListTree !== undefined ?\r\n                    props.catalogListTree.map((item: CatalogListTreeItemType, index: number)=> {\r\n                        if (item.childs!==undefined && item.childs.length > 0) {\r\n                            return(\r\n                                <Panel header={index+') '+item.name} key={item.id.toString()} >\r\n                                    <ProductsCategoryTree \r\n                                        catalogListTree={item.childs} \r\n                                        startCatalogItem={props.startCatalogItem}\r\n                                        startProductParamParsing={props.startProductParamParsing}\r\n                                        getProductDescriptions={props.getProductDescriptions}\r\n                                    />\r\n                                </Panel>\r\n                            )\r\n                        } else {\r\n                            return(\r\n                                \r\n                                <div className=\"ant-collapse-item\">\r\n                                    <div className=\"ant-collapse-header row\">\r\n                                        <div className=\"col-8\">\r\n                                            {item.label}({item.total_count!==null ? item.total_count : 0})\r\n                                        </div>\r\n                                        {/* <div className=\"col-2\"> */}\r\n                                            <Button className=\"mr-2\" onClick={()=>{props.startCatalogItem(item.name)}} type=\"primary\" size=\"small\">Get Products</Button>\r\n                                            <Button className=\"mr-2\" onClick={()=>{props.startProductParamParsing(item.name)}} type=\"primary\" size=\"small\">Get Descriptions</Button>\r\n                                            <Button className=\"mr-2\" onClick={()=>{props.getProductDescriptions(item.name)}} type=\"primary\" size=\"small\">Go</Button>\r\n                                        {/* </div> */}\r\n                                    </div>\r\n                                    \r\n                                </div>\r\n                            )\r\n                        }\r\n                        \r\n                    })\r\n                    : null\r\n                }\r\n            </Collapse>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProductsCategoryTree","import { Button } from 'antd'\r\nimport React, {useState, useEffect} from 'react'\r\nimport { ProductType } from '../../api/productsAPI'\r\nimport ProductsCategoryTree from './ProductsCategoryTree/ProductsCategoryTree'\r\nimport {ProductsPropsType} from './ProductsContainer'\r\n\r\nconst Products: React.FC<ProductsPropsType> = (props) => {\r\n    const [catalogListTree, setCatalogListTree] = useState<Array<CatalogListTreeItemType>>()\r\n    useEffect( ()=>{\r\n        if (props.productCategoryList.length === 0) {\r\n            props.getProductCategoryList()\r\n        } else {\r\n            console.log('setCatalogListTree')\r\n            setCatalogListTree(createCatalogListTree(props.productCategoryList))\r\n        }\r\n        \r\n    },[props.productCategoryList])\r\n\r\n    console.log(props)\r\n    console.log(catalogListTree)\r\n\r\n    return(\r\n        <div>\r\n            <div>\r\n                <Button onClick={props.startCatalogParsing} className=\"m-2\" type=\"primary\">getCatalog</Button>\r\n            </div>\r\n            Products Catalog:\r\n            <ProductsCategoryTree \r\n                catalogListTree={catalogListTree} \r\n                startCatalogItem={props.startCatalogItem} \r\n                startProductParamParsing={props.startProductParamParsing}\r\n                getProductDescriptions={props.getProductDescriptions}\r\n            />\r\n\r\n            Active Catigories:\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Products\r\n\r\nexport type CatalogListTreeItemType = ProductType & {\r\n    childs?: Array<CatalogListTreeItemType>\r\n}\r\n\r\nconst createCatalogListTree = (productCategoryList: Array<CatalogListTreeItemType> ,targetId: number = 0): Array<ProductType> => {\r\n    let catalogListTree: Array<CatalogListTreeItemType> = []\r\n    \r\n    for (let index = 0; index < productCategoryList.length; index++) {\r\n        const item = productCategoryList[index];\r\n        if (item.parent_id === targetId) {\r\n            const childs = getChildsForCatalogListItem(item, productCategoryList)\r\n            const test = childs.map(child => {\r\n                return({\r\n                    ...child,\r\n                    childs: createCatalogListTree(productCategoryList, child.id)\r\n                })\r\n            })\r\n\r\n            item.childs = test\r\n            catalogListTree.push(item)\r\n        }\r\n    }\r\n    \r\n    return catalogListTree\r\n}\r\n\r\nconst getChildsForCatalogListItem = ( target: CatalogListTreeItemType, productCategoryList: Array<CatalogListTreeItemType> ): Array<CatalogListTreeItemType> => {\r\n\r\n    const childsList = productCategoryList.filter( (item) => {\r\n        return item.parent_id === target.id\r\n    })\r\n\r\n    return  childsList\r\n}","import {connect} from 'react-redux'\r\nimport Products from './Products'\r\nimport { AppStateType } from '../../redux/store'\r\nimport {startCatalogParsing, getProductCategoryList, startCatalogItem, startProductParamParsing, getProductDescriptions} from './../../redux/productsReducer'\r\n\r\ntype OwnProductsPropsType = {\r\n\r\n}\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    startCatalogParsing: ()=>void,\r\n    getProductCategoryList: ()=>void,\r\n    startCatalogItem: (catalogItemName: string) => void\r\n    startProductParamParsing: (catalogItemName: string) => void\r\n    getProductDescriptions: (catalogItemName: string) => void\r\n}\r\n\r\nexport type ProductsPropsType = MapPropsType & MapDispatchPropsType & OwnProductsPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        productCategoryList: state.products.productCatigoryList,\r\n        // location: state.app.location,\r\n        // authError: state.auth.authError\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnProductsPropsType, AppStateType>(mapStateToProps, \r\n    {startCatalogParsing, getProductCategoryList, startCatalogItem, startProductParamParsing, getProductDescriptions}) \r\n    (Products)\r\n    \r\n\r\n","import React, { useEffect, useState } from 'react'\r\nimport ToDoList from './Components/ToDo/ToDoContainer'\r\nimport { BrowserRouter, Redirect, Route, Switch, withRouter, useLocation } from 'react-router-dom'\r\nimport { connect, Provider } from 'react-redux'\r\nimport './App.css'\r\nimport 'antd/dist/antd.css'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport 'antd-mobile/dist/antd-mobile.css'\r\nimport store, { AppStateType } from './redux/store'\r\nimport { Layout, Spin, Result, Button } from 'antd'\r\nimport { compose } from 'redux'\r\nimport { initializeApp, addLocation } from './redux/appReducer'\r\nimport { credsType, login } from './redux/authReducer'\r\nimport Header from './Components/Header/HeaderContainer'\r\nimport { isMobile } from \"react-device-detect\"\r\nimport Login from './Components/Login/LoginContainer'\r\nimport Orders from './Components/Orders/OrdersContainer'\r\nimport TasksTree from './Components/TasksTree/TasksTreeContainer'\r\nimport Register from './Components/Register/RegisterContainer'\r\nimport Users from './Components/Users/UsersContainer'\r\nimport CurrentUser from './Components/Users/CurrentUser/CurrentUserContainer'\r\nimport Projects from './Components/Development/Projects/ProjectsContainer'\r\nimport CurrentProject from './Components/Development/Projects/CurrentProject/CurrentProjectContainer'\r\nimport English from './Components/English/EnglishContainer'\r\nimport ProvidersContainer from './Components/Providers/ProvidersContainer'\r\nimport Schedule from './Components/ToDo/Schedule/Schedule'\r\nimport ProductsContainer from './Components/Products/ProductsContainer'\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\ntype DispatchPropsType = {\r\n    initializeApp: () => void,\r\n    addLocation: (location: string) => void,\r\n    login: (data: credsType) => void,\r\n}\r\n\r\nconst App = (props: MapPropsType & DispatchPropsType) => {\r\n    const [location, setLocation] = useState(useLocation().pathname)\r\n\r\n    useEffect(() => {\r\n        if (!props.initialized) {\r\n            let instanseCreds = parseQueryString()\r\n            if (instanseCreds.email && instanseCreds.password) {\r\n                instanseCreds.remember = true\r\n                props.login(instanseCreds)\r\n            }\r\n\r\n            if (location === '/front1/') {\r\n                props.addLocation(location)\r\n                setLocation(location)\r\n            }\r\n            props.initializeApp()\r\n        }\r\n    }, [props, location])\r\n\r\n\r\n    if (!props.initialized) {\r\n        return <Spin key=\"spin\" size=\"large\" />\r\n    }\r\n\r\n    return (\r\n        <Layout>\r\n            <Header />\r\n            <Switch>\r\n                {!props.isAuth ?\r\n                    <Route exact path={props.appLocation}\r\n                        render={() => <Redirect to={props.appLocation + 'login'} />} />\r\n                    :\r\n                    <Route exact path={props.appLocation}\r\n                        render={() => <Redirect to={props.appLocation + 'toDoList'} />} />\r\n                }\r\n\r\n                {props.isAuth ?\r\n                    <Route exact path={props.appLocation + 'login'}\r\n                        render={() => <Redirect to={props.appLocation + 'toDoList'} />}\r\n                    />\r\n                    :\r\n                    null\r\n                }\r\n\r\n                <Route path={props.appLocation + 'login'}\r\n                    render={() => <Login />} />\r\n\r\n                <Route path={props.appLocation + 'toDoList'}\r\n                    render={() => <ToDoList />} />\r\n\r\n                <Route path={props.appLocation + 'tasksTree'}\r\n                    render={() => <TasksTree />} />\r\n\r\n                <Route path={props.appLocation + 'schedule'}\r\n                    render={() => <Schedule />} />\r\n\r\n                <Route path={props.appLocation + 'orders'}\r\n                    render={() => <Orders />} />\r\n\r\n                <Route path={props.appLocation + 'products'}\r\n                    render={() => <ProductsContainer />} />\r\n\r\n                <Route path={props.appLocation + 'providers'}\r\n                    render={() => <ProvidersContainer />} />\r\n\r\n                <Route path={props.appLocation + 'vocabulary'}\r\n                    render={() => <English />} />\r\n\r\n                <Route path={props.appLocation + 'register'}\r\n                    render={() => <Register />} />\r\n\r\n                <Route path={props.appLocation + 'users/:userId'}\r\n                    component={props.userStatus === 'admin' || props.userStatus === 'superAdmin' ? CurrentUser : Page404} />\r\n\r\n                <Route exact path={props.appLocation + 'users'}\r\n                    component={props.userStatus === 'admin' || props.userStatus === 'superAdmin' ? Users : Page404} />\r\n\r\n                <Route path={props.appLocation + 'projects/:userId'}\r\n                    component={props.userStatus === 'admin' || props.userStatus === 'superAdmin' ? CurrentProject : Page404} />\r\n\r\n                <Route exact path={props.appLocation + 'projects'}\r\n                    component={props.userStatus === 'admin' || props.userStatus === 'superAdmin' ? Projects : Page404} />\r\n\r\n                {/* <Route path={props.appLocation + '*'} component={Page404} /> */}\r\n                <Route path={props.appLocation + '*'} component={English} />\r\n\r\n            </Switch>\r\n        </Layout>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n    initialized: state.app.initialized,\r\n    appLocation: state.app.location,\r\n    isAuth: state.auth.isAuth,\r\n    userStatus: state.auth.user?.status\r\n})\r\n\r\nlet AppContainer = compose<React.ComponentType>(\r\n    withRouter,\r\n    connect(mapStateToProps, { initializeApp, addLocation, login }))(App)\r\n\r\nconst MainApp = () => {\r\n    return (\r\n        <BrowserRouter>\r\n            <Provider store={store}>\r\n                <div className={isMobile ? \"\" : \"container\"}>\r\n                    <AppContainer />\r\n                </div>\r\n            </Provider>\r\n        </BrowserRouter>\r\n    )\r\n}\r\n\r\nexport default MainApp\r\n\r\nconst parseQueryString = (): any => {\r\n    const params: any = {}\r\n    document.location.search.substr(1).split('&').forEach((pair) => {\r\n        const [key, value] = pair.split('=')\r\n        params[key] = value\r\n    })\r\n    return params;\r\n};\r\n\r\nconst Page404: React.FC<any> = (props) => {\r\n    return (\r\n        <Result\r\n            status=\"404\"\r\n            title=\"404\"\r\n            subTitle=\"Sorry, the page you visited does not exist.\"\r\n            extra={<Button type=\"primary\">Back Home</Button>}\r\n        />\r\n    )\r\n}","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './App'\r\nimport reportWebVitals from './reportWebVitals'\r\n\r\nReactDOM.render(\r\n    <App />\r\n  ,\r\n  document.getElementById('root')\r\n)\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals()\r\n"],"sourceRoot":""}
{"version":3,"sources":["Components/NewTaskForm.tsx","api/api.ts","api/taskApi.ts","utils/array-helpers.ts","redux/taskReducer.ts","Components/NewTaskFormContainer.tsx","Components/ToDoHeader.tsx","Components/Settings/SettingsModal.tsx","Components/TimeScale/TaskItem/TaskItem.tsx","Components/TimeScale/TimeScale.tsx","Components/TimeScale/TimeScaleContainer.tsx","Components/ToDoList.tsx","Components/ToDoListContainer.tsx","redux/store.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["layout","labelCol","span","wrapperCol","tailLayout","offset","TextArea","Input","NewTaskForm","props","useState","selectedDate","setSelectedDate","taskSaveStatus","saveStatus","setSaveStatus","useEffect","console","log","message","success","onClose","error","errorMessage","title","format","placement","closable","visible","width","name","initialValues","remember","onFinish","values","data","date","taskTime","taskName","user_id","description","createNewTask","Item","label","rules","required","initialValue","onChange","value","dateString","rows","type","htmlType","instance","axios","create","withCredentials","baseURL","taskAPI","get","then","response","status","catch","err","request","post","sortTaskArrayByParams","field","a","b","initialState","taskList","taskListIsFetching","actions","isFetchingValue","taskReducer","state","action","Tasks","sort","connect","task","reload","dispatch","getState","RangePicker","DatePicker","ToDoHeader","isGap","setIsGap","setLabel","className","onGapDateChange","defaultValue","style","marginLeft","onDateChange","e","target","checked","getTaskList","shape","icon","FileAddOutlined","fontSize","onClick","showDrawer","disabled","isAddActive","showModal","SettingOutlined","SettingsModal","isModalVisible","onOk","handleOk","onCancel","handleCancel","TaskItem","element","setStetus","ListGroup","time","split","join","descriptions","textDecoration","id","getTimeScaleArrey","sortByParams","timeScaleArrey","tomorowTasks","getHeadlineLabel","moment","headlineDate","length","push","index","orientation","i","timeVal","Number","concat","TimeScale","size","ToDoList","setVisible","setIsAddActive","setIsModalVisible","formatString","getTaskListForGap","bordered","start_date","end_date","rootReducer","combineReducers","store","createStore","applyMiddleware","thunkMiddleware","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ce9a25f0.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport moment from 'moment'\r\nimport { Form, Input, Button, TimePicker, DatePicker, Drawer, Spin, message } from 'antd'\r\nimport { NewTaskFormPropsType } from './NewTaskFormContainer'\r\n\r\nconst layout = {\r\n    labelCol: { span: 8 },\r\n    wrapperCol: { span: 16 },\r\n}\r\nconst tailLayout = {\r\n    wrapperCol: { offset: 8, span: 16 },\r\n}\r\n\r\nexport type NewTaskFormOwnPropsType = {\r\n    selectedDate: moment.Moment,\r\n    onClose: ()=>void\r\n    visible: boolean,\r\n    setVisible: (visible: boolean)=>void\r\n}\r\n\r\nconst { TextArea } = Input;\r\n\r\nconst timeFormat: string = 'HH:mm';\r\n\r\nconst NewTaskForm: React.FC<NewTaskFormPropsType> = (props) => {\r\n    const [selectedDate, setSelectedDate] = useState<moment.Moment>(props.selectedDate)\r\n    const [saveStatus, setSaveStatus] = useState<string>(props.taskSaveStatus)\r\n\r\n    useEffect(() => {\r\n        console.log('status changed: ', props.taskSaveStatus)\r\n        switch (props.taskSaveStatus) {\r\n            case 'inProgress':\r\n                setSaveStatus(props.taskSaveStatus)\r\n                break;\r\n            case 'success':\r\n                message.success('The task was successfully created');\r\n                props.onClose()\r\n                setSaveStatus('')\r\n                break;\r\n            case 'error':\r\n                message.error('Error: '+ props.errorMessage);\r\n                setSaveStatus(props.taskSaveStatus)\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n    }, [props.taskSaveStatus]);\r\n\r\n    type OnFinishType = {\r\n        taskName: string,\r\n        date: moment.Moment,\r\n        taskTime: moment.Moment,\r\n        description?: string\r\n    }\r\n    const onFinish = (values: OnFinishType) => {\r\n        console.log('onFinish, reload: ', selectedDate !== props.selectedDate)\r\n        const data = {\r\n            date: values.date.format('YYYY-MM-DD'),\r\n            taskTime: values.taskTime.format('HH:mm'),\r\n            taskName: values.taskName,\r\n            user_id: 1,\r\n            description: values.description\r\n        }\r\n\r\n        if (selectedDate.format('YYYY-MM-DD') !== props.selectedDate.format('YYYY-MM-DD')) {\r\n            console.log('ПЕРЕРИСОВКИ НЕТ')\r\n            props.createNewTask(data, false)\r\n        } else {\r\n            \r\n            props.createNewTask(data, true)\r\n            console.log('ПЕРЕРИСОВКА')\r\n        }\r\n    };\r\n\r\n    type ErrorItem = {\r\n        errors: string\r\n        name: string\r\n    }\r\n\r\n    const onTimeChange = (value: moment.Moment | null, dateString: string): void => {\r\n        // console.log(value, dateString);\r\n    }\r\n\r\n    const onDateChange = (value: moment.Moment | null, dateString: string): void => {\r\n        if (value !== null) {\r\n            setSelectedDate(value)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Drawer\r\n            title={\"Create New Task for \" + selectedDate.format('DD MMM YYYY')}\r\n            placement=\"right\"\r\n            closable={true}\r\n            onClose={props.onClose}\r\n            visible={props.visible}\r\n            width=\"80%\"\r\n        >\r\n            <Form\r\n                {...layout}\r\n                name=\"basic\"\r\n                initialValues={{ remember: true }}\r\n                onFinish={onFinish}\r\n            >\r\n                <Form.Item\r\n                    label=\"Task name\"\r\n                    name=\"taskName\"\r\n                    rules={[{ required: true, message: 'Please input task name!' }]}\r\n                >\r\n                    <Input />\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    label=\"Task date\"\r\n                    name=\"date\"\r\n                    initialValue={props.selectedDate}\r\n                rules={[{ required: true, message: 'Please input task date!' }]}\r\n                >\r\n                    <DatePicker\r\n                        // defaultValue={props.selectedDate}\r\n                        onChange={onDateChange}\r\n                        format='DD-MM-YYYY'\r\n                    />\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    label=\"Task time\"\r\n                    name=\"taskTime\"\r\n                    rules={[{ required: true, message: 'Please input task time!' }]}\r\n                >\r\n                    <TimePicker\r\n                        onChange={onTimeChange}\r\n                        // defaultValue={moment('12:08', timeFormat)} \r\n                        format={timeFormat}\r\n                    />\r\n                </Form.Item>\r\n\r\n                <Form.Item\r\n                    label=\"Description\"\r\n                    name=\"description\"\r\n                >\r\n                    <TextArea rows={2} />\r\n                </Form.Item>\r\n\r\n                <Form.Item {...tailLayout}>\r\n                    {saveStatus === 'inProgress' ?\r\n                        <Spin></Spin>\r\n                    :\r\n                        <Button type=\"primary\" htmlType=\"submit\">\r\n                            Create\r\n                        </Button>\r\n                        \r\n                    }\r\n                </Form.Item>\r\n            </Form>\r\n        </Drawer>\r\n    )\r\n}\r\n\r\nexport default NewTaskForm","import axios from \"axios\";\r\n\r\nexport const instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://crmapiserver.h1n.ru/api/',\r\n    // baseURL: 'https://81.90.181.175/api/',\r\n    // headers:     {\r\n    //     \"API-KEY\": \"b1775b2f-c3a5-4509-8dc9-90b5629de7c3\"\r\n    // }\r\n});\r\n","import { NewTaskDataType, TaskType } from '../Types/types'\r\nimport {instance} from './api'\r\n\r\nexport type TaskListType = {\r\n    Tasks: Array<TaskType>\r\n}\r\n\r\nexport const taskAPI = {\r\n    getTaskList(date: string) {\r\n        return instance.get<TaskListType>(`tasks?date=${date}` ).then(response => {\r\n            return response.status === 200 ? response : null;\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                console.log('err', err.response)\r\n                return err.response\r\n            } else if (err.request) {\r\n                console.log('request', err.request)\r\n            } else {\r\n                console.log('anything else: ', err)\r\n            }\r\n            return null\r\n        })\r\n    },\r\n\r\n    createNewTask(values: NewTaskDataType) {\r\n        return instance.post<TaskListType>(`tasks`, values).then(response => {\r\n            return response.status === 200 ? response : null;\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                return err.response\r\n            } else if (err.request) {\r\n                console.log('request', err.request)\r\n            } else {\r\n                console.log('anything else: ', err)\r\n            }\r\n            return null\r\n        })\r\n    },\r\n\r\n    getTaskListForGap(values: getTaskListForGapValuesType) {\r\n        return instance.post<TaskListType>(`tasks/part`, values).then(response => {\r\n            return response.status === 200 ? response : null;\r\n        })\r\n        .catch(err => {\r\n            if (err.response) {\r\n                return err.response\r\n            } else if (err.request) {\r\n                console.log('request', err.request)\r\n            } else {\r\n                console.log('anything else: ', err)\r\n            }\r\n            return null\r\n        })\r\n    }\r\n}\r\n\r\ntype getTaskListForGapValuesType = {\r\n    start_date: string, \r\n    end_date: string\r\n}","import { TaskType } from \"../Types/types\";\r\n\r\nexport const sortTaskArrayByParams = (field: 'date' | 'time') => {\r\n    if (field === 'date') {\r\n        return (a: TaskType, b: TaskType) => a['date'] > b['date'] ? 1 : -1;\r\n    } else {\r\n        return (a: TaskType, b: TaskType) => a['time'] > b['time'] ? -1 : 1;\r\n    }\r\n}","import { Dispatch } from 'redux'\r\nimport { taskAPI, TaskListType } from '../api/taskApi'\r\nimport { NewTaskDataType, TaskType } from '../Types/types'\r\nimport { sortTaskArrayByParams } from '../utils/array-helpers'\r\nimport {BaseThunkType, InferActionsTypes} from './store'\r\n\r\ntype initialStateType = {\r\n    taskList: null | Array<TaskType>,\r\n    taskListIsFetching: boolean,\r\n    taskSaveStatus: 'no' | 'inProgress' | 'success' | 'error'\r\n    errorMessage: null | string\r\n}\r\n\r\nlet initialState:initialStateType = {\r\n    taskList: null,\r\n    taskListIsFetching: false,\r\n    taskSaveStatus: 'no',\r\n    errorMessage: null\r\n}\r\n\r\nconst taskReducer = (state = initialState, action: ActionsTypes): initialStateType => {\r\n    let stateCopy = { ...state }\r\n    switch (action.type) {\r\n        case 'SN/TASK/SET_TASK_LIST':\r\n            return {...state, taskList: action.taskList.Tasks.sort(sortTaskArrayByParams('time')).sort(sortTaskArrayByParams('date'))}\r\n\r\n        case 'SN/TASK/SET_TASK_SAVE_STATUS':\r\n            return {...state, taskSaveStatus: action.taskSaveStatus}\r\n\r\n        case 'SN/TASK/SET_ERROR_MESSAGE':\r\n            return {...state, errorMessage: action.message}\r\n\r\n        case 'SN/TASK/SET_TASK_LIST_IS_FETCHING':\r\n            return {...state, taskListIsFetching: action.isFetchingValue}\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    setTaskList: (taskList: TaskListType) => ({ type: 'SN/TASK/SET_TASK_LIST', taskList } as const),\r\n    setTaskSaveStatus: (taskSaveStatus: 'no' | 'inProgress' | 'success' | 'error') => ({ type: 'SN/TASK/SET_TASK_SAVE_STATUS', taskSaveStatus } as const),\r\n    setErrorMessage: (message: string | null) => ({type: 'SN/TASK/SET_ERROR_MESSAGE', message} as const),\r\n    setTaskListIsFetching: (isFetchingValue: boolean) => ({type: 'SN/TASK/SET_TASK_LIST_IS_FETCHING', isFetchingValue} as const)\r\n}\r\n\r\nexport const getTaskList = (date: string): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        dispatch(actions.setTaskListIsFetching(true))\r\n        console.log('setTaskListIsFetching true')\r\n        let response = await taskAPI.getTaskList(date)\r\n        if (response !== null) {\r\n            dispatch(actions.setTaskList(response.data))\r\n            dispatch(actions.setTaskListIsFetching(false))\r\n            console.log('setTaskListIsFetching false')\r\n        } else {\r\n            // add error message\r\n        }\r\n    }\r\n}\r\nexport const createNewTask = (values: NewTaskDataType, reload:boolean = true): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        dispatch(actions.setTaskSaveStatus('inProgress'))\r\n\r\n        let taskList = await taskAPI.createNewTask(values)\r\n\r\n        if (taskList.status === 200) {\r\n            if (reload) {\r\n                dispatch(actions.setTaskList(taskList.data));\r\n            }\r\n            dispatch(actions.setTaskSaveStatus('success'))\r\n            dispatch(actions.setTaskSaveStatus('no'))\r\n        } else {\r\n            dispatch(actions.setErrorMessage(taskList.data.message))\r\n            dispatch(actions.setTaskSaveStatus('error'))\r\n            dispatch(actions.setTaskSaveStatus('no'))\r\n            dispatch( actions.setErrorMessage(null) )\r\n        }\r\n    }\r\n}\r\n\r\nexport const getTaskListForGap = (start_date: string, end_date:string): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        dispatch(actions.setTaskListIsFetching(true))\r\n\r\n        let response = await taskAPI.getTaskListForGap({start_date, end_date})\r\n        if (response !== null) {\r\n            dispatch(actions.setTaskList(response.data))\r\n        } else {\r\n            // add error message\r\n        }\r\n        dispatch(actions.setTaskListIsFetching(false))\r\n    }\r\n}\r\n\r\nexport default taskReducer\r\n\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsTypes>\r\nexport type DispatchType = Dispatch<ActionsTypes>\r\n","import {connect} from 'react-redux'\r\nimport NewTaskForm, { NewTaskFormOwnPropsType } from './NewTaskForm'\r\nimport {createNewTask} from './../redux/taskReducer'\r\nimport { AppStateType } from '../redux/store'\r\nimport {NewTaskDataType} from './../Types/types'\r\n\r\nexport type MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype DispatchPropsType = {\r\n    createNewTask: (values:NewTaskDataType, reload:boolean)=> void\r\n}\r\n\r\nexport type NewTaskFormPropsType = MapPropsType & DispatchPropsType & NewTaskFormOwnPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        taskList: state.task.taskList,\r\n        taskSaveStatus: state.task.taskSaveStatus,\r\n        errorMessage: state.task.errorMessage\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, DispatchPropsType, NewTaskFormOwnPropsType, AppStateType>(mapStateToProps, \r\n    {createNewTask}) \r\n    (NewTaskForm);\r\n\r\n\r\n","import React, { useState } from 'react'\r\nimport { DatePicker, Checkbox, Button } from 'antd'\r\nimport { FileAddOutlined, SettingOutlined } from '@ant-design/icons'\r\nimport { CheckboxChangeEvent } from 'antd/lib/checkbox'\r\nimport {RangeValue, EventValue} from './../Types/types'\r\n\r\nconst { RangePicker } = DatePicker\r\n\r\ntype test = typeof RangePicker\r\ntype testProps = React.ComponentProps<typeof RangePicker>\r\n\r\n// export declare type RangeValue<DateType> = [EventValue<DateType>, EventValue<DateType>] | null;\r\n// export declare type EventValue<DateType> = DateType | null;\r\n\r\nexport type OwnToDoHeaderPropsType = {\r\n    onDateChange: (value: moment.Moment | null, dateString: string) => void,\r\n    getTaskList: (date: string) => void,\r\n    selectedDate: moment.Moment,\r\n    setSelectedDate: React.Dispatch<React.SetStateAction<moment.Moment>>,\r\n    showDrawer: () => void,\r\n    isAddActive: boolean,\r\n    onGapDateChange: (values: RangeValue<moment.Moment>, formatString: [string, string]) => void,\r\n    showModal: () => void,\r\n}\r\n\r\nconst ToDoHeader: React.FC<OwnToDoHeaderPropsType> = (props) => {\r\n    const [isGap, setIsGap] = useState(false)\r\n    const [label, setLabel] = useState<'date' | 'interval'>('date')\r\n\r\n    const onChange = (e: CheckboxChangeEvent) => {\r\n        setIsGap(e.target.checked)\r\n        if (e.target.checked) {\r\n            setLabel('interval')\r\n        } else {\r\n            setLabel('date')\r\n            console.log('1 date selected: ', props.selectedDate.format('YYYY-MM-DD'))\r\n            props.getTaskList(props.selectedDate.format('YYYY-MM-DD'))\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"row\" >\r\n            <div className=\"col-12 col-md-8 col-lg-6\">\r\n                <div className=\"d-none d-sm-inline\">\r\n                    <label >Select {label}:</label>\r\n                </div>\r\n\r\n                <div className=\"d-inline\">\r\n                    {isGap ?\r\n                        <RangePicker\r\n                            onChange={props.onGapDateChange}\r\n                            defaultValue={[props.selectedDate, props.selectedDate]}\r\n                            format='DD-MM-YYYY'\r\n                            style={{ marginLeft: 10 }}\r\n                        />\r\n                        :\r\n                        <DatePicker\r\n                            onChange={props.onDateChange}\r\n                            defaultValue={props.selectedDate}\r\n                            format='DD-MM-YYYY'\r\n                            style={{ marginLeft: 10 }}\r\n                        />\r\n                    }\r\n                </div>\r\n            </div>\r\n            <div className=\"col-12 col-md-4 col-lg-2 m-2 m-md-0\" >\r\n                <Checkbox className=\"ml-3\" onChange={onChange}>Date interval</Checkbox>\r\n            </div>\r\n            <div className=\"col-12 col-md-12 col-lg-4\">\r\n                <Button\r\n                    type=\"primary\"\r\n                    shape=\"round\"\r\n                    icon={\r\n                        <div className=\"d-flex flex-wrap align-content-start\">\r\n                            <FileAddOutlined style={{ fontSize: '18px' }} />\r\n                            <span className=\"ml-1\" style={{ fontSize: '14px' }}>Add</span>\r\n                        </div>}\r\n                    style={{ marginLeft: 10 }}\r\n                    onClick={props.showDrawer}\r\n                    disabled={props.isAddActive}\r\n                />\r\n\r\n                <Button className=\"\"\r\n                    type=\"primary\"\r\n                    shape=\"round\"\r\n                    style={{ marginLeft: 10 }}\r\n                    onClick={props.showModal}\r\n                    icon={\r\n                        <div className=\"d-flex flex-wrap align-content-start\">\r\n                            <SettingOutlined style={{ fontSize: '18px' }} />\r\n                            <span className=\"ml-1\" style={{ fontSize: '14px' }}>Settings</span>\r\n                        </div>} \r\n                    />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ToDoHeader","import React from 'react'\r\nimport { Modal } from 'antd'\r\n\r\nconst SettingsModal = (props:any) => {\r\n    // console.log('SettingsModal props', props)\r\n    return (\r\n        <Modal title=\"Basic Modal\" visible={props.isModalVisible} onOk={props.handleOk} onCancel={props.handleCancel}>\r\n            <p>Some contents...</p>\r\n            <p>Some contents...</p>\r\n            <p>Some contents...</p>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default SettingsModal","import React, { useState } from 'react'\r\nimport { Col, Row, Checkbox, Tooltip } from 'antd'\r\nimport { CheckboxChangeEvent } from 'antd/lib/checkbox'\r\nimport { ListGroup } from 'react-bootstrap'\r\nimport { TaskType } from '../../../Types/types'\r\n\r\nexport type OwnTaskItemPropsType = {\r\n    element: TaskType\r\n}\r\n\r\nconst TaskItem: React.FC<OwnTaskItemPropsType> = (props) => {\r\n    const [status, setStetus] = useState(props.element.type)\r\n\r\n    const onStatusChange = (e: CheckboxChangeEvent) => {\r\n        console.log(e.target.checked)\r\n        if (e.target.checked) {\r\n            setStetus('completed')\r\n        } else {\r\n            setStetus('active')\r\n        }\r\n\r\n    }\r\n    return (\r\n        <ListGroup.Item action className=\"py-1\">\r\n            <Row>\r\n                <Col className=\"mx-2\">\r\n                    <Checkbox onChange={onStatusChange} />\r\n                </Col>\r\n                <Col className=\"mx-2\">\r\n                    {props.element.time.split(':', 2).join(':')}\r\n                </Col>\r\n                <Col className=\"mx-2\">\r\n                    <Tooltip key={props.element.id} placement=\"topLeft\" title={props.element.descriptions}>\r\n                        <span \r\n                            style={{ textDecoration: status === 'completed' ? 'line-through' : '' }}\r\n                        >\r\n                            {props.element.name}\r\n                        </span>\r\n                    </Tooltip>\r\n                </Col>\r\n            </Row>\r\n\r\n        </ListGroup.Item>\r\n    )\r\n}\r\n\r\nexport default TaskItem","import React, {useEffect} from 'react'\r\nimport { TaskType } from '../../Types/types'\r\nimport moment from 'moment'\r\nimport { TimeScalePropsType } from './TimeScaleContainer'\r\nimport { Divider, Spin, Tooltip } from 'antd'\r\nimport TaskItem from './TaskItem/TaskItem'\r\n\r\nconst getTimeScaleArrey = (taskList: Array<TaskType>): Array<React.ReactElement<string>> => {\r\n    const sortByParams = (field: 'date' | 'time') => {\r\n        if (field === 'date') {\r\n            return (a: TaskType, b: TaskType) => a['date'] > b['date'] ? 1 : -1;\r\n        } else {\r\n            return (a: TaskType, b: TaskType) => a['time'] > b['time'] ? -1 : 1;\r\n        }\r\n    }\r\n\r\n    taskList.sort(sortByParams('time')).sort(sortByParams('date'))\r\n\r\n    let timeScaleArrey: Array<React.ReactElement<string>> = []\r\n    let tomorowTasks: Array<TaskType> = []\r\n\r\n    const getHeadlineLabel = (task: TaskType) => {\r\n        return moment(task.date).format('DD MMMM')\r\n    }\r\n\r\n    let headlineDate: string | null = null;\r\n\r\n    if (taskList !== null && taskList.length > 0) {\r\n        headlineDate = getHeadlineLabel(taskList[0])\r\n        timeScaleArrey.push(\r\n            <h3 key={headlineDate + 'title'}>{headlineDate}:</h3>\r\n        )\r\n    }\r\n\r\n    for (let index: number = 0; index < 24; index++) {\r\n        timeScaleArrey.push(\r\n            <Divider key={index + 'to' + headlineDate} orientation=\"left\">\r\n                {index <= 9 ? '0' : null}{index}:00\r\n            </Divider>\r\n        )\r\n\r\n        if (taskList !== null) {\r\n            for (let i = 0; i < taskList.length; i++) {\r\n                const element: TaskType = taskList[i];\r\n                const timeVal = Number(element.time.split(':', 1))\r\n                const nextHour = index + 1\r\n                if (timeVal >= index && timeVal < nextHour) {\r\n                    if (getHeadlineLabel(element) === headlineDate) {\r\n                        timeScaleArrey.push(\r\n                            <Tooltip key={index + '-' + element.id} placement=\"topLeft\" title={element.descriptions}>\r\n                                <TaskItem element={element} />\r\n                            </Tooltip>\r\n                        )\r\n                    }\r\n                    else {\r\n                        tomorowTasks.push(element)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (tomorowTasks.length > 0) {\r\n        timeScaleArrey = timeScaleArrey.concat(getTimeScaleArrey(tomorowTasks))\r\n    }\r\n\r\n    return timeScaleArrey\r\n}\r\n\r\n\r\nexport type OwnTaskTimeScaleType = {}\r\nconst TimeScale: React.FC<TimeScalePropsType> = (props) => {\r\n\r\n    useEffect(() => {\r\n        console.log('props.taskListIsFetching', props.taskListIsFetching)\r\n    }, [props.taskListIsFetching]);\r\n\r\n    if (props.taskList !== null) {\r\n        return (\r\n            <>\r\n                {!props.taskListIsFetching ? getTimeScaleArrey(props.taskList) : <Spin key=\"spin\" size=\"large\" />}\r\n            </>\r\n        )\r\n    } else {\r\n        return (\r\n            <Spin key=\"spin\" size=\"large\" />\r\n        )\r\n    }\r\n}\r\n\r\nexport default TimeScale","import {connect} from 'react-redux'\r\nimport TimeScale from './TimeScale'\r\n// import {createNewTask} from './../../redux/taskReducer'\r\nimport { AppStateType } from '../../redux/store'\r\nimport { OwnTaskTimeScaleType } from './TimeScale'\r\n\r\nexport type MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype DispatchPropsType = {\r\n    // createNewTask: (values:NewTaskDataType, reload:boolean)=> void\r\n}\r\n\r\nexport type TimeScalePropsType = MapPropsType & DispatchPropsType & OwnTaskTimeScaleType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        taskList: state.task.taskList,\r\n        taskSaveStatus: state.task.taskSaveStatus,\r\n        taskListIsFetching: state.task.taskListIsFetching\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, DispatchPropsType, OwnTaskTimeScaleType, AppStateType>(mapStateToProps, \r\n    {}) \r\n    (TimeScale);\r\n\r\n\r\n","import React, { useState, useEffect } from 'react'\r\nimport { Spin, Card, Divider, Tooltip } from 'antd'\r\nimport moment from 'moment'\r\nimport NewTaskForm from './NewTaskFormContainer'\r\nimport ToDoHeader from './ToDoHeader'\r\nimport SettingsModal from './Settings/SettingsModal'\r\nimport { TaskType } from './../Types/types'\r\nimport { RangeValue, EventValue } from './../Types/types'\r\nimport { ToDoListPropsType } from './ToDoListContainer'\r\nimport TaskItem from './TimeScale/TaskItem/TaskItem'\r\nimport TimeScale from './TimeScale/TimeScaleContainer'\r\n\r\nexport type OwnToDoListPropsType = {}\r\n\r\nconst ToDoList: React.FC<ToDoListPropsType> = (props) => {\r\n    const [selectedDate, setSelectedDate] = useState<moment.Moment>(moment())\r\n    const [visible, setVisible] = useState(false)\r\n    const [isAddActive, setIsAddActive] = useState(false)\r\n    // const [timeScaleBlock, setTimeScaleBlock] = useState<Array<React.ReactElement<string>> | null>(null)\r\n    // const [showingMode, setShowingMode] = useState<'date' | 'interval'>('date')\r\n    const [isModalVisible, setIsModalVisible] = useState(false);\r\n\r\n    useEffect(() => {\r\n        props.getTaskList(selectedDate.format('YYYY-MM-DD'))\r\n    }, [selectedDate]);\r\n\r\n    const onDateChange = (value: moment.Moment | null, dateString: string): void => {\r\n        console.log('2) onDateChange value:', value)\r\n        if (value !== null) {\r\n            setSelectedDate(value)\r\n            setIsAddActive(false)\r\n        } else {\r\n            setSelectedDate(moment(null))\r\n            setIsAddActive(true)\r\n        }\r\n    }\r\n\r\n    const onGapDateChange = (values: RangeValue<moment.Moment>, formatString: [string, string]): void => {\r\n        if (values !== null && values[0] !== null && values[1] !== null) {\r\n            props.getTaskListForGap(values[0].format('YYYY-MM-DD'), values[1].format('YYYY-MM-DD'))\r\n        }\r\n    }\r\n\r\n    const showDrawer = (): void => {\r\n        setVisible(true);\r\n    }\r\n\r\n    const onClose = (): void => {\r\n        setVisible(false);\r\n    }\r\n\r\n    const showModal = () => {\r\n        setIsModalVisible(true);\r\n    };\r\n\r\n    const handleOk = () => {\r\n        setIsModalVisible(false);\r\n    };\r\n\r\n    const handleCancel = () => {\r\n        setIsModalVisible(false);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div className=\"site-card-border-less-wrapper\">\r\n                <Card\r\n                    title={<ToDoHeader\r\n                        onDateChange={onDateChange}\r\n                        getTaskList={props.getTaskList}\r\n                        selectedDate={selectedDate}\r\n                        setSelectedDate={setSelectedDate}\r\n                        showDrawer={showDrawer}\r\n                        isAddActive={isAddActive}\r\n                        onGapDateChange={onGapDateChange}\r\n                        showModal={showModal}\r\n                    />}\r\n                    bordered={false}\r\n                >\r\n\r\n                    <SettingsModal isModalVisible={isModalVisible} handleOk={handleOk} handleCancel={handleCancel}>\r\n                        <p>Some contents...</p>\r\n                        <p>Some contents...</p>\r\n                        <p>Some contents...</p>\r\n                    </SettingsModal>\r\n\r\n                    <TimeScale />\r\n\r\n                </Card>\r\n\r\n                <NewTaskForm\r\n                    selectedDate={selectedDate}\r\n                    onClose={onClose}\r\n                    visible={visible}\r\n                    setVisible={setVisible}\r\n                // setSelectedDate={setSelectedDate}\r\n                />\r\n\r\n            </div>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ToDoList","import {connect} from 'react-redux'\r\nimport ToDoList, { OwnToDoListPropsType } from './ToDoList'\r\nimport {getTaskList, getTaskListForGap} from './../redux/taskReducer'\r\nimport { AppStateType } from '../redux/store'\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    getTaskList: (date: string)=>void,\r\n    getTaskListForGap: (start_date: string, end_date:string)=>void\r\n}\r\n\r\nexport type ToDoListPropsType = MapPropsType & MapDispatchPropsType & OwnToDoListPropsType\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        taskList: state.task.taskList\r\n    }\r\n}\r\n\r\nexport default connect<MapPropsType, MapDispatchPropsType, OwnToDoListPropsType, AppStateType>(mapStateToProps, \r\n    {getTaskList, getTaskListForGap}) \r\n    (ToDoList);\r\n    \r\n\r\n","import {Action, applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport thunkMiddleware, {ThunkAction} from \"redux-thunk\";\r\nimport taskReducer from './taskReducer';\r\n\r\n\r\nlet rootReducer = combineReducers({\r\n    task: taskReducer\r\n});\r\n\r\ntype rootReducerType = typeof rootReducer\r\nexport type AppStateType = ReturnType<rootReducerType>\r\n\r\nexport type InferActionsTypes<T> = T extends { [keys: string]: (...args: any[]) => infer U } ? U : never\r\nexport type BaseThunkType<A extends Action = Action, R = Promise<void>> = ThunkAction<R, AppStateType, unknown, A>\r\n\r\nlet store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n\r\nexport default store;","import React from 'react'\r\nimport './App.css'\r\nimport ToDoList from './Components/ToDoListContainer'\r\nimport 'antd/dist/antd.css'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport { Provider } from 'react-redux';\r\nimport store from './redux/store';\r\n\r\nconst App = () => {\r\n\r\n  return (\r\n    <Provider store={store}>\r\n      <div className=\"container-fluid\">\r\n        <ToDoList />\r\n      </div>\r\n    </Provider>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  // <React.StrictMode>\r\n    <App />\r\n  // </React.StrictMode>\r\n  ,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}